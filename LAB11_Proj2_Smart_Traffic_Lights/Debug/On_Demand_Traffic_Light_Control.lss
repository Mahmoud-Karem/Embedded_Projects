
On_Demand_Traffic_Light_Control.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019c  00800060  00003e0e  00003ea2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  008001fc  008001fc  0000403e  2**0
                  ALLOC
  3 .stab         00005e20  00000000  00000000  00004040  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d7b  00000000  00000000  00009e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000060  00000000  00000000  0000bbdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000080  00000000  00000000  0000bc3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000109d  00000000  00000000  0000bcbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000469  00000000  00000000  0000cd58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000055b  00000000  00000000  0000d1c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  0000d71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000016a  00000000  00000000  0000d77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001a1e  00000000  00000000  0000d8e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  0000f304  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 93 10 	jmp	0x2126	; 0x2126 <__vector_1>
       8:	0c 94 bf 10 	jmp	0x217e	; 0x217e <__vector_2>
       c:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <__vector_3>
      10:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__vector_4>
      14:	0c 94 5f 0f 	jmp	0x1ebe	; 0x1ebe <__vector_5>
      18:	0c 94 36 0f 	jmp	0x1e6c	; 0x1e6c <__vector_6>
      1c:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__vector_7>
      20:	0c 94 e4 0e 	jmp	0x1dc8	; 0x1dc8 <__vector_8>
      24:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <__vector_9>
      28:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__vector_10>
      2c:	0c 94 69 0e 	jmp	0x1cd2	; 0x1cd2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e0       	ldi	r30, 0x0E	; 14
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3f       	cpi	r26, 0xFC	; 252
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ac ef       	ldi	r26, 0xFC	; 252
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 76 1e 	call	0x3cec	; 0x3cec <main>
      8a:	0c 94 05 1f 	jmp	0x3e0a	; 0x3e0a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__udivdi3>:
     190:	ae e5       	ldi	r26, 0x5E	; 94
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__>
     19c:	a8 e0       	ldi	r26, 0x08	; 8
     19e:	4e 01       	movw	r8, r28
     1a0:	08 94       	sec
     1a2:	81 1c       	adc	r8, r1
     1a4:	91 1c       	adc	r9, r1
     1a6:	f4 01       	movw	r30, r8
     1a8:	6a 2e       	mov	r6, r26
     1aa:	11 92       	st	Z+, r1
     1ac:	6a 94       	dec	r6
     1ae:	e9 f7       	brne	.-6      	; 0x1aa <__udivdi3+0x1a>
     1b0:	29 83       	std	Y+1, r18	; 0x01
     1b2:	3a 83       	std	Y+2, r19	; 0x02
     1b4:	4b 83       	std	Y+3, r20	; 0x03
     1b6:	5c 83       	std	Y+4, r21	; 0x04
     1b8:	6d 83       	std	Y+5, r22	; 0x05
     1ba:	7e 83       	std	Y+6, r23	; 0x06
     1bc:	8f 83       	std	Y+7, r24	; 0x07
     1be:	98 87       	std	Y+8, r25	; 0x08
     1c0:	ce 01       	movw	r24, r28
     1c2:	09 96       	adiw	r24, 0x09	; 9
     1c4:	fc 01       	movw	r30, r24
     1c6:	11 92       	st	Z+, r1
     1c8:	aa 95       	dec	r26
     1ca:	e9 f7       	brne	.-6      	; 0x1c6 <__udivdi3+0x36>
     1cc:	a9 86       	std	Y+9, r10	; 0x09
     1ce:	ba 86       	std	Y+10, r11	; 0x0a
     1d0:	cb 86       	std	Y+11, r12	; 0x0b
     1d2:	dc 86       	std	Y+12, r13	; 0x0c
     1d4:	ed 86       	std	Y+13, r14	; 0x0d
     1d6:	fe 86       	std	Y+14, r15	; 0x0e
     1d8:	0f 87       	std	Y+15, r16	; 0x0f
     1da:	18 8b       	std	Y+16, r17	; 0x10
     1dc:	29 84       	ldd	r2, Y+9	; 0x09
     1de:	3a 84       	ldd	r3, Y+10	; 0x0a
     1e0:	4b 84       	ldd	r4, Y+11	; 0x0b
     1e2:	5c 84       	ldd	r5, Y+12	; 0x0c
     1e4:	ed 84       	ldd	r14, Y+13	; 0x0d
     1e6:	fe 84       	ldd	r15, Y+14	; 0x0e
     1e8:	0f 85       	ldd	r16, Y+15	; 0x0f
     1ea:	18 89       	ldd	r17, Y+16	; 0x10
     1ec:	69 80       	ldd	r6, Y+1	; 0x01
     1ee:	7a 80       	ldd	r7, Y+2	; 0x02
     1f0:	8b 80       	ldd	r8, Y+3	; 0x03
     1f2:	9c 80       	ldd	r9, Y+4	; 0x04
     1f4:	6d a6       	std	Y+45, r6	; 0x2d
     1f6:	7e a6       	std	Y+46, r7	; 0x2e
     1f8:	8f a6       	std	Y+47, r8	; 0x2f
     1fa:	98 aa       	std	Y+48, r9	; 0x30
     1fc:	6d 80       	ldd	r6, Y+5	; 0x05
     1fe:	7e 80       	ldd	r7, Y+6	; 0x06
     200:	8f 80       	ldd	r8, Y+7	; 0x07
     202:	98 84       	ldd	r9, Y+8	; 0x08
     204:	e1 14       	cp	r14, r1
     206:	f1 04       	cpc	r15, r1
     208:	01 05       	cpc	r16, r1
     20a:	11 05       	cpc	r17, r1
     20c:	09 f0       	breq	.+2      	; 0x210 <__udivdi3+0x80>
     20e:	b3 c3       	rjmp	.+1894   	; 0x976 <__stack+0x117>
     210:	62 14       	cp	r6, r2
     212:	73 04       	cpc	r7, r3
     214:	84 04       	cpc	r8, r4
     216:	95 04       	cpc	r9, r5
     218:	08 f0       	brcs	.+2      	; 0x21c <__udivdi3+0x8c>
     21a:	3d c1       	rjmp	.+634    	; 0x496 <__udivdi3+0x306>
     21c:	00 e0       	ldi	r16, 0x00	; 0
     21e:	20 16       	cp	r2, r16
     220:	00 e0       	ldi	r16, 0x00	; 0
     222:	30 06       	cpc	r3, r16
     224:	01 e0       	ldi	r16, 0x01	; 1
     226:	40 06       	cpc	r4, r16
     228:	00 e0       	ldi	r16, 0x00	; 0
     22a:	50 06       	cpc	r5, r16
     22c:	88 f4       	brcc	.+34     	; 0x250 <__udivdi3+0xc0>
     22e:	1f ef       	ldi	r17, 0xFF	; 255
     230:	21 16       	cp	r2, r17
     232:	31 04       	cpc	r3, r1
     234:	41 04       	cpc	r4, r1
     236:	51 04       	cpc	r5, r1
     238:	39 f0       	breq	.+14     	; 0x248 <__udivdi3+0xb8>
     23a:	30 f0       	brcs	.+12     	; 0x248 <__udivdi3+0xb8>
     23c:	48 e0       	ldi	r20, 0x08	; 8
     23e:	e4 2e       	mov	r14, r20
     240:	f1 2c       	mov	r15, r1
     242:	01 2d       	mov	r16, r1
     244:	11 2d       	mov	r17, r1
     246:	18 c0       	rjmp	.+48     	; 0x278 <__udivdi3+0xe8>
     248:	ee 24       	eor	r14, r14
     24a:	ff 24       	eor	r15, r15
     24c:	87 01       	movw	r16, r14
     24e:	14 c0       	rjmp	.+40     	; 0x278 <__udivdi3+0xe8>
     250:	20 e0       	ldi	r18, 0x00	; 0
     252:	22 16       	cp	r2, r18
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	32 06       	cpc	r3, r18
     258:	20 e0       	ldi	r18, 0x00	; 0
     25a:	42 06       	cpc	r4, r18
     25c:	21 e0       	ldi	r18, 0x01	; 1
     25e:	52 06       	cpc	r5, r18
     260:	30 f0       	brcs	.+12     	; 0x26e <__udivdi3+0xde>
     262:	38 e1       	ldi	r19, 0x18	; 24
     264:	e3 2e       	mov	r14, r19
     266:	f1 2c       	mov	r15, r1
     268:	01 2d       	mov	r16, r1
     26a:	11 2d       	mov	r17, r1
     26c:	05 c0       	rjmp	.+10     	; 0x278 <__udivdi3+0xe8>
     26e:	20 e1       	ldi	r18, 0x10	; 16
     270:	e2 2e       	mov	r14, r18
     272:	f1 2c       	mov	r15, r1
     274:	01 2d       	mov	r16, r1
     276:	11 2d       	mov	r17, r1
     278:	d2 01       	movw	r26, r4
     27a:	c1 01       	movw	r24, r2
     27c:	0e 2c       	mov	r0, r14
     27e:	04 c0       	rjmp	.+8      	; 0x288 <__udivdi3+0xf8>
     280:	b6 95       	lsr	r27
     282:	a7 95       	ror	r26
     284:	97 95       	ror	r25
     286:	87 95       	ror	r24
     288:	0a 94       	dec	r0
     28a:	d2 f7       	brpl	.-12     	; 0x280 <__udivdi3+0xf0>
     28c:	88 56       	subi	r24, 0x68	; 104
     28e:	9f 4f       	sbci	r25, 0xFF	; 255
     290:	dc 01       	movw	r26, r24
     292:	2c 91       	ld	r18, X
     294:	80 e2       	ldi	r24, 0x20	; 32
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	a0 e0       	ldi	r26, 0x00	; 0
     29a:	b0 e0       	ldi	r27, 0x00	; 0
     29c:	8e 19       	sub	r24, r14
     29e:	9f 09       	sbc	r25, r15
     2a0:	a0 0b       	sbc	r26, r16
     2a2:	b1 0b       	sbc	r27, r17
     2a4:	7c 01       	movw	r14, r24
     2a6:	8d 01       	movw	r16, r26
     2a8:	e2 1a       	sub	r14, r18
     2aa:	f1 08       	sbc	r15, r1
     2ac:	01 09       	sbc	r16, r1
     2ae:	11 09       	sbc	r17, r1
     2b0:	e1 14       	cp	r14, r1
     2b2:	f1 04       	cpc	r15, r1
     2b4:	01 05       	cpc	r16, r1
     2b6:	11 05       	cpc	r17, r1
     2b8:	a1 f1       	breq	.+104    	; 0x322 <__udivdi3+0x192>
     2ba:	0e 2c       	mov	r0, r14
     2bc:	04 c0       	rjmp	.+8      	; 0x2c6 <__udivdi3+0x136>
     2be:	22 0c       	add	r2, r2
     2c0:	33 1c       	adc	r3, r3
     2c2:	44 1c       	adc	r4, r4
     2c4:	55 1c       	adc	r5, r5
     2c6:	0a 94       	dec	r0
     2c8:	d2 f7       	brpl	.-12     	; 0x2be <__udivdi3+0x12e>
     2ca:	a4 01       	movw	r20, r8
     2cc:	93 01       	movw	r18, r6
     2ce:	0e 2c       	mov	r0, r14
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <__udivdi3+0x14a>
     2d2:	22 0f       	add	r18, r18
     2d4:	33 1f       	adc	r19, r19
     2d6:	44 1f       	adc	r20, r20
     2d8:	55 1f       	adc	r21, r21
     2da:	0a 94       	dec	r0
     2dc:	d2 f7       	brpl	.-12     	; 0x2d2 <__udivdi3+0x142>
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	8e 19       	sub	r24, r14
     2e4:	9f 09       	sbc	r25, r15
     2e6:	6d a4       	ldd	r6, Y+45	; 0x2d
     2e8:	7e a4       	ldd	r7, Y+46	; 0x2e
     2ea:	8f a4       	ldd	r8, Y+47	; 0x2f
     2ec:	98 a8       	ldd	r9, Y+48	; 0x30
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <__udivdi3+0x168>
     2f0:	96 94       	lsr	r9
     2f2:	87 94       	ror	r8
     2f4:	77 94       	ror	r7
     2f6:	67 94       	ror	r6
     2f8:	8a 95       	dec	r24
     2fa:	d2 f7       	brpl	.-12     	; 0x2f0 <__udivdi3+0x160>
     2fc:	62 2a       	or	r6, r18
     2fe:	73 2a       	or	r7, r19
     300:	84 2a       	or	r8, r20
     302:	95 2a       	or	r9, r21
     304:	ad a4       	ldd	r10, Y+45	; 0x2d
     306:	be a4       	ldd	r11, Y+46	; 0x2e
     308:	cf a4       	ldd	r12, Y+47	; 0x2f
     30a:	d8 a8       	ldd	r13, Y+48	; 0x30
     30c:	04 c0       	rjmp	.+8      	; 0x316 <__udivdi3+0x186>
     30e:	aa 0c       	add	r10, r10
     310:	bb 1c       	adc	r11, r11
     312:	cc 1c       	adc	r12, r12
     314:	dd 1c       	adc	r13, r13
     316:	ea 94       	dec	r14
     318:	d2 f7       	brpl	.-12     	; 0x30e <__udivdi3+0x17e>
     31a:	ad a6       	std	Y+45, r10	; 0x2d
     31c:	be a6       	std	Y+46, r11	; 0x2e
     31e:	cf a6       	std	Y+47, r12	; 0x2f
     320:	d8 aa       	std	Y+48, r13	; 0x30
     322:	62 01       	movw	r12, r4
     324:	ee 24       	eor	r14, r14
     326:	ff 24       	eor	r15, r15
     328:	cd aa       	std	Y+53, r12	; 0x35
     32a:	de aa       	std	Y+54, r13	; 0x36
     32c:	ef aa       	std	Y+55, r14	; 0x37
     32e:	f8 ae       	std	Y+56, r15	; 0x38
     330:	92 01       	movw	r18, r4
     332:	81 01       	movw	r16, r2
     334:	20 70       	andi	r18, 0x00	; 0
     336:	30 70       	andi	r19, 0x00	; 0
     338:	09 af       	std	Y+57, r16	; 0x39
     33a:	1a af       	std	Y+58, r17	; 0x3a
     33c:	2b af       	std	Y+59, r18	; 0x3b
     33e:	3c af       	std	Y+60, r19	; 0x3c
     340:	c4 01       	movw	r24, r8
     342:	b3 01       	movw	r22, r6
     344:	a7 01       	movw	r20, r14
     346:	96 01       	movw	r18, r12
     348:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     34c:	7b 01       	movw	r14, r22
     34e:	8c 01       	movw	r16, r24
     350:	c4 01       	movw	r24, r8
     352:	b3 01       	movw	r22, r6
     354:	2d a9       	ldd	r18, Y+53	; 0x35
     356:	3e a9       	ldd	r19, Y+54	; 0x36
     358:	4f a9       	ldd	r20, Y+55	; 0x37
     35a:	58 ad       	ldd	r21, Y+56	; 0x38
     35c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     360:	c9 01       	movw	r24, r18
     362:	da 01       	movw	r26, r20
     364:	3c 01       	movw	r6, r24
     366:	4d 01       	movw	r8, r26
     368:	c4 01       	movw	r24, r8
     36a:	b3 01       	movw	r22, r6
     36c:	29 ad       	ldd	r18, Y+57	; 0x39
     36e:	3a ad       	ldd	r19, Y+58	; 0x3a
     370:	4b ad       	ldd	r20, Y+59	; 0x3b
     372:	5c ad       	ldd	r21, Y+60	; 0x3c
     374:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     378:	9b 01       	movw	r18, r22
     37a:	ac 01       	movw	r20, r24
     37c:	87 01       	movw	r16, r14
     37e:	ff 24       	eor	r15, r15
     380:	ee 24       	eor	r14, r14
     382:	ad a4       	ldd	r10, Y+45	; 0x2d
     384:	be a4       	ldd	r11, Y+46	; 0x2e
     386:	cf a4       	ldd	r12, Y+47	; 0x2f
     388:	d8 a8       	ldd	r13, Y+48	; 0x30
     38a:	c6 01       	movw	r24, r12
     38c:	aa 27       	eor	r26, r26
     38e:	bb 27       	eor	r27, r27
     390:	57 01       	movw	r10, r14
     392:	68 01       	movw	r12, r16
     394:	a8 2a       	or	r10, r24
     396:	b9 2a       	or	r11, r25
     398:	ca 2a       	or	r12, r26
     39a:	db 2a       	or	r13, r27
     39c:	a2 16       	cp	r10, r18
     39e:	b3 06       	cpc	r11, r19
     3a0:	c4 06       	cpc	r12, r20
     3a2:	d5 06       	cpc	r13, r21
     3a4:	e0 f4       	brcc	.+56     	; 0x3de <__udivdi3+0x24e>
     3a6:	08 94       	sec
     3a8:	61 08       	sbc	r6, r1
     3aa:	71 08       	sbc	r7, r1
     3ac:	81 08       	sbc	r8, r1
     3ae:	91 08       	sbc	r9, r1
     3b0:	a2 0c       	add	r10, r2
     3b2:	b3 1c       	adc	r11, r3
     3b4:	c4 1c       	adc	r12, r4
     3b6:	d5 1c       	adc	r13, r5
     3b8:	a2 14       	cp	r10, r2
     3ba:	b3 04       	cpc	r11, r3
     3bc:	c4 04       	cpc	r12, r4
     3be:	d5 04       	cpc	r13, r5
     3c0:	70 f0       	brcs	.+28     	; 0x3de <__udivdi3+0x24e>
     3c2:	a2 16       	cp	r10, r18
     3c4:	b3 06       	cpc	r11, r19
     3c6:	c4 06       	cpc	r12, r20
     3c8:	d5 06       	cpc	r13, r21
     3ca:	48 f4       	brcc	.+18     	; 0x3de <__udivdi3+0x24e>
     3cc:	08 94       	sec
     3ce:	61 08       	sbc	r6, r1
     3d0:	71 08       	sbc	r7, r1
     3d2:	81 08       	sbc	r8, r1
     3d4:	91 08       	sbc	r9, r1
     3d6:	a2 0c       	add	r10, r2
     3d8:	b3 1c       	adc	r11, r3
     3da:	c4 1c       	adc	r12, r4
     3dc:	d5 1c       	adc	r13, r5
     3de:	a2 1a       	sub	r10, r18
     3e0:	b3 0a       	sbc	r11, r19
     3e2:	c4 0a       	sbc	r12, r20
     3e4:	d5 0a       	sbc	r13, r21
     3e6:	c6 01       	movw	r24, r12
     3e8:	b5 01       	movw	r22, r10
     3ea:	2d a9       	ldd	r18, Y+53	; 0x35
     3ec:	3e a9       	ldd	r19, Y+54	; 0x36
     3ee:	4f a9       	ldd	r20, Y+55	; 0x37
     3f0:	58 ad       	ldd	r21, Y+56	; 0x38
     3f2:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	c6 01       	movw	r24, r12
     3fc:	b5 01       	movw	r22, r10
     3fe:	2d a9       	ldd	r18, Y+53	; 0x35
     400:	3e a9       	ldd	r19, Y+54	; 0x36
     402:	4f a9       	ldd	r20, Y+55	; 0x37
     404:	58 ad       	ldd	r21, Y+56	; 0x38
     406:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     40a:	c9 01       	movw	r24, r18
     40c:	da 01       	movw	r26, r20
     40e:	5c 01       	movw	r10, r24
     410:	6d 01       	movw	r12, r26
     412:	c6 01       	movw	r24, r12
     414:	b5 01       	movw	r22, r10
     416:	29 ad       	ldd	r18, Y+57	; 0x39
     418:	3a ad       	ldd	r19, Y+58	; 0x3a
     41a:	4b ad       	ldd	r20, Y+59	; 0x3b
     41c:	5c ad       	ldd	r21, Y+60	; 0x3c
     41e:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     422:	9b 01       	movw	r18, r22
     424:	ac 01       	movw	r20, r24
     426:	87 01       	movw	r16, r14
     428:	ff 24       	eor	r15, r15
     42a:	ee 24       	eor	r14, r14
     42c:	8d a5       	ldd	r24, Y+45	; 0x2d
     42e:	9e a5       	ldd	r25, Y+46	; 0x2e
     430:	af a5       	ldd	r26, Y+47	; 0x2f
     432:	b8 a9       	ldd	r27, Y+48	; 0x30
     434:	a0 70       	andi	r26, 0x00	; 0
     436:	b0 70       	andi	r27, 0x00	; 0
     438:	e8 2a       	or	r14, r24
     43a:	f9 2a       	or	r15, r25
     43c:	0a 2b       	or	r16, r26
     43e:	1b 2b       	or	r17, r27
     440:	e2 16       	cp	r14, r18
     442:	f3 06       	cpc	r15, r19
     444:	04 07       	cpc	r16, r20
     446:	15 07       	cpc	r17, r21
     448:	c0 f4       	brcc	.+48     	; 0x47a <__udivdi3+0x2ea>
     44a:	08 94       	sec
     44c:	a1 08       	sbc	r10, r1
     44e:	b1 08       	sbc	r11, r1
     450:	c1 08       	sbc	r12, r1
     452:	d1 08       	sbc	r13, r1
     454:	e2 0c       	add	r14, r2
     456:	f3 1c       	adc	r15, r3
     458:	04 1d       	adc	r16, r4
     45a:	15 1d       	adc	r17, r5
     45c:	e2 14       	cp	r14, r2
     45e:	f3 04       	cpc	r15, r3
     460:	04 05       	cpc	r16, r4
     462:	15 05       	cpc	r17, r5
     464:	50 f0       	brcs	.+20     	; 0x47a <__udivdi3+0x2ea>
     466:	e2 16       	cp	r14, r18
     468:	f3 06       	cpc	r15, r19
     46a:	04 07       	cpc	r16, r20
     46c:	15 07       	cpc	r17, r21
     46e:	28 f4       	brcc	.+10     	; 0x47a <__udivdi3+0x2ea>
     470:	08 94       	sec
     472:	a1 08       	sbc	r10, r1
     474:	b1 08       	sbc	r11, r1
     476:	c1 08       	sbc	r12, r1
     478:	d1 08       	sbc	r13, r1
     47a:	d3 01       	movw	r26, r6
     47c:	99 27       	eor	r25, r25
     47e:	88 27       	eor	r24, r24
     480:	86 01       	movw	r16, r12
     482:	75 01       	movw	r14, r10
     484:	e8 2a       	or	r14, r24
     486:	f9 2a       	or	r15, r25
     488:	0a 2b       	or	r16, r26
     48a:	1b 2b       	or	r17, r27
     48c:	e9 aa       	std	Y+49, r14	; 0x31
     48e:	fa aa       	std	Y+50, r15	; 0x32
     490:	0b ab       	std	Y+51, r16	; 0x33
     492:	1c ab       	std	Y+52, r17	; 0x34
     494:	cf c4       	rjmp	.+2462   	; 0xe34 <__stack+0x5d5>
     496:	21 14       	cp	r2, r1
     498:	31 04       	cpc	r3, r1
     49a:	41 04       	cpc	r4, r1
     49c:	51 04       	cpc	r5, r1
     49e:	71 f4       	brne	.+28     	; 0x4bc <__udivdi3+0x32c>
     4a0:	61 e0       	ldi	r22, 0x01	; 1
     4a2:	70 e0       	ldi	r23, 0x00	; 0
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	20 e0       	ldi	r18, 0x00	; 0
     4aa:	30 e0       	ldi	r19, 0x00	; 0
     4ac:	40 e0       	ldi	r20, 0x00	; 0
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     4b4:	c9 01       	movw	r24, r18
     4b6:	da 01       	movw	r26, r20
     4b8:	1c 01       	movw	r2, r24
     4ba:	2d 01       	movw	r4, r26
     4bc:	00 e0       	ldi	r16, 0x00	; 0
     4be:	20 16       	cp	r2, r16
     4c0:	00 e0       	ldi	r16, 0x00	; 0
     4c2:	30 06       	cpc	r3, r16
     4c4:	01 e0       	ldi	r16, 0x01	; 1
     4c6:	40 06       	cpc	r4, r16
     4c8:	00 e0       	ldi	r16, 0x00	; 0
     4ca:	50 06       	cpc	r5, r16
     4cc:	88 f4       	brcc	.+34     	; 0x4f0 <__udivdi3+0x360>
     4ce:	1f ef       	ldi	r17, 0xFF	; 255
     4d0:	21 16       	cp	r2, r17
     4d2:	31 04       	cpc	r3, r1
     4d4:	41 04       	cpc	r4, r1
     4d6:	51 04       	cpc	r5, r1
     4d8:	31 f0       	breq	.+12     	; 0x4e6 <__udivdi3+0x356>
     4da:	28 f0       	brcs	.+10     	; 0x4e6 <__udivdi3+0x356>
     4dc:	48 e0       	ldi	r20, 0x08	; 8
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	60 e0       	ldi	r22, 0x00	; 0
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	17 c0       	rjmp	.+46     	; 0x514 <__udivdi3+0x384>
     4e6:	40 e0       	ldi	r20, 0x00	; 0
     4e8:	50 e0       	ldi	r21, 0x00	; 0
     4ea:	60 e0       	ldi	r22, 0x00	; 0
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	12 c0       	rjmp	.+36     	; 0x514 <__udivdi3+0x384>
     4f0:	20 e0       	ldi	r18, 0x00	; 0
     4f2:	22 16       	cp	r2, r18
     4f4:	20 e0       	ldi	r18, 0x00	; 0
     4f6:	32 06       	cpc	r3, r18
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	42 06       	cpc	r4, r18
     4fc:	21 e0       	ldi	r18, 0x01	; 1
     4fe:	52 06       	cpc	r5, r18
     500:	28 f0       	brcs	.+10     	; 0x50c <__udivdi3+0x37c>
     502:	48 e1       	ldi	r20, 0x18	; 24
     504:	50 e0       	ldi	r21, 0x00	; 0
     506:	60 e0       	ldi	r22, 0x00	; 0
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	04 c0       	rjmp	.+8      	; 0x514 <__udivdi3+0x384>
     50c:	40 e1       	ldi	r20, 0x10	; 16
     50e:	50 e0       	ldi	r21, 0x00	; 0
     510:	60 e0       	ldi	r22, 0x00	; 0
     512:	70 e0       	ldi	r23, 0x00	; 0
     514:	d2 01       	movw	r26, r4
     516:	c1 01       	movw	r24, r2
     518:	04 2e       	mov	r0, r20
     51a:	04 c0       	rjmp	.+8      	; 0x524 <__udivdi3+0x394>
     51c:	b6 95       	lsr	r27
     51e:	a7 95       	ror	r26
     520:	97 95       	ror	r25
     522:	87 95       	ror	r24
     524:	0a 94       	dec	r0
     526:	d2 f7       	brpl	.-12     	; 0x51c <__udivdi3+0x38c>
     528:	88 56       	subi	r24, 0x68	; 104
     52a:	9f 4f       	sbci	r25, 0xFF	; 255
     52c:	dc 01       	movw	r26, r24
     52e:	2c 91       	ld	r18, X
     530:	e0 e2       	ldi	r30, 0x20	; 32
     532:	ee 2e       	mov	r14, r30
     534:	f1 2c       	mov	r15, r1
     536:	01 2d       	mov	r16, r1
     538:	11 2d       	mov	r17, r1
     53a:	d8 01       	movw	r26, r16
     53c:	c7 01       	movw	r24, r14
     53e:	84 1b       	sub	r24, r20
     540:	95 0b       	sbc	r25, r21
     542:	a6 0b       	sbc	r26, r22
     544:	b7 0b       	sbc	r27, r23
     546:	82 1b       	sub	r24, r18
     548:	91 09       	sbc	r25, r1
     54a:	a1 09       	sbc	r26, r1
     54c:	b1 09       	sbc	r27, r1
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	a1 05       	cpc	r26, r1
     552:	b1 05       	cpc	r27, r1
     554:	61 f4       	brne	.+24     	; 0x56e <__udivdi3+0x3de>
     556:	64 01       	movw	r12, r8
     558:	53 01       	movw	r10, r6
     55a:	a2 18       	sub	r10, r2
     55c:	b3 08       	sbc	r11, r3
     55e:	c4 08       	sbc	r12, r4
     560:	d5 08       	sbc	r13, r5
     562:	31 e0       	ldi	r19, 0x01	; 1
     564:	63 2e       	mov	r6, r19
     566:	71 2c       	mov	r7, r1
     568:	81 2c       	mov	r8, r1
     56a:	91 2c       	mov	r9, r1
     56c:	1e c1       	rjmp	.+572    	; 0x7aa <__udivdi3+0x61a>
     56e:	6f 96       	adiw	r28, 0x1f	; 31
     570:	8f af       	std	Y+63, r24	; 0x3f
     572:	6f 97       	sbiw	r28, 0x1f	; 31
     574:	08 2e       	mov	r0, r24
     576:	04 c0       	rjmp	.+8      	; 0x580 <__udivdi3+0x3f0>
     578:	22 0c       	add	r2, r2
     57a:	33 1c       	adc	r3, r3
     57c:	44 1c       	adc	r4, r4
     57e:	55 1c       	adc	r5, r5
     580:	0a 94       	dec	r0
     582:	d2 f7       	brpl	.-12     	; 0x578 <__udivdi3+0x3e8>
     584:	ee 2d       	mov	r30, r14
     586:	e8 1b       	sub	r30, r24
     588:	64 01       	movw	r12, r8
     58a:	53 01       	movw	r10, r6
     58c:	0e 2e       	mov	r0, r30
     58e:	04 c0       	rjmp	.+8      	; 0x598 <__udivdi3+0x408>
     590:	d6 94       	lsr	r13
     592:	c7 94       	ror	r12
     594:	b7 94       	ror	r11
     596:	a7 94       	ror	r10
     598:	0a 94       	dec	r0
     59a:	d2 f7       	brpl	.-12     	; 0x590 <__udivdi3+0x400>
     59c:	a4 01       	movw	r20, r8
     59e:	93 01       	movw	r18, r6
     5a0:	6f 96       	adiw	r28, 0x1f	; 31
     5a2:	0f ac       	ldd	r0, Y+63	; 0x3f
     5a4:	6f 97       	sbiw	r28, 0x1f	; 31
     5a6:	04 c0       	rjmp	.+8      	; 0x5b0 <__udivdi3+0x420>
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	44 1f       	adc	r20, r20
     5ae:	55 1f       	adc	r21, r21
     5b0:	0a 94       	dec	r0
     5b2:	d2 f7       	brpl	.-12     	; 0x5a8 <__udivdi3+0x418>
     5b4:	6d a4       	ldd	r6, Y+45	; 0x2d
     5b6:	7e a4       	ldd	r7, Y+46	; 0x2e
     5b8:	8f a4       	ldd	r8, Y+47	; 0x2f
     5ba:	98 a8       	ldd	r9, Y+48	; 0x30
     5bc:	0e 2e       	mov	r0, r30
     5be:	04 c0       	rjmp	.+8      	; 0x5c8 <__udivdi3+0x438>
     5c0:	96 94       	lsr	r9
     5c2:	87 94       	ror	r8
     5c4:	77 94       	ror	r7
     5c6:	67 94       	ror	r6
     5c8:	0a 94       	dec	r0
     5ca:	d2 f7       	brpl	.-12     	; 0x5c0 <__udivdi3+0x430>
     5cc:	84 01       	movw	r16, r8
     5ce:	73 01       	movw	r14, r6
     5d0:	e2 2a       	or	r14, r18
     5d2:	f3 2a       	or	r15, r19
     5d4:	04 2b       	or	r16, r20
     5d6:	15 2b       	or	r17, r21
     5d8:	e9 a6       	std	Y+41, r14	; 0x29
     5da:	fa a6       	std	Y+42, r15	; 0x2a
     5dc:	0b a7       	std	Y+43, r16	; 0x2b
     5de:	1c a7       	std	Y+44, r17	; 0x2c
     5e0:	32 01       	movw	r6, r4
     5e2:	88 24       	eor	r8, r8
     5e4:	99 24       	eor	r9, r9
     5e6:	92 01       	movw	r18, r4
     5e8:	81 01       	movw	r16, r2
     5ea:	20 70       	andi	r18, 0x00	; 0
     5ec:	30 70       	andi	r19, 0x00	; 0
     5ee:	21 96       	adiw	r28, 0x01	; 1
     5f0:	0c af       	std	Y+60, r16	; 0x3c
     5f2:	1d af       	std	Y+61, r17	; 0x3d
     5f4:	2e af       	std	Y+62, r18	; 0x3e
     5f6:	3f af       	std	Y+63, r19	; 0x3f
     5f8:	21 97       	sbiw	r28, 0x01	; 1
     5fa:	c6 01       	movw	r24, r12
     5fc:	b5 01       	movw	r22, r10
     5fe:	a4 01       	movw	r20, r8
     600:	93 01       	movw	r18, r6
     602:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     606:	7b 01       	movw	r14, r22
     608:	8c 01       	movw	r16, r24
     60a:	c6 01       	movw	r24, r12
     60c:	b5 01       	movw	r22, r10
     60e:	a4 01       	movw	r20, r8
     610:	93 01       	movw	r18, r6
     612:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     616:	c9 01       	movw	r24, r18
     618:	da 01       	movw	r26, r20
     61a:	25 96       	adiw	r28, 0x05	; 5
     61c:	8c af       	std	Y+60, r24	; 0x3c
     61e:	9d af       	std	Y+61, r25	; 0x3d
     620:	ae af       	std	Y+62, r26	; 0x3e
     622:	bf af       	std	Y+63, r27	; 0x3f
     624:	25 97       	sbiw	r28, 0x05	; 5
     626:	bc 01       	movw	r22, r24
     628:	cd 01       	movw	r24, r26
     62a:	21 96       	adiw	r28, 0x01	; 1
     62c:	2c ad       	ldd	r18, Y+60	; 0x3c
     62e:	3d ad       	ldd	r19, Y+61	; 0x3d
     630:	4e ad       	ldd	r20, Y+62	; 0x3e
     632:	5f ad       	ldd	r21, Y+63	; 0x3f
     634:	21 97       	sbiw	r28, 0x01	; 1
     636:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     63a:	9b 01       	movw	r18, r22
     63c:	ac 01       	movw	r20, r24
     63e:	87 01       	movw	r16, r14
     640:	ff 24       	eor	r15, r15
     642:	ee 24       	eor	r14, r14
     644:	a9 a4       	ldd	r10, Y+41	; 0x29
     646:	ba a4       	ldd	r11, Y+42	; 0x2a
     648:	cb a4       	ldd	r12, Y+43	; 0x2b
     64a:	dc a4       	ldd	r13, Y+44	; 0x2c
     64c:	c6 01       	movw	r24, r12
     64e:	aa 27       	eor	r26, r26
     650:	bb 27       	eor	r27, r27
     652:	5c 01       	movw	r10, r24
     654:	6d 01       	movw	r12, r26
     656:	ae 28       	or	r10, r14
     658:	bf 28       	or	r11, r15
     65a:	c0 2a       	or	r12, r16
     65c:	d1 2a       	or	r13, r17
     65e:	a2 16       	cp	r10, r18
     660:	b3 06       	cpc	r11, r19
     662:	c4 06       	cpc	r12, r20
     664:	d5 06       	cpc	r13, r21
     666:	60 f5       	brcc	.+88     	; 0x6c0 <__udivdi3+0x530>
     668:	25 96       	adiw	r28, 0x05	; 5
     66a:	6c ad       	ldd	r22, Y+60	; 0x3c
     66c:	7d ad       	ldd	r23, Y+61	; 0x3d
     66e:	8e ad       	ldd	r24, Y+62	; 0x3e
     670:	9f ad       	ldd	r25, Y+63	; 0x3f
     672:	25 97       	sbiw	r28, 0x05	; 5
     674:	61 50       	subi	r22, 0x01	; 1
     676:	70 40       	sbci	r23, 0x00	; 0
     678:	80 40       	sbci	r24, 0x00	; 0
     67a:	90 40       	sbci	r25, 0x00	; 0
     67c:	25 96       	adiw	r28, 0x05	; 5
     67e:	6c af       	std	Y+60, r22	; 0x3c
     680:	7d af       	std	Y+61, r23	; 0x3d
     682:	8e af       	std	Y+62, r24	; 0x3e
     684:	9f af       	std	Y+63, r25	; 0x3f
     686:	25 97       	sbiw	r28, 0x05	; 5
     688:	a2 0c       	add	r10, r2
     68a:	b3 1c       	adc	r11, r3
     68c:	c4 1c       	adc	r12, r4
     68e:	d5 1c       	adc	r13, r5
     690:	a2 14       	cp	r10, r2
     692:	b3 04       	cpc	r11, r3
     694:	c4 04       	cpc	r12, r4
     696:	d5 04       	cpc	r13, r5
     698:	98 f0       	brcs	.+38     	; 0x6c0 <__udivdi3+0x530>
     69a:	a2 16       	cp	r10, r18
     69c:	b3 06       	cpc	r11, r19
     69e:	c4 06       	cpc	r12, r20
     6a0:	d5 06       	cpc	r13, r21
     6a2:	70 f4       	brcc	.+28     	; 0x6c0 <__udivdi3+0x530>
     6a4:	61 50       	subi	r22, 0x01	; 1
     6a6:	70 40       	sbci	r23, 0x00	; 0
     6a8:	80 40       	sbci	r24, 0x00	; 0
     6aa:	90 40       	sbci	r25, 0x00	; 0
     6ac:	25 96       	adiw	r28, 0x05	; 5
     6ae:	6c af       	std	Y+60, r22	; 0x3c
     6b0:	7d af       	std	Y+61, r23	; 0x3d
     6b2:	8e af       	std	Y+62, r24	; 0x3e
     6b4:	9f af       	std	Y+63, r25	; 0x3f
     6b6:	25 97       	sbiw	r28, 0x05	; 5
     6b8:	a2 0c       	add	r10, r2
     6ba:	b3 1c       	adc	r11, r3
     6bc:	c4 1c       	adc	r12, r4
     6be:	d5 1c       	adc	r13, r5
     6c0:	a2 1a       	sub	r10, r18
     6c2:	b3 0a       	sbc	r11, r19
     6c4:	c4 0a       	sbc	r12, r20
     6c6:	d5 0a       	sbc	r13, r21
     6c8:	c6 01       	movw	r24, r12
     6ca:	b5 01       	movw	r22, r10
     6cc:	a4 01       	movw	r20, r8
     6ce:	93 01       	movw	r18, r6
     6d0:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     6d4:	7b 01       	movw	r14, r22
     6d6:	8c 01       	movw	r16, r24
     6d8:	c6 01       	movw	r24, r12
     6da:	b5 01       	movw	r22, r10
     6dc:	a4 01       	movw	r20, r8
     6de:	93 01       	movw	r18, r6
     6e0:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     6e4:	c9 01       	movw	r24, r18
     6e6:	da 01       	movw	r26, r20
     6e8:	3c 01       	movw	r6, r24
     6ea:	4d 01       	movw	r8, r26
     6ec:	c4 01       	movw	r24, r8
     6ee:	b3 01       	movw	r22, r6
     6f0:	21 96       	adiw	r28, 0x01	; 1
     6f2:	2c ad       	ldd	r18, Y+60	; 0x3c
     6f4:	3d ad       	ldd	r19, Y+61	; 0x3d
     6f6:	4e ad       	ldd	r20, Y+62	; 0x3e
     6f8:	5f ad       	ldd	r21, Y+63	; 0x3f
     6fa:	21 97       	sbiw	r28, 0x01	; 1
     6fc:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     700:	9b 01       	movw	r18, r22
     702:	ac 01       	movw	r20, r24
     704:	87 01       	movw	r16, r14
     706:	ff 24       	eor	r15, r15
     708:	ee 24       	eor	r14, r14
     70a:	89 a5       	ldd	r24, Y+41	; 0x29
     70c:	9a a5       	ldd	r25, Y+42	; 0x2a
     70e:	ab a5       	ldd	r26, Y+43	; 0x2b
     710:	bc a5       	ldd	r27, Y+44	; 0x2c
     712:	a0 70       	andi	r26, 0x00	; 0
     714:	b0 70       	andi	r27, 0x00	; 0
     716:	57 01       	movw	r10, r14
     718:	68 01       	movw	r12, r16
     71a:	a8 2a       	or	r10, r24
     71c:	b9 2a       	or	r11, r25
     71e:	ca 2a       	or	r12, r26
     720:	db 2a       	or	r13, r27
     722:	a2 16       	cp	r10, r18
     724:	b3 06       	cpc	r11, r19
     726:	c4 06       	cpc	r12, r20
     728:	d5 06       	cpc	r13, r21
     72a:	e0 f4       	brcc	.+56     	; 0x764 <__udivdi3+0x5d4>
     72c:	08 94       	sec
     72e:	61 08       	sbc	r6, r1
     730:	71 08       	sbc	r7, r1
     732:	81 08       	sbc	r8, r1
     734:	91 08       	sbc	r9, r1
     736:	a2 0c       	add	r10, r2
     738:	b3 1c       	adc	r11, r3
     73a:	c4 1c       	adc	r12, r4
     73c:	d5 1c       	adc	r13, r5
     73e:	a2 14       	cp	r10, r2
     740:	b3 04       	cpc	r11, r3
     742:	c4 04       	cpc	r12, r4
     744:	d5 04       	cpc	r13, r5
     746:	70 f0       	brcs	.+28     	; 0x764 <__udivdi3+0x5d4>
     748:	a2 16       	cp	r10, r18
     74a:	b3 06       	cpc	r11, r19
     74c:	c4 06       	cpc	r12, r20
     74e:	d5 06       	cpc	r13, r21
     750:	48 f4       	brcc	.+18     	; 0x764 <__udivdi3+0x5d4>
     752:	08 94       	sec
     754:	61 08       	sbc	r6, r1
     756:	71 08       	sbc	r7, r1
     758:	81 08       	sbc	r8, r1
     75a:	91 08       	sbc	r9, r1
     75c:	a2 0c       	add	r10, r2
     75e:	b3 1c       	adc	r11, r3
     760:	c4 1c       	adc	r12, r4
     762:	d5 1c       	adc	r13, r5
     764:	8d a5       	ldd	r24, Y+45	; 0x2d
     766:	9e a5       	ldd	r25, Y+46	; 0x2e
     768:	af a5       	ldd	r26, Y+47	; 0x2f
     76a:	b8 a9       	ldd	r27, Y+48	; 0x30
     76c:	6f 96       	adiw	r28, 0x1f	; 31
     76e:	0f ac       	ldd	r0, Y+63	; 0x3f
     770:	6f 97       	sbiw	r28, 0x1f	; 31
     772:	04 c0       	rjmp	.+8      	; 0x77c <__udivdi3+0x5ec>
     774:	88 0f       	add	r24, r24
     776:	99 1f       	adc	r25, r25
     778:	aa 1f       	adc	r26, r26
     77a:	bb 1f       	adc	r27, r27
     77c:	0a 94       	dec	r0
     77e:	d2 f7       	brpl	.-12     	; 0x774 <__udivdi3+0x5e4>
     780:	8d a7       	std	Y+45, r24	; 0x2d
     782:	9e a7       	std	Y+46, r25	; 0x2e
     784:	af a7       	std	Y+47, r26	; 0x2f
     786:	b8 ab       	std	Y+48, r27	; 0x30
     788:	a2 1a       	sub	r10, r18
     78a:	b3 0a       	sbc	r11, r19
     78c:	c4 0a       	sbc	r12, r20
     78e:	d5 0a       	sbc	r13, r21
     790:	25 96       	adiw	r28, 0x05	; 5
     792:	ec ac       	ldd	r14, Y+60	; 0x3c
     794:	fd ac       	ldd	r15, Y+61	; 0x3d
     796:	0e ad       	ldd	r16, Y+62	; 0x3e
     798:	1f ad       	ldd	r17, Y+63	; 0x3f
     79a:	25 97       	sbiw	r28, 0x05	; 5
     79c:	d7 01       	movw	r26, r14
     79e:	99 27       	eor	r25, r25
     7a0:	88 27       	eor	r24, r24
     7a2:	68 2a       	or	r6, r24
     7a4:	79 2a       	or	r7, r25
     7a6:	8a 2a       	or	r8, r26
     7a8:	9b 2a       	or	r9, r27
     7aa:	82 01       	movw	r16, r4
     7ac:	22 27       	eor	r18, r18
     7ae:	33 27       	eor	r19, r19
     7b0:	29 96       	adiw	r28, 0x09	; 9
     7b2:	0c af       	std	Y+60, r16	; 0x3c
     7b4:	1d af       	std	Y+61, r17	; 0x3d
     7b6:	2e af       	std	Y+62, r18	; 0x3e
     7b8:	3f af       	std	Y+63, r19	; 0x3f
     7ba:	29 97       	sbiw	r28, 0x09	; 9
     7bc:	a2 01       	movw	r20, r4
     7be:	91 01       	movw	r18, r2
     7c0:	40 70       	andi	r20, 0x00	; 0
     7c2:	50 70       	andi	r21, 0x00	; 0
     7c4:	2d 96       	adiw	r28, 0x0d	; 13
     7c6:	2c af       	std	Y+60, r18	; 0x3c
     7c8:	3d af       	std	Y+61, r19	; 0x3d
     7ca:	4e af       	std	Y+62, r20	; 0x3e
     7cc:	5f af       	std	Y+63, r21	; 0x3f
     7ce:	2d 97       	sbiw	r28, 0x0d	; 13
     7d0:	c6 01       	movw	r24, r12
     7d2:	b5 01       	movw	r22, r10
     7d4:	29 96       	adiw	r28, 0x09	; 9
     7d6:	2c ad       	ldd	r18, Y+60	; 0x3c
     7d8:	3d ad       	ldd	r19, Y+61	; 0x3d
     7da:	4e ad       	ldd	r20, Y+62	; 0x3e
     7dc:	5f ad       	ldd	r21, Y+63	; 0x3f
     7de:	29 97       	sbiw	r28, 0x09	; 9
     7e0:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     7e4:	7b 01       	movw	r14, r22
     7e6:	8c 01       	movw	r16, r24
     7e8:	c6 01       	movw	r24, r12
     7ea:	b5 01       	movw	r22, r10
     7ec:	29 96       	adiw	r28, 0x09	; 9
     7ee:	2c ad       	ldd	r18, Y+60	; 0x3c
     7f0:	3d ad       	ldd	r19, Y+61	; 0x3d
     7f2:	4e ad       	ldd	r20, Y+62	; 0x3e
     7f4:	5f ad       	ldd	r21, Y+63	; 0x3f
     7f6:	29 97       	sbiw	r28, 0x09	; 9
     7f8:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     7fc:	c9 01       	movw	r24, r18
     7fe:	da 01       	movw	r26, r20
     800:	61 96       	adiw	r28, 0x11	; 17
     802:	8c af       	std	Y+60, r24	; 0x3c
     804:	9d af       	std	Y+61, r25	; 0x3d
     806:	ae af       	std	Y+62, r26	; 0x3e
     808:	bf af       	std	Y+63, r27	; 0x3f
     80a:	61 97       	sbiw	r28, 0x11	; 17
     80c:	bc 01       	movw	r22, r24
     80e:	cd 01       	movw	r24, r26
     810:	2d 96       	adiw	r28, 0x0d	; 13
     812:	2c ad       	ldd	r18, Y+60	; 0x3c
     814:	3d ad       	ldd	r19, Y+61	; 0x3d
     816:	4e ad       	ldd	r20, Y+62	; 0x3e
     818:	5f ad       	ldd	r21, Y+63	; 0x3f
     81a:	2d 97       	sbiw	r28, 0x0d	; 13
     81c:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     820:	9b 01       	movw	r18, r22
     822:	ac 01       	movw	r20, r24
     824:	87 01       	movw	r16, r14
     826:	ff 24       	eor	r15, r15
     828:	ee 24       	eor	r14, r14
     82a:	ad a4       	ldd	r10, Y+45	; 0x2d
     82c:	be a4       	ldd	r11, Y+46	; 0x2e
     82e:	cf a4       	ldd	r12, Y+47	; 0x2f
     830:	d8 a8       	ldd	r13, Y+48	; 0x30
     832:	c6 01       	movw	r24, r12
     834:	aa 27       	eor	r26, r26
     836:	bb 27       	eor	r27, r27
     838:	57 01       	movw	r10, r14
     83a:	68 01       	movw	r12, r16
     83c:	a8 2a       	or	r10, r24
     83e:	b9 2a       	or	r11, r25
     840:	ca 2a       	or	r12, r26
     842:	db 2a       	or	r13, r27
     844:	a2 16       	cp	r10, r18
     846:	b3 06       	cpc	r11, r19
     848:	c4 06       	cpc	r12, r20
     84a:	d5 06       	cpc	r13, r21
     84c:	60 f5       	brcc	.+88     	; 0x8a6 <__stack+0x47>
     84e:	61 96       	adiw	r28, 0x11	; 17
     850:	6c ad       	ldd	r22, Y+60	; 0x3c
     852:	7d ad       	ldd	r23, Y+61	; 0x3d
     854:	8e ad       	ldd	r24, Y+62	; 0x3e
     856:	9f ad       	ldd	r25, Y+63	; 0x3f
     858:	61 97       	sbiw	r28, 0x11	; 17
     85a:	61 50       	subi	r22, 0x01	; 1
     85c:	70 40       	sbci	r23, 0x00	; 0
     85e:	80 40       	sbci	r24, 0x00	; 0
     860:	90 40       	sbci	r25, 0x00	; 0
     862:	61 96       	adiw	r28, 0x11	; 17
     864:	6c af       	std	Y+60, r22	; 0x3c
     866:	7d af       	std	Y+61, r23	; 0x3d
     868:	8e af       	std	Y+62, r24	; 0x3e
     86a:	9f af       	std	Y+63, r25	; 0x3f
     86c:	61 97       	sbiw	r28, 0x11	; 17
     86e:	a2 0c       	add	r10, r2
     870:	b3 1c       	adc	r11, r3
     872:	c4 1c       	adc	r12, r4
     874:	d5 1c       	adc	r13, r5
     876:	a2 14       	cp	r10, r2
     878:	b3 04       	cpc	r11, r3
     87a:	c4 04       	cpc	r12, r4
     87c:	d5 04       	cpc	r13, r5
     87e:	98 f0       	brcs	.+38     	; 0x8a6 <__stack+0x47>
     880:	a2 16       	cp	r10, r18
     882:	b3 06       	cpc	r11, r19
     884:	c4 06       	cpc	r12, r20
     886:	d5 06       	cpc	r13, r21
     888:	70 f4       	brcc	.+28     	; 0x8a6 <__stack+0x47>
     88a:	61 50       	subi	r22, 0x01	; 1
     88c:	70 40       	sbci	r23, 0x00	; 0
     88e:	80 40       	sbci	r24, 0x00	; 0
     890:	90 40       	sbci	r25, 0x00	; 0
     892:	61 96       	adiw	r28, 0x11	; 17
     894:	6c af       	std	Y+60, r22	; 0x3c
     896:	7d af       	std	Y+61, r23	; 0x3d
     898:	8e af       	std	Y+62, r24	; 0x3e
     89a:	9f af       	std	Y+63, r25	; 0x3f
     89c:	61 97       	sbiw	r28, 0x11	; 17
     89e:	a2 0c       	add	r10, r2
     8a0:	b3 1c       	adc	r11, r3
     8a2:	c4 1c       	adc	r12, r4
     8a4:	d5 1c       	adc	r13, r5
     8a6:	a2 1a       	sub	r10, r18
     8a8:	b3 0a       	sbc	r11, r19
     8aa:	c4 0a       	sbc	r12, r20
     8ac:	d5 0a       	sbc	r13, r21
     8ae:	c6 01       	movw	r24, r12
     8b0:	b5 01       	movw	r22, r10
     8b2:	29 96       	adiw	r28, 0x09	; 9
     8b4:	2c ad       	ldd	r18, Y+60	; 0x3c
     8b6:	3d ad       	ldd	r19, Y+61	; 0x3d
     8b8:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ba:	5f ad       	ldd	r21, Y+63	; 0x3f
     8bc:	29 97       	sbiw	r28, 0x09	; 9
     8be:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     8c2:	7b 01       	movw	r14, r22
     8c4:	8c 01       	movw	r16, r24
     8c6:	c6 01       	movw	r24, r12
     8c8:	b5 01       	movw	r22, r10
     8ca:	29 96       	adiw	r28, 0x09	; 9
     8cc:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ce:	3d ad       	ldd	r19, Y+61	; 0x3d
     8d0:	4e ad       	ldd	r20, Y+62	; 0x3e
     8d2:	5f ad       	ldd	r21, Y+63	; 0x3f
     8d4:	29 97       	sbiw	r28, 0x09	; 9
     8d6:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     8da:	c9 01       	movw	r24, r18
     8dc:	da 01       	movw	r26, r20
     8de:	5c 01       	movw	r10, r24
     8e0:	6d 01       	movw	r12, r26
     8e2:	c6 01       	movw	r24, r12
     8e4:	b5 01       	movw	r22, r10
     8e6:	2d 96       	adiw	r28, 0x0d	; 13
     8e8:	2c ad       	ldd	r18, Y+60	; 0x3c
     8ea:	3d ad       	ldd	r19, Y+61	; 0x3d
     8ec:	4e ad       	ldd	r20, Y+62	; 0x3e
     8ee:	5f ad       	ldd	r21, Y+63	; 0x3f
     8f0:	2d 97       	sbiw	r28, 0x0d	; 13
     8f2:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     8f6:	9b 01       	movw	r18, r22
     8f8:	ac 01       	movw	r20, r24
     8fa:	87 01       	movw	r16, r14
     8fc:	ff 24       	eor	r15, r15
     8fe:	ee 24       	eor	r14, r14
     900:	8d a5       	ldd	r24, Y+45	; 0x2d
     902:	9e a5       	ldd	r25, Y+46	; 0x2e
     904:	af a5       	ldd	r26, Y+47	; 0x2f
     906:	b8 a9       	ldd	r27, Y+48	; 0x30
     908:	a0 70       	andi	r26, 0x00	; 0
     90a:	b0 70       	andi	r27, 0x00	; 0
     90c:	e8 2a       	or	r14, r24
     90e:	f9 2a       	or	r15, r25
     910:	0a 2b       	or	r16, r26
     912:	1b 2b       	or	r17, r27
     914:	e2 16       	cp	r14, r18
     916:	f3 06       	cpc	r15, r19
     918:	04 07       	cpc	r16, r20
     91a:	15 07       	cpc	r17, r21
     91c:	c0 f4       	brcc	.+48     	; 0x94e <__stack+0xef>
     91e:	08 94       	sec
     920:	a1 08       	sbc	r10, r1
     922:	b1 08       	sbc	r11, r1
     924:	c1 08       	sbc	r12, r1
     926:	d1 08       	sbc	r13, r1
     928:	e2 0c       	add	r14, r2
     92a:	f3 1c       	adc	r15, r3
     92c:	04 1d       	adc	r16, r4
     92e:	15 1d       	adc	r17, r5
     930:	e2 14       	cp	r14, r2
     932:	f3 04       	cpc	r15, r3
     934:	04 05       	cpc	r16, r4
     936:	15 05       	cpc	r17, r5
     938:	50 f0       	brcs	.+20     	; 0x94e <__stack+0xef>
     93a:	e2 16       	cp	r14, r18
     93c:	f3 06       	cpc	r15, r19
     93e:	04 07       	cpc	r16, r20
     940:	15 07       	cpc	r17, r21
     942:	28 f4       	brcc	.+10     	; 0x94e <__stack+0xef>
     944:	08 94       	sec
     946:	a1 08       	sbc	r10, r1
     948:	b1 08       	sbc	r11, r1
     94a:	c1 08       	sbc	r12, r1
     94c:	d1 08       	sbc	r13, r1
     94e:	61 96       	adiw	r28, 0x11	; 17
     950:	ec ac       	ldd	r14, Y+60	; 0x3c
     952:	fd ac       	ldd	r15, Y+61	; 0x3d
     954:	0e ad       	ldd	r16, Y+62	; 0x3e
     956:	1f ad       	ldd	r17, Y+63	; 0x3f
     958:	61 97       	sbiw	r28, 0x11	; 17
     95a:	d7 01       	movw	r26, r14
     95c:	99 27       	eor	r25, r25
     95e:	88 27       	eor	r24, r24
     960:	96 01       	movw	r18, r12
     962:	85 01       	movw	r16, r10
     964:	08 2b       	or	r16, r24
     966:	19 2b       	or	r17, r25
     968:	2a 2b       	or	r18, r26
     96a:	3b 2b       	or	r19, r27
     96c:	09 ab       	std	Y+49, r16	; 0x31
     96e:	1a ab       	std	Y+50, r17	; 0x32
     970:	2b ab       	std	Y+51, r18	; 0x33
     972:	3c ab       	std	Y+52, r19	; 0x34
     974:	62 c2       	rjmp	.+1220   	; 0xe3a <__stack+0x5db>
     976:	6e 14       	cp	r6, r14
     978:	7f 04       	cpc	r7, r15
     97a:	80 06       	cpc	r8, r16
     97c:	91 06       	cpc	r9, r17
     97e:	08 f4       	brcc	.+2      	; 0x982 <__stack+0x123>
     980:	51 c2       	rjmp	.+1186   	; 0xe24 <__stack+0x5c5>
     982:	20 e0       	ldi	r18, 0x00	; 0
     984:	e2 16       	cp	r14, r18
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	f2 06       	cpc	r15, r18
     98a:	21 e0       	ldi	r18, 0x01	; 1
     98c:	02 07       	cpc	r16, r18
     98e:	20 e0       	ldi	r18, 0x00	; 0
     990:	12 07       	cpc	r17, r18
     992:	88 f4       	brcc	.+34     	; 0x9b6 <__stack+0x157>
     994:	3f ef       	ldi	r19, 0xFF	; 255
     996:	e3 16       	cp	r14, r19
     998:	f1 04       	cpc	r15, r1
     99a:	01 05       	cpc	r16, r1
     99c:	11 05       	cpc	r17, r1
     99e:	31 f0       	breq	.+12     	; 0x9ac <__stack+0x14d>
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <__stack+0x14d>
     9a2:	48 e0       	ldi	r20, 0x08	; 8
     9a4:	50 e0       	ldi	r21, 0x00	; 0
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	70 e0       	ldi	r23, 0x00	; 0
     9aa:	17 c0       	rjmp	.+46     	; 0x9da <__stack+0x17b>
     9ac:	40 e0       	ldi	r20, 0x00	; 0
     9ae:	50 e0       	ldi	r21, 0x00	; 0
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	12 c0       	rjmp	.+36     	; 0x9da <__stack+0x17b>
     9b6:	40 e0       	ldi	r20, 0x00	; 0
     9b8:	e4 16       	cp	r14, r20
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	f4 06       	cpc	r15, r20
     9be:	40 e0       	ldi	r20, 0x00	; 0
     9c0:	04 07       	cpc	r16, r20
     9c2:	41 e0       	ldi	r20, 0x01	; 1
     9c4:	14 07       	cpc	r17, r20
     9c6:	28 f0       	brcs	.+10     	; 0x9d2 <__stack+0x173>
     9c8:	48 e1       	ldi	r20, 0x18	; 24
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	60 e0       	ldi	r22, 0x00	; 0
     9ce:	70 e0       	ldi	r23, 0x00	; 0
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__stack+0x17b>
     9d2:	40 e1       	ldi	r20, 0x10	; 16
     9d4:	50 e0       	ldi	r21, 0x00	; 0
     9d6:	60 e0       	ldi	r22, 0x00	; 0
     9d8:	70 e0       	ldi	r23, 0x00	; 0
     9da:	d8 01       	movw	r26, r16
     9dc:	c7 01       	movw	r24, r14
     9de:	04 2e       	mov	r0, r20
     9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__stack+0x18b>
     9e2:	b6 95       	lsr	r27
     9e4:	a7 95       	ror	r26
     9e6:	97 95       	ror	r25
     9e8:	87 95       	ror	r24
     9ea:	0a 94       	dec	r0
     9ec:	d2 f7       	brpl	.-12     	; 0x9e2 <__stack+0x183>
     9ee:	88 56       	subi	r24, 0x68	; 104
     9f0:	9f 4f       	sbci	r25, 0xFF	; 255
     9f2:	dc 01       	movw	r26, r24
     9f4:	2c 91       	ld	r18, X
     9f6:	30 e2       	ldi	r19, 0x20	; 32
     9f8:	a3 2e       	mov	r10, r19
     9fa:	b1 2c       	mov	r11, r1
     9fc:	c1 2c       	mov	r12, r1
     9fe:	d1 2c       	mov	r13, r1
     a00:	d6 01       	movw	r26, r12
     a02:	c5 01       	movw	r24, r10
     a04:	84 1b       	sub	r24, r20
     a06:	95 0b       	sbc	r25, r21
     a08:	a6 0b       	sbc	r26, r22
     a0a:	b7 0b       	sbc	r27, r23
     a0c:	82 1b       	sub	r24, r18
     a0e:	91 09       	sbc	r25, r1
     a10:	a1 09       	sbc	r26, r1
     a12:	b1 09       	sbc	r27, r1
     a14:	00 97       	sbiw	r24, 0x00	; 0
     a16:	a1 05       	cpc	r26, r1
     a18:	b1 05       	cpc	r27, r1
     a1a:	89 f4       	brne	.+34     	; 0xa3e <__stack+0x1df>
     a1c:	e6 14       	cp	r14, r6
     a1e:	f7 04       	cpc	r15, r7
     a20:	08 05       	cpc	r16, r8
     a22:	19 05       	cpc	r17, r9
     a24:	08 f4       	brcc	.+2      	; 0xa28 <__stack+0x1c9>
     a26:	f2 c1       	rjmp	.+996    	; 0xe0c <__stack+0x5ad>
     a28:	6d a4       	ldd	r6, Y+45	; 0x2d
     a2a:	7e a4       	ldd	r7, Y+46	; 0x2e
     a2c:	8f a4       	ldd	r8, Y+47	; 0x2f
     a2e:	98 a8       	ldd	r9, Y+48	; 0x30
     a30:	62 14       	cp	r6, r2
     a32:	73 04       	cpc	r7, r3
     a34:	84 04       	cpc	r8, r4
     a36:	95 04       	cpc	r9, r5
     a38:	08 f0       	brcs	.+2      	; 0xa3c <__stack+0x1dd>
     a3a:	e8 c1       	rjmp	.+976    	; 0xe0c <__stack+0x5ad>
     a3c:	f3 c1       	rjmp	.+998    	; 0xe24 <__stack+0x5c5>
     a3e:	6e 96       	adiw	r28, 0x1e	; 30
     a40:	8f af       	std	Y+63, r24	; 0x3f
     a42:	6e 97       	sbiw	r28, 0x1e	; 30
     a44:	08 2e       	mov	r0, r24
     a46:	04 c0       	rjmp	.+8      	; 0xa50 <__stack+0x1f1>
     a48:	ee 0c       	add	r14, r14
     a4a:	ff 1c       	adc	r15, r15
     a4c:	00 1f       	adc	r16, r16
     a4e:	11 1f       	adc	r17, r17
     a50:	0a 94       	dec	r0
     a52:	d2 f7       	brpl	.-12     	; 0xa48 <__stack+0x1e9>
     a54:	6a 2d       	mov	r22, r10
     a56:	68 1b       	sub	r22, r24
     a58:	d2 01       	movw	r26, r4
     a5a:	c1 01       	movw	r24, r2
     a5c:	06 2e       	mov	r0, r22
     a5e:	04 c0       	rjmp	.+8      	; 0xa68 <__stack+0x209>
     a60:	b6 95       	lsr	r27
     a62:	a7 95       	ror	r26
     a64:	97 95       	ror	r25
     a66:	87 95       	ror	r24
     a68:	0a 94       	dec	r0
     a6a:	d2 f7       	brpl	.-12     	; 0xa60 <__stack+0x201>
     a6c:	5c 01       	movw	r10, r24
     a6e:	6d 01       	movw	r12, r26
     a70:	ae 28       	or	r10, r14
     a72:	bf 28       	or	r11, r15
     a74:	c0 2a       	or	r12, r16
     a76:	d1 2a       	or	r13, r17
     a78:	ad a2       	std	Y+37, r10	; 0x25
     a7a:	be a2       	std	Y+38, r11	; 0x26
     a7c:	cf a2       	std	Y+39, r12	; 0x27
     a7e:	d8 a6       	std	Y+40, r13	; 0x28
     a80:	72 01       	movw	r14, r4
     a82:	61 01       	movw	r12, r2
     a84:	6e 96       	adiw	r28, 0x1e	; 30
     a86:	0f ac       	ldd	r0, Y+63	; 0x3f
     a88:	6e 97       	sbiw	r28, 0x1e	; 30
     a8a:	04 c0       	rjmp	.+8      	; 0xa94 <__stack+0x235>
     a8c:	cc 0c       	add	r12, r12
     a8e:	dd 1c       	adc	r13, r13
     a90:	ee 1c       	adc	r14, r14
     a92:	ff 1c       	adc	r15, r15
     a94:	0a 94       	dec	r0
     a96:	d2 f7       	brpl	.-12     	; 0xa8c <__stack+0x22d>
     a98:	c9 a2       	std	Y+33, r12	; 0x21
     a9a:	da a2       	std	Y+34, r13	; 0x22
     a9c:	eb a2       	std	Y+35, r14	; 0x23
     a9e:	fc a2       	std	Y+36, r15	; 0x24
     aa0:	64 01       	movw	r12, r8
     aa2:	53 01       	movw	r10, r6
     aa4:	06 2e       	mov	r0, r22
     aa6:	04 c0       	rjmp	.+8      	; 0xab0 <__stack+0x251>
     aa8:	d6 94       	lsr	r13
     aaa:	c7 94       	ror	r12
     aac:	b7 94       	ror	r11
     aae:	a7 94       	ror	r10
     ab0:	0a 94       	dec	r0
     ab2:	d2 f7       	brpl	.-12     	; 0xaa8 <__stack+0x249>
     ab4:	d4 01       	movw	r26, r8
     ab6:	c3 01       	movw	r24, r6
     ab8:	6e 96       	adiw	r28, 0x1e	; 30
     aba:	0f ac       	ldd	r0, Y+63	; 0x3f
     abc:	6e 97       	sbiw	r28, 0x1e	; 30
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__stack+0x269>
     ac0:	88 0f       	add	r24, r24
     ac2:	99 1f       	adc	r25, r25
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	0a 94       	dec	r0
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__stack+0x261>
     acc:	ed a4       	ldd	r14, Y+45	; 0x2d
     ace:	fe a4       	ldd	r15, Y+46	; 0x2e
     ad0:	0f a5       	ldd	r16, Y+47	; 0x2f
     ad2:	18 a9       	ldd	r17, Y+48	; 0x30
     ad4:	04 c0       	rjmp	.+8      	; 0xade <__stack+0x27f>
     ad6:	16 95       	lsr	r17
     ad8:	07 95       	ror	r16
     ada:	f7 94       	ror	r15
     adc:	e7 94       	ror	r14
     ade:	6a 95       	dec	r22
     ae0:	d2 f7       	brpl	.-12     	; 0xad6 <__stack+0x277>
     ae2:	37 01       	movw	r6, r14
     ae4:	48 01       	movw	r8, r16
     ae6:	68 2a       	or	r6, r24
     ae8:	79 2a       	or	r7, r25
     aea:	8a 2a       	or	r8, r26
     aec:	9b 2a       	or	r9, r27
     aee:	6d 8e       	std	Y+29, r6	; 0x1d
     af0:	7e 8e       	std	Y+30, r7	; 0x1e
     af2:	8f 8e       	std	Y+31, r8	; 0x1f
     af4:	98 a2       	std	Y+32, r9	; 0x20
     af6:	ed a0       	ldd	r14, Y+37	; 0x25
     af8:	fe a0       	ldd	r15, Y+38	; 0x26
     afa:	0f a1       	ldd	r16, Y+39	; 0x27
     afc:	18 a5       	ldd	r17, Y+40	; 0x28
     afe:	38 01       	movw	r6, r16
     b00:	88 24       	eor	r8, r8
     b02:	99 24       	eor	r9, r9
     b04:	98 01       	movw	r18, r16
     b06:	87 01       	movw	r16, r14
     b08:	20 70       	andi	r18, 0x00	; 0
     b0a:	30 70       	andi	r19, 0x00	; 0
     b0c:	65 96       	adiw	r28, 0x15	; 21
     b0e:	0c af       	std	Y+60, r16	; 0x3c
     b10:	1d af       	std	Y+61, r17	; 0x3d
     b12:	2e af       	std	Y+62, r18	; 0x3e
     b14:	3f af       	std	Y+63, r19	; 0x3f
     b16:	65 97       	sbiw	r28, 0x15	; 21
     b18:	c6 01       	movw	r24, r12
     b1a:	b5 01       	movw	r22, r10
     b1c:	a4 01       	movw	r20, r8
     b1e:	93 01       	movw	r18, r6
     b20:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     b24:	7b 01       	movw	r14, r22
     b26:	8c 01       	movw	r16, r24
     b28:	c6 01       	movw	r24, r12
     b2a:	b5 01       	movw	r22, r10
     b2c:	a4 01       	movw	r20, r8
     b2e:	93 01       	movw	r18, r6
     b30:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     b34:	c9 01       	movw	r24, r18
     b36:	da 01       	movw	r26, r20
     b38:	1c 01       	movw	r2, r24
     b3a:	2d 01       	movw	r4, r26
     b3c:	c2 01       	movw	r24, r4
     b3e:	b1 01       	movw	r22, r2
     b40:	65 96       	adiw	r28, 0x15	; 21
     b42:	2c ad       	ldd	r18, Y+60	; 0x3c
     b44:	3d ad       	ldd	r19, Y+61	; 0x3d
     b46:	4e ad       	ldd	r20, Y+62	; 0x3e
     b48:	5f ad       	ldd	r21, Y+63	; 0x3f
     b4a:	65 97       	sbiw	r28, 0x15	; 21
     b4c:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     b50:	9b 01       	movw	r18, r22
     b52:	ac 01       	movw	r20, r24
     b54:	87 01       	movw	r16, r14
     b56:	ff 24       	eor	r15, r15
     b58:	ee 24       	eor	r14, r14
     b5a:	ad 8c       	ldd	r10, Y+29	; 0x1d
     b5c:	be 8c       	ldd	r11, Y+30	; 0x1e
     b5e:	cf 8c       	ldd	r12, Y+31	; 0x1f
     b60:	d8 a0       	ldd	r13, Y+32	; 0x20
     b62:	c6 01       	movw	r24, r12
     b64:	aa 27       	eor	r26, r26
     b66:	bb 27       	eor	r27, r27
     b68:	57 01       	movw	r10, r14
     b6a:	68 01       	movw	r12, r16
     b6c:	a8 2a       	or	r10, r24
     b6e:	b9 2a       	or	r11, r25
     b70:	ca 2a       	or	r12, r26
     b72:	db 2a       	or	r13, r27
     b74:	a2 16       	cp	r10, r18
     b76:	b3 06       	cpc	r11, r19
     b78:	c4 06       	cpc	r12, r20
     b7a:	d5 06       	cpc	r13, r21
     b7c:	00 f5       	brcc	.+64     	; 0xbbe <__stack+0x35f>
     b7e:	08 94       	sec
     b80:	21 08       	sbc	r2, r1
     b82:	31 08       	sbc	r3, r1
     b84:	41 08       	sbc	r4, r1
     b86:	51 08       	sbc	r5, r1
     b88:	ed a0       	ldd	r14, Y+37	; 0x25
     b8a:	fe a0       	ldd	r15, Y+38	; 0x26
     b8c:	0f a1       	ldd	r16, Y+39	; 0x27
     b8e:	18 a5       	ldd	r17, Y+40	; 0x28
     b90:	ae 0c       	add	r10, r14
     b92:	bf 1c       	adc	r11, r15
     b94:	c0 1e       	adc	r12, r16
     b96:	d1 1e       	adc	r13, r17
     b98:	ae 14       	cp	r10, r14
     b9a:	bf 04       	cpc	r11, r15
     b9c:	c0 06       	cpc	r12, r16
     b9e:	d1 06       	cpc	r13, r17
     ba0:	70 f0       	brcs	.+28     	; 0xbbe <__stack+0x35f>
     ba2:	a2 16       	cp	r10, r18
     ba4:	b3 06       	cpc	r11, r19
     ba6:	c4 06       	cpc	r12, r20
     ba8:	d5 06       	cpc	r13, r21
     baa:	48 f4       	brcc	.+18     	; 0xbbe <__stack+0x35f>
     bac:	08 94       	sec
     bae:	21 08       	sbc	r2, r1
     bb0:	31 08       	sbc	r3, r1
     bb2:	41 08       	sbc	r4, r1
     bb4:	51 08       	sbc	r5, r1
     bb6:	ae 0c       	add	r10, r14
     bb8:	bf 1c       	adc	r11, r15
     bba:	c0 1e       	adc	r12, r16
     bbc:	d1 1e       	adc	r13, r17
     bbe:	a2 1a       	sub	r10, r18
     bc0:	b3 0a       	sbc	r11, r19
     bc2:	c4 0a       	sbc	r12, r20
     bc4:	d5 0a       	sbc	r13, r21
     bc6:	c6 01       	movw	r24, r12
     bc8:	b5 01       	movw	r22, r10
     bca:	a4 01       	movw	r20, r8
     bcc:	93 01       	movw	r18, r6
     bce:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     bd2:	7b 01       	movw	r14, r22
     bd4:	8c 01       	movw	r16, r24
     bd6:	c6 01       	movw	r24, r12
     bd8:	b5 01       	movw	r22, r10
     bda:	a4 01       	movw	r20, r8
     bdc:	93 01       	movw	r18, r6
     bde:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
     be2:	c9 01       	movw	r24, r18
     be4:	da 01       	movw	r26, r20
     be6:	3c 01       	movw	r6, r24
     be8:	4d 01       	movw	r8, r26
     bea:	c4 01       	movw	r24, r8
     bec:	b3 01       	movw	r22, r6
     bee:	65 96       	adiw	r28, 0x15	; 21
     bf0:	2c ad       	ldd	r18, Y+60	; 0x3c
     bf2:	3d ad       	ldd	r19, Y+61	; 0x3d
     bf4:	4e ad       	ldd	r20, Y+62	; 0x3e
     bf6:	5f ad       	ldd	r21, Y+63	; 0x3f
     bf8:	65 97       	sbiw	r28, 0x15	; 21
     bfa:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     bfe:	9b 01       	movw	r18, r22
     c00:	ac 01       	movw	r20, r24
     c02:	87 01       	movw	r16, r14
     c04:	ff 24       	eor	r15, r15
     c06:	ee 24       	eor	r14, r14
     c08:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c0a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c0c:	af 8d       	ldd	r26, Y+31	; 0x1f
     c0e:	b8 a1       	ldd	r27, Y+32	; 0x20
     c10:	a0 70       	andi	r26, 0x00	; 0
     c12:	b0 70       	andi	r27, 0x00	; 0
     c14:	57 01       	movw	r10, r14
     c16:	68 01       	movw	r12, r16
     c18:	a8 2a       	or	r10, r24
     c1a:	b9 2a       	or	r11, r25
     c1c:	ca 2a       	or	r12, r26
     c1e:	db 2a       	or	r13, r27
     c20:	a2 16       	cp	r10, r18
     c22:	b3 06       	cpc	r11, r19
     c24:	c4 06       	cpc	r12, r20
     c26:	d5 06       	cpc	r13, r21
     c28:	00 f5       	brcc	.+64     	; 0xc6a <__stack+0x40b>
     c2a:	08 94       	sec
     c2c:	61 08       	sbc	r6, r1
     c2e:	71 08       	sbc	r7, r1
     c30:	81 08       	sbc	r8, r1
     c32:	91 08       	sbc	r9, r1
     c34:	6d a1       	ldd	r22, Y+37	; 0x25
     c36:	7e a1       	ldd	r23, Y+38	; 0x26
     c38:	8f a1       	ldd	r24, Y+39	; 0x27
     c3a:	98 a5       	ldd	r25, Y+40	; 0x28
     c3c:	a6 0e       	add	r10, r22
     c3e:	b7 1e       	adc	r11, r23
     c40:	c8 1e       	adc	r12, r24
     c42:	d9 1e       	adc	r13, r25
     c44:	a6 16       	cp	r10, r22
     c46:	b7 06       	cpc	r11, r23
     c48:	c8 06       	cpc	r12, r24
     c4a:	d9 06       	cpc	r13, r25
     c4c:	70 f0       	brcs	.+28     	; 0xc6a <__stack+0x40b>
     c4e:	a2 16       	cp	r10, r18
     c50:	b3 06       	cpc	r11, r19
     c52:	c4 06       	cpc	r12, r20
     c54:	d5 06       	cpc	r13, r21
     c56:	48 f4       	brcc	.+18     	; 0xc6a <__stack+0x40b>
     c58:	08 94       	sec
     c5a:	61 08       	sbc	r6, r1
     c5c:	71 08       	sbc	r7, r1
     c5e:	81 08       	sbc	r8, r1
     c60:	91 08       	sbc	r9, r1
     c62:	a6 0e       	add	r10, r22
     c64:	b7 1e       	adc	r11, r23
     c66:	c8 1e       	adc	r12, r24
     c68:	d9 1e       	adc	r13, r25
     c6a:	d6 01       	movw	r26, r12
     c6c:	c5 01       	movw	r24, r10
     c6e:	82 1b       	sub	r24, r18
     c70:	93 0b       	sbc	r25, r19
     c72:	a4 0b       	sbc	r26, r20
     c74:	b5 0b       	sbc	r27, r21
     c76:	89 8f       	std	Y+25, r24	; 0x19
     c78:	9a 8f       	std	Y+26, r25	; 0x1a
     c7a:	ab 8f       	std	Y+27, r26	; 0x1b
     c7c:	bc 8f       	std	Y+28, r27	; 0x1c
     c7e:	d1 01       	movw	r26, r2
     c80:	99 27       	eor	r25, r25
     c82:	88 27       	eor	r24, r24
     c84:	64 01       	movw	r12, r8
     c86:	53 01       	movw	r10, r6
     c88:	a8 2a       	or	r10, r24
     c8a:	b9 2a       	or	r11, r25
     c8c:	ca 2a       	or	r12, r26
     c8e:	db 2a       	or	r13, r27
     c90:	a9 aa       	std	Y+49, r10	; 0x31
     c92:	ba aa       	std	Y+50, r11	; 0x32
     c94:	cb aa       	std	Y+51, r12	; 0x33
     c96:	dc aa       	std	Y+52, r13	; 0x34
     c98:	86 01       	movw	r16, r12
     c9a:	75 01       	movw	r14, r10
     c9c:	2f ef       	ldi	r18, 0xFF	; 255
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
     ca0:	40 e0       	ldi	r20, 0x00	; 0
     ca2:	50 e0       	ldi	r21, 0x00	; 0
     ca4:	e2 22       	and	r14, r18
     ca6:	f3 22       	and	r15, r19
     ca8:	04 23       	and	r16, r20
     caa:	15 23       	and	r17, r21
     cac:	a6 01       	movw	r20, r12
     cae:	66 27       	eor	r22, r22
     cb0:	77 27       	eor	r23, r23
     cb2:	6d 96       	adiw	r28, 0x1d	; 29
     cb4:	4c af       	std	Y+60, r20	; 0x3c
     cb6:	5d af       	std	Y+61, r21	; 0x3d
     cb8:	6e af       	std	Y+62, r22	; 0x3e
     cba:	7f af       	std	Y+63, r23	; 0x3f
     cbc:	6d 97       	sbiw	r28, 0x1d	; 29
     cbe:	a9 a0       	ldd	r10, Y+33	; 0x21
     cc0:	ba a0       	ldd	r11, Y+34	; 0x22
     cc2:	cb a0       	ldd	r12, Y+35	; 0x23
     cc4:	dc a0       	ldd	r13, Y+36	; 0x24
     cc6:	6f ef       	ldi	r22, 0xFF	; 255
     cc8:	7f ef       	ldi	r23, 0xFF	; 255
     cca:	80 e0       	ldi	r24, 0x00	; 0
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	a6 22       	and	r10, r22
     cd0:	b7 22       	and	r11, r23
     cd2:	c8 22       	and	r12, r24
     cd4:	d9 22       	and	r13, r25
     cd6:	89 a1       	ldd	r24, Y+33	; 0x21
     cd8:	9a a1       	ldd	r25, Y+34	; 0x22
     cda:	ab a1       	ldd	r26, Y+35	; 0x23
     cdc:	bc a1       	ldd	r27, Y+36	; 0x24
     cde:	1d 01       	movw	r2, r26
     ce0:	44 24       	eor	r4, r4
     ce2:	55 24       	eor	r5, r5
     ce4:	c8 01       	movw	r24, r16
     ce6:	b7 01       	movw	r22, r14
     ce8:	a6 01       	movw	r20, r12
     cea:	95 01       	movw	r18, r10
     cec:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     cf0:	69 96       	adiw	r28, 0x19	; 25
     cf2:	6c af       	std	Y+60, r22	; 0x3c
     cf4:	7d af       	std	Y+61, r23	; 0x3d
     cf6:	8e af       	std	Y+62, r24	; 0x3e
     cf8:	9f af       	std	Y+63, r25	; 0x3f
     cfa:	69 97       	sbiw	r28, 0x19	; 25
     cfc:	c8 01       	movw	r24, r16
     cfe:	b7 01       	movw	r22, r14
     d00:	a2 01       	movw	r20, r4
     d02:	91 01       	movw	r18, r2
     d04:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     d08:	3b 01       	movw	r6, r22
     d0a:	4c 01       	movw	r8, r24
     d0c:	6d 96       	adiw	r28, 0x1d	; 29
     d0e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d10:	7d ad       	ldd	r23, Y+61	; 0x3d
     d12:	8e ad       	ldd	r24, Y+62	; 0x3e
     d14:	9f ad       	ldd	r25, Y+63	; 0x3f
     d16:	6d 97       	sbiw	r28, 0x1d	; 29
     d18:	a6 01       	movw	r20, r12
     d1a:	95 01       	movw	r18, r10
     d1c:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     d20:	7b 01       	movw	r14, r22
     d22:	8c 01       	movw	r16, r24
     d24:	6d 96       	adiw	r28, 0x1d	; 29
     d26:	6c ad       	ldd	r22, Y+60	; 0x3c
     d28:	7d ad       	ldd	r23, Y+61	; 0x3d
     d2a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d2c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d2e:	6d 97       	sbiw	r28, 0x1d	; 29
     d30:	a2 01       	movw	r20, r4
     d32:	91 01       	movw	r18, r2
     d34:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
     d38:	5b 01       	movw	r10, r22
     d3a:	6c 01       	movw	r12, r24
     d3c:	a8 01       	movw	r20, r16
     d3e:	97 01       	movw	r18, r14
     d40:	26 0d       	add	r18, r6
     d42:	37 1d       	adc	r19, r7
     d44:	48 1d       	adc	r20, r8
     d46:	59 1d       	adc	r21, r9
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c ac       	ldd	r6, Y+60	; 0x3c
     d4c:	7d ac       	ldd	r7, Y+61	; 0x3d
     d4e:	8e ac       	ldd	r8, Y+62	; 0x3e
     d50:	9f ac       	ldd	r9, Y+63	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c4 01       	movw	r24, r8
     d56:	aa 27       	eor	r26, r26
     d58:	bb 27       	eor	r27, r27
     d5a:	28 0f       	add	r18, r24
     d5c:	39 1f       	adc	r19, r25
     d5e:	4a 1f       	adc	r20, r26
     d60:	5b 1f       	adc	r21, r27
     d62:	2e 15       	cp	r18, r14
     d64:	3f 05       	cpc	r19, r15
     d66:	40 07       	cpc	r20, r16
     d68:	51 07       	cpc	r21, r17
     d6a:	48 f4       	brcc	.+18     	; 0xd7e <__stack+0x51f>
     d6c:	e1 2c       	mov	r14, r1
     d6e:	f1 2c       	mov	r15, r1
     d70:	61 e0       	ldi	r22, 0x01	; 1
     d72:	06 2f       	mov	r16, r22
     d74:	11 2d       	mov	r17, r1
     d76:	ae 0c       	add	r10, r14
     d78:	bf 1c       	adc	r11, r15
     d7a:	c0 1e       	adc	r12, r16
     d7c:	d1 1e       	adc	r13, r17
     d7e:	ca 01       	movw	r24, r20
     d80:	aa 27       	eor	r26, r26
     d82:	bb 27       	eor	r27, r27
     d84:	bc 01       	movw	r22, r24
     d86:	cd 01       	movw	r24, r26
     d88:	6a 0d       	add	r22, r10
     d8a:	7b 1d       	adc	r23, r11
     d8c:	8c 1d       	adc	r24, r12
     d8e:	9d 1d       	adc	r25, r13
     d90:	69 8c       	ldd	r6, Y+25	; 0x19
     d92:	7a 8c       	ldd	r7, Y+26	; 0x1a
     d94:	8b 8c       	ldd	r8, Y+27	; 0x1b
     d96:	9c 8c       	ldd	r9, Y+28	; 0x1c
     d98:	66 16       	cp	r6, r22
     d9a:	77 06       	cpc	r7, r23
     d9c:	88 06       	cpc	r8, r24
     d9e:	99 06       	cpc	r9, r25
     da0:	40 f1       	brcs	.+80     	; 0xdf2 <__stack+0x593>
     da2:	66 15       	cp	r22, r6
     da4:	77 05       	cpc	r23, r7
     da6:	88 05       	cpc	r24, r8
     da8:	99 05       	cpc	r25, r9
     daa:	09 f0       	breq	.+2      	; 0xdae <__stack+0x54f>
     dac:	43 c0       	rjmp	.+134    	; 0xe34 <__stack+0x5d5>
     dae:	d9 01       	movw	r26, r18
     db0:	99 27       	eor	r25, r25
     db2:	88 27       	eor	r24, r24
     db4:	69 96       	adiw	r28, 0x19	; 25
     db6:	2c ad       	ldd	r18, Y+60	; 0x3c
     db8:	3d ad       	ldd	r19, Y+61	; 0x3d
     dba:	4e ad       	ldd	r20, Y+62	; 0x3e
     dbc:	5f ad       	ldd	r21, Y+63	; 0x3f
     dbe:	69 97       	sbiw	r28, 0x19	; 25
     dc0:	40 70       	andi	r20, 0x00	; 0
     dc2:	50 70       	andi	r21, 0x00	; 0
     dc4:	82 0f       	add	r24, r18
     dc6:	93 1f       	adc	r25, r19
     dc8:	a4 1f       	adc	r26, r20
     dca:	b5 1f       	adc	r27, r21
     dcc:	2d a5       	ldd	r18, Y+45	; 0x2d
     dce:	3e a5       	ldd	r19, Y+46	; 0x2e
     dd0:	4f a5       	ldd	r20, Y+47	; 0x2f
     dd2:	58 a9       	ldd	r21, Y+48	; 0x30
     dd4:	6e 96       	adiw	r28, 0x1e	; 30
     dd6:	0f ac       	ldd	r0, Y+63	; 0x3f
     dd8:	6e 97       	sbiw	r28, 0x1e	; 30
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__stack+0x585>
     ddc:	22 0f       	add	r18, r18
     dde:	33 1f       	adc	r19, r19
     de0:	44 1f       	adc	r20, r20
     de2:	55 1f       	adc	r21, r21
     de4:	0a 94       	dec	r0
     de6:	d2 f7       	brpl	.-12     	; 0xddc <__stack+0x57d>
     de8:	28 17       	cp	r18, r24
     dea:	39 07       	cpc	r19, r25
     dec:	4a 07       	cpc	r20, r26
     dee:	5b 07       	cpc	r21, r27
     df0:	08 f5       	brcc	.+66     	; 0xe34 <__stack+0x5d5>
     df2:	09 a9       	ldd	r16, Y+49	; 0x31
     df4:	1a a9       	ldd	r17, Y+50	; 0x32
     df6:	2b a9       	ldd	r18, Y+51	; 0x33
     df8:	3c a9       	ldd	r19, Y+52	; 0x34
     dfa:	01 50       	subi	r16, 0x01	; 1
     dfc:	10 40       	sbci	r17, 0x00	; 0
     dfe:	20 40       	sbci	r18, 0x00	; 0
     e00:	30 40       	sbci	r19, 0x00	; 0
     e02:	09 ab       	std	Y+49, r16	; 0x31
     e04:	1a ab       	std	Y+50, r17	; 0x32
     e06:	2b ab       	std	Y+51, r18	; 0x33
     e08:	3c ab       	std	Y+52, r19	; 0x34
     e0a:	14 c0       	rjmp	.+40     	; 0xe34 <__stack+0x5d5>
     e0c:	66 24       	eor	r6, r6
     e0e:	77 24       	eor	r7, r7
     e10:	43 01       	movw	r8, r6
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	50 e0       	ldi	r21, 0x00	; 0
     e1a:	29 ab       	std	Y+49, r18	; 0x31
     e1c:	3a ab       	std	Y+50, r19	; 0x32
     e1e:	4b ab       	std	Y+51, r20	; 0x33
     e20:	5c ab       	std	Y+52, r21	; 0x34
     e22:	0b c0       	rjmp	.+22     	; 0xe3a <__stack+0x5db>
     e24:	66 24       	eor	r6, r6
     e26:	77 24       	eor	r7, r7
     e28:	43 01       	movw	r8, r6
     e2a:	19 aa       	std	Y+49, r1	; 0x31
     e2c:	1a aa       	std	Y+50, r1	; 0x32
     e2e:	1b aa       	std	Y+51, r1	; 0x33
     e30:	1c aa       	std	Y+52, r1	; 0x34
     e32:	03 c0       	rjmp	.+6      	; 0xe3a <__stack+0x5db>
     e34:	66 24       	eor	r6, r6
     e36:	77 24       	eor	r7, r7
     e38:	43 01       	movw	r8, r6
     e3a:	fe 01       	movw	r30, r28
     e3c:	71 96       	adiw	r30, 0x11	; 17
     e3e:	88 e0       	ldi	r24, 0x08	; 8
     e40:	df 01       	movw	r26, r30
     e42:	1d 92       	st	X+, r1
     e44:	8a 95       	dec	r24
     e46:	e9 f7       	brne	.-6      	; 0xe42 <__stack+0x5e3>
     e48:	a9 a8       	ldd	r10, Y+49	; 0x31
     e4a:	ba a8       	ldd	r11, Y+50	; 0x32
     e4c:	cb a8       	ldd	r12, Y+51	; 0x33
     e4e:	dc a8       	ldd	r13, Y+52	; 0x34
     e50:	a9 8a       	std	Y+17, r10	; 0x11
     e52:	ba 8a       	std	Y+18, r11	; 0x12
     e54:	cb 8a       	std	Y+19, r12	; 0x13
     e56:	dc 8a       	std	Y+20, r13	; 0x14
     e58:	6d 8a       	std	Y+21, r6	; 0x15
     e5a:	7e 8a       	std	Y+22, r7	; 0x16
     e5c:	8f 8a       	std	Y+23, r8	; 0x17
     e5e:	98 8e       	std	Y+24, r9	; 0x18
     e60:	29 a9       	ldd	r18, Y+49	; 0x31
     e62:	3a 89       	ldd	r19, Y+18	; 0x12
     e64:	4b 89       	ldd	r20, Y+19	; 0x13
     e66:	5c 89       	ldd	r21, Y+20	; 0x14
     e68:	66 2d       	mov	r22, r6
     e6a:	7e 89       	ldd	r23, Y+22	; 0x16
     e6c:	8f 89       	ldd	r24, Y+23	; 0x17
     e6e:	98 8d       	ldd	r25, Y+24	; 0x18
     e70:	c2 5a       	subi	r28, 0xA2	; 162
     e72:	df 4f       	sbci	r29, 0xFF	; 255
     e74:	e2 e1       	ldi	r30, 0x12	; 18
     e76:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__>

00000e7a <__umoddi3>:
     e7a:	ab e5       	ldi	r26, 0x5B	; 91
     e7c:	b0 e0       	ldi	r27, 0x00	; 0
     e7e:	e3 e4       	ldi	r30, 0x43	; 67
     e80:	f7 e0       	ldi	r31, 0x07	; 7
     e82:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__>
     e86:	a8 e0       	ldi	r26, 0x08	; 8
     e88:	4e 01       	movw	r8, r28
     e8a:	08 94       	sec
     e8c:	81 1c       	adc	r8, r1
     e8e:	91 1c       	adc	r9, r1
     e90:	f4 01       	movw	r30, r8
     e92:	6a 2e       	mov	r6, r26
     e94:	11 92       	st	Z+, r1
     e96:	6a 94       	dec	r6
     e98:	e9 f7       	brne	.-6      	; 0xe94 <__umoddi3+0x1a>
     e9a:	29 83       	std	Y+1, r18	; 0x01
     e9c:	3a 83       	std	Y+2, r19	; 0x02
     e9e:	4b 83       	std	Y+3, r20	; 0x03
     ea0:	5c 83       	std	Y+4, r21	; 0x04
     ea2:	6d 83       	std	Y+5, r22	; 0x05
     ea4:	7e 83       	std	Y+6, r23	; 0x06
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	ce 01       	movw	r24, r28
     eac:	09 96       	adiw	r24, 0x09	; 9
     eae:	fc 01       	movw	r30, r24
     eb0:	11 92       	st	Z+, r1
     eb2:	aa 95       	dec	r26
     eb4:	e9 f7       	brne	.-6      	; 0xeb0 <__umoddi3+0x36>
     eb6:	a9 86       	std	Y+9, r10	; 0x09
     eb8:	ba 86       	std	Y+10, r11	; 0x0a
     eba:	cb 86       	std	Y+11, r12	; 0x0b
     ebc:	dc 86       	std	Y+12, r13	; 0x0c
     ebe:	ed 86       	std	Y+13, r14	; 0x0d
     ec0:	fe 86       	std	Y+14, r15	; 0x0e
     ec2:	0f 87       	std	Y+15, r16	; 0x0f
     ec4:	18 8b       	std	Y+16, r17	; 0x10
     ec6:	29 84       	ldd	r2, Y+9	; 0x09
     ec8:	3a 84       	ldd	r3, Y+10	; 0x0a
     eca:	4b 84       	ldd	r4, Y+11	; 0x0b
     ecc:	5c 84       	ldd	r5, Y+12	; 0x0c
     ece:	ad 84       	ldd	r10, Y+13	; 0x0d
     ed0:	be 84       	ldd	r11, Y+14	; 0x0e
     ed2:	cf 84       	ldd	r12, Y+15	; 0x0f
     ed4:	d8 88       	ldd	r13, Y+16	; 0x10
     ed6:	29 81       	ldd	r18, Y+1	; 0x01
     ed8:	3a 81       	ldd	r19, Y+2	; 0x02
     eda:	4b 81       	ldd	r20, Y+3	; 0x03
     edc:	5c 81       	ldd	r21, Y+4	; 0x04
     ede:	69 96       	adiw	r28, 0x19	; 25
     ee0:	2f af       	std	Y+63, r18	; 0x3f
     ee2:	69 97       	sbiw	r28, 0x19	; 25
     ee4:	6a 96       	adiw	r28, 0x1a	; 26
     ee6:	3f af       	std	Y+63, r19	; 0x3f
     ee8:	6a 97       	sbiw	r28, 0x1a	; 26
     eea:	6b 96       	adiw	r28, 0x1b	; 27
     eec:	4f af       	std	Y+63, r20	; 0x3f
     eee:	6b 97       	sbiw	r28, 0x1b	; 27
     ef0:	6c 96       	adiw	r28, 0x1c	; 28
     ef2:	5f af       	std	Y+63, r21	; 0x3f
     ef4:	6c 97       	sbiw	r28, 0x1c	; 28
     ef6:	6c 96       	adiw	r28, 0x1c	; 28
     ef8:	6c ac       	ldd	r6, Y+60	; 0x3c
     efa:	7d ac       	ldd	r7, Y+61	; 0x3d
     efc:	8e ac       	ldd	r8, Y+62	; 0x3e
     efe:	9f ac       	ldd	r9, Y+63	; 0x3f
     f00:	6c 97       	sbiw	r28, 0x1c	; 28
     f02:	69 aa       	std	Y+49, r6	; 0x31
     f04:	7a aa       	std	Y+50, r7	; 0x32
     f06:	8b aa       	std	Y+51, r8	; 0x33
     f08:	9c aa       	std	Y+52, r9	; 0x34
     f0a:	6d 81       	ldd	r22, Y+5	; 0x05
     f0c:	7e 81       	ldd	r23, Y+6	; 0x06
     f0e:	8f 81       	ldd	r24, Y+7	; 0x07
     f10:	98 85       	ldd	r25, Y+8	; 0x08
     f12:	3b 01       	movw	r6, r22
     f14:	4c 01       	movw	r8, r24
     f16:	6d aa       	std	Y+53, r6	; 0x35
     f18:	7e aa       	std	Y+54, r7	; 0x36
     f1a:	8f aa       	std	Y+55, r8	; 0x37
     f1c:	98 ae       	std	Y+56, r9	; 0x38
     f1e:	a1 14       	cp	r10, r1
     f20:	b1 04       	cpc	r11, r1
     f22:	c1 04       	cpc	r12, r1
     f24:	d1 04       	cpc	r13, r1
     f26:	09 f0       	breq	.+2      	; 0xf2a <__umoddi3+0xb0>
     f28:	04 c3       	rjmp	.+1544   	; 0x1532 <__umoddi3+0x6b8>
     f2a:	62 14       	cp	r6, r2
     f2c:	73 04       	cpc	r7, r3
     f2e:	84 04       	cpc	r8, r4
     f30:	95 04       	cpc	r9, r5
     f32:	08 f0       	brcs	.+2      	; 0xf36 <__umoddi3+0xbc>
     f34:	00 c1       	rjmp	.+512    	; 0x1136 <__umoddi3+0x2bc>
     f36:	00 e0       	ldi	r16, 0x00	; 0
     f38:	20 16       	cp	r2, r16
     f3a:	00 e0       	ldi	r16, 0x00	; 0
     f3c:	30 06       	cpc	r3, r16
     f3e:	01 e0       	ldi	r16, 0x01	; 1
     f40:	40 06       	cpc	r4, r16
     f42:	00 e0       	ldi	r16, 0x00	; 0
     f44:	50 06       	cpc	r5, r16
     f46:	88 f4       	brcc	.+34     	; 0xf6a <__umoddi3+0xf0>
     f48:	1f ef       	ldi	r17, 0xFF	; 255
     f4a:	21 16       	cp	r2, r17
     f4c:	31 04       	cpc	r3, r1
     f4e:	41 04       	cpc	r4, r1
     f50:	51 04       	cpc	r5, r1
     f52:	39 f0       	breq	.+14     	; 0xf62 <__umoddi3+0xe8>
     f54:	30 f0       	brcs	.+12     	; 0xf62 <__umoddi3+0xe8>
     f56:	88 e0       	ldi	r24, 0x08	; 8
     f58:	e8 2e       	mov	r14, r24
     f5a:	f1 2c       	mov	r15, r1
     f5c:	01 2d       	mov	r16, r1
     f5e:	11 2d       	mov	r17, r1
     f60:	18 c0       	rjmp	.+48     	; 0xf92 <__umoddi3+0x118>
     f62:	ee 24       	eor	r14, r14
     f64:	ff 24       	eor	r15, r15
     f66:	87 01       	movw	r16, r14
     f68:	14 c0       	rjmp	.+40     	; 0xf92 <__umoddi3+0x118>
     f6a:	40 e0       	ldi	r20, 0x00	; 0
     f6c:	24 16       	cp	r2, r20
     f6e:	40 e0       	ldi	r20, 0x00	; 0
     f70:	34 06       	cpc	r3, r20
     f72:	40 e0       	ldi	r20, 0x00	; 0
     f74:	44 06       	cpc	r4, r20
     f76:	41 e0       	ldi	r20, 0x01	; 1
     f78:	54 06       	cpc	r5, r20
     f7a:	30 f0       	brcs	.+12     	; 0xf88 <__umoddi3+0x10e>
     f7c:	b8 e1       	ldi	r27, 0x18	; 24
     f7e:	eb 2e       	mov	r14, r27
     f80:	f1 2c       	mov	r15, r1
     f82:	01 2d       	mov	r16, r1
     f84:	11 2d       	mov	r17, r1
     f86:	05 c0       	rjmp	.+10     	; 0xf92 <__umoddi3+0x118>
     f88:	a0 e1       	ldi	r26, 0x10	; 16
     f8a:	ea 2e       	mov	r14, r26
     f8c:	f1 2c       	mov	r15, r1
     f8e:	01 2d       	mov	r16, r1
     f90:	11 2d       	mov	r17, r1
     f92:	d2 01       	movw	r26, r4
     f94:	c1 01       	movw	r24, r2
     f96:	0e 2c       	mov	r0, r14
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__umoddi3+0x128>
     f9a:	b6 95       	lsr	r27
     f9c:	a7 95       	ror	r26
     f9e:	97 95       	ror	r25
     fa0:	87 95       	ror	r24
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <__umoddi3+0x120>
     fa6:	88 56       	subi	r24, 0x68	; 104
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	dc 01       	movw	r26, r24
     fac:	2c 91       	ld	r18, X
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	8e 19       	sub	r24, r14
     fb8:	9f 09       	sbc	r25, r15
     fba:	a0 0b       	sbc	r26, r16
     fbc:	b1 0b       	sbc	r27, r17
     fbe:	5c 01       	movw	r10, r24
     fc0:	6d 01       	movw	r12, r26
     fc2:	a2 1a       	sub	r10, r18
     fc4:	b1 08       	sbc	r11, r1
     fc6:	c1 08       	sbc	r12, r1
     fc8:	d1 08       	sbc	r13, r1
     fca:	a9 ae       	std	Y+57, r10	; 0x39
     fcc:	ba ae       	std	Y+58, r11	; 0x3a
     fce:	cb ae       	std	Y+59, r12	; 0x3b
     fd0:	dc ae       	std	Y+60, r13	; 0x3c
     fd2:	a1 14       	cp	r10, r1
     fd4:	b1 04       	cpc	r11, r1
     fd6:	c1 04       	cpc	r12, r1
     fd8:	d1 04       	cpc	r13, r1
     fda:	09 f4       	brne	.+2      	; 0xfde <__umoddi3+0x164>
     fdc:	3f c0       	rjmp	.+126    	; 0x105c <__umoddi3+0x1e2>
     fde:	69 ad       	ldd	r22, Y+57	; 0x39
     fe0:	06 2e       	mov	r0, r22
     fe2:	04 c0       	rjmp	.+8      	; 0xfec <__umoddi3+0x172>
     fe4:	22 0c       	add	r2, r2
     fe6:	33 1c       	adc	r3, r3
     fe8:	44 1c       	adc	r4, r4
     fea:	55 1c       	adc	r5, r5
     fec:	0a 94       	dec	r0
     fee:	d2 f7       	brpl	.-12     	; 0xfe4 <__umoddi3+0x16a>
     ff0:	a4 01       	movw	r20, r8
     ff2:	93 01       	movw	r18, r6
     ff4:	06 2e       	mov	r0, r22
     ff6:	04 c0       	rjmp	.+8      	; 0x1000 <__umoddi3+0x186>
     ff8:	22 0f       	add	r18, r18
     ffa:	33 1f       	adc	r19, r19
     ffc:	44 1f       	adc	r20, r20
     ffe:	55 1f       	adc	r21, r21
    1000:	0a 94       	dec	r0
    1002:	d2 f7       	brpl	.-12     	; 0xff8 <__umoddi3+0x17e>
    1004:	80 e2       	ldi	r24, 0x20	; 32
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	8a 19       	sub	r24, r10
    100a:	9b 09       	sbc	r25, r11
    100c:	6c 96       	adiw	r28, 0x1c	; 28
    100e:	cc ac       	ldd	r12, Y+60	; 0x3c
    1010:	dd ac       	ldd	r13, Y+61	; 0x3d
    1012:	ee ac       	ldd	r14, Y+62	; 0x3e
    1014:	ff ac       	ldd	r15, Y+63	; 0x3f
    1016:	6c 97       	sbiw	r28, 0x1c	; 28
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <__umoddi3+0x1a8>
    101a:	f6 94       	lsr	r15
    101c:	e7 94       	ror	r14
    101e:	d7 94       	ror	r13
    1020:	c7 94       	ror	r12
    1022:	8a 95       	dec	r24
    1024:	d2 f7       	brpl	.-12     	; 0x101a <__umoddi3+0x1a0>
    1026:	87 01       	movw	r16, r14
    1028:	76 01       	movw	r14, r12
    102a:	e2 2a       	or	r14, r18
    102c:	f3 2a       	or	r15, r19
    102e:	04 2b       	or	r16, r20
    1030:	15 2b       	or	r17, r21
    1032:	ed aa       	std	Y+53, r14	; 0x35
    1034:	fe aa       	std	Y+54, r15	; 0x36
    1036:	0f ab       	std	Y+55, r16	; 0x37
    1038:	18 af       	std	Y+56, r17	; 0x38
    103a:	6c 96       	adiw	r28, 0x1c	; 28
    103c:	8c ad       	ldd	r24, Y+60	; 0x3c
    103e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1040:	ae ad       	ldd	r26, Y+62	; 0x3e
    1042:	bf ad       	ldd	r27, Y+63	; 0x3f
    1044:	6c 97       	sbiw	r28, 0x1c	; 28
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <__umoddi3+0x1d6>
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	aa 1f       	adc	r26, r26
    104e:	bb 1f       	adc	r27, r27
    1050:	6a 95       	dec	r22
    1052:	d2 f7       	brpl	.-12     	; 0x1048 <__umoddi3+0x1ce>
    1054:	89 ab       	std	Y+49, r24	; 0x31
    1056:	9a ab       	std	Y+50, r25	; 0x32
    1058:	ab ab       	std	Y+51, r26	; 0x33
    105a:	bc ab       	std	Y+52, r27	; 0x34
    105c:	32 01       	movw	r6, r4
    105e:	88 24       	eor	r8, r8
    1060:	99 24       	eor	r9, r9
    1062:	b2 01       	movw	r22, r4
    1064:	a1 01       	movw	r20, r2
    1066:	60 70       	andi	r22, 0x00	; 0
    1068:	70 70       	andi	r23, 0x00	; 0
    106a:	21 96       	adiw	r28, 0x01	; 1
    106c:	4c af       	std	Y+60, r20	; 0x3c
    106e:	5d af       	std	Y+61, r21	; 0x3d
    1070:	6e af       	std	Y+62, r22	; 0x3e
    1072:	7f af       	std	Y+63, r23	; 0x3f
    1074:	21 97       	sbiw	r28, 0x01	; 1
    1076:	6d a9       	ldd	r22, Y+53	; 0x35
    1078:	7e a9       	ldd	r23, Y+54	; 0x36
    107a:	8f a9       	ldd	r24, Y+55	; 0x37
    107c:	98 ad       	ldd	r25, Y+56	; 0x38
    107e:	a4 01       	movw	r20, r8
    1080:	93 01       	movw	r18, r6
    1082:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1086:	7b 01       	movw	r14, r22
    1088:	8c 01       	movw	r16, r24
    108a:	6d a9       	ldd	r22, Y+53	; 0x35
    108c:	7e a9       	ldd	r23, Y+54	; 0x36
    108e:	8f a9       	ldd	r24, Y+55	; 0x37
    1090:	98 ad       	ldd	r25, Y+56	; 0x38
    1092:	a4 01       	movw	r20, r8
    1094:	93 01       	movw	r18, r6
    1096:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    109a:	ca 01       	movw	r24, r20
    109c:	b9 01       	movw	r22, r18
    109e:	21 96       	adiw	r28, 0x01	; 1
    10a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    10a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    10a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    10a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    10a8:	21 97       	sbiw	r28, 0x01	; 1
    10aa:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	87 01       	movw	r16, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	ee 24       	eor	r14, r14
    10b8:	a9 a8       	ldd	r10, Y+49	; 0x31
    10ba:	ba a8       	ldd	r11, Y+50	; 0x32
    10bc:	cb a8       	ldd	r12, Y+51	; 0x33
    10be:	dc a8       	ldd	r13, Y+52	; 0x34
    10c0:	c6 01       	movw	r24, r12
    10c2:	aa 27       	eor	r26, r26
    10c4:	bb 27       	eor	r27, r27
    10c6:	57 01       	movw	r10, r14
    10c8:	68 01       	movw	r12, r16
    10ca:	a8 2a       	or	r10, r24
    10cc:	b9 2a       	or	r11, r25
    10ce:	ca 2a       	or	r12, r26
    10d0:	db 2a       	or	r13, r27
    10d2:	a2 16       	cp	r10, r18
    10d4:	b3 06       	cpc	r11, r19
    10d6:	c4 06       	cpc	r12, r20
    10d8:	d5 06       	cpc	r13, r21
    10da:	90 f4       	brcc	.+36     	; 0x1100 <__umoddi3+0x286>
    10dc:	a2 0c       	add	r10, r2
    10de:	b3 1c       	adc	r11, r3
    10e0:	c4 1c       	adc	r12, r4
    10e2:	d5 1c       	adc	r13, r5
    10e4:	a2 14       	cp	r10, r2
    10e6:	b3 04       	cpc	r11, r3
    10e8:	c4 04       	cpc	r12, r4
    10ea:	d5 04       	cpc	r13, r5
    10ec:	48 f0       	brcs	.+18     	; 0x1100 <__umoddi3+0x286>
    10ee:	a2 16       	cp	r10, r18
    10f0:	b3 06       	cpc	r11, r19
    10f2:	c4 06       	cpc	r12, r20
    10f4:	d5 06       	cpc	r13, r21
    10f6:	20 f4       	brcc	.+8      	; 0x1100 <__umoddi3+0x286>
    10f8:	a2 0c       	add	r10, r2
    10fa:	b3 1c       	adc	r11, r3
    10fc:	c4 1c       	adc	r12, r4
    10fe:	d5 1c       	adc	r13, r5
    1100:	a2 1a       	sub	r10, r18
    1102:	b3 0a       	sbc	r11, r19
    1104:	c4 0a       	sbc	r12, r20
    1106:	d5 0a       	sbc	r13, r21
    1108:	c6 01       	movw	r24, r12
    110a:	b5 01       	movw	r22, r10
    110c:	a4 01       	movw	r20, r8
    110e:	93 01       	movw	r18, r6
    1110:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1114:	7b 01       	movw	r14, r22
    1116:	8c 01       	movw	r16, r24
    1118:	c6 01       	movw	r24, r12
    111a:	b5 01       	movw	r22, r10
    111c:	a4 01       	movw	r20, r8
    111e:	93 01       	movw	r18, r6
    1120:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1124:	ca 01       	movw	r24, r20
    1126:	b9 01       	movw	r22, r18
    1128:	21 96       	adiw	r28, 0x01	; 1
    112a:	2c ad       	ldd	r18, Y+60	; 0x3c
    112c:	3d ad       	ldd	r19, Y+61	; 0x3d
    112e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1130:	5f ad       	ldd	r21, Y+63	; 0x3f
    1132:	21 97       	sbiw	r28, 0x01	; 1
    1134:	ba c1       	rjmp	.+884    	; 0x14aa <__umoddi3+0x630>
    1136:	21 14       	cp	r2, r1
    1138:	31 04       	cpc	r3, r1
    113a:	41 04       	cpc	r4, r1
    113c:	51 04       	cpc	r5, r1
    113e:	71 f4       	brne	.+28     	; 0x115c <__umoddi3+0x2e2>
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	70 e0       	ldi	r23, 0x00	; 0
    1144:	80 e0       	ldi	r24, 0x00	; 0
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	20 e0       	ldi	r18, 0x00	; 0
    114a:	30 e0       	ldi	r19, 0x00	; 0
    114c:	40 e0       	ldi	r20, 0x00	; 0
    114e:	50 e0       	ldi	r21, 0x00	; 0
    1150:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1154:	c9 01       	movw	r24, r18
    1156:	da 01       	movw	r26, r20
    1158:	1c 01       	movw	r2, r24
    115a:	2d 01       	movw	r4, r26
    115c:	00 e0       	ldi	r16, 0x00	; 0
    115e:	20 16       	cp	r2, r16
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	30 06       	cpc	r3, r16
    1164:	01 e0       	ldi	r16, 0x01	; 1
    1166:	40 06       	cpc	r4, r16
    1168:	00 e0       	ldi	r16, 0x00	; 0
    116a:	50 06       	cpc	r5, r16
    116c:	88 f4       	brcc	.+34     	; 0x1190 <__umoddi3+0x316>
    116e:	1f ef       	ldi	r17, 0xFF	; 255
    1170:	21 16       	cp	r2, r17
    1172:	31 04       	cpc	r3, r1
    1174:	41 04       	cpc	r4, r1
    1176:	51 04       	cpc	r5, r1
    1178:	39 f0       	breq	.+14     	; 0x1188 <__umoddi3+0x30e>
    117a:	30 f0       	brcs	.+12     	; 0x1188 <__umoddi3+0x30e>
    117c:	68 e0       	ldi	r22, 0x08	; 8
    117e:	e6 2e       	mov	r14, r22
    1180:	f1 2c       	mov	r15, r1
    1182:	01 2d       	mov	r16, r1
    1184:	11 2d       	mov	r17, r1
    1186:	18 c0       	rjmp	.+48     	; 0x11b8 <__umoddi3+0x33e>
    1188:	ee 24       	eor	r14, r14
    118a:	ff 24       	eor	r15, r15
    118c:	87 01       	movw	r16, r14
    118e:	14 c0       	rjmp	.+40     	; 0x11b8 <__umoddi3+0x33e>
    1190:	40 e0       	ldi	r20, 0x00	; 0
    1192:	24 16       	cp	r2, r20
    1194:	40 e0       	ldi	r20, 0x00	; 0
    1196:	34 06       	cpc	r3, r20
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	44 06       	cpc	r4, r20
    119c:	41 e0       	ldi	r20, 0x01	; 1
    119e:	54 06       	cpc	r5, r20
    11a0:	30 f0       	brcs	.+12     	; 0x11ae <__umoddi3+0x334>
    11a2:	58 e1       	ldi	r21, 0x18	; 24
    11a4:	e5 2e       	mov	r14, r21
    11a6:	f1 2c       	mov	r15, r1
    11a8:	01 2d       	mov	r16, r1
    11aa:	11 2d       	mov	r17, r1
    11ac:	05 c0       	rjmp	.+10     	; 0x11b8 <__umoddi3+0x33e>
    11ae:	40 e1       	ldi	r20, 0x10	; 16
    11b0:	e4 2e       	mov	r14, r20
    11b2:	f1 2c       	mov	r15, r1
    11b4:	01 2d       	mov	r16, r1
    11b6:	11 2d       	mov	r17, r1
    11b8:	d2 01       	movw	r26, r4
    11ba:	c1 01       	movw	r24, r2
    11bc:	0e 2c       	mov	r0, r14
    11be:	04 c0       	rjmp	.+8      	; 0x11c8 <__umoddi3+0x34e>
    11c0:	b6 95       	lsr	r27
    11c2:	a7 95       	ror	r26
    11c4:	97 95       	ror	r25
    11c6:	87 95       	ror	r24
    11c8:	0a 94       	dec	r0
    11ca:	d2 f7       	brpl	.-12     	; 0x11c0 <__umoddi3+0x346>
    11cc:	88 56       	subi	r24, 0x68	; 104
    11ce:	9f 4f       	sbci	r25, 0xFF	; 255
    11d0:	dc 01       	movw	r26, r24
    11d2:	2c 91       	ld	r18, X
    11d4:	30 e2       	ldi	r19, 0x20	; 32
    11d6:	a3 2e       	mov	r10, r19
    11d8:	b1 2c       	mov	r11, r1
    11da:	c1 2c       	mov	r12, r1
    11dc:	d1 2c       	mov	r13, r1
    11de:	d6 01       	movw	r26, r12
    11e0:	c5 01       	movw	r24, r10
    11e2:	8e 19       	sub	r24, r14
    11e4:	9f 09       	sbc	r25, r15
    11e6:	a0 0b       	sbc	r26, r16
    11e8:	b1 0b       	sbc	r27, r17
    11ea:	7c 01       	movw	r14, r24
    11ec:	8d 01       	movw	r16, r26
    11ee:	e2 1a       	sub	r14, r18
    11f0:	f1 08       	sbc	r15, r1
    11f2:	01 09       	sbc	r16, r1
    11f4:	11 09       	sbc	r17, r1
    11f6:	e9 ae       	std	Y+57, r14	; 0x39
    11f8:	fa ae       	std	Y+58, r15	; 0x3a
    11fa:	0b af       	std	Y+59, r16	; 0x3b
    11fc:	1c af       	std	Y+60, r17	; 0x3c
    11fe:	e1 14       	cp	r14, r1
    1200:	f1 04       	cpc	r15, r1
    1202:	01 05       	cpc	r16, r1
    1204:	11 05       	cpc	r17, r1
    1206:	39 f4       	brne	.+14     	; 0x1216 <__umoddi3+0x39c>
    1208:	64 01       	movw	r12, r8
    120a:	53 01       	movw	r10, r6
    120c:	a2 18       	sub	r10, r2
    120e:	b3 08       	sbc	r11, r3
    1210:	c4 08       	sbc	r12, r4
    1212:	d5 08       	sbc	r13, r5
    1214:	e2 c0       	rjmp	.+452    	; 0x13da <__umoddi3+0x560>
    1216:	f9 ac       	ldd	r15, Y+57	; 0x39
    1218:	68 96       	adiw	r28, 0x18	; 24
    121a:	ff ae       	std	Y+63, r15	; 0x3f
    121c:	68 97       	sbiw	r28, 0x18	; 24
    121e:	0f 2c       	mov	r0, r15
    1220:	04 c0       	rjmp	.+8      	; 0x122a <__umoddi3+0x3b0>
    1222:	22 0c       	add	r2, r2
    1224:	33 1c       	adc	r3, r3
    1226:	44 1c       	adc	r4, r4
    1228:	55 1c       	adc	r5, r5
    122a:	0a 94       	dec	r0
    122c:	d2 f7       	brpl	.-12     	; 0x1222 <__umoddi3+0x3a8>
    122e:	8a 2d       	mov	r24, r10
    1230:	8f 19       	sub	r24, r15
    1232:	64 01       	movw	r12, r8
    1234:	53 01       	movw	r10, r6
    1236:	08 2e       	mov	r0, r24
    1238:	04 c0       	rjmp	.+8      	; 0x1242 <__umoddi3+0x3c8>
    123a:	d6 94       	lsr	r13
    123c:	c7 94       	ror	r12
    123e:	b7 94       	ror	r11
    1240:	a7 94       	ror	r10
    1242:	0a 94       	dec	r0
    1244:	d2 f7       	brpl	.-12     	; 0x123a <__umoddi3+0x3c0>
    1246:	a4 01       	movw	r20, r8
    1248:	93 01       	movw	r18, r6
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <__umoddi3+0x3da>
    124c:	22 0f       	add	r18, r18
    124e:	33 1f       	adc	r19, r19
    1250:	44 1f       	adc	r20, r20
    1252:	55 1f       	adc	r21, r21
    1254:	fa 94       	dec	r15
    1256:	d2 f7       	brpl	.-12     	; 0x124c <__umoddi3+0x3d2>
    1258:	6c 96       	adiw	r28, 0x1c	; 28
    125a:	6c ac       	ldd	r6, Y+60	; 0x3c
    125c:	7d ac       	ldd	r7, Y+61	; 0x3d
    125e:	8e ac       	ldd	r8, Y+62	; 0x3e
    1260:	9f ac       	ldd	r9, Y+63	; 0x3f
    1262:	6c 97       	sbiw	r28, 0x1c	; 28
    1264:	04 c0       	rjmp	.+8      	; 0x126e <__umoddi3+0x3f4>
    1266:	96 94       	lsr	r9
    1268:	87 94       	ror	r8
    126a:	77 94       	ror	r7
    126c:	67 94       	ror	r6
    126e:	8a 95       	dec	r24
    1270:	d2 f7       	brpl	.-12     	; 0x1266 <__umoddi3+0x3ec>
    1272:	84 01       	movw	r16, r8
    1274:	73 01       	movw	r14, r6
    1276:	e2 2a       	or	r14, r18
    1278:	f3 2a       	or	r15, r19
    127a:	04 2b       	or	r16, r20
    127c:	15 2b       	or	r17, r21
    127e:	ed a6       	std	Y+45, r14	; 0x2d
    1280:	fe a6       	std	Y+46, r15	; 0x2e
    1282:	0f a7       	std	Y+47, r16	; 0x2f
    1284:	18 ab       	std	Y+48, r17	; 0x30
    1286:	32 01       	movw	r6, r4
    1288:	88 24       	eor	r8, r8
    128a:	99 24       	eor	r9, r9
    128c:	b2 01       	movw	r22, r4
    128e:	a1 01       	movw	r20, r2
    1290:	60 70       	andi	r22, 0x00	; 0
    1292:	70 70       	andi	r23, 0x00	; 0
    1294:	25 96       	adiw	r28, 0x05	; 5
    1296:	4c af       	std	Y+60, r20	; 0x3c
    1298:	5d af       	std	Y+61, r21	; 0x3d
    129a:	6e af       	std	Y+62, r22	; 0x3e
    129c:	7f af       	std	Y+63, r23	; 0x3f
    129e:	25 97       	sbiw	r28, 0x05	; 5
    12a0:	c6 01       	movw	r24, r12
    12a2:	b5 01       	movw	r22, r10
    12a4:	a4 01       	movw	r20, r8
    12a6:	93 01       	movw	r18, r6
    12a8:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    12ac:	7b 01       	movw	r14, r22
    12ae:	8c 01       	movw	r16, r24
    12b0:	c6 01       	movw	r24, r12
    12b2:	b5 01       	movw	r22, r10
    12b4:	a4 01       	movw	r20, r8
    12b6:	93 01       	movw	r18, r6
    12b8:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    12bc:	ca 01       	movw	r24, r20
    12be:	b9 01       	movw	r22, r18
    12c0:	25 96       	adiw	r28, 0x05	; 5
    12c2:	2c ad       	ldd	r18, Y+60	; 0x3c
    12c4:	3d ad       	ldd	r19, Y+61	; 0x3d
    12c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    12c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    12ca:	25 97       	sbiw	r28, 0x05	; 5
    12cc:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    12d0:	9b 01       	movw	r18, r22
    12d2:	ac 01       	movw	r20, r24
    12d4:	87 01       	movw	r16, r14
    12d6:	ff 24       	eor	r15, r15
    12d8:	ee 24       	eor	r14, r14
    12da:	ad a4       	ldd	r10, Y+45	; 0x2d
    12dc:	be a4       	ldd	r11, Y+46	; 0x2e
    12de:	cf a4       	ldd	r12, Y+47	; 0x2f
    12e0:	d8 a8       	ldd	r13, Y+48	; 0x30
    12e2:	c6 01       	movw	r24, r12
    12e4:	aa 27       	eor	r26, r26
    12e6:	bb 27       	eor	r27, r27
    12e8:	5c 01       	movw	r10, r24
    12ea:	6d 01       	movw	r12, r26
    12ec:	ae 28       	or	r10, r14
    12ee:	bf 28       	or	r11, r15
    12f0:	c0 2a       	or	r12, r16
    12f2:	d1 2a       	or	r13, r17
    12f4:	a2 16       	cp	r10, r18
    12f6:	b3 06       	cpc	r11, r19
    12f8:	c4 06       	cpc	r12, r20
    12fa:	d5 06       	cpc	r13, r21
    12fc:	90 f4       	brcc	.+36     	; 0x1322 <__umoddi3+0x4a8>
    12fe:	a2 0c       	add	r10, r2
    1300:	b3 1c       	adc	r11, r3
    1302:	c4 1c       	adc	r12, r4
    1304:	d5 1c       	adc	r13, r5
    1306:	a2 14       	cp	r10, r2
    1308:	b3 04       	cpc	r11, r3
    130a:	c4 04       	cpc	r12, r4
    130c:	d5 04       	cpc	r13, r5
    130e:	48 f0       	brcs	.+18     	; 0x1322 <__umoddi3+0x4a8>
    1310:	a2 16       	cp	r10, r18
    1312:	b3 06       	cpc	r11, r19
    1314:	c4 06       	cpc	r12, r20
    1316:	d5 06       	cpc	r13, r21
    1318:	20 f4       	brcc	.+8      	; 0x1322 <__umoddi3+0x4a8>
    131a:	a2 0c       	add	r10, r2
    131c:	b3 1c       	adc	r11, r3
    131e:	c4 1c       	adc	r12, r4
    1320:	d5 1c       	adc	r13, r5
    1322:	a2 1a       	sub	r10, r18
    1324:	b3 0a       	sbc	r11, r19
    1326:	c4 0a       	sbc	r12, r20
    1328:	d5 0a       	sbc	r13, r21
    132a:	c6 01       	movw	r24, r12
    132c:	b5 01       	movw	r22, r10
    132e:	a4 01       	movw	r20, r8
    1330:	93 01       	movw	r18, r6
    1332:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1336:	7b 01       	movw	r14, r22
    1338:	8c 01       	movw	r16, r24
    133a:	c6 01       	movw	r24, r12
    133c:	b5 01       	movw	r22, r10
    133e:	a4 01       	movw	r20, r8
    1340:	93 01       	movw	r18, r6
    1342:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1346:	ca 01       	movw	r24, r20
    1348:	b9 01       	movw	r22, r18
    134a:	25 96       	adiw	r28, 0x05	; 5
    134c:	2c ad       	ldd	r18, Y+60	; 0x3c
    134e:	3d ad       	ldd	r19, Y+61	; 0x3d
    1350:	4e ad       	ldd	r20, Y+62	; 0x3e
    1352:	5f ad       	ldd	r21, Y+63	; 0x3f
    1354:	25 97       	sbiw	r28, 0x05	; 5
    1356:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    135a:	9b 01       	movw	r18, r22
    135c:	ac 01       	movw	r20, r24
    135e:	87 01       	movw	r16, r14
    1360:	ff 24       	eor	r15, r15
    1362:	ee 24       	eor	r14, r14
    1364:	8d a5       	ldd	r24, Y+45	; 0x2d
    1366:	9e a5       	ldd	r25, Y+46	; 0x2e
    1368:	af a5       	ldd	r26, Y+47	; 0x2f
    136a:	b8 a9       	ldd	r27, Y+48	; 0x30
    136c:	a0 70       	andi	r26, 0x00	; 0
    136e:	b0 70       	andi	r27, 0x00	; 0
    1370:	57 01       	movw	r10, r14
    1372:	68 01       	movw	r12, r16
    1374:	a8 2a       	or	r10, r24
    1376:	b9 2a       	or	r11, r25
    1378:	ca 2a       	or	r12, r26
    137a:	db 2a       	or	r13, r27
    137c:	a2 16       	cp	r10, r18
    137e:	b3 06       	cpc	r11, r19
    1380:	c4 06       	cpc	r12, r20
    1382:	d5 06       	cpc	r13, r21
    1384:	90 f4       	brcc	.+36     	; 0x13aa <__umoddi3+0x530>
    1386:	a2 0c       	add	r10, r2
    1388:	b3 1c       	adc	r11, r3
    138a:	c4 1c       	adc	r12, r4
    138c:	d5 1c       	adc	r13, r5
    138e:	a2 14       	cp	r10, r2
    1390:	b3 04       	cpc	r11, r3
    1392:	c4 04       	cpc	r12, r4
    1394:	d5 04       	cpc	r13, r5
    1396:	48 f0       	brcs	.+18     	; 0x13aa <__umoddi3+0x530>
    1398:	a2 16       	cp	r10, r18
    139a:	b3 06       	cpc	r11, r19
    139c:	c4 06       	cpc	r12, r20
    139e:	d5 06       	cpc	r13, r21
    13a0:	20 f4       	brcc	.+8      	; 0x13aa <__umoddi3+0x530>
    13a2:	a2 0c       	add	r10, r2
    13a4:	b3 1c       	adc	r11, r3
    13a6:	c4 1c       	adc	r12, r4
    13a8:	d5 1c       	adc	r13, r5
    13aa:	6c 96       	adiw	r28, 0x1c	; 28
    13ac:	ec ac       	ldd	r14, Y+60	; 0x3c
    13ae:	fd ac       	ldd	r15, Y+61	; 0x3d
    13b0:	0e ad       	ldd	r16, Y+62	; 0x3e
    13b2:	1f ad       	ldd	r17, Y+63	; 0x3f
    13b4:	6c 97       	sbiw	r28, 0x1c	; 28
    13b6:	68 96       	adiw	r28, 0x18	; 24
    13b8:	0f ac       	ldd	r0, Y+63	; 0x3f
    13ba:	68 97       	sbiw	r28, 0x18	; 24
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__umoddi3+0x54c>
    13be:	ee 0c       	add	r14, r14
    13c0:	ff 1c       	adc	r15, r15
    13c2:	00 1f       	adc	r16, r16
    13c4:	11 1f       	adc	r17, r17
    13c6:	0a 94       	dec	r0
    13c8:	d2 f7       	brpl	.-12     	; 0x13be <__umoddi3+0x544>
    13ca:	e9 aa       	std	Y+49, r14	; 0x31
    13cc:	fa aa       	std	Y+50, r15	; 0x32
    13ce:	0b ab       	std	Y+51, r16	; 0x33
    13d0:	1c ab       	std	Y+52, r17	; 0x34
    13d2:	a2 1a       	sub	r10, r18
    13d4:	b3 0a       	sbc	r11, r19
    13d6:	c4 0a       	sbc	r12, r20
    13d8:	d5 0a       	sbc	r13, r21
    13da:	32 01       	movw	r6, r4
    13dc:	88 24       	eor	r8, r8
    13de:	99 24       	eor	r9, r9
    13e0:	b2 01       	movw	r22, r4
    13e2:	a1 01       	movw	r20, r2
    13e4:	60 70       	andi	r22, 0x00	; 0
    13e6:	70 70       	andi	r23, 0x00	; 0
    13e8:	29 96       	adiw	r28, 0x09	; 9
    13ea:	4c af       	std	Y+60, r20	; 0x3c
    13ec:	5d af       	std	Y+61, r21	; 0x3d
    13ee:	6e af       	std	Y+62, r22	; 0x3e
    13f0:	7f af       	std	Y+63, r23	; 0x3f
    13f2:	29 97       	sbiw	r28, 0x09	; 9
    13f4:	c6 01       	movw	r24, r12
    13f6:	b5 01       	movw	r22, r10
    13f8:	a4 01       	movw	r20, r8
    13fa:	93 01       	movw	r18, r6
    13fc:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1400:	7b 01       	movw	r14, r22
    1402:	8c 01       	movw	r16, r24
    1404:	c6 01       	movw	r24, r12
    1406:	b5 01       	movw	r22, r10
    1408:	a4 01       	movw	r20, r8
    140a:	93 01       	movw	r18, r6
    140c:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1410:	ca 01       	movw	r24, r20
    1412:	b9 01       	movw	r22, r18
    1414:	29 96       	adiw	r28, 0x09	; 9
    1416:	2c ad       	ldd	r18, Y+60	; 0x3c
    1418:	3d ad       	ldd	r19, Y+61	; 0x3d
    141a:	4e ad       	ldd	r20, Y+62	; 0x3e
    141c:	5f ad       	ldd	r21, Y+63	; 0x3f
    141e:	29 97       	sbiw	r28, 0x09	; 9
    1420:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    1424:	9b 01       	movw	r18, r22
    1426:	ac 01       	movw	r20, r24
    1428:	87 01       	movw	r16, r14
    142a:	ff 24       	eor	r15, r15
    142c:	ee 24       	eor	r14, r14
    142e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1430:	ba a8       	ldd	r11, Y+50	; 0x32
    1432:	cb a8       	ldd	r12, Y+51	; 0x33
    1434:	dc a8       	ldd	r13, Y+52	; 0x34
    1436:	c6 01       	movw	r24, r12
    1438:	aa 27       	eor	r26, r26
    143a:	bb 27       	eor	r27, r27
    143c:	57 01       	movw	r10, r14
    143e:	68 01       	movw	r12, r16
    1440:	a8 2a       	or	r10, r24
    1442:	b9 2a       	or	r11, r25
    1444:	ca 2a       	or	r12, r26
    1446:	db 2a       	or	r13, r27
    1448:	a2 16       	cp	r10, r18
    144a:	b3 06       	cpc	r11, r19
    144c:	c4 06       	cpc	r12, r20
    144e:	d5 06       	cpc	r13, r21
    1450:	90 f4       	brcc	.+36     	; 0x1476 <__umoddi3+0x5fc>
    1452:	a2 0c       	add	r10, r2
    1454:	b3 1c       	adc	r11, r3
    1456:	c4 1c       	adc	r12, r4
    1458:	d5 1c       	adc	r13, r5
    145a:	a2 14       	cp	r10, r2
    145c:	b3 04       	cpc	r11, r3
    145e:	c4 04       	cpc	r12, r4
    1460:	d5 04       	cpc	r13, r5
    1462:	48 f0       	brcs	.+18     	; 0x1476 <__umoddi3+0x5fc>
    1464:	a2 16       	cp	r10, r18
    1466:	b3 06       	cpc	r11, r19
    1468:	c4 06       	cpc	r12, r20
    146a:	d5 06       	cpc	r13, r21
    146c:	20 f4       	brcc	.+8      	; 0x1476 <__umoddi3+0x5fc>
    146e:	a2 0c       	add	r10, r2
    1470:	b3 1c       	adc	r11, r3
    1472:	c4 1c       	adc	r12, r4
    1474:	d5 1c       	adc	r13, r5
    1476:	a2 1a       	sub	r10, r18
    1478:	b3 0a       	sbc	r11, r19
    147a:	c4 0a       	sbc	r12, r20
    147c:	d5 0a       	sbc	r13, r21
    147e:	c6 01       	movw	r24, r12
    1480:	b5 01       	movw	r22, r10
    1482:	a4 01       	movw	r20, r8
    1484:	93 01       	movw	r18, r6
    1486:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    148a:	7b 01       	movw	r14, r22
    148c:	8c 01       	movw	r16, r24
    148e:	c6 01       	movw	r24, r12
    1490:	b5 01       	movw	r22, r10
    1492:	a4 01       	movw	r20, r8
    1494:	93 01       	movw	r18, r6
    1496:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    149a:	ca 01       	movw	r24, r20
    149c:	b9 01       	movw	r22, r18
    149e:	29 96       	adiw	r28, 0x09	; 9
    14a0:	2c ad       	ldd	r18, Y+60	; 0x3c
    14a2:	3d ad       	ldd	r19, Y+61	; 0x3d
    14a4:	4e ad       	ldd	r20, Y+62	; 0x3e
    14a6:	5f ad       	ldd	r21, Y+63	; 0x3f
    14a8:	29 97       	sbiw	r28, 0x09	; 9
    14aa:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    14ae:	9b 01       	movw	r18, r22
    14b0:	ac 01       	movw	r20, r24
    14b2:	87 01       	movw	r16, r14
    14b4:	ff 24       	eor	r15, r15
    14b6:	ee 24       	eor	r14, r14
    14b8:	89 a9       	ldd	r24, Y+49	; 0x31
    14ba:	9a a9       	ldd	r25, Y+50	; 0x32
    14bc:	ab a9       	ldd	r26, Y+51	; 0x33
    14be:	bc a9       	ldd	r27, Y+52	; 0x34
    14c0:	a0 70       	andi	r26, 0x00	; 0
    14c2:	b0 70       	andi	r27, 0x00	; 0
    14c4:	e8 2a       	or	r14, r24
    14c6:	f9 2a       	or	r15, r25
    14c8:	0a 2b       	or	r16, r26
    14ca:	1b 2b       	or	r17, r27
    14cc:	e2 16       	cp	r14, r18
    14ce:	f3 06       	cpc	r15, r19
    14d0:	04 07       	cpc	r16, r20
    14d2:	15 07       	cpc	r17, r21
    14d4:	90 f4       	brcc	.+36     	; 0x14fa <__umoddi3+0x680>
    14d6:	e2 0c       	add	r14, r2
    14d8:	f3 1c       	adc	r15, r3
    14da:	04 1d       	adc	r16, r4
    14dc:	15 1d       	adc	r17, r5
    14de:	e2 14       	cp	r14, r2
    14e0:	f3 04       	cpc	r15, r3
    14e2:	04 05       	cpc	r16, r4
    14e4:	15 05       	cpc	r17, r5
    14e6:	48 f0       	brcs	.+18     	; 0x14fa <__umoddi3+0x680>
    14e8:	e2 16       	cp	r14, r18
    14ea:	f3 06       	cpc	r15, r19
    14ec:	04 07       	cpc	r16, r20
    14ee:	15 07       	cpc	r17, r21
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__umoddi3+0x680>
    14f2:	e2 0c       	add	r14, r2
    14f4:	f3 1c       	adc	r15, r3
    14f6:	04 1d       	adc	r16, r4
    14f8:	15 1d       	adc	r17, r5
    14fa:	e2 1a       	sub	r14, r18
    14fc:	f3 0a       	sbc	r15, r19
    14fe:	04 0b       	sbc	r16, r20
    1500:	15 0b       	sbc	r17, r21
    1502:	d8 01       	movw	r26, r16
    1504:	c7 01       	movw	r24, r14
    1506:	09 ac       	ldd	r0, Y+57	; 0x39
    1508:	04 c0       	rjmp	.+8      	; 0x1512 <__umoddi3+0x698>
    150a:	b6 95       	lsr	r27
    150c:	a7 95       	ror	r26
    150e:	97 95       	ror	r25
    1510:	87 95       	ror	r24
    1512:	0a 94       	dec	r0
    1514:	d2 f7       	brpl	.-12     	; 0x150a <__umoddi3+0x690>
    1516:	89 8b       	std	Y+17, r24	; 0x11
    1518:	9a 8b       	std	Y+18, r25	; 0x12
    151a:	ab 8b       	std	Y+19, r26	; 0x13
    151c:	bc 8b       	std	Y+20, r27	; 0x14
    151e:	1d 8a       	std	Y+21, r1	; 0x15
    1520:	1e 8a       	std	Y+22, r1	; 0x16
    1522:	1f 8a       	std	Y+23, r1	; 0x17
    1524:	18 8e       	std	Y+24, r1	; 0x18
    1526:	28 2f       	mov	r18, r24
    1528:	3a 89       	ldd	r19, Y+18	; 0x12
    152a:	4b 89       	ldd	r20, Y+19	; 0x13
    152c:	5c 89       	ldd	r21, Y+20	; 0x14
    152e:	6d 89       	ldd	r22, Y+21	; 0x15
    1530:	0c c3       	rjmp	.+1560   	; 0x1b4a <__umoddi3+0xcd0>
    1532:	6a 14       	cp	r6, r10
    1534:	7b 04       	cpc	r7, r11
    1536:	8c 04       	cpc	r8, r12
    1538:	9d 04       	cpc	r9, r13
    153a:	08 f4       	brcc	.+2      	; 0x153e <__umoddi3+0x6c4>
    153c:	09 c3       	rjmp	.+1554   	; 0x1b50 <__umoddi3+0xcd6>
    153e:	00 e0       	ldi	r16, 0x00	; 0
    1540:	a0 16       	cp	r10, r16
    1542:	00 e0       	ldi	r16, 0x00	; 0
    1544:	b0 06       	cpc	r11, r16
    1546:	01 e0       	ldi	r16, 0x01	; 1
    1548:	c0 06       	cpc	r12, r16
    154a:	00 e0       	ldi	r16, 0x00	; 0
    154c:	d0 06       	cpc	r13, r16
    154e:	88 f4       	brcc	.+34     	; 0x1572 <__umoddi3+0x6f8>
    1550:	1f ef       	ldi	r17, 0xFF	; 255
    1552:	a1 16       	cp	r10, r17
    1554:	b1 04       	cpc	r11, r1
    1556:	c1 04       	cpc	r12, r1
    1558:	d1 04       	cpc	r13, r1
    155a:	39 f0       	breq	.+14     	; 0x156a <__umoddi3+0x6f0>
    155c:	30 f0       	brcs	.+12     	; 0x156a <__umoddi3+0x6f0>
    155e:	28 e0       	ldi	r18, 0x08	; 8
    1560:	e2 2e       	mov	r14, r18
    1562:	f1 2c       	mov	r15, r1
    1564:	01 2d       	mov	r16, r1
    1566:	11 2d       	mov	r17, r1
    1568:	18 c0       	rjmp	.+48     	; 0x159a <__umoddi3+0x720>
    156a:	ee 24       	eor	r14, r14
    156c:	ff 24       	eor	r15, r15
    156e:	87 01       	movw	r16, r14
    1570:	14 c0       	rjmp	.+40     	; 0x159a <__umoddi3+0x720>
    1572:	40 e0       	ldi	r20, 0x00	; 0
    1574:	a4 16       	cp	r10, r20
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	b4 06       	cpc	r11, r20
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	c4 06       	cpc	r12, r20
    157e:	41 e0       	ldi	r20, 0x01	; 1
    1580:	d4 06       	cpc	r13, r20
    1582:	30 f0       	brcs	.+12     	; 0x1590 <__umoddi3+0x716>
    1584:	98 e1       	ldi	r25, 0x18	; 24
    1586:	e9 2e       	mov	r14, r25
    1588:	f1 2c       	mov	r15, r1
    158a:	01 2d       	mov	r16, r1
    158c:	11 2d       	mov	r17, r1
    158e:	05 c0       	rjmp	.+10     	; 0x159a <__umoddi3+0x720>
    1590:	80 e1       	ldi	r24, 0x10	; 16
    1592:	e8 2e       	mov	r14, r24
    1594:	f1 2c       	mov	r15, r1
    1596:	01 2d       	mov	r16, r1
    1598:	11 2d       	mov	r17, r1
    159a:	d6 01       	movw	r26, r12
    159c:	c5 01       	movw	r24, r10
    159e:	0e 2c       	mov	r0, r14
    15a0:	04 c0       	rjmp	.+8      	; 0x15aa <__umoddi3+0x730>
    15a2:	b6 95       	lsr	r27
    15a4:	a7 95       	ror	r26
    15a6:	97 95       	ror	r25
    15a8:	87 95       	ror	r24
    15aa:	0a 94       	dec	r0
    15ac:	d2 f7       	brpl	.-12     	; 0x15a2 <__umoddi3+0x728>
    15ae:	88 56       	subi	r24, 0x68	; 104
    15b0:	9f 4f       	sbci	r25, 0xFF	; 255
    15b2:	dc 01       	movw	r26, r24
    15b4:	2c 91       	ld	r18, X
    15b6:	80 e2       	ldi	r24, 0x20	; 32
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a0 e0       	ldi	r26, 0x00	; 0
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	8e 19       	sub	r24, r14
    15c0:	9f 09       	sbc	r25, r15
    15c2:	a0 0b       	sbc	r26, r16
    15c4:	b1 0b       	sbc	r27, r17
    15c6:	82 1b       	sub	r24, r18
    15c8:	91 09       	sbc	r25, r1
    15ca:	a1 09       	sbc	r26, r1
    15cc:	b1 09       	sbc	r27, r1
    15ce:	00 97       	sbiw	r24, 0x00	; 0
    15d0:	a1 05       	cpc	r26, r1
    15d2:	b1 05       	cpc	r27, r1
    15d4:	09 f0       	breq	.+2      	; 0x15d8 <__umoddi3+0x75e>
    15d6:	4f c0       	rjmp	.+158    	; 0x1676 <__umoddi3+0x7fc>
    15d8:	a6 14       	cp	r10, r6
    15da:	b7 04       	cpc	r11, r7
    15dc:	c8 04       	cpc	r12, r8
    15de:	d9 04       	cpc	r13, r9
    15e0:	58 f0       	brcs	.+22     	; 0x15f8 <__umoddi3+0x77e>
    15e2:	6c 96       	adiw	r28, 0x1c	; 28
    15e4:	ec ac       	ldd	r14, Y+60	; 0x3c
    15e6:	fd ac       	ldd	r15, Y+61	; 0x3d
    15e8:	0e ad       	ldd	r16, Y+62	; 0x3e
    15ea:	1f ad       	ldd	r17, Y+63	; 0x3f
    15ec:	6c 97       	sbiw	r28, 0x1c	; 28
    15ee:	e2 14       	cp	r14, r2
    15f0:	f3 04       	cpc	r15, r3
    15f2:	04 05       	cpc	r16, r4
    15f4:	15 05       	cpc	r17, r5
    15f6:	68 f1       	brcs	.+90     	; 0x1652 <__umoddi3+0x7d8>
    15f8:	6c 96       	adiw	r28, 0x1c	; 28
    15fa:	ec ac       	ldd	r14, Y+60	; 0x3c
    15fc:	fd ac       	ldd	r15, Y+61	; 0x3d
    15fe:	0e ad       	ldd	r16, Y+62	; 0x3e
    1600:	1f ad       	ldd	r17, Y+63	; 0x3f
    1602:	6c 97       	sbiw	r28, 0x1c	; 28
    1604:	e2 18       	sub	r14, r2
    1606:	f3 08       	sbc	r15, r3
    1608:	04 09       	sbc	r16, r4
    160a:	15 09       	sbc	r17, r5
    160c:	a4 01       	movw	r20, r8
    160e:	93 01       	movw	r18, r6
    1610:	2a 19       	sub	r18, r10
    1612:	3b 09       	sbc	r19, r11
    1614:	4c 09       	sbc	r20, r12
    1616:	5d 09       	sbc	r21, r13
    1618:	aa 24       	eor	r10, r10
    161a:	bb 24       	eor	r11, r11
    161c:	65 01       	movw	r12, r10
    161e:	6c 96       	adiw	r28, 0x1c	; 28
    1620:	6c ad       	ldd	r22, Y+60	; 0x3c
    1622:	7d ad       	ldd	r23, Y+61	; 0x3d
    1624:	8e ad       	ldd	r24, Y+62	; 0x3e
    1626:	9f ad       	ldd	r25, Y+63	; 0x3f
    1628:	6c 97       	sbiw	r28, 0x1c	; 28
    162a:	6e 15       	cp	r22, r14
    162c:	7f 05       	cpc	r23, r15
    162e:	80 07       	cpc	r24, r16
    1630:	91 07       	cpc	r25, r17
    1632:	28 f4       	brcc	.+10     	; 0x163e <__umoddi3+0x7c4>
    1634:	b1 e0       	ldi	r27, 0x01	; 1
    1636:	ab 2e       	mov	r10, r27
    1638:	b1 2c       	mov	r11, r1
    163a:	c1 2c       	mov	r12, r1
    163c:	d1 2c       	mov	r13, r1
    163e:	da 01       	movw	r26, r20
    1640:	c9 01       	movw	r24, r18
    1642:	8a 19       	sub	r24, r10
    1644:	9b 09       	sbc	r25, r11
    1646:	ac 09       	sbc	r26, r12
    1648:	bd 09       	sbc	r27, r13
    164a:	8d ab       	std	Y+53, r24	; 0x35
    164c:	9e ab       	std	Y+54, r25	; 0x36
    164e:	af ab       	std	Y+55, r26	; 0x37
    1650:	b8 af       	std	Y+56, r27	; 0x38
    1652:	e9 8a       	std	Y+17, r14	; 0x11
    1654:	fa 8a       	std	Y+18, r15	; 0x12
    1656:	0b 8b       	std	Y+19, r16	; 0x13
    1658:	1c 8b       	std	Y+20, r17	; 0x14
    165a:	6d a8       	ldd	r6, Y+53	; 0x35
    165c:	7e a8       	ldd	r7, Y+54	; 0x36
    165e:	8f a8       	ldd	r8, Y+55	; 0x37
    1660:	98 ac       	ldd	r9, Y+56	; 0x38
    1662:	6d 8a       	std	Y+21, r6	; 0x15
    1664:	7e 8a       	std	Y+22, r7	; 0x16
    1666:	8f 8a       	std	Y+23, r8	; 0x17
    1668:	98 8e       	std	Y+24, r9	; 0x18
    166a:	2e 2d       	mov	r18, r14
    166c:	3a 89       	ldd	r19, Y+18	; 0x12
    166e:	4b 89       	ldd	r20, Y+19	; 0x13
    1670:	5c 89       	ldd	r21, Y+20	; 0x14
    1672:	6d a9       	ldd	r22, Y+53	; 0x35
    1674:	6a c2       	rjmp	.+1236   	; 0x1b4a <__umoddi3+0xcd0>
    1676:	67 96       	adiw	r28, 0x17	; 23
    1678:	8f af       	std	Y+63, r24	; 0x3f
    167a:	67 97       	sbiw	r28, 0x17	; 23
    167c:	a6 01       	movw	r20, r12
    167e:	95 01       	movw	r18, r10
    1680:	08 2e       	mov	r0, r24
    1682:	04 c0       	rjmp	.+8      	; 0x168c <__umoddi3+0x812>
    1684:	22 0f       	add	r18, r18
    1686:	33 1f       	adc	r19, r19
    1688:	44 1f       	adc	r20, r20
    168a:	55 1f       	adc	r21, r21
    168c:	0a 94       	dec	r0
    168e:	d2 f7       	brpl	.-12     	; 0x1684 <__umoddi3+0x80a>
    1690:	a0 e2       	ldi	r26, 0x20	; 32
    1692:	aa 2e       	mov	r10, r26
    1694:	a8 1a       	sub	r10, r24
    1696:	66 96       	adiw	r28, 0x16	; 22
    1698:	af ae       	std	Y+63, r10	; 0x3f
    169a:	66 97       	sbiw	r28, 0x16	; 22
    169c:	d2 01       	movw	r26, r4
    169e:	c1 01       	movw	r24, r2
    16a0:	04 c0       	rjmp	.+8      	; 0x16aa <__umoddi3+0x830>
    16a2:	b6 95       	lsr	r27
    16a4:	a7 95       	ror	r26
    16a6:	97 95       	ror	r25
    16a8:	87 95       	ror	r24
    16aa:	aa 94       	dec	r10
    16ac:	d2 f7       	brpl	.-12     	; 0x16a2 <__umoddi3+0x828>
    16ae:	6c 01       	movw	r12, r24
    16b0:	7d 01       	movw	r14, r26
    16b2:	c2 2a       	or	r12, r18
    16b4:	d3 2a       	or	r13, r19
    16b6:	e4 2a       	or	r14, r20
    16b8:	f5 2a       	or	r15, r21
    16ba:	c9 a6       	std	Y+41, r12	; 0x29
    16bc:	da a6       	std	Y+42, r13	; 0x2a
    16be:	eb a6       	std	Y+43, r14	; 0x2b
    16c0:	fc a6       	std	Y+44, r15	; 0x2c
    16c2:	82 01       	movw	r16, r4
    16c4:	71 01       	movw	r14, r2
    16c6:	67 96       	adiw	r28, 0x17	; 23
    16c8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ca:	67 97       	sbiw	r28, 0x17	; 23
    16cc:	04 c0       	rjmp	.+8      	; 0x16d6 <__umoddi3+0x85c>
    16ce:	ee 0c       	add	r14, r14
    16d0:	ff 1c       	adc	r15, r15
    16d2:	00 1f       	adc	r16, r16
    16d4:	11 1f       	adc	r17, r17
    16d6:	0a 94       	dec	r0
    16d8:	d2 f7       	brpl	.-12     	; 0x16ce <__umoddi3+0x854>
    16da:	ed a2       	std	Y+37, r14	; 0x25
    16dc:	fe a2       	std	Y+38, r15	; 0x26
    16de:	0f a3       	std	Y+39, r16	; 0x27
    16e0:	18 a7       	std	Y+40, r17	; 0x28
    16e2:	64 01       	movw	r12, r8
    16e4:	53 01       	movw	r10, r6
    16e6:	66 96       	adiw	r28, 0x16	; 22
    16e8:	0f ac       	ldd	r0, Y+63	; 0x3f
    16ea:	66 97       	sbiw	r28, 0x16	; 22
    16ec:	04 c0       	rjmp	.+8      	; 0x16f6 <__umoddi3+0x87c>
    16ee:	d6 94       	lsr	r13
    16f0:	c7 94       	ror	r12
    16f2:	b7 94       	ror	r11
    16f4:	a7 94       	ror	r10
    16f6:	0a 94       	dec	r0
    16f8:	d2 f7       	brpl	.-12     	; 0x16ee <__umoddi3+0x874>
    16fa:	a4 01       	movw	r20, r8
    16fc:	93 01       	movw	r18, r6
    16fe:	67 96       	adiw	r28, 0x17	; 23
    1700:	0f ac       	ldd	r0, Y+63	; 0x3f
    1702:	67 97       	sbiw	r28, 0x17	; 23
    1704:	04 c0       	rjmp	.+8      	; 0x170e <__umoddi3+0x894>
    1706:	22 0f       	add	r18, r18
    1708:	33 1f       	adc	r19, r19
    170a:	44 1f       	adc	r20, r20
    170c:	55 1f       	adc	r21, r21
    170e:	0a 94       	dec	r0
    1710:	d2 f7       	brpl	.-12     	; 0x1706 <__umoddi3+0x88c>
    1712:	6c 96       	adiw	r28, 0x1c	; 28
    1714:	8c ad       	ldd	r24, Y+60	; 0x3c
    1716:	9d ad       	ldd	r25, Y+61	; 0x3d
    1718:	ae ad       	ldd	r26, Y+62	; 0x3e
    171a:	bf ad       	ldd	r27, Y+63	; 0x3f
    171c:	6c 97       	sbiw	r28, 0x1c	; 28
    171e:	66 96       	adiw	r28, 0x16	; 22
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	66 97       	sbiw	r28, 0x16	; 22
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x8b4>
    1726:	b6 95       	lsr	r27
    1728:	a7 95       	ror	r26
    172a:	97 95       	ror	r25
    172c:	87 95       	ror	r24
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x8ac>
    1732:	3c 01       	movw	r6, r24
    1734:	4d 01       	movw	r8, r26
    1736:	62 2a       	or	r6, r18
    1738:	73 2a       	or	r7, r19
    173a:	84 2a       	or	r8, r20
    173c:	95 2a       	or	r9, r21
    173e:	69 a2       	std	Y+33, r6	; 0x21
    1740:	7a a2       	std	Y+34, r7	; 0x22
    1742:	8b a2       	std	Y+35, r8	; 0x23
    1744:	9c a2       	std	Y+36, r9	; 0x24
    1746:	6c 96       	adiw	r28, 0x1c	; 28
    1748:	ec ac       	ldd	r14, Y+60	; 0x3c
    174a:	fd ac       	ldd	r15, Y+61	; 0x3d
    174c:	0e ad       	ldd	r16, Y+62	; 0x3e
    174e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1750:	6c 97       	sbiw	r28, 0x1c	; 28
    1752:	67 96       	adiw	r28, 0x17	; 23
    1754:	0f ac       	ldd	r0, Y+63	; 0x3f
    1756:	67 97       	sbiw	r28, 0x17	; 23
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <__umoddi3+0x8e8>
    175a:	ee 0c       	add	r14, r14
    175c:	ff 1c       	adc	r15, r15
    175e:	00 1f       	adc	r16, r16
    1760:	11 1f       	adc	r17, r17
    1762:	0a 94       	dec	r0
    1764:	d2 f7       	brpl	.-12     	; 0x175a <__umoddi3+0x8e0>
    1766:	ed 8e       	std	Y+29, r14	; 0x1d
    1768:	fe 8e       	std	Y+30, r15	; 0x1e
    176a:	0f 8f       	std	Y+31, r16	; 0x1f
    176c:	18 a3       	std	Y+32, r17	; 0x20
    176e:	49 a5       	ldd	r20, Y+41	; 0x29
    1770:	5a a5       	ldd	r21, Y+42	; 0x2a
    1772:	6b a5       	ldd	r22, Y+43	; 0x2b
    1774:	7c a5       	ldd	r23, Y+44	; 0x2c
    1776:	3b 01       	movw	r6, r22
    1778:	88 24       	eor	r8, r8
    177a:	99 24       	eor	r9, r9
    177c:	60 70       	andi	r22, 0x00	; 0
    177e:	70 70       	andi	r23, 0x00	; 0
    1780:	2d 96       	adiw	r28, 0x0d	; 13
    1782:	4c af       	std	Y+60, r20	; 0x3c
    1784:	5d af       	std	Y+61, r21	; 0x3d
    1786:	6e af       	std	Y+62, r22	; 0x3e
    1788:	7f af       	std	Y+63, r23	; 0x3f
    178a:	2d 97       	sbiw	r28, 0x0d	; 13
    178c:	c6 01       	movw	r24, r12
    178e:	b5 01       	movw	r22, r10
    1790:	a4 01       	movw	r20, r8
    1792:	93 01       	movw	r18, r6
    1794:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1798:	7b 01       	movw	r14, r22
    179a:	8c 01       	movw	r16, r24
    179c:	c6 01       	movw	r24, r12
    179e:	b5 01       	movw	r22, r10
    17a0:	a4 01       	movw	r20, r8
    17a2:	93 01       	movw	r18, r6
    17a4:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    17a8:	c9 01       	movw	r24, r18
    17aa:	da 01       	movw	r26, r20
    17ac:	1c 01       	movw	r2, r24
    17ae:	2d 01       	movw	r4, r26
    17b0:	c2 01       	movw	r24, r4
    17b2:	b1 01       	movw	r22, r2
    17b4:	2d 96       	adiw	r28, 0x0d	; 13
    17b6:	2c ad       	ldd	r18, Y+60	; 0x3c
    17b8:	3d ad       	ldd	r19, Y+61	; 0x3d
    17ba:	4e ad       	ldd	r20, Y+62	; 0x3e
    17bc:	5f ad       	ldd	r21, Y+63	; 0x3f
    17be:	2d 97       	sbiw	r28, 0x0d	; 13
    17c0:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    17c4:	9b 01       	movw	r18, r22
    17c6:	ac 01       	movw	r20, r24
    17c8:	87 01       	movw	r16, r14
    17ca:	ff 24       	eor	r15, r15
    17cc:	ee 24       	eor	r14, r14
    17ce:	a9 a0       	ldd	r10, Y+33	; 0x21
    17d0:	ba a0       	ldd	r11, Y+34	; 0x22
    17d2:	cb a0       	ldd	r12, Y+35	; 0x23
    17d4:	dc a0       	ldd	r13, Y+36	; 0x24
    17d6:	c6 01       	movw	r24, r12
    17d8:	aa 27       	eor	r26, r26
    17da:	bb 27       	eor	r27, r27
    17dc:	57 01       	movw	r10, r14
    17de:	68 01       	movw	r12, r16
    17e0:	a8 2a       	or	r10, r24
    17e2:	b9 2a       	or	r11, r25
    17e4:	ca 2a       	or	r12, r26
    17e6:	db 2a       	or	r13, r27
    17e8:	a2 16       	cp	r10, r18
    17ea:	b3 06       	cpc	r11, r19
    17ec:	c4 06       	cpc	r12, r20
    17ee:	d5 06       	cpc	r13, r21
    17f0:	00 f5       	brcc	.+64     	; 0x1832 <__umoddi3+0x9b8>
    17f2:	08 94       	sec
    17f4:	21 08       	sbc	r2, r1
    17f6:	31 08       	sbc	r3, r1
    17f8:	41 08       	sbc	r4, r1
    17fa:	51 08       	sbc	r5, r1
    17fc:	e9 a4       	ldd	r14, Y+41	; 0x29
    17fe:	fa a4       	ldd	r15, Y+42	; 0x2a
    1800:	0b a5       	ldd	r16, Y+43	; 0x2b
    1802:	1c a5       	ldd	r17, Y+44	; 0x2c
    1804:	ae 0c       	add	r10, r14
    1806:	bf 1c       	adc	r11, r15
    1808:	c0 1e       	adc	r12, r16
    180a:	d1 1e       	adc	r13, r17
    180c:	ae 14       	cp	r10, r14
    180e:	bf 04       	cpc	r11, r15
    1810:	c0 06       	cpc	r12, r16
    1812:	d1 06       	cpc	r13, r17
    1814:	70 f0       	brcs	.+28     	; 0x1832 <__umoddi3+0x9b8>
    1816:	a2 16       	cp	r10, r18
    1818:	b3 06       	cpc	r11, r19
    181a:	c4 06       	cpc	r12, r20
    181c:	d5 06       	cpc	r13, r21
    181e:	48 f4       	brcc	.+18     	; 0x1832 <__umoddi3+0x9b8>
    1820:	08 94       	sec
    1822:	21 08       	sbc	r2, r1
    1824:	31 08       	sbc	r3, r1
    1826:	41 08       	sbc	r4, r1
    1828:	51 08       	sbc	r5, r1
    182a:	ae 0c       	add	r10, r14
    182c:	bf 1c       	adc	r11, r15
    182e:	c0 1e       	adc	r12, r16
    1830:	d1 1e       	adc	r13, r17
    1832:	a2 1a       	sub	r10, r18
    1834:	b3 0a       	sbc	r11, r19
    1836:	c4 0a       	sbc	r12, r20
    1838:	d5 0a       	sbc	r13, r21
    183a:	c6 01       	movw	r24, r12
    183c:	b5 01       	movw	r22, r10
    183e:	a4 01       	movw	r20, r8
    1840:	93 01       	movw	r18, r6
    1842:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1846:	7b 01       	movw	r14, r22
    1848:	8c 01       	movw	r16, r24
    184a:	c6 01       	movw	r24, r12
    184c:	b5 01       	movw	r22, r10
    184e:	a4 01       	movw	r20, r8
    1850:	93 01       	movw	r18, r6
    1852:	0e 94 ac 1e 	call	0x3d58	; 0x3d58 <__udivmodsi4>
    1856:	c9 01       	movw	r24, r18
    1858:	da 01       	movw	r26, r20
    185a:	3c 01       	movw	r6, r24
    185c:	4d 01       	movw	r8, r26
    185e:	c4 01       	movw	r24, r8
    1860:	b3 01       	movw	r22, r6
    1862:	2d 96       	adiw	r28, 0x0d	; 13
    1864:	2c ad       	ldd	r18, Y+60	; 0x3c
    1866:	3d ad       	ldd	r19, Y+61	; 0x3d
    1868:	4e ad       	ldd	r20, Y+62	; 0x3e
    186a:	5f ad       	ldd	r21, Y+63	; 0x3f
    186c:	2d 97       	sbiw	r28, 0x0d	; 13
    186e:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    1872:	9b 01       	movw	r18, r22
    1874:	ac 01       	movw	r20, r24
    1876:	87 01       	movw	r16, r14
    1878:	ff 24       	eor	r15, r15
    187a:	ee 24       	eor	r14, r14
    187c:	89 a1       	ldd	r24, Y+33	; 0x21
    187e:	9a a1       	ldd	r25, Y+34	; 0x22
    1880:	ab a1       	ldd	r26, Y+35	; 0x23
    1882:	bc a1       	ldd	r27, Y+36	; 0x24
    1884:	a0 70       	andi	r26, 0x00	; 0
    1886:	b0 70       	andi	r27, 0x00	; 0
    1888:	57 01       	movw	r10, r14
    188a:	68 01       	movw	r12, r16
    188c:	a8 2a       	or	r10, r24
    188e:	b9 2a       	or	r11, r25
    1890:	ca 2a       	or	r12, r26
    1892:	db 2a       	or	r13, r27
    1894:	a2 16       	cp	r10, r18
    1896:	b3 06       	cpc	r11, r19
    1898:	c4 06       	cpc	r12, r20
    189a:	d5 06       	cpc	r13, r21
    189c:	00 f5       	brcc	.+64     	; 0x18de <__umoddi3+0xa64>
    189e:	08 94       	sec
    18a0:	61 08       	sbc	r6, r1
    18a2:	71 08       	sbc	r7, r1
    18a4:	81 08       	sbc	r8, r1
    18a6:	91 08       	sbc	r9, r1
    18a8:	69 a5       	ldd	r22, Y+41	; 0x29
    18aa:	7a a5       	ldd	r23, Y+42	; 0x2a
    18ac:	8b a5       	ldd	r24, Y+43	; 0x2b
    18ae:	9c a5       	ldd	r25, Y+44	; 0x2c
    18b0:	a6 0e       	add	r10, r22
    18b2:	b7 1e       	adc	r11, r23
    18b4:	c8 1e       	adc	r12, r24
    18b6:	d9 1e       	adc	r13, r25
    18b8:	a6 16       	cp	r10, r22
    18ba:	b7 06       	cpc	r11, r23
    18bc:	c8 06       	cpc	r12, r24
    18be:	d9 06       	cpc	r13, r25
    18c0:	70 f0       	brcs	.+28     	; 0x18de <__umoddi3+0xa64>
    18c2:	a2 16       	cp	r10, r18
    18c4:	b3 06       	cpc	r11, r19
    18c6:	c4 06       	cpc	r12, r20
    18c8:	d5 06       	cpc	r13, r21
    18ca:	48 f4       	brcc	.+18     	; 0x18de <__umoddi3+0xa64>
    18cc:	08 94       	sec
    18ce:	61 08       	sbc	r6, r1
    18d0:	71 08       	sbc	r7, r1
    18d2:	81 08       	sbc	r8, r1
    18d4:	91 08       	sbc	r9, r1
    18d6:	a6 0e       	add	r10, r22
    18d8:	b7 1e       	adc	r11, r23
    18da:	c8 1e       	adc	r12, r24
    18dc:	d9 1e       	adc	r13, r25
    18de:	d6 01       	movw	r26, r12
    18e0:	c5 01       	movw	r24, r10
    18e2:	82 1b       	sub	r24, r18
    18e4:	93 0b       	sbc	r25, r19
    18e6:	a4 0b       	sbc	r26, r20
    18e8:	b5 0b       	sbc	r27, r21
    18ea:	89 8f       	std	Y+25, r24	; 0x19
    18ec:	9a 8f       	std	Y+26, r25	; 0x1a
    18ee:	ab 8f       	std	Y+27, r26	; 0x1b
    18f0:	bc 8f       	std	Y+28, r27	; 0x1c
    18f2:	d1 01       	movw	r26, r2
    18f4:	99 27       	eor	r25, r25
    18f6:	88 27       	eor	r24, r24
    18f8:	84 01       	movw	r16, r8
    18fa:	73 01       	movw	r14, r6
    18fc:	e8 2a       	or	r14, r24
    18fe:	f9 2a       	or	r15, r25
    1900:	0a 2b       	or	r16, r26
    1902:	1b 2b       	or	r17, r27
    1904:	4f ef       	ldi	r20, 0xFF	; 255
    1906:	a4 2e       	mov	r10, r20
    1908:	4f ef       	ldi	r20, 0xFF	; 255
    190a:	b4 2e       	mov	r11, r20
    190c:	c1 2c       	mov	r12, r1
    190e:	d1 2c       	mov	r13, r1
    1910:	ae 20       	and	r10, r14
    1912:	bf 20       	and	r11, r15
    1914:	c0 22       	and	r12, r16
    1916:	d1 22       	and	r13, r17
    1918:	78 01       	movw	r14, r16
    191a:	00 27       	eor	r16, r16
    191c:	11 27       	eor	r17, r17
    191e:	6d a0       	ldd	r6, Y+37	; 0x25
    1920:	7e a0       	ldd	r7, Y+38	; 0x26
    1922:	8f a0       	ldd	r8, Y+39	; 0x27
    1924:	98 a4       	ldd	r9, Y+40	; 0x28
    1926:	4f ef       	ldi	r20, 0xFF	; 255
    1928:	5f ef       	ldi	r21, 0xFF	; 255
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	70 e0       	ldi	r23, 0x00	; 0
    192e:	64 22       	and	r6, r20
    1930:	75 22       	and	r7, r21
    1932:	86 22       	and	r8, r22
    1934:	97 22       	and	r9, r23
    1936:	8d a1       	ldd	r24, Y+37	; 0x25
    1938:	9e a1       	ldd	r25, Y+38	; 0x26
    193a:	af a1       	ldd	r26, Y+39	; 0x27
    193c:	b8 a5       	ldd	r27, Y+40	; 0x28
    193e:	bd 01       	movw	r22, r26
    1940:	88 27       	eor	r24, r24
    1942:	99 27       	eor	r25, r25
    1944:	65 96       	adiw	r28, 0x15	; 21
    1946:	6c af       	std	Y+60, r22	; 0x3c
    1948:	7d af       	std	Y+61, r23	; 0x3d
    194a:	8e af       	std	Y+62, r24	; 0x3e
    194c:	9f af       	std	Y+63, r25	; 0x3f
    194e:	65 97       	sbiw	r28, 0x15	; 21
    1950:	c6 01       	movw	r24, r12
    1952:	b5 01       	movw	r22, r10
    1954:	a4 01       	movw	r20, r8
    1956:	93 01       	movw	r18, r6
    1958:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    195c:	61 96       	adiw	r28, 0x11	; 17
    195e:	6c af       	std	Y+60, r22	; 0x3c
    1960:	7d af       	std	Y+61, r23	; 0x3d
    1962:	8e af       	std	Y+62, r24	; 0x3e
    1964:	9f af       	std	Y+63, r25	; 0x3f
    1966:	61 97       	sbiw	r28, 0x11	; 17
    1968:	c6 01       	movw	r24, r12
    196a:	b5 01       	movw	r22, r10
    196c:	65 96       	adiw	r28, 0x15	; 21
    196e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1970:	3d ad       	ldd	r19, Y+61	; 0x3d
    1972:	4e ad       	ldd	r20, Y+62	; 0x3e
    1974:	5f ad       	ldd	r21, Y+63	; 0x3f
    1976:	65 97       	sbiw	r28, 0x15	; 21
    1978:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    197c:	1b 01       	movw	r2, r22
    197e:	2c 01       	movw	r4, r24
    1980:	c8 01       	movw	r24, r16
    1982:	b7 01       	movw	r22, r14
    1984:	a4 01       	movw	r20, r8
    1986:	93 01       	movw	r18, r6
    1988:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    198c:	5b 01       	movw	r10, r22
    198e:	6c 01       	movw	r12, r24
    1990:	c8 01       	movw	r24, r16
    1992:	b7 01       	movw	r22, r14
    1994:	65 96       	adiw	r28, 0x15	; 21
    1996:	2c ad       	ldd	r18, Y+60	; 0x3c
    1998:	3d ad       	ldd	r19, Y+61	; 0x3d
    199a:	4e ad       	ldd	r20, Y+62	; 0x3e
    199c:	5f ad       	ldd	r21, Y+63	; 0x3f
    199e:	65 97       	sbiw	r28, 0x15	; 21
    19a0:	0e 94 8d 1e 	call	0x3d1a	; 0x3d1a <__mulsi3>
    19a4:	7b 01       	movw	r14, r22
    19a6:	8c 01       	movw	r16, r24
    19a8:	a6 01       	movw	r20, r12
    19aa:	95 01       	movw	r18, r10
    19ac:	22 0d       	add	r18, r2
    19ae:	33 1d       	adc	r19, r3
    19b0:	44 1d       	adc	r20, r4
    19b2:	55 1d       	adc	r21, r5
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c ac       	ldd	r6, Y+60	; 0x3c
    19b8:	7d ac       	ldd	r7, Y+61	; 0x3d
    19ba:	8e ac       	ldd	r8, Y+62	; 0x3e
    19bc:	9f ac       	ldd	r9, Y+63	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c4 01       	movw	r24, r8
    19c2:	aa 27       	eor	r26, r26
    19c4:	bb 27       	eor	r27, r27
    19c6:	28 0f       	add	r18, r24
    19c8:	39 1f       	adc	r19, r25
    19ca:	4a 1f       	adc	r20, r26
    19cc:	5b 1f       	adc	r21, r27
    19ce:	2a 15       	cp	r18, r10
    19d0:	3b 05       	cpc	r19, r11
    19d2:	4c 05       	cpc	r20, r12
    19d4:	5d 05       	cpc	r21, r13
    19d6:	48 f4       	brcc	.+18     	; 0x19ea <__umoddi3+0xb70>
    19d8:	81 2c       	mov	r8, r1
    19da:	91 2c       	mov	r9, r1
    19dc:	e1 e0       	ldi	r30, 0x01	; 1
    19de:	ae 2e       	mov	r10, r30
    19e0:	b1 2c       	mov	r11, r1
    19e2:	e8 0c       	add	r14, r8
    19e4:	f9 1c       	adc	r15, r9
    19e6:	0a 1d       	adc	r16, r10
    19e8:	1b 1d       	adc	r17, r11
    19ea:	ca 01       	movw	r24, r20
    19ec:	aa 27       	eor	r26, r26
    19ee:	bb 27       	eor	r27, r27
    19f0:	57 01       	movw	r10, r14
    19f2:	68 01       	movw	r12, r16
    19f4:	a8 0e       	add	r10, r24
    19f6:	b9 1e       	adc	r11, r25
    19f8:	ca 1e       	adc	r12, r26
    19fa:	db 1e       	adc	r13, r27
    19fc:	a9 01       	movw	r20, r18
    19fe:	33 27       	eor	r19, r19
    1a00:	22 27       	eor	r18, r18
    1a02:	61 96       	adiw	r28, 0x11	; 17
    1a04:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a06:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a08:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a0a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a0c:	61 97       	sbiw	r28, 0x11	; 17
    1a0e:	a0 70       	andi	r26, 0x00	; 0
    1a10:	b0 70       	andi	r27, 0x00	; 0
    1a12:	28 0f       	add	r18, r24
    1a14:	39 1f       	adc	r19, r25
    1a16:	4a 1f       	adc	r20, r26
    1a18:	5b 1f       	adc	r21, r27
    1a1a:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a1c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a1e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a20:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a22:	ea 14       	cp	r14, r10
    1a24:	fb 04       	cpc	r15, r11
    1a26:	0c 05       	cpc	r16, r12
    1a28:	1d 05       	cpc	r17, r13
    1a2a:	70 f0       	brcs	.+28     	; 0x1a48 <__umoddi3+0xbce>
    1a2c:	ae 14       	cp	r10, r14
    1a2e:	bf 04       	cpc	r11, r15
    1a30:	c0 06       	cpc	r12, r16
    1a32:	d1 06       	cpc	r13, r17
    1a34:	69 f5       	brne	.+90     	; 0x1a90 <__umoddi3+0xc16>
    1a36:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a38:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a3a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a3c:	98 a1       	ldd	r25, Y+32	; 0x20
    1a3e:	62 17       	cp	r22, r18
    1a40:	73 07       	cpc	r23, r19
    1a42:	84 07       	cpc	r24, r20
    1a44:	95 07       	cpc	r25, r21
    1a46:	20 f5       	brcc	.+72     	; 0x1a90 <__umoddi3+0xc16>
    1a48:	da 01       	movw	r26, r20
    1a4a:	c9 01       	movw	r24, r18
    1a4c:	6d a0       	ldd	r6, Y+37	; 0x25
    1a4e:	7e a0       	ldd	r7, Y+38	; 0x26
    1a50:	8f a0       	ldd	r8, Y+39	; 0x27
    1a52:	98 a4       	ldd	r9, Y+40	; 0x28
    1a54:	86 19       	sub	r24, r6
    1a56:	97 09       	sbc	r25, r7
    1a58:	a8 09       	sbc	r26, r8
    1a5a:	b9 09       	sbc	r27, r9
    1a5c:	e9 a4       	ldd	r14, Y+41	; 0x29
    1a5e:	fa a4       	ldd	r15, Y+42	; 0x2a
    1a60:	0b a5       	ldd	r16, Y+43	; 0x2b
    1a62:	1c a5       	ldd	r17, Y+44	; 0x2c
    1a64:	ae 18       	sub	r10, r14
    1a66:	bf 08       	sbc	r11, r15
    1a68:	c0 0a       	sbc	r12, r16
    1a6a:	d1 0a       	sbc	r13, r17
    1a6c:	ee 24       	eor	r14, r14
    1a6e:	ff 24       	eor	r15, r15
    1a70:	87 01       	movw	r16, r14
    1a72:	28 17       	cp	r18, r24
    1a74:	39 07       	cpc	r19, r25
    1a76:	4a 07       	cpc	r20, r26
    1a78:	5b 07       	cpc	r21, r27
    1a7a:	28 f4       	brcc	.+10     	; 0x1a86 <__umoddi3+0xc0c>
    1a7c:	21 e0       	ldi	r18, 0x01	; 1
    1a7e:	e2 2e       	mov	r14, r18
    1a80:	f1 2c       	mov	r15, r1
    1a82:	01 2d       	mov	r16, r1
    1a84:	11 2d       	mov	r17, r1
    1a86:	ae 18       	sub	r10, r14
    1a88:	bf 08       	sbc	r11, r15
    1a8a:	c0 0a       	sbc	r12, r16
    1a8c:	d1 0a       	sbc	r13, r17
    1a8e:	02 c0       	rjmp	.+4      	; 0x1a94 <__umoddi3+0xc1a>
    1a90:	da 01       	movw	r26, r20
    1a92:	c9 01       	movw	r24, r18
    1a94:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1a96:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1a98:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1a9a:	98 a0       	ldd	r9, Y+32	; 0x20
    1a9c:	68 1a       	sub	r6, r24
    1a9e:	79 0a       	sbc	r7, r25
    1aa0:	8a 0a       	sbc	r8, r26
    1aa2:	9b 0a       	sbc	r9, r27
    1aa4:	49 8d       	ldd	r20, Y+25	; 0x19
    1aa6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1aa8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1aaa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1aac:	4a 19       	sub	r20, r10
    1aae:	5b 09       	sbc	r21, r11
    1ab0:	6c 09       	sbc	r22, r12
    1ab2:	7d 09       	sbc	r23, r13
    1ab4:	5a 01       	movw	r10, r20
    1ab6:	6b 01       	movw	r12, r22
    1ab8:	22 24       	eor	r2, r2
    1aba:	33 24       	eor	r3, r3
    1abc:	21 01       	movw	r4, r2
    1abe:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ac0:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ac4:	98 a1       	ldd	r25, Y+32	; 0x20
    1ac6:	66 15       	cp	r22, r6
    1ac8:	77 05       	cpc	r23, r7
    1aca:	88 05       	cpc	r24, r8
    1acc:	99 05       	cpc	r25, r9
    1ace:	28 f4       	brcc	.+10     	; 0x1ada <__umoddi3+0xc60>
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	28 2e       	mov	r2, r24
    1ad4:	31 2c       	mov	r3, r1
    1ad6:	41 2c       	mov	r4, r1
    1ad8:	51 2c       	mov	r5, r1
    1ada:	86 01       	movw	r16, r12
    1adc:	75 01       	movw	r14, r10
    1ade:	e2 18       	sub	r14, r2
    1ae0:	f3 08       	sbc	r15, r3
    1ae2:	04 09       	sbc	r16, r4
    1ae4:	15 09       	sbc	r17, r5
    1ae6:	a8 01       	movw	r20, r16
    1ae8:	97 01       	movw	r18, r14
    1aea:	66 96       	adiw	r28, 0x16	; 22
    1aec:	0f ac       	ldd	r0, Y+63	; 0x3f
    1aee:	66 97       	sbiw	r28, 0x16	; 22
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <__umoddi3+0xc80>
    1af2:	22 0f       	add	r18, r18
    1af4:	33 1f       	adc	r19, r19
    1af6:	44 1f       	adc	r20, r20
    1af8:	55 1f       	adc	r21, r21
    1afa:	0a 94       	dec	r0
    1afc:	d2 f7       	brpl	.-12     	; 0x1af2 <__umoddi3+0xc78>
    1afe:	d4 01       	movw	r26, r8
    1b00:	c3 01       	movw	r24, r6
    1b02:	67 96       	adiw	r28, 0x17	; 23
    1b04:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b06:	67 97       	sbiw	r28, 0x17	; 23
    1b08:	04 c0       	rjmp	.+8      	; 0x1b12 <__umoddi3+0xc98>
    1b0a:	b6 95       	lsr	r27
    1b0c:	a7 95       	ror	r26
    1b0e:	97 95       	ror	r25
    1b10:	87 95       	ror	r24
    1b12:	0a 94       	dec	r0
    1b14:	d2 f7       	brpl	.-12     	; 0x1b0a <__umoddi3+0xc90>
    1b16:	28 2b       	or	r18, r24
    1b18:	39 2b       	or	r19, r25
    1b1a:	4a 2b       	or	r20, r26
    1b1c:	5b 2b       	or	r21, r27
    1b1e:	29 8b       	std	Y+17, r18	; 0x11
    1b20:	3a 8b       	std	Y+18, r19	; 0x12
    1b22:	4b 8b       	std	Y+19, r20	; 0x13
    1b24:	5c 8b       	std	Y+20, r21	; 0x14
    1b26:	67 96       	adiw	r28, 0x17	; 23
    1b28:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b2a:	67 97       	sbiw	r28, 0x17	; 23
    1b2c:	04 c0       	rjmp	.+8      	; 0x1b36 <__umoddi3+0xcbc>
    1b2e:	16 95       	lsr	r17
    1b30:	07 95       	ror	r16
    1b32:	f7 94       	ror	r15
    1b34:	e7 94       	ror	r14
    1b36:	0a 94       	dec	r0
    1b38:	d2 f7       	brpl	.-12     	; 0x1b2e <__umoddi3+0xcb4>
    1b3a:	ed 8a       	std	Y+21, r14	; 0x15
    1b3c:	fe 8a       	std	Y+22, r15	; 0x16
    1b3e:	0f 8b       	std	Y+23, r16	; 0x17
    1b40:	18 8f       	std	Y+24, r17	; 0x18
    1b42:	3a 89       	ldd	r19, Y+18	; 0x12
    1b44:	4b 89       	ldd	r20, Y+19	; 0x13
    1b46:	5c 89       	ldd	r21, Y+20	; 0x14
    1b48:	6e 2d       	mov	r22, r14
    1b4a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b4c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b4e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b50:	c5 5a       	subi	r28, 0xA5	; 165
    1b52:	df 4f       	sbci	r29, 0xFF	; 255
    1b54:	e2 e1       	ldi	r30, 0x12	; 18
    1b56:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__>

00001b5a <TIMER0_voidInit>:
			OCR0 = TIMER0_CTC_VAL ;

		#elif TIMER0_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR0 , TCCR0_WGM00) ;
    1b5a:	83 b7       	in	r24, 0x33	; 51
    1b5c:	8f 7b       	andi	r24, 0xBF	; 191
    1b5e:	83 bf       	out	0x33, r24	; 51
			SET_BIT(TCCR0 , TCCR0_WGM01) ;
    1b60:	83 b7       	in	r24, 0x33	; 51
    1b62:	88 60       	ori	r24, 0x08	; 8
    1b64:	83 bf       	out	0x33, r24	; 51

			/*Set the Required CTC Value*/
			OCR0 = TIMER0_CTC_VAL ;
    1b66:	8d e7       	ldi	r24, 0x7D	; 125
    1b68:	8c bf       	out	0x3c, r24	; 60

			/*Timer0 Compare Match Interrupt Enable*/
			#if TIMER0_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE0) ;
			#elif TIMER0_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE0) ;
    1b6a:	89 b7       	in	r24, 0x39	; 57
    1b6c:	82 60       	ori	r24, 0x02	; 2
    1b6e:	89 bf       	out	0x39, r24	; 57
			#error "Wrong TIMER0_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR0 &= TIMER_PRESCALER_MASK ;
    1b70:	83 b7       	in	r24, 0x33	; 51
    1b72:	88 7f       	andi	r24, 0xF8	; 248
    1b74:	83 bf       	out	0x33, r24	; 51
	TCCR0 |= TIMER0_PRESCALER ;
    1b76:	83 b7       	in	r24, 0x33	; 51
    1b78:	83 60       	ori	r24, 0x03	; 3
    1b7a:	83 bf       	out	0x33, r24	; 51
}
    1b7c:	08 95       	ret

00001b7e <TIMER1_voidInit>:
				SET_BIT(TCCR1A,TCCR1A_WGM10);
				SET_BIT(TCCR1A,TCCR1A_WGM11);
				SET_BIT(TCCR1B,TCCR1B_WGM12);
				SET_BIT(TCCR1B,TCCR1B_WGM13);
			#elif TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				CLR_BIT(TCCR1A,TCCR1A_WGM10);
    1b7e:	8f b5       	in	r24, 0x2f	; 47
    1b80:	8e 7f       	andi	r24, 0xFE	; 254
    1b82:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A,TCCR1A_WGM11);
    1b84:	8f b5       	in	r24, 0x2f	; 47
    1b86:	82 60       	ori	r24, 0x02	; 2
    1b88:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1B,TCCR1B_WGM12);
    1b8a:	8e b5       	in	r24, 0x2e	; 46
    1b8c:	88 60       	ori	r24, 0x08	; 8
    1b8e:	8e bd       	out	0x2e, r24	; 46
				SET_BIT(TCCR1B,TCCR1B_WGM13);
    1b90:	8e b5       	in	r24, 0x2e	; 46
    1b92:	80 61       	ori	r24, 0x10	; 16
    1b94:	8e bd       	out	0x2e, r24	; 46
			#else
				#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
			#endif

			/*Set the require CTC Values*/
			OCR1A = TIMER1_CTCA_VAL ;
    1b96:	84 ef       	ldi	r24, 0xF4	; 244
    1b98:	91 e0       	ldi	r25, 0x01	; 1
    1b9a:	9b bd       	out	0x2b, r25	; 43
    1b9c:	8a bd       	out	0x2a, r24	; 42
			OCR1B = TIMER1_CTCB_VAL ;
    1b9e:	19 bc       	out	0x29, r1	; 41
    1ba0:	18 bc       	out	0x28, r1	; 40

			/*Set ICR1*/
			#if TIMER1_WAVEFORM_GENERATION_MODE == TIMER1_FAST_PWM_ICR1_MODE
				ICR1 = TIMER1_ICR1_VAL ;
    1ba2:	80 e2       	ldi	r24, 0x20	; 32
    1ba4:	9e e4       	ldi	r25, 0x4E	; 78
    1ba6:	97 bd       	out	0x27, r25	; 39
    1ba8:	86 bd       	out	0x26, r24	; 38

				#if TIMER1_ICR_EDGE == RISING_EDGE
					SET_BIT(TCCR1B , TCCR1B_ICES1) ;
    1baa:	8e b5       	in	r24, 0x2e	; 46
    1bac:	80 64       	ori	r24, 0x40	; 64
    1bae:	8e bd       	out	0x2e, r24	; 46
			/*Set OCR1A mode*/
			#if TIMER1_OCR1A_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1A1) ;
			#elif TIMER1_OCR1A_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1A0) ;
    1bb0:	8f b5       	in	r24, 0x2f	; 47
    1bb2:	8f 7b       	andi	r24, 0xBF	; 191
    1bb4:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A , TCCR1A_COM1A1) ;
    1bb6:	8f b5       	in	r24, 0x2f	; 47
    1bb8:	80 68       	ori	r24, 0x80	; 128
    1bba:	8f bd       	out	0x2f, r24	; 47
			/*Set OCR1B mode*/
			#if TIMER1_OCR1B_MODE == TIMER_OC_DISCONNECTED
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
				CLR_BIT(TCCR1A , TCCR1A_COM1B1) ;
			#elif TIMER1_OCR1B_MODE == TIMER_CLR_ON_CTC_SET_ON_TOP
				CLR_BIT(TCCR1A , TCCR1A_COM1B0) ;
    1bbc:	8f b5       	in	r24, 0x2f	; 47
    1bbe:	8f 7e       	andi	r24, 0xEF	; 239
    1bc0:	8f bd       	out	0x2f, r24	; 47
				SET_BIT(TCCR1A , TCCR1A_COM1B1) ;
    1bc2:	8f b5       	in	r24, 0x2f	; 47
    1bc4:	80 62       	ori	r24, 0x20	; 32
    1bc6:	8f bd       	out	0x2f, r24	; 47
				#error "Wrong TIMER1_OCR1B_MODE Config"
			#endif

			/*Timer1 PWM Interrupt Enable*/
			#if TIMER1_OVERFLOW_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TOIE1) ;
    1bc8:	89 b7       	in	r24, 0x39	; 57
    1bca:	8b 7f       	andi	r24, 0xFB	; 251
    1bcc:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_OVERFLOW_INTERRUPT Config"
			#endif

			#if TIMER1_CTCA_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1A) ;
    1bce:	89 b7       	in	r24, 0x39	; 57
    1bd0:	8f 7e       	andi	r24, 0xEF	; 239
    1bd2:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_CTCA_INTERRUPT Config"
			#endif

			#if TIMER1_CTCB_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE1B) ;
    1bd4:	89 b7       	in	r24, 0x39	; 57
    1bd6:	87 7f       	andi	r24, 0xF7	; 247
    1bd8:	89 bf       	out	0x39, r24	; 57
			#else
				#error "Wrong TIMER1_CTCB_INTERRUPT Config"
			#endif

			#if TIMER1_ICR_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_TICIE1) ;
    1bda:	89 b7       	in	r24, 0x39	; 57
    1bdc:	8f 7d       	andi	r24, 0xDF	; 223
    1bde:	89 bf       	out	0x39, r24	; 57
		#else
			#error "Wrong TIMER1_WAVEFORM_GENERATION_MODE Config"
		#endif

	/*Set the Required Prescaler*/
	TCCR1B &= TIMER_PRESCALER_MASK ;
    1be0:	8e b5       	in	r24, 0x2e	; 46
    1be2:	88 7f       	andi	r24, 0xF8	; 248
    1be4:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= TIMER1_PRESCALER ;
    1be6:	8e b5       	in	r24, 0x2e	; 46
    1be8:	82 60       	ori	r24, 0x02	; 2
    1bea:	8e bd       	out	0x2e, r24	; 46


}
    1bec:	08 95       	ret

00001bee <TIMER2_voidInit>:
			OCR2 = TIMER2_CTC_VAL ;

		#elif TIMER2_WAVEFORM_GENERATION_MODE == TIMER_CTC_MODE

			/*Initialize Waveform Generation Mode as CTC Mode*/
			CLR_BIT(TCCR2 , TCCR2_WGM20) ;
    1bee:	85 b5       	in	r24, 0x25	; 37
    1bf0:	8f 7b       	andi	r24, 0xBF	; 191
    1bf2:	85 bd       	out	0x25, r24	; 37
			SET_BIT(TCCR2 , TCCR2_WGM21) ;
    1bf4:	85 b5       	in	r24, 0x25	; 37
    1bf6:	88 60       	ori	r24, 0x08	; 8
    1bf8:	85 bd       	out	0x25, r24	; 37

			/*Set the Required CTC Value*/
			OCR2 = TIMER2_CTC_VAL ;
    1bfa:	8d e7       	ldi	r24, 0x7D	; 125
    1bfc:	83 bd       	out	0x23, r24	; 35

			/*Timer2 Compare Match Interrupt Enable*/
			#if TIMER2_CTC_INTERRUPT == DISABLE
				CLR_BIT(TIMSK , TIMSK_OCIE2) ;
			#elif TIMER2_CTC_INTERRUPT == ENABLE
				SET_BIT(TIMSK , TIMSK_OCIE2) ;
    1bfe:	89 b7       	in	r24, 0x39	; 57
    1c00:	80 68       	ori	r24, 0x80	; 128
    1c02:	89 bf       	out	0x39, r24	; 57
			#error "Wrong TIMER2_WAVEFORM_GENERATION_MODE Config"

		#endif

	/*Set the Required Prescaler*/
	TCCR2 &= TIMER_PRESCALER_MASK ;
    1c04:	85 b5       	in	r24, 0x25	; 37
    1c06:	88 7f       	andi	r24, 0xF8	; 248
    1c08:	85 bd       	out	0x25, r24	; 37
	TCCR2 |= TIMER2_PRESCALER ;
    1c0a:	85 b5       	in	r24, 0x25	; 37
    1c0c:	83 60       	ori	r24, 0x03	; 3
    1c0e:	85 bd       	out	0x25, r24	; 37
}
    1c10:	08 95       	ret

00001c12 <TIMER0_voidSetPreload>:

/*******************************************************************************************************************/
void TIMER0_voidSetPreload (u8 Copy_u8Preload)
{
	TCNT0 = Copy_u8Preload ;
    1c12:	82 bf       	out	0x32, r24	; 50
}
    1c14:	08 95       	ret

00001c16 <TIMER1_voidSetPreload>:

void TIMER1_voidSetPreload (u16 Copy_u16Preload)
{
	TCNT1 = Copy_u16Preload ;
    1c16:	9d bd       	out	0x2d, r25	; 45
    1c18:	8c bd       	out	0x2c, r24	; 44
}
    1c1a:	08 95       	ret

00001c1c <TIMER2_voidSetPreload>:


void TIMER2_voidSetPreload (u8 Copy_u8Preload)
{
	TCNT2 = Copy_u8Preload ;
    1c1c:	84 bd       	out	0x24, r24	; 36
}
    1c1e:	08 95       	ret

00001c20 <TIMER0_voidSetCTC>:

void TIMER0_voidSetCTC (u8 Copy_u8CTC)
{
	OCR0 = Copy_u8CTC ;
    1c20:	8c bf       	out	0x3c, r24	; 60
}
    1c22:	08 95       	ret

00001c24 <TIMER1_voidSetCTCA>:

void TIMER1_voidSetCTCA (u16 Copy_u16CTCA)
{
	OCR1A = Copy_u16CTCA ;
    1c24:	9b bd       	out	0x2b, r25	; 43
    1c26:	8a bd       	out	0x2a, r24	; 42
}
    1c28:	08 95       	ret

00001c2a <TIMER1_voidSetCTCB>:

void TIMER1_voidSetCTCB (u16 Copy_u16CTCB)
{
	OCR1B = Copy_u16CTCB ;
    1c2a:	99 bd       	out	0x29, r25	; 41
    1c2c:	88 bd       	out	0x28, r24	; 40
}
    1c2e:	08 95       	ret

00001c30 <TIMER2_voidSetCTC>:

void TIMER2_voidSetCTC (u8 Copy_u8CTC)
{
	OCR2 = Copy_u8CTC ;
    1c30:	83 bd       	out	0x23, r24	; 35
}
    1c32:	08 95       	ret

00001c34 <TIMER1_voidSetICR1>:

void TIMER1_voidSetICR1 (u16 Copy_u16ICR1)
{
	ICR1 = Copy_u16ICR1 ;
    1c34:	97 bd       	out	0x27, r25	; 39
    1c36:	86 bd       	out	0x26, r24	; 38
}
    1c38:	08 95       	ret

00001c3a <TIMER0_u8GetTimerCounterValue>:

u8 TIMER0_u8GetTimerCounterValue (void)
{
	return TCNT0 ;
    1c3a:	82 b7       	in	r24, 0x32	; 50
}
    1c3c:	08 95       	ret

00001c3e <TIMER1_u16GetTimerCounterValue>:

u16 TIMER1_u16GetTimerCounterValue (void)
{
	return TCNT1 ;
    1c3e:	2c b5       	in	r18, 0x2c	; 44
    1c40:	3d b5       	in	r19, 0x2d	; 45
}
    1c42:	c9 01       	movw	r24, r18
    1c44:	08 95       	ret

00001c46 <TIMER2_u8GetTimerCounterValue>:

u8 TIMER2_u8GetTimerCounterValue (void)
{
	return TCNT2 ;
    1c46:	84 b5       	in	r24, 0x24	; 36
}
    1c48:	08 95       	ret

00001c4a <TIMER_voidSetPWM>:

/*******************************************************************************************************************/

void TIMER_voidSetPWM(u16 Copy_u16CompareValue)
{
	OCR1A = Copy_u16CompareValue;
    1c4a:	9b bd       	out	0x2b, r25	; 43
    1c4c:	8a bd       	out	0x2a, r24	; 42
}
    1c4e:	08 95       	ret

00001c50 <TIMER_voidICUInitEnable>:
*/
void TIMER_voidICUInitEnable(void)
{
	/* Set trigger source as rising edge Initially  */
	#if (TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_RAISING_EDGE)
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1c50:	8e b5       	in	r24, 0x2e	; 46
    1c52:	80 64       	ori	r24, 0x40	; 64
    1c54:	8e bd       	out	0x2e, r24	; 46
	#elif(TIMER_u8_ICP_INIT_STATE == TIMER_u8_ICP_FALLING_EDGE)
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
	#endif
	
	/* Enable Interrupt of ICU */
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1c56:	89 b7       	in	r24, 0x39	; 57
    1c58:	80 62       	ori	r24, 0x20	; 32
    1c5a:	89 bf       	out	0x39, r24	; 57
}
    1c5c:	08 95       	ret

00001c5e <TIMER_voidICUSetTriggerEdge>:
u8 TIMER_voidICUSetTriggerEdge(u8 Copy_u8Edge)
{
	u8 Local_u8ErrorStatus = OK ;
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
    1c5e:	81 30       	cpi	r24, 0x01	; 1
    1c60:	49 f0       	breq	.+18     	; 0x1c74 <TIMER_voidICUSetTriggerEdge+0x16>
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1c62:	88 23       	and	r24, r24
    1c64:	29 f4       	brne	.+10     	; 0x1c70 <TIMER_voidICUSetTriggerEdge+0x12>
	{
		CLR_BIT(TCCR1B,TCCR1B_ICES1);
    1c66:	8e b5       	in	r24, 0x2e	; 46
    1c68:	8f 7b       	andi	r24, 0xBF	; 191
    1c6a:	8e bd       	out	0x2e, r24	; 46
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorStatus = NOK ;
	}
	return Local_u8ErrorStatus;
	
}
    1c6e:	08 95       	ret
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
	}
	else if(Copy_u8Edge == TIMER_u8_ICP_FALLING_EDGE)
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	08 95       	ret
	u8 Local_u8ErrorStatus = OK ;
	
	/* Change The trigger source as Rising edge or Falling edge */
	if (Copy_u8Edge == TIMER_u8_ICP_RAISING_EDGE)
	{
		SET_BIT(TCCR1B,TCCR1B_ICES1);
    1c74:	8e b5       	in	r24, 0x2e	; 46
    1c76:	80 64       	ori	r24, 0x40	; 64
    1c78:	8e bd       	out	0x2e, r24	; 46
    1c7a:	80 e0       	ldi	r24, 0x00	; 0
    1c7c:	08 95       	ret

00001c7e <TIMER_voidICUEnableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUEnableInterrupt(void)
{
	SET_BIT(TIMSK,TIMSK_TICIE1);
    1c7e:	89 b7       	in	r24, 0x39	; 57
    1c80:	80 62       	ori	r24, 0x20	; 32
    1c82:	89 bf       	out	0x39, r24	; 57
}
    1c84:	08 95       	ret

00001c86 <TIMER_voidICUDisableInterrupt>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidICUDisableInterrupt(void)
{
	CLR_BIT(TIMSK,TIMSK_TICIE1);
    1c86:	89 b7       	in	r24, 0x39	; 57
    1c88:	8f 7d       	andi	r24, 0xDF	; 223
    1c8a:	89 bf       	out	0x39, r24	; 57
}
    1c8c:	08 95       	ret

00001c8e <TIMER_u16GetICR>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

u16 TIMER_u16GetICR(void)
{
	return ICR1;
    1c8e:	26 b5       	in	r18, 0x26	; 38
    1c90:	37 b5       	in	r19, 0x27	; 39
}
    1c92:	c9 01       	movw	r24, r18
    1c94:	08 95       	ret

00001c96 <TIMER_voidWDTSleep>:
//----------------------------------------------------------------------------------------------------------------------------------------------------
/* Hint : prebuild config  */
void TIMER_voidWDTSleep(void)
{
	/* CLear The Prescaler bits  */
	WDTCR &= WDT_PS_MASKING ;
    1c96:	81 b5       	in	r24, 0x21	; 33
    1c98:	88 7f       	andi	r24, 0xF8	; 248
    1c9a:	81 bd       	out	0x21, r24	; 33
	/* Set The required prescaller */
	WDTCR |= WDT_PRESCALER ;
    1c9c:	81 b5       	in	r24, 0x21	; 33
    1c9e:	86 60       	ori	r24, 0x06	; 6
    1ca0:	81 bd       	out	0x21, r24	; 33
}
    1ca2:	08 95       	ret

00001ca4 <TIMER_voidWDTEnable>:

//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTEnable (void)
{
	SET_BIT (WDTCR , WDTCR_WDE);
    1ca4:	81 b5       	in	r24, 0x21	; 33
    1ca6:	88 60       	ori	r24, 0x08	; 8
    1ca8:	81 bd       	out	0x21, r24	; 33
}
    1caa:	08 95       	ret

00001cac <TIMER_voidWDTDisable>:
//----------------------------------------------------------------------------------------------------------------------------------------------------

void TIMER_voidWDTDisable (void)
{
	/* Set Bit 3&4 at the same CLK cycle  */
	WDTCR |= 0b00011000 ;
    1cac:	81 b5       	in	r24, 0x21	; 33
    1cae:	88 61       	ori	r24, 0x18	; 24
    1cb0:	81 bd       	out	0x21, r24	; 33
	/* WDTCR_WDE = 0 */
	/* I don't care for any value in this Reg Cuz I want to Disable */
	WDTCR = 0 ;
    1cb2:	11 bc       	out	0x21, r1	; 33
}
    1cb4:	08 95       	ret

00001cb6 <TIMER_u8SetCallBack>:

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
	u8 Local_u8ErrorState = OK ;

	if (Copy_pvCallBackFunc != NULL)
    1cb6:	00 97       	sbiw	r24, 0x00	; 0
    1cb8:	51 f0       	breq	.+20     	; 0x1cce <TIMER_u8SetCallBack+0x18>
	{
		TIMERS_pvCallBackFunc[Copy_u8VectorID] = Copy_pvCallBackFunc ;
    1cba:	e6 2f       	mov	r30, r22
    1cbc:	f0 e0       	ldi	r31, 0x00	; 0
    1cbe:	ee 0f       	add	r30, r30
    1cc0:	ff 1f       	adc	r31, r31
    1cc2:	e4 50       	subi	r30, 0x04	; 4
    1cc4:	fe 4f       	sbci	r31, 0xFE	; 254
    1cc6:	91 83       	std	Z+1, r25	; 0x01
    1cc8:	80 83       	st	Z, r24
    1cca:	80 e0       	ldi	r24, 0x00	; 0
	{
		Local_u8ErrorState = NULL_POINTER ;
	}

	return Local_u8ErrorState ;
}
    1ccc:	08 95       	ret

u8 TIMER_u8SetCallBack(void (*Copy_pvCallBackFunc)(void) , u8 Copy_u8VectorID)
{
	u8 Local_u8ErrorState = OK ;

	if (Copy_pvCallBackFunc != NULL)
    1cce:	82 e0       	ldi	r24, 0x02	; 2
    1cd0:	08 95       	ret

00001cd2 <__vector_11>:
}

/*TIMER0 Normal Mode ISR*/
void __vector_11 (void)		__attribute__((signal)) ;
void __vector_11 (void)
{
    1cd2:	1f 92       	push	r1
    1cd4:	0f 92       	push	r0
    1cd6:	0f b6       	in	r0, 0x3f	; 63
    1cd8:	0f 92       	push	r0
    1cda:	11 24       	eor	r1, r1
    1cdc:	2f 93       	push	r18
    1cde:	3f 93       	push	r19
    1ce0:	4f 93       	push	r20
    1ce2:	5f 93       	push	r21
    1ce4:	6f 93       	push	r22
    1ce6:	7f 93       	push	r23
    1ce8:	8f 93       	push	r24
    1cea:	9f 93       	push	r25
    1cec:	af 93       	push	r26
    1cee:	bf 93       	push	r27
    1cf0:	ef 93       	push	r30
    1cf2:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID] != NULL)
    1cf4:	e0 91 12 02 	lds	r30, 0x0212
    1cf8:	f0 91 13 02 	lds	r31, 0x0213
    1cfc:	30 97       	sbiw	r30, 0x00	; 0
    1cfe:	09 f0       	breq	.+2      	; 0x1d02 <__vector_11+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_OVF_VECTOR_ID]() ;
    1d00:	09 95       	icall
	}
}
    1d02:	ff 91       	pop	r31
    1d04:	ef 91       	pop	r30
    1d06:	bf 91       	pop	r27
    1d08:	af 91       	pop	r26
    1d0a:	9f 91       	pop	r25
    1d0c:	8f 91       	pop	r24
    1d0e:	7f 91       	pop	r23
    1d10:	6f 91       	pop	r22
    1d12:	5f 91       	pop	r21
    1d14:	4f 91       	pop	r20
    1d16:	3f 91       	pop	r19
    1d18:	2f 91       	pop	r18
    1d1a:	0f 90       	pop	r0
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	0f 90       	pop	r0
    1d20:	1f 90       	pop	r1
    1d22:	18 95       	reti

00001d24 <__vector_10>:

/*TIMER0 CTC Mode ISR*/
void __vector_10 (void)		__attribute__((signal)) ;
void __vector_10 (void)
{
    1d24:	1f 92       	push	r1
    1d26:	0f 92       	push	r0
    1d28:	0f b6       	in	r0, 0x3f	; 63
    1d2a:	0f 92       	push	r0
    1d2c:	11 24       	eor	r1, r1
    1d2e:	2f 93       	push	r18
    1d30:	3f 93       	push	r19
    1d32:	4f 93       	push	r20
    1d34:	5f 93       	push	r21
    1d36:	6f 93       	push	r22
    1d38:	7f 93       	push	r23
    1d3a:	8f 93       	push	r24
    1d3c:	9f 93       	push	r25
    1d3e:	af 93       	push	r26
    1d40:	bf 93       	push	r27
    1d42:	ef 93       	push	r30
    1d44:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID] != NULL)
    1d46:	e0 91 10 02 	lds	r30, 0x0210
    1d4a:	f0 91 11 02 	lds	r31, 0x0211
    1d4e:	30 97       	sbiw	r30, 0x00	; 0
    1d50:	09 f0       	breq	.+2      	; 0x1d54 <__vector_10+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER0_CTC_VECTOR_ID]() ;
    1d52:	09 95       	icall
	}
}
    1d54:	ff 91       	pop	r31
    1d56:	ef 91       	pop	r30
    1d58:	bf 91       	pop	r27
    1d5a:	af 91       	pop	r26
    1d5c:	9f 91       	pop	r25
    1d5e:	8f 91       	pop	r24
    1d60:	7f 91       	pop	r23
    1d62:	6f 91       	pop	r22
    1d64:	5f 91       	pop	r21
    1d66:	4f 91       	pop	r20
    1d68:	3f 91       	pop	r19
    1d6a:	2f 91       	pop	r18
    1d6c:	0f 90       	pop	r0
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	0f 90       	pop	r0
    1d72:	1f 90       	pop	r1
    1d74:	18 95       	reti

00001d76 <__vector_9>:

/*TIMER1 Normal Mode ISR*/
void __vector_9 (void)		__attribute__((signal)) ;
void __vector_9 (void)
{
    1d76:	1f 92       	push	r1
    1d78:	0f 92       	push	r0
    1d7a:	0f b6       	in	r0, 0x3f	; 63
    1d7c:	0f 92       	push	r0
    1d7e:	11 24       	eor	r1, r1
    1d80:	2f 93       	push	r18
    1d82:	3f 93       	push	r19
    1d84:	4f 93       	push	r20
    1d86:	5f 93       	push	r21
    1d88:	6f 93       	push	r22
    1d8a:	7f 93       	push	r23
    1d8c:	8f 93       	push	r24
    1d8e:	9f 93       	push	r25
    1d90:	af 93       	push	r26
    1d92:	bf 93       	push	r27
    1d94:	ef 93       	push	r30
    1d96:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID] != NULL)
    1d98:	e0 91 0e 02 	lds	r30, 0x020E
    1d9c:	f0 91 0f 02 	lds	r31, 0x020F
    1da0:	30 97       	sbiw	r30, 0x00	; 0
    1da2:	09 f0       	breq	.+2      	; 0x1da6 <__vector_9+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_OVF_VECTOR_ID]() ;
    1da4:	09 95       	icall
	}
}
    1da6:	ff 91       	pop	r31
    1da8:	ef 91       	pop	r30
    1daa:	bf 91       	pop	r27
    1dac:	af 91       	pop	r26
    1dae:	9f 91       	pop	r25
    1db0:	8f 91       	pop	r24
    1db2:	7f 91       	pop	r23
    1db4:	6f 91       	pop	r22
    1db6:	5f 91       	pop	r21
    1db8:	4f 91       	pop	r20
    1dba:	3f 91       	pop	r19
    1dbc:	2f 91       	pop	r18
    1dbe:	0f 90       	pop	r0
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	0f 90       	pop	r0
    1dc4:	1f 90       	pop	r1
    1dc6:	18 95       	reti

00001dc8 <__vector_8>:

/*TIMER1 CTCB Mode ISR*/
void __vector_8 (void)		__attribute__((signal)) ;
void __vector_8 (void)
{
    1dc8:	1f 92       	push	r1
    1dca:	0f 92       	push	r0
    1dcc:	0f b6       	in	r0, 0x3f	; 63
    1dce:	0f 92       	push	r0
    1dd0:	11 24       	eor	r1, r1
    1dd2:	2f 93       	push	r18
    1dd4:	3f 93       	push	r19
    1dd6:	4f 93       	push	r20
    1dd8:	5f 93       	push	r21
    1dda:	6f 93       	push	r22
    1ddc:	7f 93       	push	r23
    1dde:	8f 93       	push	r24
    1de0:	9f 93       	push	r25
    1de2:	af 93       	push	r26
    1de4:	bf 93       	push	r27
    1de6:	ef 93       	push	r30
    1de8:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID] != NULL)
    1dea:	e0 91 0c 02 	lds	r30, 0x020C
    1dee:	f0 91 0d 02 	lds	r31, 0x020D
    1df2:	30 97       	sbiw	r30, 0x00	; 0
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <__vector_8+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCB_VECTOR_ID]() ;
    1df6:	09 95       	icall
	}
}
    1df8:	ff 91       	pop	r31
    1dfa:	ef 91       	pop	r30
    1dfc:	bf 91       	pop	r27
    1dfe:	af 91       	pop	r26
    1e00:	9f 91       	pop	r25
    1e02:	8f 91       	pop	r24
    1e04:	7f 91       	pop	r23
    1e06:	6f 91       	pop	r22
    1e08:	5f 91       	pop	r21
    1e0a:	4f 91       	pop	r20
    1e0c:	3f 91       	pop	r19
    1e0e:	2f 91       	pop	r18
    1e10:	0f 90       	pop	r0
    1e12:	0f be       	out	0x3f, r0	; 63
    1e14:	0f 90       	pop	r0
    1e16:	1f 90       	pop	r1
    1e18:	18 95       	reti

00001e1a <__vector_7>:

/*TIMER1 CTCA Mode ISR*/
void __vector_7 (void)		__attribute__((signal)) ;
void __vector_7 (void)
{
    1e1a:	1f 92       	push	r1
    1e1c:	0f 92       	push	r0
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	0f 92       	push	r0
    1e22:	11 24       	eor	r1, r1
    1e24:	2f 93       	push	r18
    1e26:	3f 93       	push	r19
    1e28:	4f 93       	push	r20
    1e2a:	5f 93       	push	r21
    1e2c:	6f 93       	push	r22
    1e2e:	7f 93       	push	r23
    1e30:	8f 93       	push	r24
    1e32:	9f 93       	push	r25
    1e34:	af 93       	push	r26
    1e36:	bf 93       	push	r27
    1e38:	ef 93       	push	r30
    1e3a:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID] != NULL)
    1e3c:	e0 91 0a 02 	lds	r30, 0x020A
    1e40:	f0 91 0b 02 	lds	r31, 0x020B
    1e44:	30 97       	sbiw	r30, 0x00	; 0
    1e46:	09 f0       	breq	.+2      	; 0x1e4a <__vector_7+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_CTCA_VECTOR_ID]() ;
    1e48:	09 95       	icall
	}
}
    1e4a:	ff 91       	pop	r31
    1e4c:	ef 91       	pop	r30
    1e4e:	bf 91       	pop	r27
    1e50:	af 91       	pop	r26
    1e52:	9f 91       	pop	r25
    1e54:	8f 91       	pop	r24
    1e56:	7f 91       	pop	r23
    1e58:	6f 91       	pop	r22
    1e5a:	5f 91       	pop	r21
    1e5c:	4f 91       	pop	r20
    1e5e:	3f 91       	pop	r19
    1e60:	2f 91       	pop	r18
    1e62:	0f 90       	pop	r0
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	0f 90       	pop	r0
    1e68:	1f 90       	pop	r1
    1e6a:	18 95       	reti

00001e6c <__vector_6>:

/*TIMER1 ICU ISR*/
void __vector_6 (void)		__attribute__((signal)) ;
void __vector_6 (void)
{
    1e6c:	1f 92       	push	r1
    1e6e:	0f 92       	push	r0
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	0f 92       	push	r0
    1e74:	11 24       	eor	r1, r1
    1e76:	2f 93       	push	r18
    1e78:	3f 93       	push	r19
    1e7a:	4f 93       	push	r20
    1e7c:	5f 93       	push	r21
    1e7e:	6f 93       	push	r22
    1e80:	7f 93       	push	r23
    1e82:	8f 93       	push	r24
    1e84:	9f 93       	push	r25
    1e86:	af 93       	push	r26
    1e88:	bf 93       	push	r27
    1e8a:	ef 93       	push	r30
    1e8c:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID] != NULL)
    1e8e:	e0 91 08 02 	lds	r30, 0x0208
    1e92:	f0 91 09 02 	lds	r31, 0x0209
    1e96:	30 97       	sbiw	r30, 0x00	; 0
    1e98:	09 f0       	breq	.+2      	; 0x1e9c <__vector_6+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER1_ICU_VECTOR_ID]() ;
    1e9a:	09 95       	icall
	}
}
    1e9c:	ff 91       	pop	r31
    1e9e:	ef 91       	pop	r30
    1ea0:	bf 91       	pop	r27
    1ea2:	af 91       	pop	r26
    1ea4:	9f 91       	pop	r25
    1ea6:	8f 91       	pop	r24
    1ea8:	7f 91       	pop	r23
    1eaa:	6f 91       	pop	r22
    1eac:	5f 91       	pop	r21
    1eae:	4f 91       	pop	r20
    1eb0:	3f 91       	pop	r19
    1eb2:	2f 91       	pop	r18
    1eb4:	0f 90       	pop	r0
    1eb6:	0f be       	out	0x3f, r0	; 63
    1eb8:	0f 90       	pop	r0
    1eba:	1f 90       	pop	r1
    1ebc:	18 95       	reti

00001ebe <__vector_5>:

/*TIMER2 Normal Mode ISR*/
void __vector_5 (void)		__attribute__((signal)) ;
void __vector_5 (void)
{
    1ebe:	1f 92       	push	r1
    1ec0:	0f 92       	push	r0
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	0f 92       	push	r0
    1ec6:	11 24       	eor	r1, r1
    1ec8:	2f 93       	push	r18
    1eca:	3f 93       	push	r19
    1ecc:	4f 93       	push	r20
    1ece:	5f 93       	push	r21
    1ed0:	6f 93       	push	r22
    1ed2:	7f 93       	push	r23
    1ed4:	8f 93       	push	r24
    1ed6:	9f 93       	push	r25
    1ed8:	af 93       	push	r26
    1eda:	bf 93       	push	r27
    1edc:	ef 93       	push	r30
    1ede:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID] != NULL)
    1ee0:	e0 91 06 02 	lds	r30, 0x0206
    1ee4:	f0 91 07 02 	lds	r31, 0x0207
    1ee8:	30 97       	sbiw	r30, 0x00	; 0
    1eea:	09 f0       	breq	.+2      	; 0x1eee <__vector_5+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_OVF_VECTOR_ID]() ;
    1eec:	09 95       	icall
	}
}
    1eee:	ff 91       	pop	r31
    1ef0:	ef 91       	pop	r30
    1ef2:	bf 91       	pop	r27
    1ef4:	af 91       	pop	r26
    1ef6:	9f 91       	pop	r25
    1ef8:	8f 91       	pop	r24
    1efa:	7f 91       	pop	r23
    1efc:	6f 91       	pop	r22
    1efe:	5f 91       	pop	r21
    1f00:	4f 91       	pop	r20
    1f02:	3f 91       	pop	r19
    1f04:	2f 91       	pop	r18
    1f06:	0f 90       	pop	r0
    1f08:	0f be       	out	0x3f, r0	; 63
    1f0a:	0f 90       	pop	r0
    1f0c:	1f 90       	pop	r1
    1f0e:	18 95       	reti

00001f10 <__vector_4>:

/*TIMER2 CTC Mode ISR*/
void __vector_4 (void)		__attribute__((signal)) ;
void __vector_4 (void)
{
    1f10:	1f 92       	push	r1
    1f12:	0f 92       	push	r0
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	0f 92       	push	r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	2f 93       	push	r18
    1f1c:	3f 93       	push	r19
    1f1e:	4f 93       	push	r20
    1f20:	5f 93       	push	r21
    1f22:	6f 93       	push	r22
    1f24:	7f 93       	push	r23
    1f26:	8f 93       	push	r24
    1f28:	9f 93       	push	r25
    1f2a:	af 93       	push	r26
    1f2c:	bf 93       	push	r27
    1f2e:	ef 93       	push	r30
    1f30:	ff 93       	push	r31
	if (TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID] != NULL)
    1f32:	e0 91 04 02 	lds	r30, 0x0204
    1f36:	f0 91 05 02 	lds	r31, 0x0205
    1f3a:	30 97       	sbiw	r30, 0x00	; 0
    1f3c:	09 f0       	breq	.+2      	; 0x1f40 <__vector_4+0x30>
	{
		TIMERS_pvCallBackFunc[TIMER2_CTC_VECTOR_ID]() ;
    1f3e:	09 95       	icall
	}
}
    1f40:	ff 91       	pop	r31
    1f42:	ef 91       	pop	r30
    1f44:	bf 91       	pop	r27
    1f46:	af 91       	pop	r26
    1f48:	9f 91       	pop	r25
    1f4a:	8f 91       	pop	r24
    1f4c:	7f 91       	pop	r23
    1f4e:	6f 91       	pop	r22
    1f50:	5f 91       	pop	r21
    1f52:	4f 91       	pop	r20
    1f54:	3f 91       	pop	r19
    1f56:	2f 91       	pop	r18
    1f58:	0f 90       	pop	r0
    1f5a:	0f be       	out	0x3f, r0	; 63
    1f5c:	0f 90       	pop	r0
    1f5e:	1f 90       	pop	r1
    1f60:	18 95       	reti

00001f62 <PORT_voidInit>:
#include "PORT_private.h"
#include "PORT_interface.h"

void PORT_voidInit(void)
{
	DDRA_Register=PORTA_DIR;
    1f62:	88 e3       	ldi	r24, 0x38	; 56
    1f64:	8a bb       	out	0x1a, r24	; 26
	DDRB_Register=PORTB_DIR;
    1f66:	87 e0       	ldi	r24, 0x07	; 7
    1f68:	87 bb       	out	0x17, r24	; 23
	DDRC_Register=PORTC_DIR;
    1f6a:	14 ba       	out	0x14, r1	; 20
	DDRD_Register=PORTD_DIR;
    1f6c:	11 ba       	out	0x11, r1	; 17
	
	/* 
		Hint : will set 1 if The pin input Pullup
	*/
	PORTA_Register=PORTA_INITIAL_VALUE;
    1f6e:	1b ba       	out	0x1b, r1	; 27
	PORTB_Register=PORTB_INITIAL_VALUE;
    1f70:	18 ba       	out	0x18, r1	; 24
	PORTC_Register=PORTC_INITIAL_VALUE;
    1f72:	15 ba       	out	0x15, r1	; 21
	PORTD_Register=PORTD_INITIAL_VALUE;
    1f74:	84 e0       	ldi	r24, 0x04	; 4
    1f76:	82 bb       	out	0x12, r24	; 18
}
    1f78:	08 95       	ret

00001f7a <GIE_VoidEnable>:
 * Parameters : Nothing
 * return : Nothing
*/
void GIE_VoidEnable (void)
{
	SET_BIT (SREG , SREG_I) ;
    1f7a:	8f b7       	in	r24, 0x3f	; 63
    1f7c:	80 68       	ori	r24, 0x80	; 128
    1f7e:	8f bf       	out	0x3f, r24	; 63
}
    1f80:	08 95       	ret

00001f82 <GIE_VoidDisable>:
 * Parameters : Nothing
 * return : Nothing
*/
void GIE_VoidDisable (void)
{
	CLR_BIT (SREG , SREG_I) ;
    1f82:	8f b7       	in	r24, 0x3f	; 63
    1f84:	8f 77       	andi	r24, 0x7F	; 127
    1f86:	8f bf       	out	0x3f, r24	; 63
}
    1f88:	08 95       	ret

00001f8a <EXTI_voidInit>:

				SET_BIT( MCUCR_REG , 2 ); CLR_BIT( MCUCR_REG , 3 );

			#elif     EXTI_SENSE_MODE == EXTI_FALLING_EDGE

				CLR_BIT( MCUCR_REG , 2 ); SET_BIT( MCUCR_REG , 3 );
    1f8a:	85 b7       	in	r24, 0x35	; 53
    1f8c:	8b 7f       	andi	r24, 0xFB	; 251
    1f8e:	85 bf       	out	0x35, r24	; 53
    1f90:	85 b7       	in	r24, 0x35	; 53
    1f92:	88 60       	ori	r24, 0x08	; 8
    1f94:	85 bf       	out	0x35, r24	; 53
		
		#endif

	#endif

}
    1f96:	08 95       	ret

00001f98 <EXTI_voidSetSignalLatch>:
 * 	                                    2-  ON_CHANGE
 * 	                                    3-  FALLING_EDGE
 * 	                                    4-  RISING_EDGE
 * 	 output: Error status with type u8
 * 	*/
void EXTI_voidSetSignalLatch    ( u8 Copy_u8SenseMode , u8 Copy_u8Line ){
    1f98:	98 2f       	mov	r25, r24

	/* For EXTI0 & EXTI1 */
	if( Copy_u8Line >= EXTI_LINE0 && Copy_u8Line <= EXTI_LINE1 ){
    1f9a:	86 2f       	mov	r24, r22
    1f9c:	86 50       	subi	r24, 0x06	; 6
    1f9e:	82 30       	cpi	r24, 0x02	; 2
    1fa0:	68 f0       	brcs	.+26     	; 0x1fbc <EXTI_voidSetSignalLatch+0x24>
	}

	/* For EXTI2 */
	else{

		switch( Copy_u8SenseMode ){
    1fa2:	99 23       	and	r25, r25
    1fa4:	21 f4       	brne	.+8      	; 0x1fae <EXTI_voidSetSignalLatch+0x16>
		
		/* INT Sence Control (Trigger) For EXTI0 & EXTI1   */
		case EXTI_FALLING_EDGE : CLR_BIT( MCUCSR_REG , 6 );  break;
    1fa6:	84 b7       	in	r24, 0x34	; 52
    1fa8:	8f 7b       	andi	r24, 0xBF	; 191
    1faa:	84 bf       	out	0x34, r24	; 52
    1fac:	08 95       	ret
	}

	/* For EXTI2 */
	else{

		switch( Copy_u8SenseMode ){
    1fae:	91 30       	cpi	r25, 0x01	; 1
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <EXTI_voidSetSignalLatch+0x1c>
    1fb2:	08 95       	ret
		
		/* INT Sence Control (Trigger) For EXTI0 & EXTI1   */
		case EXTI_FALLING_EDGE : CLR_BIT( MCUCSR_REG , 6 );  break;
		case EXTI_RISING_EDGE  : SET_BIT( MCUCSR_REG , 6 );  break;
    1fb4:	84 b7       	in	r24, 0x34	; 52
    1fb6:	80 64       	ori	r24, 0x40	; 64
    1fb8:	84 bf       	out	0x34, r24	; 52
    1fba:	08 95       	ret
void EXTI_voidSetSignalLatch    ( u8 Copy_u8SenseMode , u8 Copy_u8Line ){

	/* For EXTI0 & EXTI1 */
	if( Copy_u8Line >= EXTI_LINE0 && Copy_u8Line <= EXTI_LINE1 ){

		Copy_u8Line = ( 6 - Copy_u8Line ) * -2 ;
    1fbc:	26 2f       	mov	r18, r22
    1fbe:	22 0f       	add	r18, r18
    1fc0:	2c 50       	subi	r18, 0x0C	; 12

		switch( Copy_u8SenseMode ){
    1fc2:	91 30       	cpi	r25, 0x01	; 1
    1fc4:	c9 f1       	breq	.+114    	; 0x2038 <EXTI_voidSetSignalLatch+0xa0>
    1fc6:	91 30       	cpi	r25, 0x01	; 1
    1fc8:	c8 f4       	brcc	.+50     	; 0x1ffc <EXTI_voidSetSignalLatch+0x64>

		/* INT Sence Control (Trigger) For EXTI0 & EXTI1   */
		case EXTI_LOW_LEVEL    : CLR_BIT( MCUCR_REG , Copy_u8Line ); CLR_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
		case EXTI_ON_CHANGE    : SET_BIT( MCUCR_REG , Copy_u8Line ); CLR_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
		case EXTI_FALLING_EDGE : CLR_BIT( MCUCR_REG , Copy_u8Line ); SET_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
    1fca:	65 b7       	in	r22, 0x35	; 53
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	50 e0       	ldi	r21, 0x00	; 0
    1fd2:	ca 01       	movw	r24, r20
    1fd4:	02 2e       	mov	r0, r18
    1fd6:	02 c0       	rjmp	.+4      	; 0x1fdc <EXTI_voidSetSignalLatch+0x44>
    1fd8:	88 0f       	add	r24, r24
    1fda:	99 1f       	adc	r25, r25
    1fdc:	0a 94       	dec	r0
    1fde:	e2 f7       	brpl	.-8      	; 0x1fd8 <EXTI_voidSetSignalLatch+0x40>
    1fe0:	80 95       	com	r24
    1fe2:	86 23       	and	r24, r22
    1fe4:	85 bf       	out	0x35, r24	; 53
		case EXTI_RISING_EDGE  : SET_BIT( MCUCR_REG , Copy_u8Line ); SET_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
    1fe6:	85 b7       	in	r24, 0x35	; 53
    1fe8:	2f 5f       	subi	r18, 0xFF	; 255
    1fea:	3f 4f       	sbci	r19, 0xFF	; 255
    1fec:	02 c0       	rjmp	.+4      	; 0x1ff2 <EXTI_voidSetSignalLatch+0x5a>
    1fee:	44 0f       	add	r20, r20
    1ff0:	55 1f       	adc	r21, r21
    1ff2:	2a 95       	dec	r18
    1ff4:	e2 f7       	brpl	.-8      	; 0x1fee <EXTI_voidSetSignalLatch+0x56>
    1ff6:	84 2b       	or	r24, r20
    1ff8:	85 bf       	out	0x35, r24	; 53
    1ffa:	08 95       	ret
	/* For EXTI0 & EXTI1 */
	if( Copy_u8Line >= EXTI_LINE0 && Copy_u8Line <= EXTI_LINE1 ){

		Copy_u8Line = ( 6 - Copy_u8Line ) * -2 ;

		switch( Copy_u8SenseMode ){
    1ffc:	92 30       	cpi	r25, 0x02	; 2
    1ffe:	51 f1       	breq	.+84     	; 0x2054 <EXTI_voidSetSignalLatch+0xbc>
    2000:	93 30       	cpi	r25, 0x03	; 3
    2002:	b9 f6       	brne	.-82     	; 0x1fb2 <EXTI_voidSetSignalLatch+0x1a>

		/* INT Sence Control (Trigger) For EXTI0 & EXTI1   */
		case EXTI_LOW_LEVEL    : CLR_BIT( MCUCR_REG , Copy_u8Line ); CLR_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
		case EXTI_ON_CHANGE    : SET_BIT( MCUCR_REG , Copy_u8Line ); CLR_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
    2004:	65 b7       	in	r22, 0x35	; 53
    2006:	42 2f       	mov	r20, r18
    2008:	50 e0       	ldi	r21, 0x00	; 0
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	9c 01       	movw	r18, r24
    2010:	04 2e       	mov	r0, r20
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <EXTI_voidSetSignalLatch+0x80>
    2014:	22 0f       	add	r18, r18
    2016:	33 1f       	adc	r19, r19
    2018:	0a 94       	dec	r0
    201a:	e2 f7       	brpl	.-8      	; 0x2014 <EXTI_voidSetSignalLatch+0x7c>
    201c:	62 2b       	or	r22, r18
    201e:	65 bf       	out	0x35, r22	; 53
    2020:	25 b7       	in	r18, 0x35	; 53
    2022:	4f 5f       	subi	r20, 0xFF	; 255
    2024:	5f 4f       	sbci	r21, 0xFF	; 255
    2026:	02 c0       	rjmp	.+4      	; 0x202c <EXTI_voidSetSignalLatch+0x94>
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	4a 95       	dec	r20
    202e:	e2 f7       	brpl	.-8      	; 0x2028 <EXTI_voidSetSignalLatch+0x90>
    2030:	80 95       	com	r24
    2032:	82 23       	and	r24, r18
    2034:	85 bf       	out	0x35, r24	; 53
    2036:	08 95       	ret
		case EXTI_FALLING_EDGE : CLR_BIT( MCUCR_REG , Copy_u8Line ); SET_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
		case EXTI_RISING_EDGE  : SET_BIT( MCUCR_REG , Copy_u8Line ); SET_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
    2038:	65 b7       	in	r22, 0x35	; 53
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	41 e0       	ldi	r20, 0x01	; 1
    203e:	50 e0       	ldi	r21, 0x00	; 0
    2040:	ca 01       	movw	r24, r20
    2042:	02 2e       	mov	r0, r18
    2044:	02 c0       	rjmp	.+4      	; 0x204a <EXTI_voidSetSignalLatch+0xb2>
    2046:	88 0f       	add	r24, r24
    2048:	99 1f       	adc	r25, r25
    204a:	0a 94       	dec	r0
    204c:	e2 f7       	brpl	.-8      	; 0x2046 <EXTI_voidSetSignalLatch+0xae>
    204e:	68 2b       	or	r22, r24
    2050:	65 bf       	out	0x35, r22	; 53
    2052:	c9 cf       	rjmp	.-110    	; 0x1fe6 <EXTI_voidSetSignalLatch+0x4e>
		Copy_u8Line = ( 6 - Copy_u8Line ) * -2 ;

		switch( Copy_u8SenseMode ){

		/* INT Sence Control (Trigger) For EXTI0 & EXTI1   */
		case EXTI_LOW_LEVEL    : CLR_BIT( MCUCR_REG , Copy_u8Line ); CLR_BIT( MCUCR_REG , Copy_u8Line + 1 ); break;
    2054:	65 b7       	in	r22, 0x35	; 53
    2056:	42 2f       	mov	r20, r18
    2058:	50 e0       	ldi	r21, 0x00	; 0
    205a:	21 e0       	ldi	r18, 0x01	; 1
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	c9 01       	movw	r24, r18
    2060:	04 2e       	mov	r0, r20
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <EXTI_voidSetSignalLatch+0xd0>
    2064:	88 0f       	add	r24, r24
    2066:	99 1f       	adc	r25, r25
    2068:	0a 94       	dec	r0
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <EXTI_voidSetSignalLatch+0xcc>
    206c:	80 95       	com	r24
    206e:	86 23       	and	r24, r22
    2070:	85 bf       	out	0x35, r24	; 53
    2072:	85 b7       	in	r24, 0x35	; 53
    2074:	4f 5f       	subi	r20, 0xFF	; 255
    2076:	5f 4f       	sbci	r21, 0xFF	; 255
    2078:	02 c0       	rjmp	.+4      	; 0x207e <EXTI_voidSetSignalLatch+0xe6>
    207a:	22 0f       	add	r18, r18
    207c:	33 1f       	adc	r19, r19
    207e:	4a 95       	dec	r20
    2080:	e2 f7       	brpl	.-8      	; 0x207a <EXTI_voidSetSignalLatch+0xe2>
    2082:	20 95       	com	r18
    2084:	28 23       	and	r18, r24
    2086:	25 bf       	out	0x35, r18	; 53
    2088:	08 95       	ret

0000208a <EXTI_voidDisableInterrupt>:

	}

}

u8 EXTI_voidDisableInterrupt   ( u8 Copy_u8Line ){
    208a:	38 2f       	mov	r19, r24

	u8 Local_u8ErrorState = OK ;
	if ( (Copy_u8Line>=EXTI_LINE2) && (Copy_u8Line<=EXTI_LINE1) )  /* Check [5:7] */
    208c:	85 50       	subi	r24, 0x05	; 5
    208e:	83 30       	cpi	r24, 0x03	; 3
    2090:	68 f4       	brcc	.+26     	; 0x20ac <EXTI_voidDisableInterrupt+0x22>
	{
		/* Clear The Required BIT */
		CLR_BIT( GICR_REG , Copy_u8Line );
    2092:	2b b7       	in	r18, 0x3b	; 59
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 c0       	rjmp	.+4      	; 0x209e <EXTI_voidDisableInterrupt+0x14>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	3a 95       	dec	r19
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <EXTI_voidDisableInterrupt+0x10>
    20a2:	80 95       	com	r24
    20a4:	82 23       	and	r24, r18
    20a6:	8b bf       	out	0x3b, r24	; 59
    20a8:	80 e0       	ldi	r24, 0x00	; 0
		Local_u8ErrorState = NOK ;
	}
	
	return Local_u8ErrorState ;

}
    20aa:	08 95       	ret
}

u8 EXTI_voidDisableInterrupt   ( u8 Copy_u8Line ){

	u8 Local_u8ErrorState = OK ;
	if ( (Copy_u8Line>=EXTI_LINE2) && (Copy_u8Line<=EXTI_LINE1) )  /* Check [5:7] */
    20ac:	81 e0       	ldi	r24, 0x01	; 1
    20ae:	08 95       	ret

000020b0 <EXTI_voidEnableInterrupt>:
	
	return Local_u8ErrorState ;

}

u8 EXTI_voidEnableInterrupt    ( u8 Copy_u8Line ){
    20b0:	38 2f       	mov	r19, r24

	u8 Local_u8ErrorState = OK ;
	if ( (Copy_u8Line>=EXTI_LINE2) && (Copy_u8Line<=EXTI_LINE1) )  /* Check [5:7] */
    20b2:	85 50       	subi	r24, 0x05	; 5
    20b4:	83 30       	cpi	r24, 0x03	; 3
    20b6:	60 f4       	brcc	.+24     	; 0x20d0 <EXTI_voidEnableInterrupt+0x20>
	{
		/* Set The Required BIT */
		SET_BIT( GICR_REG , Copy_u8Line );
    20b8:	2b b7       	in	r18, 0x3b	; 59
    20ba:	81 e0       	ldi	r24, 0x01	; 1
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <EXTI_voidEnableInterrupt+0x14>
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	3a 95       	dec	r19
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <EXTI_voidEnableInterrupt+0x10>
    20c8:	28 2b       	or	r18, r24
    20ca:	2b bf       	out	0x3b, r18	; 59
    20cc:	80 e0       	ldi	r24, 0x00	; 0
		Local_u8ErrorState = NOK ;
	}
	
	return Local_u8ErrorState ;

}
    20ce:	08 95       	ret
}

u8 EXTI_voidEnableInterrupt    ( u8 Copy_u8Line ){

	u8 Local_u8ErrorState = OK ;
	if ( (Copy_u8Line>=EXTI_LINE2) && (Copy_u8Line<=EXTI_LINE1) )  /* Check [5:7] */
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	08 95       	ret

000020d4 <EXTI_voidClearFlag>:

}

void EXTI_voidClearFlag ( u8 Copy_u8Line ){

	SET_BIT( GIFR_REG , Copy_u8Line );
    20d4:	9a b7       	in	r25, 0x3a	; 58
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	02 c0       	rjmp	.+4      	; 0x20e0 <EXTI_voidClearFlag+0xc>
    20dc:	22 0f       	add	r18, r18
    20de:	33 1f       	adc	r19, r19
    20e0:	8a 95       	dec	r24
    20e2:	e2 f7       	brpl	.-8      	; 0x20dc <EXTI_voidClearFlag+0x8>
    20e4:	92 2b       	or	r25, r18
    20e6:	9a bf       	out	0x3a, r25	; 58

}
    20e8:	08 95       	ret

000020ea <EXTI_u8GetFlag>:

u8 EXTI_u8GetFlag( u8 Copy_u8Line ){

	return GET_BIT( GIFR_REG , Copy_u8Line );
    20ea:	4a b7       	in	r20, 0x3a	; 58
    20ec:	21 e0       	ldi	r18, 0x01	; 1
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	08 2e       	mov	r0, r24
    20f2:	02 c0       	rjmp	.+4      	; 0x20f8 <EXTI_u8GetFlag+0xe>
    20f4:	22 0f       	add	r18, r18
    20f6:	33 1f       	adc	r19, r19
    20f8:	0a 94       	dec	r0
    20fa:	e2 f7       	brpl	.-8      	; 0x20f4 <EXTI_u8GetFlag+0xa>
    20fc:	50 e0       	ldi	r21, 0x00	; 0
    20fe:	24 23       	and	r18, r20
    2100:	35 23       	and	r19, r21
    2102:	02 c0       	rjmp	.+4      	; 0x2108 <EXTI_u8GetFlag+0x1e>
    2104:	35 95       	asr	r19
    2106:	27 95       	ror	r18
    2108:	8a 95       	dec	r24
    210a:	e2 f7       	brpl	.-8      	; 0x2104 <EXTI_u8GetFlag+0x1a>

}
    210c:	82 2f       	mov	r24, r18
    210e:	08 95       	ret

00002110 <EXTI_voidSetCallBack>:
				=> EXTI Line --> [0 , 1 , 2]
 * return : Nothing
 */
void EXTI_voidSetCallBack( void (*Copy_pvoidCallBack)(void) , u8 Copy_u8EXTILine ){

	if( Copy_pvoidCallBack != NULL ){
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	41 f0       	breq	.+16     	; 0x2124 <EXTI_voidSetCallBack+0x14>

		EXTI_CallBack[Copy_u8EXTILine] = Copy_pvoidCallBack ;
    2114:	e6 2f       	mov	r30, r22
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	ee 0f       	add	r30, r30
    211a:	ff 1f       	adc	r31, r31
    211c:	e4 5e       	subi	r30, 0xE4	; 228
    211e:	fd 4f       	sbci	r31, 0xFD	; 253
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
    2124:	08 95       	ret

00002126 <__vector_1>:


/* ISR --> Implementation */
void __vector_1(void) __attribute__((signal));
void __vector_1(void)
{
    2126:	1f 92       	push	r1
    2128:	0f 92       	push	r0
    212a:	0f b6       	in	r0, 0x3f	; 63
    212c:	0f 92       	push	r0
    212e:	11 24       	eor	r1, r1
    2130:	2f 93       	push	r18
    2132:	3f 93       	push	r19
    2134:	4f 93       	push	r20
    2136:	5f 93       	push	r21
    2138:	6f 93       	push	r22
    213a:	7f 93       	push	r23
    213c:	8f 93       	push	r24
    213e:	9f 93       	push	r25
    2140:	af 93       	push	r26
    2142:	bf 93       	push	r27
    2144:	ef 93       	push	r30
    2146:	ff 93       	push	r31

	if( EXTI_CallBack[0] != NULL ){
    2148:	e0 91 1c 02 	lds	r30, 0x021C
    214c:	f0 91 1d 02 	lds	r31, 0x021D
    2150:	30 97       	sbiw	r30, 0x00	; 0
    2152:	21 f0       	breq	.+8      	; 0x215c <__vector_1+0x36>

		EXTI_CallBack[0](); /*  Call The Global Pointer to Func   */
    2154:	09 95       	icall

}

void EXTI_voidClearFlag ( u8 Copy_u8Line ){

	SET_BIT( GIFR_REG , Copy_u8Line );
    2156:	8a b7       	in	r24, 0x3a	; 58
    2158:	80 64       	ori	r24, 0x40	; 64
    215a:	8a bf       	out	0x3a, r24	; 58
		EXTI_CallBack[0](); /*  Call The Global Pointer to Func   */
		EXTI_voidClearFlag( EXTI_LINE0 );

	}

}
    215c:	ff 91       	pop	r31
    215e:	ef 91       	pop	r30
    2160:	bf 91       	pop	r27
    2162:	af 91       	pop	r26
    2164:	9f 91       	pop	r25
    2166:	8f 91       	pop	r24
    2168:	7f 91       	pop	r23
    216a:	6f 91       	pop	r22
    216c:	5f 91       	pop	r21
    216e:	4f 91       	pop	r20
    2170:	3f 91       	pop	r19
    2172:	2f 91       	pop	r18
    2174:	0f 90       	pop	r0
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	0f 90       	pop	r0
    217a:	1f 90       	pop	r1
    217c:	18 95       	reti

0000217e <__vector_2>:

void __vector_2(void) __attribute__((signal));
void __vector_2(void)
{
    217e:	1f 92       	push	r1
    2180:	0f 92       	push	r0
    2182:	0f b6       	in	r0, 0x3f	; 63
    2184:	0f 92       	push	r0
    2186:	11 24       	eor	r1, r1
    2188:	2f 93       	push	r18
    218a:	3f 93       	push	r19
    218c:	4f 93       	push	r20
    218e:	5f 93       	push	r21
    2190:	6f 93       	push	r22
    2192:	7f 93       	push	r23
    2194:	8f 93       	push	r24
    2196:	9f 93       	push	r25
    2198:	af 93       	push	r26
    219a:	bf 93       	push	r27
    219c:	ef 93       	push	r30
    219e:	ff 93       	push	r31

	if( EXTI_CallBack[1] != NULL ){
    21a0:	e0 91 1e 02 	lds	r30, 0x021E
    21a4:	f0 91 1f 02 	lds	r31, 0x021F
    21a8:	30 97       	sbiw	r30, 0x00	; 0
    21aa:	21 f0       	breq	.+8      	; 0x21b4 <__vector_2+0x36>

		EXTI_CallBack[1]();
    21ac:	09 95       	icall

}

void EXTI_voidClearFlag ( u8 Copy_u8Line ){

	SET_BIT( GIFR_REG , Copy_u8Line );
    21ae:	8a b7       	in	r24, 0x3a	; 58
    21b0:	80 68       	ori	r24, 0x80	; 128
    21b2:	8a bf       	out	0x3a, r24	; 58
		EXTI_CallBack[1]();
		EXTI_voidClearFlag( EXTI_LINE1 );

	}

}
    21b4:	ff 91       	pop	r31
    21b6:	ef 91       	pop	r30
    21b8:	bf 91       	pop	r27
    21ba:	af 91       	pop	r26
    21bc:	9f 91       	pop	r25
    21be:	8f 91       	pop	r24
    21c0:	7f 91       	pop	r23
    21c2:	6f 91       	pop	r22
    21c4:	5f 91       	pop	r21
    21c6:	4f 91       	pop	r20
    21c8:	3f 91       	pop	r19
    21ca:	2f 91       	pop	r18
    21cc:	0f 90       	pop	r0
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	0f 90       	pop	r0
    21d2:	1f 90       	pop	r1
    21d4:	18 95       	reti

000021d6 <__vector_3>:

void __vector_3(void) __attribute__((signal));
void __vector_3(void)
{
    21d6:	1f 92       	push	r1
    21d8:	0f 92       	push	r0
    21da:	0f b6       	in	r0, 0x3f	; 63
    21dc:	0f 92       	push	r0
    21de:	11 24       	eor	r1, r1
    21e0:	2f 93       	push	r18
    21e2:	3f 93       	push	r19
    21e4:	4f 93       	push	r20
    21e6:	5f 93       	push	r21
    21e8:	6f 93       	push	r22
    21ea:	7f 93       	push	r23
    21ec:	8f 93       	push	r24
    21ee:	9f 93       	push	r25
    21f0:	af 93       	push	r26
    21f2:	bf 93       	push	r27
    21f4:	ef 93       	push	r30
    21f6:	ff 93       	push	r31

	if( EXTI_CallBack[2] != NULL ){
    21f8:	e0 91 20 02 	lds	r30, 0x0220
    21fc:	f0 91 21 02 	lds	r31, 0x0221
    2200:	30 97       	sbiw	r30, 0x00	; 0
    2202:	21 f0       	breq	.+8      	; 0x220c <__vector_3+0x36>

		EXTI_CallBack[2]();
    2204:	09 95       	icall

}

void EXTI_voidClearFlag ( u8 Copy_u8Line ){

	SET_BIT( GIFR_REG , Copy_u8Line );
    2206:	8a b7       	in	r24, 0x3a	; 58
    2208:	80 62       	ori	r24, 0x20	; 32
    220a:	8a bf       	out	0x3a, r24	; 58
		EXTI_CallBack[2]();
		EXTI_voidClearFlag( EXTI_LINE2 );

	}

}
    220c:	ff 91       	pop	r31
    220e:	ef 91       	pop	r30
    2210:	bf 91       	pop	r27
    2212:	af 91       	pop	r26
    2214:	9f 91       	pop	r25
    2216:	8f 91       	pop	r24
    2218:	7f 91       	pop	r23
    221a:	6f 91       	pop	r22
    221c:	5f 91       	pop	r21
    221e:	4f 91       	pop	r20
    2220:	3f 91       	pop	r19
    2222:	2f 91       	pop	r18
    2224:	0f 90       	pop	r0
    2226:	0f be       	out	0x3f, r0	; 63
    2228:	0f 90       	pop	r0
    222a:	1f 90       	pop	r1
    222c:	18 95       	reti

0000222e <DIO_enumSetPinDirection>:
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    222e:	84 30       	cpi	r24, 0x04	; 4
    2230:	90 f4       	brcc	.+36     	; 0x2256 <DIO_enumSetPinDirection+0x28>
    2232:	68 30       	cpi	r22, 0x08	; 8
    2234:	80 f4       	brcc	.+32     	; 0x2256 <DIO_enumSetPinDirection+0x28>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    2236:	41 30       	cpi	r20, 0x01	; 1
    2238:	81 f0       	breq	.+32     	; 0x225a <DIO_enumSetPinDirection+0x2c>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    223a:	44 23       	and	r20, r20
    223c:	61 f4       	brne	.+24     	; 0x2256 <DIO_enumSetPinDirection+0x28>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	d9 f1       	breq	.+118    	; 0x22b8 <DIO_enumSetPinDirection+0x8a>
    2242:	81 30       	cpi	r24, 0x01	; 1
    2244:	00 f1       	brcs	.+64     	; 0x2286 <DIO_enumSetPinDirection+0x58>
    2246:	82 30       	cpi	r24, 0x02	; 2
    2248:	09 f4       	brne	.+2      	; 0x224c <DIO_enumSetPinDirection+0x1e>
    224a:	50 c0       	rjmp	.+160    	; 0x22ec <DIO_enumSetPinDirection+0xbe>
    224c:	83 30       	cpi	r24, 0x03	; 3
    224e:	09 f4       	brne	.+2      	; 0x2252 <DIO_enumSetPinDirection+0x24>
    2250:	40 c0       	rjmp	.+128    	; 0x22d2 <DIO_enumSetPinDirection+0xa4>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    2252:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
    2254:	08 95       	ret
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    2256:	80 e0       	ldi	r24, 0x00	; 0
    2258:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    225a:	81 30       	cpi	r24, 0x01	; 1
    225c:	09 f4       	brne	.+2      	; 0x2260 <DIO_enumSetPinDirection+0x32>
    225e:	53 c0       	rjmp	.+166    	; 0x2306 <DIO_enumSetPinDirection+0xd8>
    2260:	81 30       	cpi	r24, 0x01	; 1
    2262:	f0 f0       	brcs	.+60     	; 0x22a0 <DIO_enumSetPinDirection+0x72>
    2264:	82 30       	cpi	r24, 0x02	; 2
    2266:	09 f4       	brne	.+2      	; 0x226a <DIO_enumSetPinDirection+0x3c>
    2268:	5a c0       	rjmp	.+180    	; 0x231e <DIO_enumSetPinDirection+0xf0>
    226a:	83 30       	cpi	r24, 0x03	; 3
    226c:	91 f7       	brne	.-28     	; 0x2252 <DIO_enumSetPinDirection+0x24>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    226e:	21 b3       	in	r18, 0x11	; 17
    2270:	81 e0       	ldi	r24, 0x01	; 1
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	02 c0       	rjmp	.+4      	; 0x227a <DIO_enumSetPinDirection+0x4c>
    2276:	88 0f       	add	r24, r24
    2278:	99 1f       	adc	r25, r25
    227a:	6a 95       	dec	r22
    227c:	e2 f7       	brpl	.-8      	; 0x2276 <DIO_enumSetPinDirection+0x48>
    227e:	28 2b       	or	r18, r24
    2280:	21 bb       	out	0x11, r18	; 17
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	08 95       	ret
		else if ( Copy_u8Direction == DIO_PIN_INPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    2286:	2a b3       	in	r18, 0x1a	; 26
    2288:	81 e0       	ldi	r24, 0x01	; 1
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	02 c0       	rjmp	.+4      	; 0x2292 <DIO_enumSetPinDirection+0x64>
    228e:	88 0f       	add	r24, r24
    2290:	99 1f       	adc	r25, r25
    2292:	6a 95       	dec	r22
    2294:	e2 f7       	brpl	.-8      	; 0x228e <DIO_enumSetPinDirection+0x60>
    2296:	80 95       	com	r24
    2298:	82 23       	and	r24, r18
    229a:	8a bb       	out	0x1a, r24	; 26
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	08 95       	ret
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    22a0:	2a b3       	in	r18, 0x1a	; 26
    22a2:	81 e0       	ldi	r24, 0x01	; 1
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	02 c0       	rjmp	.+4      	; 0x22ac <DIO_enumSetPinDirection+0x7e>
    22a8:	88 0f       	add	r24, r24
    22aa:	99 1f       	adc	r25, r25
    22ac:	6a 95       	dec	r22
    22ae:	e2 f7       	brpl	.-8      	; 0x22a8 <DIO_enumSetPinDirection+0x7a>
    22b0:	28 2b       	or	r18, r24
    22b2:	2a bb       	out	0x1a, r18	; 26
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    22b8:	27 b3       	in	r18, 0x17	; 23
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <DIO_enumSetPinDirection+0x96>
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	6a 95       	dec	r22
    22c6:	e2 f7       	brpl	.-8      	; 0x22c0 <DIO_enumSetPinDirection+0x92>
    22c8:	80 95       	com	r24
    22ca:	82 23       	and	r24, r18
    22cc:	87 bb       	out	0x17, r24	; 23
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	08 95       	ret
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    22d2:	21 b3       	in	r18, 0x11	; 17
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	02 c0       	rjmp	.+4      	; 0x22de <DIO_enumSetPinDirection+0xb0>
    22da:	88 0f       	add	r24, r24
    22dc:	99 1f       	adc	r25, r25
    22de:	6a 95       	dec	r22
    22e0:	e2 f7       	brpl	.-8      	; 0x22da <DIO_enumSetPinDirection+0xac>
    22e2:	80 95       	com	r24
    22e4:	82 23       	and	r24, r18
    22e6:	81 bb       	out	0x11, r24	; 17
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	08 95       	ret
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    22ec:	24 b3       	in	r18, 0x14	; 20
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	02 c0       	rjmp	.+4      	; 0x22f8 <DIO_enumSetPinDirection+0xca>
    22f4:	88 0f       	add	r24, r24
    22f6:	99 1f       	adc	r25, r25
    22f8:	6a 95       	dec	r22
    22fa:	e2 f7       	brpl	.-8      	; 0x22f4 <DIO_enumSetPinDirection+0xc6>
    22fc:	80 95       	com	r24
    22fe:	82 23       	and	r24, r18
    2300:	84 bb       	out	0x14, r24	; 20
    2302:	81 e0       	ldi	r24, 0x01	; 1
    2304:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    2306:	27 b3       	in	r18, 0x17	; 23
    2308:	81 e0       	ldi	r24, 0x01	; 1
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <DIO_enumSetPinDirection+0xe4>
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	6a 95       	dec	r22
    2314:	e2 f7       	brpl	.-8      	; 0x230e <DIO_enumSetPinDirection+0xe0>
    2316:	28 2b       	or	r18, r24
    2318:	27 bb       	out	0x17, r18	; 23
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	08 95       	ret
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    231e:	24 b3       	in	r18, 0x14	; 20
    2320:	81 e0       	ldi	r24, 0x01	; 1
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	02 c0       	rjmp	.+4      	; 0x232a <DIO_enumSetPinDirection+0xfc>
    2326:	88 0f       	add	r24, r24
    2328:	99 1f       	adc	r25, r25
    232a:	6a 95       	dec	r22
    232c:	e2 f7       	brpl	.-8      	; 0x2326 <DIO_enumSetPinDirection+0xf8>
    232e:	28 2b       	or	r18, r24
    2330:	24 bb       	out	0x14, r18	; 20
    2332:	81 e0       	ldi	r24, 0x01	; 1
    2334:	08 95       	ret

00002336 <DIO_enumSetPinValue>:
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2336:	84 30       	cpi	r24, 0x04	; 4
    2338:	90 f4       	brcc	.+36     	; 0x235e <DIO_enumSetPinValue+0x28>
    233a:	68 30       	cpi	r22, 0x08	; 8
    233c:	80 f4       	brcc	.+32     	; 0x235e <DIO_enumSetPinValue+0x28>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    233e:	41 30       	cpi	r20, 0x01	; 1
    2340:	81 f0       	breq	.+32     	; 0x2362 <DIO_enumSetPinValue+0x2c>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    2342:	44 23       	and	r20, r20
    2344:	61 f4       	brne	.+24     	; 0x235e <DIO_enumSetPinValue+0x28>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    2346:	81 30       	cpi	r24, 0x01	; 1
    2348:	d9 f1       	breq	.+118    	; 0x23c0 <DIO_enumSetPinValue+0x8a>
    234a:	81 30       	cpi	r24, 0x01	; 1
    234c:	00 f1       	brcs	.+64     	; 0x238e <DIO_enumSetPinValue+0x58>
    234e:	82 30       	cpi	r24, 0x02	; 2
    2350:	09 f4       	brne	.+2      	; 0x2354 <DIO_enumSetPinValue+0x1e>
    2352:	50 c0       	rjmp	.+160    	; 0x23f4 <DIO_enumSetPinValue+0xbe>
    2354:	83 30       	cpi	r24, 0x03	; 3
    2356:	09 f4       	brne	.+2      	; 0x235a <DIO_enumSetPinValue+0x24>
    2358:	40 c0       	rjmp	.+128    	; 0x23da <DIO_enumSetPinValue+0xa4>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    235a:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
    235c:	08 95       	ret
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    235e:	80 e0       	ldi	r24, 0x00	; 0
    2360:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	09 f4       	brne	.+2      	; 0x2368 <DIO_enumSetPinValue+0x32>
    2366:	53 c0       	rjmp	.+166    	; 0x240e <DIO_enumSetPinValue+0xd8>
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	f0 f0       	brcs	.+60     	; 0x23a8 <DIO_enumSetPinValue+0x72>
    236c:	82 30       	cpi	r24, 0x02	; 2
    236e:	09 f4       	brne	.+2      	; 0x2372 <DIO_enumSetPinValue+0x3c>
    2370:	5a c0       	rjmp	.+180    	; 0x2426 <DIO_enumSetPinValue+0xf0>
    2372:	83 30       	cpi	r24, 0x03	; 3
    2374:	91 f7       	brne	.-28     	; 0x235a <DIO_enumSetPinValue+0x24>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    2376:	22 b3       	in	r18, 0x12	; 18
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	02 c0       	rjmp	.+4      	; 0x2382 <DIO_enumSetPinValue+0x4c>
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	6a 95       	dec	r22
    2384:	e2 f7       	brpl	.-8      	; 0x237e <DIO_enumSetPinValue+0x48>
    2386:	28 2b       	or	r18, r24
    2388:	22 bb       	out	0x12, r18	; 18
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	08 95       	ret
		else if (Copy_u8Value == DIO_PIN_LOW)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    238e:	2b b3       	in	r18, 0x1b	; 27
    2390:	81 e0       	ldi	r24, 0x01	; 1
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	02 c0       	rjmp	.+4      	; 0x239a <DIO_enumSetPinValue+0x64>
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	6a 95       	dec	r22
    239c:	e2 f7       	brpl	.-8      	; 0x2396 <DIO_enumSetPinValue+0x60>
    239e:	80 95       	com	r24
    23a0:	82 23       	and	r24, r18
    23a2:	8b bb       	out	0x1b, r24	; 27
    23a4:	81 e0       	ldi	r24, 0x01	; 1
    23a6:	08 95       	ret
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    23a8:	2b b3       	in	r18, 0x1b	; 27
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 c0       	rjmp	.+4      	; 0x23b4 <DIO_enumSetPinValue+0x7e>
    23b0:	88 0f       	add	r24, r24
    23b2:	99 1f       	adc	r25, r25
    23b4:	6a 95       	dec	r22
    23b6:	e2 f7       	brpl	.-8      	; 0x23b0 <DIO_enumSetPinValue+0x7a>
    23b8:	28 2b       	or	r18, r24
    23ba:	2b bb       	out	0x1b, r18	; 27
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    23c0:	28 b3       	in	r18, 0x18	; 24
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	02 c0       	rjmp	.+4      	; 0x23cc <DIO_enumSetPinValue+0x96>
    23c8:	88 0f       	add	r24, r24
    23ca:	99 1f       	adc	r25, r25
    23cc:	6a 95       	dec	r22
    23ce:	e2 f7       	brpl	.-8      	; 0x23c8 <DIO_enumSetPinValue+0x92>
    23d0:	80 95       	com	r24
    23d2:	82 23       	and	r24, r18
    23d4:	88 bb       	out	0x18, r24	; 24
    23d6:	81 e0       	ldi	r24, 0x01	; 1
    23d8:	08 95       	ret
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    23da:	22 b3       	in	r18, 0x12	; 18
    23dc:	81 e0       	ldi	r24, 0x01	; 1
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	02 c0       	rjmp	.+4      	; 0x23e6 <DIO_enumSetPinValue+0xb0>
    23e2:	88 0f       	add	r24, r24
    23e4:	99 1f       	adc	r25, r25
    23e6:	6a 95       	dec	r22
    23e8:	e2 f7       	brpl	.-8      	; 0x23e2 <DIO_enumSetPinValue+0xac>
    23ea:	80 95       	com	r24
    23ec:	82 23       	and	r24, r18
    23ee:	82 bb       	out	0x12, r24	; 18
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	08 95       	ret
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    23f4:	25 b3       	in	r18, 0x15	; 21
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <DIO_enumSetPinValue+0xca>
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	6a 95       	dec	r22
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <DIO_enumSetPinValue+0xc6>
    2404:	80 95       	com	r24
    2406:	82 23       	and	r24, r18
    2408:	85 bb       	out	0x15, r24	; 21
    240a:	81 e0       	ldi	r24, 0x01	; 1
    240c:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    240e:	28 b3       	in	r18, 0x18	; 24
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	02 c0       	rjmp	.+4      	; 0x241a <DIO_enumSetPinValue+0xe4>
    2416:	88 0f       	add	r24, r24
    2418:	99 1f       	adc	r25, r25
    241a:	6a 95       	dec	r22
    241c:	e2 f7       	brpl	.-8      	; 0x2416 <DIO_enumSetPinValue+0xe0>
    241e:	28 2b       	or	r18, r24
    2420:	28 bb       	out	0x18, r18	; 24
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	08 95       	ret
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    2426:	25 b3       	in	r18, 0x15	; 21
    2428:	81 e0       	ldi	r24, 0x01	; 1
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	02 c0       	rjmp	.+4      	; 0x2432 <DIO_enumSetPinValue+0xfc>
    242e:	88 0f       	add	r24, r24
    2430:	99 1f       	adc	r25, r25
    2432:	6a 95       	dec	r22
    2434:	e2 f7       	brpl	.-8      	; 0x242e <DIO_enumSetPinValue+0xf8>
    2436:	28 2b       	or	r18, r24
    2438:	25 bb       	out	0x15, r18	; 21
    243a:	81 e0       	ldi	r24, 0x01	; 1
    243c:	08 95       	ret

0000243e <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    243e:	fa 01       	movw	r30, r20

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2440:	84 30       	cpi	r24, 0x04	; 4
    2442:	60 f4       	brcc	.+24     	; 0x245c <DIO_enumGetPinValue+0x1e>
    2444:	68 30       	cpi	r22, 0x08	; 8
    2446:	50 f4       	brcc	.+20     	; 0x245c <DIO_enumGetPinValue+0x1e>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2448:	81 30       	cpi	r24, 0x01	; 1
    244a:	f1 f0       	breq	.+60     	; 0x2488 <DIO_enumGetPinValue+0x4a>
    244c:	81 30       	cpi	r24, 0x01	; 1
    244e:	40 f0       	brcs	.+16     	; 0x2460 <DIO_enumGetPinValue+0x22>
    2450:	82 30       	cpi	r24, 0x02	; 2
    2452:	81 f1       	breq	.+96     	; 0x24b4 <DIO_enumGetPinValue+0x76>
    2454:	83 30       	cpi	r24, 0x03	; 3
    2456:	61 f1       	breq	.+88     	; 0x24b0 <DIO_enumGetPinValue+0x72>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	08 95       	ret
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    245c:	80 e0       	ldi	r24, 0x00	; 0
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState;
}
    245e:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    2460:	29 b3       	in	r18, 0x19	; 25
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	06 2e       	mov	r0, r22
    2468:	02 c0       	rjmp	.+4      	; 0x246e <DIO_enumGetPinValue+0x30>
    246a:	88 0f       	add	r24, r24
    246c:	99 1f       	adc	r25, r25
    246e:	0a 94       	dec	r0
    2470:	e2 f7       	brpl	.-8      	; 0x246a <DIO_enumGetPinValue+0x2c>
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	82 23       	and	r24, r18
    2476:	93 23       	and	r25, r19
    2478:	02 c0       	rjmp	.+4      	; 0x247e <DIO_enumGetPinValue+0x40>
    247a:	95 95       	asr	r25
    247c:	87 95       	ror	r24
    247e:	6a 95       	dec	r22
    2480:	e2 f7       	brpl	.-8      	; 0x247a <DIO_enumGetPinValue+0x3c>
    2482:	80 83       	st	Z, r24
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	08 95       	ret
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    2488:	26 b3       	in	r18, 0x16	; 22
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	06 2e       	mov	r0, r22
    2490:	02 c0       	rjmp	.+4      	; 0x2496 <DIO_enumGetPinValue+0x58>
    2492:	88 0f       	add	r24, r24
    2494:	99 1f       	adc	r25, r25
    2496:	0a 94       	dec	r0
    2498:	e2 f7       	brpl	.-8      	; 0x2492 <DIO_enumGetPinValue+0x54>
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	82 23       	and	r24, r18
    249e:	93 23       	and	r25, r19
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <DIO_enumGetPinValue+0x68>
    24a2:	95 95       	asr	r25
    24a4:	87 95       	ror	r24
    24a6:	6a 95       	dec	r22
    24a8:	e2 f7       	brpl	.-8      	; 0x24a2 <DIO_enumGetPinValue+0x64>
    24aa:	80 83       	st	Z, r24
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	08 95       	ret
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    24b0:	20 b3       	in	r18, 0x10	; 16
    24b2:	eb cf       	rjmp	.-42     	; 0x248a <DIO_enumGetPinValue+0x4c>
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    24b4:	23 b3       	in	r18, 0x13	; 19
    24b6:	e9 cf       	rjmp	.-46     	; 0x248a <DIO_enumGetPinValue+0x4c>

000024b8 <DIO_enumTogglePinValue>:
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PIN <= DIO_PIN7)
    24b8:	68 30       	cpi	r22, 0x08	; 8
    24ba:	50 f4       	brcc	.+20     	; 0x24d0 <DIO_enumTogglePinValue+0x18>
	{
		switch (Copy_u8PORT)
    24bc:	81 30       	cpi	r24, 0x01	; 1
    24be:	b1 f0       	breq	.+44     	; 0x24ec <DIO_enumTogglePinValue+0x34>
    24c0:	81 30       	cpi	r24, 0x01	; 1
    24c2:	40 f0       	brcs	.+16     	; 0x24d4 <DIO_enumTogglePinValue+0x1c>
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	51 f1       	breq	.+84     	; 0x251c <DIO_enumTogglePinValue+0x64>
    24c8:	83 30       	cpi	r24, 0x03	; 3
    24ca:	e1 f0       	breq	.+56     	; 0x2504 <DIO_enumTogglePinValue+0x4c>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	08 95       	ret
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PIN <= DIO_PIN7)
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	08 95       	ret
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    24d4:	2b b3       	in	r18, 0x1b	; 27
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	02 c0       	rjmp	.+4      	; 0x24e0 <DIO_enumTogglePinValue+0x28>
    24dc:	88 0f       	add	r24, r24
    24de:	99 1f       	adc	r25, r25
    24e0:	6a 95       	dec	r22
    24e2:	e2 f7       	brpl	.-8      	; 0x24dc <DIO_enumTogglePinValue+0x24>
    24e4:	28 27       	eor	r18, r24
    24e6:	2b bb       	out	0x1b, r18	; 27
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	08 95       	ret
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    24ec:	28 b3       	in	r18, 0x18	; 24
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	02 c0       	rjmp	.+4      	; 0x24f8 <DIO_enumTogglePinValue+0x40>
    24f4:	88 0f       	add	r24, r24
    24f6:	99 1f       	adc	r25, r25
    24f8:	6a 95       	dec	r22
    24fa:	e2 f7       	brpl	.-8      	; 0x24f4 <DIO_enumTogglePinValue+0x3c>
    24fc:	28 27       	eor	r18, r24
    24fe:	28 bb       	out	0x18, r18	; 24
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	08 95       	ret
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    2504:	22 b3       	in	r18, 0x12	; 18
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	02 c0       	rjmp	.+4      	; 0x2510 <DIO_enumTogglePinValue+0x58>
    250c:	88 0f       	add	r24, r24
    250e:	99 1f       	adc	r25, r25
    2510:	6a 95       	dec	r22
    2512:	e2 f7       	brpl	.-8      	; 0x250c <DIO_enumTogglePinValue+0x54>
    2514:	28 27       	eor	r18, r24
    2516:	22 bb       	out	0x12, r18	; 18
    2518:	81 e0       	ldi	r24, 0x01	; 1
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState;
}
    251a:	08 95       	ret
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    251c:	25 b3       	in	r18, 0x15	; 21
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	02 c0       	rjmp	.+4      	; 0x2528 <DIO_enumTogglePinValue+0x70>
    2524:	88 0f       	add	r24, r24
    2526:	99 1f       	adc	r25, r25
    2528:	6a 95       	dec	r22
    252a:	e2 f7       	brpl	.-8      	; 0x2524 <DIO_enumTogglePinValue+0x6c>
    252c:	28 27       	eor	r18, r24
    252e:	25 bb       	out	0x15, r18	; 21
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	08 95       	ret

00002534 <DIO_enumConnectPullup>:
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2534:	84 30       	cpi	r24, 0x04	; 4
    2536:	60 f4       	brcc	.+24     	; 0x2550 <DIO_enumConnectPullup+0x1c>
    2538:	68 30       	cpi	r22, 0x08	; 8
    253a:	50 f4       	brcc	.+20     	; 0x2550 <DIO_enumConnectPullup+0x1c>
	{
		switch(Copy_u8PORT)
    253c:	81 30       	cpi	r24, 0x01	; 1
    253e:	d1 f0       	breq	.+52     	; 0x2574 <DIO_enumConnectPullup+0x40>
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	40 f0       	brcs	.+16     	; 0x2554 <DIO_enumConnectPullup+0x20>
    2544:	82 30       	cpi	r24, 0x02	; 2
    2546:	b1 f1       	breq	.+108    	; 0x25b4 <DIO_enumConnectPullup+0x80>
    2548:	83 30       	cpi	r24, 0x03	; 3
    254a:	21 f1       	breq	.+72     	; 0x2594 <DIO_enumConnectPullup+0x60>
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
				CLR_BIT(DDRA_Register,Copy_u8PIN);
				SET_BIT(PORTA_Register,Copy_u8PIN);
    254c:	81 e0       	ldi	r24, 0x01	; 1
    254e:	08 95       	ret
				CLR_BIT(DDRD_Register,Copy_u8PIN);
				SET_BIT(PORTD_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    2550:	80 e0       	ldi	r24, 0x00	; 0
	}

	return LOC_enumState ;


}
    2552:	08 95       	ret
	{
		switch(Copy_u8PORT)
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2554:	41 30       	cpi	r20, 0x01	; 1
    2556:	09 f4       	brne	.+2      	; 0x255a <DIO_enumConnectPullup+0x26>
    2558:	3c c0       	rjmp	.+120    	; 0x25d2 <DIO_enumConnectPullup+0x9e>
				CLR_BIT(DDRA_Register,Copy_u8PIN);
				SET_BIT(PORTA_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    255a:	2b b3       	in	r18, 0x1b	; 27
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 c0       	rjmp	.+4      	; 0x2566 <DIO_enumConnectPullup+0x32>
    2562:	88 0f       	add	r24, r24
    2564:	99 1f       	adc	r25, r25
    2566:	6a 95       	dec	r22
    2568:	e2 f7       	brpl	.-8      	; 0x2562 <DIO_enumConnectPullup+0x2e>
    256a:	80 95       	com	r24
    256c:	82 23       	and	r24, r18
    256e:	8b bb       	out	0x1b, r24	; 27
    2570:	81 e0       	ldi	r24, 0x01	; 1
    2572:	08 95       	ret
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2574:	41 30       	cpi	r20, 0x01	; 1
    2576:	09 f4       	brne	.+2      	; 0x257a <DIO_enumConnectPullup+0x46>
    2578:	53 c0       	rjmp	.+166    	; 0x2620 <DIO_enumConnectPullup+0xec>
				CLR_BIT(DDRB_Register,Copy_u8PIN);
				SET_BIT(PORTB_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    257a:	28 b3       	in	r18, 0x18	; 24
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	02 c0       	rjmp	.+4      	; 0x2586 <DIO_enumConnectPullup+0x52>
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	6a 95       	dec	r22
    2588:	e2 f7       	brpl	.-8      	; 0x2582 <DIO_enumConnectPullup+0x4e>
    258a:	80 95       	com	r24
    258c:	82 23       	and	r24, r18
    258e:	88 bb       	out	0x18, r24	; 24
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	08 95       	ret
				CLR_BIT(PORTC_Register,Copy_u8PIN);
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2594:	41 30       	cpi	r20, 0x01	; 1
    2596:	09 f4       	brne	.+2      	; 0x259a <DIO_enumConnectPullup+0x66>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <DIO_enumConnectPullup+0x114>
				CLR_BIT(DDRD_Register,Copy_u8PIN);
				SET_BIT(PORTD_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    259a:	22 b3       	in	r18, 0x12	; 18
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	02 c0       	rjmp	.+4      	; 0x25a6 <DIO_enumConnectPullup+0x72>
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	6a 95       	dec	r22
    25a8:	e2 f7       	brpl	.-8      	; 0x25a2 <DIO_enumConnectPullup+0x6e>
    25aa:	80 95       	com	r24
    25ac:	82 23       	and	r24, r18
    25ae:	82 bb       	out	0x12, r24	; 18
    25b0:	81 e0       	ldi	r24, 0x01	; 1
    25b2:	08 95       	ret
				CLR_BIT(PORTB_Register,Copy_u8PIN);
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    25b4:	41 30       	cpi	r20, 0x01	; 1
    25b6:	01 f1       	breq	.+64     	; 0x25f8 <DIO_enumConnectPullup+0xc4>
				CLR_BIT(DDRC_Register,Copy_u8PIN);
				SET_BIT(PORTC_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    25b8:	25 b3       	in	r18, 0x15	; 21
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	02 c0       	rjmp	.+4      	; 0x25c4 <DIO_enumConnectPullup+0x90>
    25c0:	88 0f       	add	r24, r24
    25c2:	99 1f       	adc	r25, r25
    25c4:	6a 95       	dec	r22
    25c6:	e2 f7       	brpl	.-8      	; 0x25c0 <DIO_enumConnectPullup+0x8c>
    25c8:	80 95       	com	r24
    25ca:	82 23       	and	r24, r18
    25cc:	85 bb       	out	0x15, r24	; 21
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	08 95       	ret
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    25d2:	80 b7       	in	r24, 0x30	; 48
    25d4:	8b 7f       	andi	r24, 0xFB	; 251
    25d6:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    25d8:	3a b3       	in	r19, 0x1a	; 26
    25da:	81 e0       	ldi	r24, 0x01	; 1
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	02 c0       	rjmp	.+4      	; 0x25e4 <DIO_enumConnectPullup+0xb0>
    25e0:	88 0f       	add	r24, r24
    25e2:	99 1f       	adc	r25, r25
    25e4:	6a 95       	dec	r22
    25e6:	e2 f7       	brpl	.-8      	; 0x25e0 <DIO_enumConnectPullup+0xac>
    25e8:	28 2f       	mov	r18, r24
    25ea:	20 95       	com	r18
    25ec:	23 23       	and	r18, r19
    25ee:	2a bb       	out	0x1a, r18	; 26
				SET_BIT(PORTA_Register,Copy_u8PIN);
    25f0:	2b b3       	in	r18, 0x1b	; 27
    25f2:	82 2b       	or	r24, r18
    25f4:	8b bb       	out	0x1b, r24	; 27
    25f6:	aa cf       	rjmp	.-172    	; 0x254c <DIO_enumConnectPullup+0x18>
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    25f8:	80 b7       	in	r24, 0x30	; 48
    25fa:	8b 7f       	andi	r24, 0xFB	; 251
    25fc:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    25fe:	34 b3       	in	r19, 0x14	; 20
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	02 c0       	rjmp	.+4      	; 0x260a <DIO_enumConnectPullup+0xd6>
    2606:	88 0f       	add	r24, r24
    2608:	99 1f       	adc	r25, r25
    260a:	6a 95       	dec	r22
    260c:	e2 f7       	brpl	.-8      	; 0x2606 <DIO_enumConnectPullup+0xd2>
    260e:	28 2f       	mov	r18, r24
    2610:	20 95       	com	r18
    2612:	23 23       	and	r18, r19
    2614:	24 bb       	out	0x14, r18	; 20
				SET_BIT(PORTC_Register,Copy_u8PIN);
    2616:	25 b3       	in	r18, 0x15	; 21
    2618:	82 2b       	or	r24, r18
    261a:	85 bb       	out	0x15, r24	; 21
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	08 95       	ret
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    2620:	80 b7       	in	r24, 0x30	; 48
    2622:	8b 7f       	andi	r24, 0xFB	; 251
    2624:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    2626:	37 b3       	in	r19, 0x17	; 23
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	02 c0       	rjmp	.+4      	; 0x2632 <DIO_enumConnectPullup+0xfe>
    262e:	88 0f       	add	r24, r24
    2630:	99 1f       	adc	r25, r25
    2632:	6a 95       	dec	r22
    2634:	e2 f7       	brpl	.-8      	; 0x262e <DIO_enumConnectPullup+0xfa>
    2636:	28 2f       	mov	r18, r24
    2638:	20 95       	com	r18
    263a:	23 23       	and	r18, r19
    263c:	27 bb       	out	0x17, r18	; 23
				SET_BIT(PORTB_Register,Copy_u8PIN);
    263e:	28 b3       	in	r18, 0x18	; 24
    2640:	82 2b       	or	r24, r18
    2642:	88 bb       	out	0x18, r24	; 24
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	08 95       	ret
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    2648:	80 b7       	in	r24, 0x30	; 48
    264a:	8b 7f       	andi	r24, 0xFB	; 251
    264c:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    264e:	31 b3       	in	r19, 0x11	; 17
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	02 c0       	rjmp	.+4      	; 0x265a <DIO_enumConnectPullup+0x126>
    2656:	88 0f       	add	r24, r24
    2658:	99 1f       	adc	r25, r25
    265a:	6a 95       	dec	r22
    265c:	e2 f7       	brpl	.-8      	; 0x2656 <DIO_enumConnectPullup+0x122>
    265e:	28 2f       	mov	r18, r24
    2660:	20 95       	com	r18
    2662:	23 23       	and	r18, r19
    2664:	21 bb       	out	0x11, r18	; 17
				SET_BIT(PORTD_Register,Copy_u8PIN);
    2666:	22 b3       	in	r18, 0x12	; 18
    2668:	82 2b       	or	r24, r18
    266a:	82 bb       	out	0x12, r24	; 18
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	08 95       	ret

00002670 <DIO_enumSetPortDirection>:
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD) )
    2670:	84 30       	cpi	r24, 0x04	; 4
    2672:	40 f4       	brcc	.+16     	; 0x2684 <DIO_enumSetPortDirection+0x14>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2674:	81 30       	cpi	r24, 0x01	; 1
    2676:	59 f0       	breq	.+22     	; 0x268e <DIO_enumSetPortDirection+0x1e>
    2678:	81 30       	cpi	r24, 0x01	; 1
    267a:	30 f0       	brcs	.+12     	; 0x2688 <DIO_enumSetPortDirection+0x18>
    267c:	82 30       	cpi	r24, 0x02	; 2
    267e:	69 f0       	breq	.+26     	; 0x269a <DIO_enumSetPortDirection+0x2a>
    2680:	83 30       	cpi	r24, 0x03	; 3
    2682:	41 f0       	breq	.+16     	; 0x2694 <DIO_enumSetPortDirection+0x24>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    2684:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    2686:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    2688:	6a bb       	out	0x1a, r22	; 26
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	08 95       	ret
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    268e:	67 bb       	out	0x17, r22	; 23
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	08 95       	ret
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    2694:	61 bb       	out	0x11, r22	; 17
    2696:	81 e0       	ldi	r24, 0x01	; 1
    2698:	08 95       	ret
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    269a:	64 bb       	out	0x14, r22	; 20
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	08 95       	ret

000026a0 <DIO_enumSetPortValue>:
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    26a0:	84 30       	cpi	r24, 0x04	; 4
    26a2:	40 f4       	brcc	.+16     	; 0x26b4 <DIO_enumSetPortValue+0x14>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    26a4:	81 30       	cpi	r24, 0x01	; 1
    26a6:	59 f0       	breq	.+22     	; 0x26be <DIO_enumSetPortValue+0x1e>
    26a8:	81 30       	cpi	r24, 0x01	; 1
    26aa:	30 f0       	brcs	.+12     	; 0x26b8 <DIO_enumSetPortValue+0x18>
    26ac:	82 30       	cpi	r24, 0x02	; 2
    26ae:	69 f0       	breq	.+26     	; 0x26ca <DIO_enumSetPortValue+0x2a>
    26b0:	83 30       	cpi	r24, 0x03	; 3
    26b2:	41 f0       	breq	.+16     	; 0x26c4 <DIO_enumSetPortValue+0x24>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    26b4:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    26b6:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    26b8:	6b bb       	out	0x1b, r22	; 27
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	08 95       	ret
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    26be:	68 bb       	out	0x18, r22	; 24
    26c0:	81 e0       	ldi	r24, 0x01	; 1
    26c2:	08 95       	ret
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    26c4:	62 bb       	out	0x12, r22	; 18
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	08 95       	ret
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    26ca:	65 bb       	out	0x15, r22	; 21
    26cc:	81 e0       	ldi	r24, 0x01	; 1
    26ce:	08 95       	ret

000026d0 <DIO_enumTogglePortValue>:
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PORT <= DIO_PORTD)
    26d0:	84 30       	cpi	r24, 0x04	; 4
    26d2:	50 f4       	brcc	.+20     	; 0x26e8 <DIO_enumTogglePortValue+0x18>
	{
		switch (Copy_u8PORT)
    26d4:	81 30       	cpi	r24, 0x01	; 1
    26d6:	79 f0       	breq	.+30     	; 0x26f6 <DIO_enumTogglePortValue+0x26>
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	40 f0       	brcs	.+16     	; 0x26ec <DIO_enumTogglePortValue+0x1c>
    26dc:	82 30       	cpi	r24, 0x02	; 2
    26de:	a9 f0       	breq	.+42     	; 0x270a <DIO_enumTogglePortValue+0x3a>
    26e0:	83 30       	cpi	r24, 0x03	; 3
    26e2:	71 f0       	breq	.+28     	; 0x2700 <DIO_enumTogglePortValue+0x30>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	08 95       	ret
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PORT <= DIO_PORTD)
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	08 95       	ret
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    26ec:	8b b3       	in	r24, 0x1b	; 27
    26ee:	80 95       	com	r24
    26f0:	8b bb       	out	0x1b, r24	; 27
    26f2:	81 e0       	ldi	r24, 0x01	; 1
    26f4:	08 95       	ret
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    26f6:	88 b3       	in	r24, 0x18	; 24
    26f8:	80 95       	com	r24
    26fa:	88 bb       	out	0x18, r24	; 24
    26fc:	81 e0       	ldi	r24, 0x01	; 1
    26fe:	08 95       	ret
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    2700:	82 b3       	in	r24, 0x12	; 18
    2702:	80 95       	com	r24
    2704:	82 bb       	out	0x12, r24	; 18
    2706:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    2708:	08 95       	ret
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    270a:	85 b3       	in	r24, 0x15	; 21
    270c:	80 95       	com	r24
    270e:	85 bb       	out	0x15, r24	; 21
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	08 95       	ret

00002714 <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    2714:	fb 01       	movw	r30, r22

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    2716:	84 30       	cpi	r24, 0x04	; 4
    2718:	40 f4       	brcc	.+16     	; 0x272a <DIO_enumGetPortValue+0x16>
	{
		switch (Copy_u8PORT)
    271a:	81 30       	cpi	r24, 0x01	; 1
    271c:	61 f0       	breq	.+24     	; 0x2736 <DIO_enumGetPortValue+0x22>
    271e:	81 30       	cpi	r24, 0x01	; 1
    2720:	30 f0       	brcs	.+12     	; 0x272e <DIO_enumGetPortValue+0x1a>
    2722:	82 30       	cpi	r24, 0x02	; 2
    2724:	81 f0       	breq	.+32     	; 0x2746 <DIO_enumGetPortValue+0x32>
    2726:	83 30       	cpi	r24, 0x03	; 3
    2728:	51 f0       	breq	.+20     	; 0x273e <DIO_enumGetPortValue+0x2a>
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
			break ;
    272a:	80 e0       	ldi	r24, 0x00	; 0
	{
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;
}
    272c:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD))
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    272e:	89 b3       	in	r24, 0x19	; 25
    2730:	80 83       	st	Z, r24
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	08 95       	ret
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    2736:	86 b3       	in	r24, 0x16	; 22
    2738:	80 83       	st	Z, r24
    273a:	81 e0       	ldi	r24, 0x01	; 1
    273c:	08 95       	ret
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    273e:	80 b3       	in	r24, 0x10	; 16
    2740:	80 83       	st	Z, r24
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	08 95       	ret
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    2746:	83 b3       	in	r24, 0x13	; 19
    2748:	80 83       	st	Z, r24
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	08 95       	ret

0000274e <DIO_voidWriteHighNibbles>:
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    274e:	84 30       	cpi	r24, 0x04	; 4
    2750:	60 f4       	brcc	.+24     	; 0x276a <DIO_voidWriteHighNibbles+0x1c>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    2752:	62 95       	swap	r22
    2754:	60 7f       	andi	r22, 0xF0	; 240
		switch(Copy_u8PORT)
    2756:	81 30       	cpi	r24, 0x01	; 1
    2758:	91 f0       	breq	.+36     	; 0x277e <DIO_voidWriteHighNibbles+0x30>
    275a:	81 30       	cpi	r24, 0x01	; 1
    275c:	40 f0       	brcs	.+16     	; 0x276e <DIO_voidWriteHighNibbles+0x20>
    275e:	82 30       	cpi	r24, 0x02	; 2
    2760:	f1 f0       	breq	.+60     	; 0x279e <DIO_voidWriteHighNibbles+0x50>
    2762:	83 30       	cpi	r24, 0x03	; 3
    2764:	a1 f0       	breq	.+40     	; 0x278e <DIO_voidWriteHighNibbles+0x40>
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
			PORTB_Register|=Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
			PORTC_Register|=Copy_u8value;
    2766:	81 e0       	ldi	r24, 0x01	; 1
    2768:	08 95       	ret
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	08 95       	ret
	{
		Copy_u8value = (Copy_u8value<<4) ;
		switch(Copy_u8PORT)
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    276e:	8b b3       	in	r24, 0x1b	; 27
    2770:	8f 70       	andi	r24, 0x0F	; 15
    2772:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    2774:	8b b3       	in	r24, 0x1b	; 27
    2776:	68 2b       	or	r22, r24
    2778:	6b bb       	out	0x1b, r22	; 27
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    277e:	88 b3       	in	r24, 0x18	; 24
    2780:	8f 70       	andi	r24, 0x0F	; 15
    2782:	88 bb       	out	0x18, r24	; 24
			PORTB_Register|=Copy_u8value;
    2784:	88 b3       	in	r24, 0x18	; 24
    2786:	68 2b       	or	r22, r24
    2788:	68 bb       	out	0x18, r22	; 24
    278a:	81 e0       	ldi	r24, 0x01	; 1
    278c:	08 95       	ret
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
			PORTC_Register|=Copy_u8value;
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    278e:	82 b3       	in	r24, 0x12	; 18
    2790:	8f 70       	andi	r24, 0x0F	; 15
    2792:	82 bb       	out	0x12, r24	; 18
			PORTD_Register|=Copy_u8value;
    2794:	82 b3       	in	r24, 0x12	; 18
    2796:	68 2b       	or	r22, r24
    2798:	62 bb       	out	0x12, r22	; 18
    279a:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;

}
    279c:	08 95       	ret
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
			PORTB_Register|=Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    279e:	85 b3       	in	r24, 0x15	; 21
    27a0:	8f 70       	andi	r24, 0x0F	; 15
    27a2:	85 bb       	out	0x15, r24	; 21
			PORTC_Register|=Copy_u8value;
    27a4:	85 b3       	in	r24, 0x15	; 21
    27a6:	68 2b       	or	r22, r24
    27a8:	65 bb       	out	0x15, r22	; 21
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	08 95       	ret

000027ae <DIO_voidWriteLowNibbles>:
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;


	if ( (Copy_u8PORT <= DIO_PORTD))
    27ae:	84 30       	cpi	r24, 0x04	; 4
    27b0:	58 f4       	brcc	.+22     	; 0x27c8 <DIO_voidWriteLowNibbles+0x1a>
	{
		Copy_u8value&=0x0f;
    27b2:	6f 70       	andi	r22, 0x0F	; 15
		switch(Copy_u8PORT)
    27b4:	81 30       	cpi	r24, 0x01	; 1
    27b6:	91 f0       	breq	.+36     	; 0x27dc <DIO_voidWriteLowNibbles+0x2e>
    27b8:	81 30       	cpi	r24, 0x01	; 1
    27ba:	40 f0       	brcs	.+16     	; 0x27cc <DIO_voidWriteLowNibbles+0x1e>
    27bc:	82 30       	cpi	r24, 0x02	; 2
    27be:	f1 f0       	breq	.+60     	; 0x27fc <DIO_voidWriteLowNibbles+0x4e>
    27c0:	83 30       	cpi	r24, 0x03	; 3
    27c2:	a1 f0       	breq	.+40     	; 0x27ec <DIO_voidWriteLowNibbles+0x3e>
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
			PORTB_Register |= Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
			PORTC_Register |= Copy_u8value;
    27c4:	81 e0       	ldi	r24, 0x01	; 1
    27c6:	08 95       	ret
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;


	if ( (Copy_u8PORT <= DIO_PORTD))
    27c8:	80 e0       	ldi	r24, 0x00	; 0
    27ca:	08 95       	ret
	{
		Copy_u8value&=0x0f;
		switch(Copy_u8PORT)
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    27cc:	8b b3       	in	r24, 0x1b	; 27
    27ce:	80 7f       	andi	r24, 0xF0	; 240
    27d0:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register |= Copy_u8value;
    27d2:	8b b3       	in	r24, 0x1b	; 27
    27d4:	68 2b       	or	r22, r24
    27d6:	6b bb       	out	0x1b, r22	; 27
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    27dc:	88 b3       	in	r24, 0x18	; 24
    27de:	80 7f       	andi	r24, 0xF0	; 240
    27e0:	88 bb       	out	0x18, r24	; 24
			PORTB_Register |= Copy_u8value;
    27e2:	88 b3       	in	r24, 0x18	; 24
    27e4:	68 2b       	or	r22, r24
    27e6:	68 bb       	out	0x18, r22	; 24
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	08 95       	ret
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
			PORTC_Register |= Copy_u8value;
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    27ec:	82 b3       	in	r24, 0x12	; 18
    27ee:	80 7f       	andi	r24, 0xF0	; 240
    27f0:	82 bb       	out	0x12, r24	; 18
			PORTD_Register |= Copy_u8value;
    27f2:	82 b3       	in	r24, 0x12	; 18
    27f4:	68 2b       	or	r22, r24
    27f6:	62 bb       	out	0x12, r22	; 18
    27f8:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;

}
    27fa:	08 95       	ret
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
			PORTB_Register |= Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    27fc:	85 b3       	in	r24, 0x15	; 21
    27fe:	80 7f       	andi	r24, 0xF0	; 240
    2800:	85 bb       	out	0x15, r24	; 21
			PORTC_Register |= Copy_u8value;
    2802:	85 b3       	in	r24, 0x15	; 21
    2804:	68 2b       	or	r22, r24
    2806:	65 bb       	out	0x15, r22	; 21
    2808:	81 e0       	ldi	r24, 0x01	; 1
    280a:	08 95       	ret

0000280c <SW_u8GetPressed>:
* Breif : This Function read Button status
* Parameters :   => struct has the switch porn , pin , status
* return : switch status
*/

u8   SW_u8GetPressed ( SW_Type SW_Config ){
    280c:	df 93       	push	r29
    280e:	cf 93       	push	r28
    2810:	00 d0       	rcall	.+0      	; 0x2812 <SW_u8GetPressed+0x6>
    2812:	00 d0       	rcall	.+0      	; 0x2814 <SW_u8GetPressed+0x8>
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	26 2f       	mov	r18, r22
    281a:	6a 83       	std	Y+2, r22	; 0x02
    281c:	7b 83       	std	Y+3, r23	; 0x03
    281e:	8c 83       	std	Y+4, r24	; 0x04
    2820:	67 2f       	mov	r22, r23
	
	u8 LOC_u8Result = SW_NOT_PRESSED ;
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
    2822:	19 82       	std	Y+1, r1	; 0x01
	
	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
    2824:	82 30       	cpi	r24, 0x02	; 2
    2826:	00 f1       	brcs	.+64     	; 0x2868 <SW_u8GetPressed+0x5c>
		{
			LOC_u8Result = SW_NOT_PRESSED ;
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
    2828:	82 30       	cpi	r24, 0x02	; 2
    282a:	49 f0       	breq	.+18     	; 0x283e <SW_u8GetPressed+0x32>
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
		
		if (LOC_u8PinVal==0)
    282c:	90 e0       	ldi	r25, 0x00	; 0
		}
	}
		
	return LOC_u8Result ;
	
}
    282e:	89 2f       	mov	r24, r25
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	0f 90       	pop	r0
    2838:	cf 91       	pop	r28
    283a:	df 91       	pop	r29
    283c:	08 95       	ret
		}

	}
	else if (SW_Config.Pull_State == SW_Ext_PULL_DOWN)
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
    283e:	82 2f       	mov	r24, r18
    2840:	ae 01       	movw	r20, r28
    2842:	4f 5f       	subi	r20, 0xFF	; 255
    2844:	5f 4f       	sbci	r21, 0xFF	; 255
    2846:	0e 94 1f 12 	call	0x243e	; 0x243e <DIO_enumGetPinValue>
		
		if (LOC_u8PinVal==0)
    284a:	89 81       	ldd	r24, Y+1	; 0x01
    284c:	88 23       	and	r24, r24
    284e:	71 f3       	breq	.-36     	; 0x282c <SW_u8GetPressed+0x20>
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	81 30       	cpi	r24, 0x01	; 1
    2854:	61 f7       	brne	.-40     	; 0x282e <SW_u8GetPressed+0x22>
    2856:	91 e0       	ldi	r25, 0x01	; 1
		}
	}
		
	return LOC_u8Result ;
	
}
    2858:	89 2f       	mov	r24, r25
    285a:	0f 90       	pop	r0
    285c:	0f 90       	pop	r0
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	cf 91       	pop	r28
    2864:	df 91       	pop	r29
    2866:	08 95       	ret
	u8 LOC_u8Result = SW_NOT_PRESSED ;
	u8 LOC_u8PinVal = SW_NOT_PRESSED ;
	
	if ( (SW_Config.Pull_State == SW_Int_PULL_UP) || (SW_Config.Pull_State == SW_Ext_PULL_UP) )
	{
		DIO_enumGetPinValue( SW_Config.Port , SW_Config.Pin , &LOC_u8PinVal );
    2868:	82 2f       	mov	r24, r18
    286a:	ae 01       	movw	r20, r28
    286c:	4f 5f       	subi	r20, 0xFF	; 255
    286e:	5f 4f       	sbci	r21, 0xFF	; 255
    2870:	0e 94 1f 12 	call	0x243e	; 0x243e <DIO_enumGetPinValue>
    2874:	90 e0       	ldi	r25, 0x00	; 0
    2876:	89 81       	ldd	r24, Y+1	; 0x01
    2878:	88 23       	and	r24, r24
    287a:	c9 f6       	brne	.-78     	; 0x282e <SW_u8GetPressed+0x22>
    287c:	ec cf       	rjmp	.-40     	; 0x2856 <SW_u8GetPressed+0x4a>

0000287e <SW_voidInit>:
/*
* Breif : This Function initialize the pin which connected to Push Button as Pull Up Input pin
* Parameters :   => struct has the switch porn , pin , status
* return : void 
*/
void SW_voidInit      ( SW_Type SW_Config ){
    287e:	0f 93       	push	r16
    2880:	1f 93       	push	r17
    2882:	df 93       	push	r29
    2884:	cf 93       	push	r28
    2886:	00 d0       	rcall	.+0      	; 0x2888 <SW_voidInit+0xa>
    2888:	0f 92       	push	r0
    288a:	cd b7       	in	r28, 0x3d	; 61
    288c:	de b7       	in	r29, 0x3e	; 62
    288e:	69 83       	std	Y+1, r22	; 0x01
    2890:	7a 83       	std	Y+2, r23	; 0x02
    2892:	8b 83       	std	Y+3, r24	; 0x03
    2894:	06 2f       	mov	r16, r22
    2896:	17 2f       	mov	r17, r23
	
	DIO_enumSetPinDirection( SW_Config.Port , SW_Config.Pin , DIO_PIN_INPUT );
    2898:	86 2f       	mov	r24, r22
    289a:	67 2f       	mov	r22, r23
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	
	/* If Sw is Internal Pull Up */
	if( SW_Config.Pull_State == SW_Int_PULL_UP ){
    28a2:	8b 81       	ldd	r24, Y+3	; 0x03
    28a4:	88 23       	and	r24, r24
    28a6:	29 f4       	brne	.+10     	; 0x28b2 <SW_voidInit+0x34>
		
		DIO_enumSetPinValue    ( SW_Config.Port , SW_Config.Pin , DIO_PIN_HIGH  );
    28a8:	80 2f       	mov	r24, r16
    28aa:	61 2f       	mov	r22, r17
    28ac:	41 e0       	ldi	r20, 0x01	; 1
    28ae:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
		
		/* we could use DIO_enumConnectPullup */
	}
	
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	0f 90       	pop	r0
    28b8:	cf 91       	pop	r28
    28ba:	df 91       	pop	r29
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	08 95       	ret

000028c2 <SSD_voidDisable>:
/*
 * Breif : This Function disable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidDisable   ( SSD_Type Copy_structConfig ){
    28c2:	0f 93       	push	r16
    28c4:	1f 93       	push	r17
    28c6:	18 2f       	mov	r17, r24
    28c8:	09 2f       	mov	r16, r25

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    28ca:	66 23       	and	r22, r22
    28cc:	29 f0       	breq	.+10     	; 0x28d8 <SSD_voidDisable+0x16>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    28ce:	61 30       	cpi	r22, 0x01	; 1
    28d0:	79 f0       	breq	.+30     	; 0x28f0 <SSD_voidDisable+0x2e>
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );

	}

}
    28d2:	1f 91       	pop	r17
    28d4:	0f 91       	pop	r16
    28d6:	08 95       	ret
 */
void SSD_voidDisable   ( SSD_Type Copy_structConfig ){

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    28d8:	69 2f       	mov	r22, r25
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    28e0:	81 2f       	mov	r24, r17
    28e2:	60 2f       	mov	r22, r16
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );

	}

}
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	08 95       	ret
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );

	}
	else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    28f0:	69 2f       	mov	r22, r25
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    28f8:	81 2f       	mov	r24, r17
    28fa:	60 2f       	mov	r22, r16
    28fc:	40 e0       	ldi	r20, 0x00	; 0
    28fe:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>

	}

}
    2902:	1f 91       	pop	r17
    2904:	0f 91       	pop	r16
    2906:	08 95       	ret

00002908 <SSD_voidEnable>:
/*
 * Breif : This Function enable common pin
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidEnable    ( SSD_Type Copy_structConfig ){
    2908:	0f 93       	push	r16
    290a:	1f 93       	push	r17
    290c:	18 2f       	mov	r17, r24
    290e:	09 2f       	mov	r16, r25

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    2910:	66 23       	and	r22, r22
    2912:	29 f0       	breq	.+10     	; 0x291e <SSD_voidEnable+0x16>

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    2914:	61 30       	cpi	r22, 0x01	; 1
    2916:	79 f0       	breq	.+30     	; 0x2936 <SSD_voidEnable+0x2e>
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );

	}

}
    2918:	1f 91       	pop	r17
    291a:	0f 91       	pop	r16
    291c:	08 95       	ret
 */
void SSD_voidEnable    ( SSD_Type Copy_structConfig ){

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    291e:	69 2f       	mov	r22, r25
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );
    2926:	81 2f       	mov	r24, r17
    2928:	60 2f       	mov	r22, r16
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );

	}

}
    2930:	1f 91       	pop	r17
    2932:	0f 91       	pop	r16
    2934:	08 95       	ret
		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_LOW );

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){

		DIO_enumSetPinDirection( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    2936:	69 2f       	mov	r22, r25
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
		DIO_enumSetPinValue( Copy_structConfig.EnablePort , Copy_structConfig.EnablePin , DIO_PIN_HIGH );
    293e:	81 2f       	mov	r24, r17
    2940:	60 2f       	mov	r22, r16
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>

	}

}
    2948:	1f 91       	pop	r17
    294a:	0f 91       	pop	r16
    294c:	08 95       	ret

0000294e <SSD_voidSendNumber>:
 * Parameters : => struct has the SSD type , data port and enable(port & pin)
 * return : void
 */
void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){
    294e:	66 23       	and	r22, r22
    2950:	19 f0       	breq	.+6      	; 0x2958 <SSD_voidSendNumber+0xa>

		DIO_enumSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){
    2952:	61 30       	cpi	r22, 0x01	; 1
    2954:	51 f0       	breq	.+20     	; 0x296a <SSD_voidSendNumber+0x1c>
    2956:	08 95       	ret
 */
void SSD_voidSendNumber( SSD_Type Copy_structConfig , u8 Copy_u8Number ){

	if( Copy_structConfig.Type == SSD_COMMON_CATHODE ){

		DIO_enumSetPortValue( Copy_structConfig.DataPort , Local_u8SSDNumbers[ Copy_u8Number ] );
    2958:	e4 2f       	mov	r30, r20
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	ef 50       	subi	r30, 0x0F	; 15
    295e:	fe 4f       	sbci	r31, 0xFE	; 254
    2960:	87 2f       	mov	r24, r23
    2962:	60 81       	ld	r22, Z
    2964:	0e 94 50 13 	call	0x26a0	; 0x26a0 <DIO_enumSetPortValue>
    2968:	08 95       	ret

	}else if( Copy_structConfig.Type == SSD_COMMON_ANODE ){

		DIO_enumSetPortValue( Copy_structConfig.DataPort , ~( Local_u8SSDNumbers[ Copy_u8Number ] ) );
    296a:	e4 2f       	mov	r30, r20
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	ef 50       	subi	r30, 0x0F	; 15
    2970:	fe 4f       	sbci	r31, 0xFE	; 254
    2972:	60 81       	ld	r22, Z
    2974:	60 95       	com	r22
    2976:	87 2f       	mov	r24, r23
    2978:	0e 94 50 13 	call	0x26a0	; 0x26a0 <DIO_enumSetPortValue>
    297c:	08 95       	ret

0000297e <SSD_voidInitialDataPort>:
 * Parameters :
            =>Copy_u8PORT --> Port Name [ SSD_PORTA ,	SSD_PORTB , SSD_PORTC , SSD_PORTD ]
 * return : void
 */
void SSD_voidInitialDataPort  (SSD_Type Copy_structConfig )
{
    297e:	87 2f       	mov	r24, r23
	DIO_enumSetPortDirection    ( Copy_structConfig.DataPort , 0xFF );
    2980:	6f ef       	ldi	r22, 0xFF	; 255
    2982:	0e 94 38 13 	call	0x2670	; 0x2670 <DIO_enumSetPortDirection>
}
    2986:	08 95       	ret

00002988 <LED_voidToggle>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidToggle      ( LED_Type LED_Configuration )
{
    2988:	df 93       	push	r29
    298a:	cf 93       	push	r28
    298c:	00 d0       	rcall	.+0      	; 0x298e <LED_voidToggle+0x6>
    298e:	0f 92       	push	r0
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	96 2f       	mov	r25, r22
    2996:	69 83       	std	Y+1, r22	; 0x01
    2998:	67 2f       	mov	r22, r23
    299a:	7a 83       	std	Y+2, r23	; 0x02
    299c:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue  ( LED_Configuration.Port , LED_Configuration.Pin );
    299e:	89 2f       	mov	r24, r25
    29a0:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <DIO_enumTogglePinValue>
}
    29a4:	0f 90       	pop	r0
    29a6:	0f 90       	pop	r0
    29a8:	0f 90       	pop	r0
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	08 95       	ret

000029b0 <LED_voidOff>:
* Parameters :
             => struct has the led port , pin , status
* return : void 
*/
void LED_voidOff ( LED_Type LED_Configuration )
{
    29b0:	df 93       	push	r29
    29b2:	cf 93       	push	r28
    29b4:	00 d0       	rcall	.+0      	; 0x29b6 <LED_voidOff+0x6>
    29b6:	0f 92       	push	r0
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	26 2f       	mov	r18, r22
    29be:	69 83       	std	Y+1, r22	; 0x01
    29c0:	7a 83       	std	Y+2, r23	; 0x02
    29c2:	8b 83       	std	Y+3, r24	; 0x03
    29c4:	67 2f       	mov	r22, r23
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    29c6:	81 30       	cpi	r24, 0x01	; 1
    29c8:	61 f0       	breq	.+24     	; 0x29e2 <LED_voidOff+0x32>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
		
	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    29ca:	88 23       	and	r24, r24
    29cc:	21 f4       	brne	.+8      	; 0x29d6 <LED_voidOff+0x26>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
    29ce:	82 2f       	mov	r24, r18
    29d0:	41 e0       	ldi	r20, 0x01	; 1
    29d2:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
		
	}
	
}
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret
void LED_voidOff ( LED_Type LED_Configuration )
{
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    29e2:	82 2f       	mov	r24, r18
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH  );
		
	}
	
}
    29ea:	0f 90       	pop	r0
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	cf 91       	pop	r28
    29f2:	df 91       	pop	r29
    29f4:	08 95       	ret

000029f6 <LED_voidOn>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidOn  ( LED_Type LED_Configuration )
{
    29f6:	df 93       	push	r29
    29f8:	cf 93       	push	r28
    29fa:	00 d0       	rcall	.+0      	; 0x29fc <LED_voidOn+0x6>
    29fc:	0f 92       	push	r0
    29fe:	cd b7       	in	r28, 0x3d	; 61
    2a00:	de b7       	in	r29, 0x3e	; 62
    2a02:	26 2f       	mov	r18, r22
    2a04:	69 83       	std	Y+1, r22	; 0x01
    2a06:	7a 83       	std	Y+2, r23	; 0x02
    2a08:	8b 83       	std	Y+3, r24	; 0x03
    2a0a:	67 2f       	mov	r22, r23
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	61 f0       	breq	.+24     	; 0x2a28 <LED_voidOn+0x32>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
		
	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    2a10:	88 23       	and	r24, r24
    2a12:	21 f4       	brne	.+8      	; 0x2a1c <LED_voidOn+0x26>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
    2a14:	82 2f       	mov	r24, r18
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
		
	}
	
}
    2a1c:	0f 90       	pop	r0
    2a1e:	0f 90       	pop	r0
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret
void LED_voidOn  ( LED_Type LED_Configuration )
{
	
	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_HIGH );
    2a28:	82 2f       	mov	r24, r18
    2a2a:	41 e0       	ldi	r20, 0x01	; 1
    2a2c:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
		
		DIO_enumSetPinValue( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_LOW  );
		
	}
	
}
    2a30:	0f 90       	pop	r0
    2a32:	0f 90       	pop	r0
    2a34:	0f 90       	pop	r0
    2a36:	cf 91       	pop	r28
    2a38:	df 91       	pop	r29
    2a3a:	08 95       	ret

00002a3c <LED_voidInit>:
* Parameters :
            => struct has the led port , pin , status
* return : void 
*/
void LED_voidInit( LED_Type LED_Configuration )
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	00 d0       	rcall	.+0      	; 0x2a42 <LED_voidInit+0x6>
    2a42:	0f 92       	push	r0
    2a44:	cd b7       	in	r28, 0x3d	; 61
    2a46:	de b7       	in	r29, 0x3e	; 62
    2a48:	96 2f       	mov	r25, r22
    2a4a:	69 83       	std	Y+1, r22	; 0x01
    2a4c:	67 2f       	mov	r22, r23
    2a4e:	7a 83       	std	Y+2, r23	; 0x02
    2a50:	8b 83       	std	Y+3, r24	; 0x03
	
	DIO_enumSetPinDirection( LED_Configuration.Port , LED_Configuration.Pin , DIO_PIN_OUTPUT );
    2a52:	89 2f       	mov	r24, r25
    2a54:	41 e0       	ldi	r20, 0x01	; 1
    2a56:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	
}
    2a5a:	0f 90       	pop	r0
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <CLCD_voidSendCommand>:
* Parameters :
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (CLCD_voidSendData)
*/
void CLCD_voidSendCommand ( u8 Copy_u8Command ){
    2a66:	ef 92       	push	r14
    2a68:	ff 92       	push	r15
    2a6a:	1f 93       	push	r17
    2a6c:	18 2f       	mov	r17, r24
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	65 e0       	ldi	r22, 0x05	; 5
    2a72:	40 e0       	ldi	r20, 0x00	; 0
    2a74:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	66 e0       	ldi	r22, 0x06	; 6
    2a7c:	40 e0       	ldi	r20, 0x00	; 0
    2a7e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2a82:	61 2f       	mov	r22, r17
    2a84:	62 95       	swap	r22
    2a86:	6f 70       	andi	r22, 0x0F	; 15
    2a88:	83 e0       	ldi	r24, 0x03	; 3
    2a8a:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	67 e0       	ldi	r22, 0x07	; 7
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2a98:	80 ed       	ldi	r24, 0xD0	; 208
    2a9a:	e8 2e       	mov	r14, r24
    2a9c:	87 e0       	ldi	r24, 0x07	; 7
    2a9e:	f8 2e       	mov	r15, r24
    2aa0:	c7 01       	movw	r24, r14
    2aa2:	01 97       	sbiw	r24, 0x01	; 1
    2aa4:	f1 f7       	brne	.-4      	; 0x2aa2 <CLCD_voidSendCommand+0x3c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	67 e0       	ldi	r22, 0x07	; 7
    2aaa:	40 e0       	ldi	r20, 0x00	; 0
    2aac:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2ab0:	c7 01       	movw	r24, r14
    2ab2:	01 97       	sbiw	r24, 0x01	; 1
    2ab4:	f1 f7       	brne	.-4      	; 0x2ab2 <CLCD_voidSendCommand+0x4c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2ab6:	83 e0       	ldi	r24, 0x03	; 3
    2ab8:	61 2f       	mov	r22, r17
    2aba:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2abe:	81 e0       	ldi	r24, 0x01	; 1
    2ac0:	67 e0       	ldi	r22, 0x07	; 7
    2ac2:	41 e0       	ldi	r20, 0x01	; 1
    2ac4:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2ac8:	c7 01       	movw	r24, r14
    2aca:	01 97       	sbiw	r24, 0x01	; 1
    2acc:	f1 f7       	brne	.-4      	; 0x2aca <CLCD_voidSendCommand+0x64>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	67 e0       	ldi	r22, 0x07	; 7
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2ad8:	c7 01       	movw	r24, r14
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <CLCD_voidSendCommand+0x74>
    2ade:	c7 01       	movw	r24, r14
    2ae0:	01 97       	sbiw	r24, 0x01	; 1
    2ae2:	f1 f7       	brne	.-4      	; 0x2ae0 <CLCD_voidSendCommand+0x7a>

	#endif

	_delay_ms(1);

}
    2ae4:	1f 91       	pop	r17
    2ae6:	ff 90       	pop	r15
    2ae8:	ef 90       	pop	r14
    2aea:	08 95       	ret

00002aec <CLCD_voidSendData>:
* Breif : This Function send data to the port which is defined in config.h
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void CLCD_voidSendData    ( u8 Copy_u8Data ){
    2aec:	ef 92       	push	r14
    2aee:	ff 92       	push	r15
    2af0:	1f 93       	push	r17
    2af2:	18 2f       	mov	r17, r24
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	65 e0       	ldi	r22, 0x05	; 5
    2af8:	41 e0       	ldi	r20, 0x01	; 1
    2afa:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	66 e0       	ldi	r22, 0x06	; 6
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    2b08:	61 2f       	mov	r22, r17
    2b0a:	62 95       	swap	r22
    2b0c:	6f 70       	andi	r22, 0x0F	; 15
    2b0e:	83 e0       	ldi	r24, 0x03	; 3
    2b10:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	67 e0       	ldi	r22, 0x07	; 7
    2b18:	41 e0       	ldi	r20, 0x01	; 1
    2b1a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2b1e:	90 ed       	ldi	r25, 0xD0	; 208
    2b20:	e9 2e       	mov	r14, r25
    2b22:	97 e0       	ldi	r25, 0x07	; 7
    2b24:	f9 2e       	mov	r15, r25
    2b26:	c7 01       	movw	r24, r14
    2b28:	01 97       	sbiw	r24, 0x01	; 1
    2b2a:	f1 f7       	brne	.-4      	; 0x2b28 <CLCD_voidSendData+0x3c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	67 e0       	ldi	r22, 0x07	; 7
    2b30:	40 e0       	ldi	r20, 0x00	; 0
    2b32:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2b36:	c7 01       	movw	r24, r14
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	f1 f7       	brne	.-4      	; 0x2b38 <CLCD_voidSendData+0x4c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    2b3c:	83 e0       	ldi	r24, 0x03	; 3
    2b3e:	61 2f       	mov	r22, r17
    2b40:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	67 e0       	ldi	r22, 0x07	; 7
    2b48:	41 e0       	ldi	r20, 0x01	; 1
    2b4a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2b4e:	c7 01       	movw	r24, r14
    2b50:	01 97       	sbiw	r24, 0x01	; 1
    2b52:	f1 f7       	brne	.-4      	; 0x2b50 <CLCD_voidSendData+0x64>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	67 e0       	ldi	r22, 0x07	; 7
    2b58:	40 e0       	ldi	r20, 0x00	; 0
    2b5a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2b5e:	c7 01       	movw	r24, r14
    2b60:	01 97       	sbiw	r24, 0x01	; 1
    2b62:	f1 f7       	brne	.-4      	; 0x2b60 <CLCD_voidSendData+0x74>
    2b64:	c7 01       	movw	r24, r14
    2b66:	01 97       	sbiw	r24, 0x01	; 1
    2b68:	f1 f7       	brne	.-4      	; 0x2b66 <CLCD_voidSendData+0x7a>

	#endif

	_delay_ms(1);

}
    2b6a:	1f 91       	pop	r17
    2b6c:	ff 90       	pop	r15
    2b6e:	ef 90       	pop	r14
    2b70:	08 95       	ret

00002b72 <CLCD_voidSendString>:
* Breif : This Function send string to the port which is defined in config.h
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){
    2b72:	ef 92       	push	r14
    2b74:	ff 92       	push	r15
    2b76:	0f 93       	push	r16
    2b78:	1f 93       	push	r17
    2b7a:	cf 93       	push	r28
    2b7c:	df 93       	push	r29
    2b7e:	7c 01       	movw	r14, r24

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    2b80:	fc 01       	movw	r30, r24
    2b82:	10 81       	ld	r17, Z
    2b84:	11 23       	and	r17, r17
    2b86:	09 f4       	brne	.+2      	; 0x2b8a <CLCD_voidSendString+0x18>
    2b88:	42 c0       	rjmp	.+132    	; 0x2c0e <CLCD_voidSendString+0x9c>
    2b8a:	00 e0       	ldi	r16, 0x00	; 0
    2b8c:	c0 ed       	ldi	r28, 0xD0	; 208
    2b8e:	d7 e0       	ldi	r29, 0x07	; 7
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	65 e0       	ldi	r22, 0x05	; 5
    2b94:	41 e0       	ldi	r20, 0x01	; 1
    2b96:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2b9a:	81 e0       	ldi	r24, 0x01	; 1
    2b9c:	66 e0       	ldi	r22, 0x06	; 6
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    2ba4:	61 2f       	mov	r22, r17
    2ba6:	62 95       	swap	r22
    2ba8:	6f 70       	andi	r22, 0x0F	; 15
    2baa:	83 e0       	ldi	r24, 0x03	; 3
    2bac:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	67 e0       	ldi	r22, 0x07	; 7
    2bb4:	41 e0       	ldi	r20, 0x01	; 1
    2bb6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2bba:	ce 01       	movw	r24, r28
    2bbc:	01 97       	sbiw	r24, 0x01	; 1
    2bbe:	f1 f7       	brne	.-4      	; 0x2bbc <CLCD_voidSendString+0x4a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2bc0:	81 e0       	ldi	r24, 0x01	; 1
    2bc2:	67 e0       	ldi	r22, 0x07	; 7
    2bc4:	40 e0       	ldi	r20, 0x00	; 0
    2bc6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2bca:	ce 01       	movw	r24, r28
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <CLCD_voidSendString+0x5a>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    2bd0:	83 e0       	ldi	r24, 0x03	; 3
    2bd2:	61 2f       	mov	r22, r17
    2bd4:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2bd8:	81 e0       	ldi	r24, 0x01	; 1
    2bda:	67 e0       	ldi	r22, 0x07	; 7
    2bdc:	41 e0       	ldi	r20, 0x01	; 1
    2bde:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2be2:	ce 01       	movw	r24, r28
    2be4:	01 97       	sbiw	r24, 0x01	; 1
    2be6:	f1 f7       	brne	.-4      	; 0x2be4 <CLCD_voidSendString+0x72>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	67 e0       	ldi	r22, 0x07	; 7
    2bec:	40 e0       	ldi	r20, 0x00	; 0
    2bee:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	01 97       	sbiw	r24, 0x01	; 1
    2bf6:	f1 f7       	brne	.-4      	; 0x2bf4 <CLCD_voidSendString+0x82>
    2bf8:	ce 01       	movw	r24, r28
    2bfa:	01 97       	sbiw	r24, 0x01	; 1
    2bfc:	f1 f7       	brne	.-4      	; 0x2bfa <CLCD_voidSendString+0x88>
	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;
    2bfe:	0f 5f       	subi	r16, 0xFF	; 255
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    2c00:	f7 01       	movw	r30, r14
    2c02:	e0 0f       	add	r30, r16
    2c04:	f1 1d       	adc	r31, r1
    2c06:	10 81       	ld	r17, Z
    2c08:	11 23       	and	r17, r17
    2c0a:	09 f0       	breq	.+2      	; 0x2c0e <CLCD_voidSendString+0x9c>
    2c0c:	c1 cf       	rjmp	.-126    	; 0x2b90 <CLCD_voidSendString+0x1e>
		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;

	}

}
    2c0e:	df 91       	pop	r29
    2c10:	cf 91       	pop	r28
    2c12:	1f 91       	pop	r17
    2c14:	0f 91       	pop	r16
    2c16:	ff 90       	pop	r15
    2c18:	ef 90       	pop	r14
    2c1a:	08 95       	ret

00002c1c <CLCD_voidClearScreen>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
    2c1c:	0f 93       	push	r16
    2c1e:	1f 93       	push	r17
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	65 e0       	ldi	r22, 0x05	; 5
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	66 e0       	ldi	r22, 0x06	; 6
    2c2e:	40 e0       	ldi	r20, 0x00	; 0
    2c30:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2c34:	83 e0       	ldi	r24, 0x03	; 3
    2c36:	60 e0       	ldi	r22, 0x00	; 0
    2c38:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	67 e0       	ldi	r22, 0x07	; 7
    2c40:	41 e0       	ldi	r20, 0x01	; 1
    2c42:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2c46:	00 ed       	ldi	r16, 0xD0	; 208
    2c48:	17 e0       	ldi	r17, 0x07	; 7
    2c4a:	c8 01       	movw	r24, r16
    2c4c:	01 97       	sbiw	r24, 0x01	; 1
    2c4e:	f1 f7       	brne	.-4      	; 0x2c4c <CLCD_voidClearScreen+0x30>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2c50:	81 e0       	ldi	r24, 0x01	; 1
    2c52:	67 e0       	ldi	r22, 0x07	; 7
    2c54:	40 e0       	ldi	r20, 0x00	; 0
    2c56:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2c5a:	c8 01       	movw	r24, r16
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <CLCD_voidClearScreen+0x40>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2c60:	83 e0       	ldi	r24, 0x03	; 3
    2c62:	61 e0       	ldi	r22, 0x01	; 1
    2c64:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	67 e0       	ldi	r22, 0x07	; 7
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2c72:	c8 01       	movw	r24, r16
    2c74:	01 97       	sbiw	r24, 0x01	; 1
    2c76:	f1 f7       	brne	.-4      	; 0x2c74 <CLCD_voidClearScreen+0x58>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	67 e0       	ldi	r22, 0x07	; 7
    2c7c:	40 e0       	ldi	r20, 0x00	; 0
    2c7e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2c82:	c8 01       	movw	r24, r16
    2c84:	01 97       	sbiw	r24, 0x01	; 1
    2c86:	f1 f7       	brne	.-4      	; 0x2c84 <CLCD_voidClearScreen+0x68>
    2c88:	c8 01       	movw	r24, r16
    2c8a:	01 97       	sbiw	r24, 0x01	; 1
    2c8c:	f1 f7       	brne	.-4      	; 0x2c8a <CLCD_voidClearScreen+0x6e>
    2c8e:	80 e2       	ldi	r24, 0x20	; 32
    2c90:	9e e4       	ldi	r25, 0x4E	; 78
    2c92:	01 97       	sbiw	r24, 0x01	; 1
    2c94:	f1 f7       	brne	.-4      	; 0x2c92 <CLCD_voidClearScreen+0x76>
*/
void CLCD_voidClearScreen(void)
{
	CLCD_voidSendCommand(lcd_Clear);
	_delay_ms(10); //wait more than 1.53 ms
}
    2c96:	1f 91       	pop	r17
    2c98:	0f 91       	pop	r16
    2c9a:	08 95       	ret

00002c9c <CLCD_voidSetPosition>:
*Hint :-
   In This function we send a command which =0b1xxxxxxx
   MSB = 1  ===> refers that it is command to set cursor
   xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
    2c9c:	ff 92       	push	r15
    2c9e:	0f 93       	push	r16
    2ca0:	1f 93       	push	r17
    2ca2:	98 2f       	mov	r25, r24

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    2ca4:	81 50       	subi	r24, 0x01	; 1
    2ca6:	82 30       	cpi	r24, 0x02	; 2
    2ca8:	08 f4       	brcc	.+2      	; 0x2cac <CLCD_voidSetPosition+0x10>
    2caa:	42 c0       	rjmp	.+132    	; 0x2d30 <CLCD_voidSetPosition+0x94>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    2cac:	20 e8       	ldi	r18, 0x80	; 128
    2cae:	f2 2e       	mov	r15, r18
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	65 e0       	ldi	r22, 0x05	; 5
    2cb4:	40 e0       	ldi	r20, 0x00	; 0
    2cb6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2cba:	81 e0       	ldi	r24, 0x01	; 1
    2cbc:	66 e0       	ldi	r22, 0x06	; 6
    2cbe:	40 e0       	ldi	r20, 0x00	; 0
    2cc0:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2cc4:	6f 2d       	mov	r22, r15
    2cc6:	62 95       	swap	r22
    2cc8:	6f 70       	andi	r22, 0x0F	; 15
    2cca:	83 e0       	ldi	r24, 0x03	; 3
    2ccc:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	67 e0       	ldi	r22, 0x07	; 7
    2cd4:	41 e0       	ldi	r20, 0x01	; 1
    2cd6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2cda:	00 ed       	ldi	r16, 0xD0	; 208
    2cdc:	17 e0       	ldi	r17, 0x07	; 7
    2cde:	c8 01       	movw	r24, r16
    2ce0:	01 97       	sbiw	r24, 0x01	; 1
    2ce2:	f1 f7       	brne	.-4      	; 0x2ce0 <CLCD_voidSetPosition+0x44>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	67 e0       	ldi	r22, 0x07	; 7
    2ce8:	40 e0       	ldi	r20, 0x00	; 0
    2cea:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2cee:	c8 01       	movw	r24, r16
    2cf0:	01 97       	sbiw	r24, 0x01	; 1
    2cf2:	f1 f7       	brne	.-4      	; 0x2cf0 <CLCD_voidSetPosition+0x54>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2cf4:	83 e0       	ldi	r24, 0x03	; 3
    2cf6:	6f 2d       	mov	r22, r15
    2cf8:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	67 e0       	ldi	r22, 0x07	; 7
    2d00:	41 e0       	ldi	r20, 0x01	; 1
    2d02:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2d06:	c8 01       	movw	r24, r16
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	f1 f7       	brne	.-4      	; 0x2d08 <CLCD_voidSetPosition+0x6c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	67 e0       	ldi	r22, 0x07	; 7
    2d10:	40 e0       	ldi	r20, 0x00	; 0
    2d12:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2d16:	c8 01       	movw	r24, r16
    2d18:	01 97       	sbiw	r24, 0x01	; 1
    2d1a:	f1 f7       	brne	.-4      	; 0x2d18 <CLCD_voidSetPosition+0x7c>
    2d1c:	c8 01       	movw	r24, r16
    2d1e:	01 97       	sbiw	r24, 0x01	; 1
    2d20:	f1 f7       	brne	.-4      	; 0x2d1e <CLCD_voidSetPosition+0x82>
    2d22:	c8 01       	movw	r24, r16
    2d24:	01 97       	sbiw	r24, 0x01	; 1
    2d26:	f1 f7       	brne	.-4      	; 0x2d24 <CLCD_voidSetPosition+0x88>

	}
	CLCD_voidSendCommand ( LOC_u8data );
	_delay_ms(1);

}
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	08 95       	ret
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    2d30:	61 31       	cpi	r22, 0x11	; 17
    2d32:	08 f0       	brcs	.+2      	; 0x2d36 <CLCD_voidSetPosition+0x9a>
    2d34:	bb cf       	rjmp	.-138    	; 0x2cac <CLCD_voidSetPosition+0x10>
    2d36:	66 23       	and	r22, r22
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <CLCD_voidSetPosition+0xa0>
    2d3a:	b8 cf       	rjmp	.-144    	; 0x2cac <CLCD_voidSetPosition+0x10>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    2d3c:	91 30       	cpi	r25, 0x01	; 1
    2d3e:	39 f0       	breq	.+14     	; 0x2d4e <CLCD_voidSetPosition+0xb2>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    2d40:	92 30       	cpi	r25, 0x02	; 2
    2d42:	09 f0       	breq	.+2      	; 0x2d46 <CLCD_voidSetPosition+0xaa>
    2d44:	b5 cf       	rjmp	.-150    	; 0x2cb0 <CLCD_voidSetPosition+0x14>

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    2d46:	3f eb       	ldi	r19, 0xBF	; 191
    2d48:	f3 2e       	mov	r15, r19
    2d4a:	f6 0e       	add	r15, r22
    2d4c:	b1 cf       	rjmp	.-158    	; 0x2cb0 <CLCD_voidSetPosition+0x14>
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    2d4e:	4f e7       	ldi	r20, 0x7F	; 127
    2d50:	f4 2e       	mov	r15, r20
    2d52:	f6 0e       	add	r15, r22
    2d54:	ad cf       	rjmp	.-166    	; 0x2cb0 <CLCD_voidSetPosition+0x14>

00002d56 <CLCD_voidInit>:
/*
* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
void CLCD_voidInit        ( void ){
    2d56:	0f 93       	push	r16
    2d58:	1f 93       	push	r17
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	48 ec       	ldi	r20, 0xC8	; 200
    2d60:	50 e0       	ldi	r21, 0x00	; 0
    2d62:	ca 01       	movw	r24, r20
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <CLCD_voidInit+0xe>
    2d68:	2f 5f       	subi	r18, 0xFF	; 255
    2d6a:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d6c:	81 e0       	ldi	r24, 0x01	; 1
    2d6e:	24 3f       	cpi	r18, 0xF4	; 244
    2d70:	38 07       	cpc	r19, r24
    2d72:	b9 f7       	brne	.-18     	; 0x2d62 <CLCD_voidInit+0xc>

	#elif   CLCD_MODE == 4

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN4,DIO_PIN_OUTPUT);
    2d74:	83 e0       	ldi	r24, 0x03	; 3
    2d76:	64 e0       	ldi	r22, 0x04	; 4
    2d78:	41 e0       	ldi	r20, 0x01	; 1
    2d7a:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN5,DIO_PIN_OUTPUT);
    2d7e:	83 e0       	ldi	r24, 0x03	; 3
    2d80:	65 e0       	ldi	r22, 0x05	; 5
    2d82:	41 e0       	ldi	r20, 0x01	; 1
    2d84:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN6,DIO_PIN_OUTPUT);
    2d88:	83 e0       	ldi	r24, 0x03	; 3
    2d8a:	66 e0       	ldi	r22, 0x06	; 6
    2d8c:	41 e0       	ldi	r20, 0x01	; 1
    2d8e:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN7,DIO_PIN_OUTPUT);
    2d92:	83 e0       	ldi	r24, 0x03	; 3
    2d94:	67 e0       	ldi	r22, 0x07	; 7
    2d96:	41 e0       	ldi	r20, 0x01	; 1
    2d98:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	65 e0       	ldi	r22, 0x05	; 5
    2da0:	41 e0       	ldi	r20, 0x01	; 1
    2da2:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	66 e0       	ldi	r22, 0x06	; 6
    2daa:	41 e0       	ldi	r20, 0x01	; 1
    2dac:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
    2db0:	81 e0       	ldi	r24, 0x01	; 1
    2db2:	67 e0       	ldi	r22, 0x07	; 7
    2db4:	41 e0       	ldi	r20, 0x01	; 1
    2db6:	0e 94 17 11 	call	0x222e	; 0x222e <DIO_enumSetPinDirection>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2dba:	81 e0       	ldi	r24, 0x01	; 1
    2dbc:	65 e0       	ldi	r22, 0x05	; 5
    2dbe:	40 e0       	ldi	r20, 0x00	; 0
    2dc0:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2dc4:	81 e0       	ldi	r24, 0x01	; 1
    2dc6:	66 e0       	ldi	r22, 0x06	; 6
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2dce:	83 e0       	ldi	r24, 0x03	; 3
    2dd0:	60 e0       	ldi	r22, 0x00	; 0
    2dd2:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	67 e0       	ldi	r22, 0x07	; 7
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2de0:	00 ed       	ldi	r16, 0xD0	; 208
    2de2:	17 e0       	ldi	r17, 0x07	; 7
    2de4:	c8 01       	movw	r24, r16
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <CLCD_voidInit+0x90>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	67 e0       	ldi	r22, 0x07	; 7
    2dee:	40 e0       	ldi	r20, 0x00	; 0
    2df0:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2df4:	c8 01       	movw	r24, r16
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	f1 f7       	brne	.-4      	; 0x2df6 <CLCD_voidInit+0xa0>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2dfa:	83 e0       	ldi	r24, 0x03	; 3
    2dfc:	62 e0       	ldi	r22, 0x02	; 2
    2dfe:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	67 e0       	ldi	r22, 0x07	; 7
    2e06:	41 e0       	ldi	r20, 0x01	; 1
    2e08:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2e0c:	c8 01       	movw	r24, r16
    2e0e:	01 97       	sbiw	r24, 0x01	; 1
    2e10:	f1 f7       	brne	.-4      	; 0x2e0e <CLCD_voidInit+0xb8>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	67 e0       	ldi	r22, 0x07	; 7
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2e1c:	c8 01       	movw	r24, r16
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <CLCD_voidInit+0xc8>
    2e22:	c8 01       	movw	r24, r16
    2e24:	01 97       	sbiw	r24, 0x01	; 1
    2e26:	f1 f7       	brne	.-4      	; 0x2e24 <CLCD_voidInit+0xce>
    2e28:	80 e6       	ldi	r24, 0x60	; 96
    2e2a:	9a ee       	ldi	r25, 0xEA	; 234
    2e2c:	01 97       	sbiw	r24, 0x01	; 1
    2e2e:	f1 f7       	brne	.-4      	; 0x2e2c <CLCD_voidInit+0xd6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	65 e0       	ldi	r22, 0x05	; 5
    2e34:	40 e0       	ldi	r20, 0x00	; 0
    2e36:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2e3a:	81 e0       	ldi	r24, 0x01	; 1
    2e3c:	66 e0       	ldi	r22, 0x06	; 6
    2e3e:	40 e0       	ldi	r20, 0x00	; 0
    2e40:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2e44:	83 e0       	ldi	r24, 0x03	; 3
    2e46:	62 e0       	ldi	r22, 0x02	; 2
    2e48:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2e4c:	81 e0       	ldi	r24, 0x01	; 1
    2e4e:	67 e0       	ldi	r22, 0x07	; 7
    2e50:	41 e0       	ldi	r20, 0x01	; 1
    2e52:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2e56:	c8 01       	movw	r24, r16
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <CLCD_voidInit+0x102>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2e5c:	81 e0       	ldi	r24, 0x01	; 1
    2e5e:	67 e0       	ldi	r22, 0x07	; 7
    2e60:	40 e0       	ldi	r20, 0x00	; 0
    2e62:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2e66:	c8 01       	movw	r24, r16
    2e68:	01 97       	sbiw	r24, 0x01	; 1
    2e6a:	f1 f7       	brne	.-4      	; 0x2e68 <CLCD_voidInit+0x112>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2e6c:	83 e0       	ldi	r24, 0x03	; 3
    2e6e:	68 e2       	ldi	r22, 0x28	; 40
    2e70:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2e74:	81 e0       	ldi	r24, 0x01	; 1
    2e76:	67 e0       	ldi	r22, 0x07	; 7
    2e78:	41 e0       	ldi	r20, 0x01	; 1
    2e7a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2e7e:	c8 01       	movw	r24, r16
    2e80:	01 97       	sbiw	r24, 0x01	; 1
    2e82:	f1 f7       	brne	.-4      	; 0x2e80 <CLCD_voidInit+0x12a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	67 e0       	ldi	r22, 0x07	; 7
    2e88:	40 e0       	ldi	r20, 0x00	; 0
    2e8a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2e8e:	c8 01       	movw	r24, r16
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <CLCD_voidInit+0x13a>
    2e94:	c8 01       	movw	r24, r16
    2e96:	01 97       	sbiw	r24, 0x01	; 1
    2e98:	f1 f7       	brne	.-4      	; 0x2e96 <CLCD_voidInit+0x140>
    2e9a:	c8 01       	movw	r24, r16
    2e9c:	01 97       	sbiw	r24, 0x01	; 1
    2e9e:	f1 f7       	brne	.-4      	; 0x2e9c <CLCD_voidInit+0x146>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	65 e0       	ldi	r22, 0x05	; 5
    2ea4:	40 e0       	ldi	r20, 0x00	; 0
    2ea6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2eaa:	81 e0       	ldi	r24, 0x01	; 1
    2eac:	66 e0       	ldi	r22, 0x06	; 6
    2eae:	40 e0       	ldi	r20, 0x00	; 0
    2eb0:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2eb4:	83 e0       	ldi	r24, 0x03	; 3
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	67 e0       	ldi	r22, 0x07	; 7
    2ec0:	41 e0       	ldi	r20, 0x01	; 1
    2ec2:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2ec6:	c8 01       	movw	r24, r16
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <CLCD_voidInit+0x172>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2ecc:	81 e0       	ldi	r24, 0x01	; 1
    2ece:	67 e0       	ldi	r22, 0x07	; 7
    2ed0:	40 e0       	ldi	r20, 0x00	; 0
    2ed2:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2ed6:	c8 01       	movw	r24, r16
    2ed8:	01 97       	sbiw	r24, 0x01	; 1
    2eda:	f1 f7       	brne	.-4      	; 0x2ed8 <CLCD_voidInit+0x182>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2edc:	83 e0       	ldi	r24, 0x03	; 3
    2ede:	6c e0       	ldi	r22, 0x0C	; 12
    2ee0:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	67 e0       	ldi	r22, 0x07	; 7
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2eee:	c8 01       	movw	r24, r16
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <CLCD_voidInit+0x19a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2ef4:	81 e0       	ldi	r24, 0x01	; 1
    2ef6:	67 e0       	ldi	r22, 0x07	; 7
    2ef8:	40 e0       	ldi	r20, 0x00	; 0
    2efa:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2efe:	c8 01       	movw	r24, r16
    2f00:	01 97       	sbiw	r24, 0x01	; 1
    2f02:	f1 f7       	brne	.-4      	; 0x2f00 <CLCD_voidInit+0x1aa>
    2f04:	c8 01       	movw	r24, r16
    2f06:	01 97       	sbiw	r24, 0x01	; 1
    2f08:	f1 f7       	brne	.-4      	; 0x2f06 <CLCD_voidInit+0x1b0>
    2f0a:	c8 01       	movw	r24, r16
    2f0c:	01 97       	sbiw	r24, 0x01	; 1
    2f0e:	f1 f7       	brne	.-4      	; 0x2f0c <CLCD_voidInit+0x1b6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	65 e0       	ldi	r22, 0x05	; 5
    2f14:	40 e0       	ldi	r20, 0x00	; 0
    2f16:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2f1a:	81 e0       	ldi	r24, 0x01	; 1
    2f1c:	66 e0       	ldi	r22, 0x06	; 6
    2f1e:	40 e0       	ldi	r20, 0x00	; 0
    2f20:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2f24:	83 e0       	ldi	r24, 0x03	; 3
    2f26:	60 e0       	ldi	r22, 0x00	; 0
    2f28:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	67 e0       	ldi	r22, 0x07	; 7
    2f30:	41 e0       	ldi	r20, 0x01	; 1
    2f32:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2f36:	c8 01       	movw	r24, r16
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <CLCD_voidInit+0x1e2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2f3c:	81 e0       	ldi	r24, 0x01	; 1
    2f3e:	67 e0       	ldi	r22, 0x07	; 7
    2f40:	40 e0       	ldi	r20, 0x00	; 0
    2f42:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2f46:	c8 01       	movw	r24, r16
    2f48:	01 97       	sbiw	r24, 0x01	; 1
    2f4a:	f1 f7       	brne	.-4      	; 0x2f48 <CLCD_voidInit+0x1f2>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2f4c:	83 e0       	ldi	r24, 0x03	; 3
    2f4e:	61 e0       	ldi	r22, 0x01	; 1
    2f50:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2f54:	81 e0       	ldi	r24, 0x01	; 1
    2f56:	67 e0       	ldi	r22, 0x07	; 7
    2f58:	41 e0       	ldi	r20, 0x01	; 1
    2f5a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2f5e:	c8 01       	movw	r24, r16
    2f60:	01 97       	sbiw	r24, 0x01	; 1
    2f62:	f1 f7       	brne	.-4      	; 0x2f60 <CLCD_voidInit+0x20a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	67 e0       	ldi	r22, 0x07	; 7
    2f68:	40 e0       	ldi	r20, 0x00	; 0
    2f6a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2f6e:	c8 01       	movw	r24, r16
    2f70:	01 97       	sbiw	r24, 0x01	; 1
    2f72:	f1 f7       	brne	.-4      	; 0x2f70 <CLCD_voidInit+0x21a>
    2f74:	c8 01       	movw	r24, r16
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	f1 f7       	brne	.-4      	; 0x2f76 <CLCD_voidInit+0x220>
    2f7a:	80 e2       	ldi	r24, 0x20	; 32
    2f7c:	9e e4       	ldi	r25, 0x4E	; 78
    2f7e:	01 97       	sbiw	r24, 0x01	; 1
    2f80:	f1 f7       	brne	.-4      	; 0x2f7e <CLCD_voidInit+0x228>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	65 e0       	ldi	r22, 0x05	; 5
    2f86:	40 e0       	ldi	r20, 0x00	; 0
    2f88:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	66 e0       	ldi	r22, 0x06	; 6
    2f90:	40 e0       	ldi	r20, 0x00	; 0
    2f92:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    2f96:	83 e0       	ldi	r24, 0x03	; 3
    2f98:	60 e0       	ldi	r22, 0x00	; 0
    2f9a:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2f9e:	81 e0       	ldi	r24, 0x01	; 1
    2fa0:	67 e0       	ldi	r22, 0x07	; 7
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2fa8:	c8 01       	movw	r24, r16
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <CLCD_voidInit+0x254>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	67 e0       	ldi	r22, 0x07	; 7
    2fb2:	40 e0       	ldi	r20, 0x00	; 0
    2fb4:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2fb8:	c8 01       	movw	r24, r16
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	f1 f7       	brne	.-4      	; 0x2fba <CLCD_voidInit+0x264>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    2fbe:	83 e0       	ldi	r24, 0x03	; 3
    2fc0:	66 e0       	ldi	r22, 0x06	; 6
    2fc2:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	67 e0       	ldi	r22, 0x07	; 7
    2fca:	41 e0       	ldi	r20, 0x01	; 1
    2fcc:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2fd0:	c8 01       	movw	r24, r16
    2fd2:	01 97       	sbiw	r24, 0x01	; 1
    2fd4:	f1 f7       	brne	.-4      	; 0x2fd2 <CLCD_voidInit+0x27c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	67 e0       	ldi	r22, 0x07	; 7
    2fda:	40 e0       	ldi	r20, 0x00	; 0
    2fdc:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    2fe0:	c8 01       	movw	r24, r16
    2fe2:	01 97       	sbiw	r24, 0x01	; 1
    2fe4:	f1 f7       	brne	.-4      	; 0x2fe2 <CLCD_voidInit+0x28c>
    2fe6:	c8 01       	movw	r24, r16
    2fe8:	01 97       	sbiw	r24, 0x01	; 1
    2fea:	f1 f7       	brne	.-4      	; 0x2fe8 <CLCD_voidInit+0x292>
    2fec:	c8 01       	movw	r24, r16
    2fee:	01 97       	sbiw	r24, 0x01	; 1
    2ff0:	f1 f7       	brne	.-4      	; 0x2fee <CLCD_voidInit+0x298>
	#endif




}
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	08 95       	ret

00002ff8 <CLCD_voidSendNumber>:
* Breif : This Function send number to the port which is defined in config.h
* Parameters :
            => Copy_u64Number --> number that you want to display
* return : nothing
*/
void CLCD_voidSendNumber   ( u64 Copy_u64Number    ){
    2ff8:	2f 92       	push	r2
    2ffa:	3f 92       	push	r3
    2ffc:	4f 92       	push	r4
    2ffe:	5f 92       	push	r5
    3000:	6f 92       	push	r6
    3002:	7f 92       	push	r7
    3004:	8f 92       	push	r8
    3006:	9f 92       	push	r9
    3008:	af 92       	push	r10
    300a:	bf 92       	push	r11
    300c:	cf 92       	push	r12
    300e:	df 92       	push	r13
    3010:	ef 92       	push	r14
    3012:	ff 92       	push	r15
    3014:	0f 93       	push	r16
    3016:	1f 93       	push	r17
    3018:	df 93       	push	r29
    301a:	cf 93       	push	r28
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	2a 97       	sbiw	r28, 0x0a	; 10
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	2b 83       	std	Y+3, r18	; 0x03
    302e:	3c 83       	std	Y+4, r19	; 0x04
    3030:	4d 83       	std	Y+5, r20	; 0x05
    3032:	5e 83       	std	Y+6, r21	; 0x06
    3034:	6f 83       	std	Y+7, r22	; 0x07
    3036:	78 87       	std	Y+8, r23	; 0x08
    3038:	89 87       	std	Y+9, r24	; 0x09
    303a:	9a 87       	std	Y+10, r25	; 0x0a

	u64 LOC_u64Reversed = 1 ;

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }
    303c:	82 2f       	mov	r24, r18
    303e:	83 2b       	or	r24, r19
    3040:	84 2b       	or	r24, r20
    3042:	85 2b       	or	r24, r21
    3044:	86 2b       	or	r24, r22
    3046:	87 2b       	or	r24, r23
    3048:	49 85       	ldd	r20, Y+9	; 0x09
    304a:	84 2b       	or	r24, r20
    304c:	89 2b       	or	r24, r25
    304e:	09 f4       	brne	.+2      	; 0x3052 <CLCD_voidSendNumber+0x5a>
    3050:	86 c1       	rjmp	.+780    	; 0x335e <CLCD_voidSendNumber+0x366>
    3052:	99 24       	eor	r9, r9
    3054:	93 94       	inc	r9
    3056:	88 24       	eor	r8, r8
    3058:	55 24       	eor	r5, r5
    305a:	22 24       	eor	r2, r2
    305c:	33 24       	eor	r3, r3
    305e:	44 24       	eor	r4, r4
    3060:	66 24       	eor	r6, r6
    3062:	77 24       	eor	r7, r7

	else{

		while( Copy_u64Number != 0 ){

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
    3064:	29 2d       	mov	r18, r9
    3066:	38 2d       	mov	r19, r8
    3068:	45 2d       	mov	r20, r5
    306a:	52 2d       	mov	r21, r2
    306c:	63 2d       	mov	r22, r3
    306e:	74 2d       	mov	r23, r4
    3070:	c3 01       	movw	r24, r6
    3072:	01 e0       	ldi	r16, 0x01	; 1
    3074:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3078:	12 2f       	mov	r17, r18
    307a:	f3 2e       	mov	r15, r19
    307c:	e4 2e       	mov	r14, r20
    307e:	d5 2e       	mov	r13, r21
    3080:	c6 2e       	mov	r12, r22
    3082:	b7 2e       	mov	r11, r23
    3084:	a8 2e       	mov	r10, r24
    3086:	79 2e       	mov	r7, r25
    3088:	02 e0       	ldi	r16, 0x02	; 2
    308a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    308e:	82 2e       	mov	r8, r18
    3090:	81 0e       	add	r8, r17
    3092:	e1 e0       	ldi	r30, 0x01	; 1
    3094:	81 16       	cp	r8, r17
    3096:	08 f0       	brcs	.+2      	; 0x309a <CLCD_voidSendNumber+0xa2>
    3098:	e0 e0       	ldi	r30, 0x00	; 0
    309a:	3f 0d       	add	r19, r15
    309c:	21 e0       	ldi	r18, 0x01	; 1
    309e:	3f 15       	cp	r19, r15
    30a0:	08 f0       	brcs	.+2      	; 0x30a4 <CLCD_voidSendNumber+0xac>
    30a2:	20 e0       	ldi	r18, 0x00	; 0
    30a4:	6e 2e       	mov	r6, r30
    30a6:	63 0e       	add	r6, r19
    30a8:	e1 e0       	ldi	r30, 0x01	; 1
    30aa:	63 16       	cp	r6, r19
    30ac:	08 f0       	brcs	.+2      	; 0x30b0 <CLCD_voidSendNumber+0xb8>
    30ae:	e0 e0       	ldi	r30, 0x00	; 0
    30b0:	2e 2b       	or	r18, r30
    30b2:	4e 0d       	add	r20, r14
    30b4:	31 e0       	ldi	r19, 0x01	; 1
    30b6:	4e 15       	cp	r20, r14
    30b8:	08 f0       	brcs	.+2      	; 0x30bc <CLCD_voidSendNumber+0xc4>
    30ba:	30 e0       	ldi	r19, 0x00	; 0
    30bc:	52 2e       	mov	r5, r18
    30be:	54 0e       	add	r5, r20
    30c0:	21 e0       	ldi	r18, 0x01	; 1
    30c2:	54 16       	cp	r5, r20
    30c4:	08 f0       	brcs	.+2      	; 0x30c8 <CLCD_voidSendNumber+0xd0>
    30c6:	20 e0       	ldi	r18, 0x00	; 0
    30c8:	32 2b       	or	r19, r18
    30ca:	5d 0d       	add	r21, r13
    30cc:	21 e0       	ldi	r18, 0x01	; 1
    30ce:	5d 15       	cp	r21, r13
    30d0:	08 f0       	brcs	.+2      	; 0x30d4 <CLCD_voidSendNumber+0xdc>
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	43 2e       	mov	r4, r19
    30d6:	45 0e       	add	r4, r21
    30d8:	31 e0       	ldi	r19, 0x01	; 1
    30da:	45 16       	cp	r4, r21
    30dc:	08 f0       	brcs	.+2      	; 0x30e0 <CLCD_voidSendNumber+0xe8>
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	23 2b       	or	r18, r19
    30e2:	6c 0d       	add	r22, r12
    30e4:	31 e0       	ldi	r19, 0x01	; 1
    30e6:	6c 15       	cp	r22, r12
    30e8:	08 f0       	brcs	.+2      	; 0x30ec <CLCD_voidSendNumber+0xf4>
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	32 2e       	mov	r3, r18
    30ee:	36 0e       	add	r3, r22
    30f0:	21 e0       	ldi	r18, 0x01	; 1
    30f2:	36 16       	cp	r3, r22
    30f4:	08 f0       	brcs	.+2      	; 0x30f8 <CLCD_voidSendNumber+0x100>
    30f6:	20 e0       	ldi	r18, 0x00	; 0
    30f8:	32 2b       	or	r19, r18
    30fa:	7b 0d       	add	r23, r11
    30fc:	21 e0       	ldi	r18, 0x01	; 1
    30fe:	7b 15       	cp	r23, r11
    3100:	08 f0       	brcs	.+2      	; 0x3104 <CLCD_voidSendNumber+0x10c>
    3102:	20 e0       	ldi	r18, 0x00	; 0
    3104:	23 2e       	mov	r2, r19
    3106:	27 0e       	add	r2, r23
    3108:	31 e0       	ldi	r19, 0x01	; 1
    310a:	27 16       	cp	r2, r23
    310c:	08 f0       	brcs	.+2      	; 0x3110 <CLCD_voidSendNumber+0x118>
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	23 2b       	or	r18, r19
    3112:	8a 0d       	add	r24, r10
    3114:	31 e0       	ldi	r19, 0x01	; 1
    3116:	8a 15       	cp	r24, r10
    3118:	08 f0       	brcs	.+2      	; 0x311c <CLCD_voidSendNumber+0x124>
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	28 0f       	add	r18, r24
    311e:	29 83       	std	Y+1, r18	; 0x01
    3120:	21 e0       	ldi	r18, 0x01	; 1
    3122:	a9 81       	ldd	r26, Y+1	; 0x01
    3124:	a8 17       	cp	r26, r24
    3126:	08 f0       	brcs	.+2      	; 0x312a <CLCD_voidSendNumber+0x132>
    3128:	20 e0       	ldi	r18, 0x00	; 0
    312a:	93 2e       	mov	r9, r19
    312c:	92 2a       	or	r9, r18
    312e:	97 0d       	add	r25, r7
    3130:	99 0e       	add	r9, r25
    3132:	2b 81       	ldd	r18, Y+3	; 0x03
    3134:	3c 81       	ldd	r19, Y+4	; 0x04
    3136:	4d 81       	ldd	r20, Y+5	; 0x05
    3138:	5e 81       	ldd	r21, Y+6	; 0x06
    313a:	6f 81       	ldd	r22, Y+7	; 0x07
    313c:	78 85       	ldd	r23, Y+8	; 0x08
    313e:	89 85       	ldd	r24, Y+9	; 0x09
    3140:	9a 85       	ldd	r25, Y+10	; 0x0a
    3142:	aa e0       	ldi	r26, 0x0A	; 10
    3144:	aa 2e       	mov	r10, r26
    3146:	bb 24       	eor	r11, r11
    3148:	cc 24       	eor	r12, r12
    314a:	dd 24       	eor	r13, r13
    314c:	ee 24       	eor	r14, r14
    314e:	ff 24       	eor	r15, r15
    3150:	00 e0       	ldi	r16, 0x00	; 0
    3152:	10 e0       	ldi	r17, 0x00	; 0
    3154:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__umoddi3>
    3158:	12 2f       	mov	r17, r18
    315a:	18 0d       	add	r17, r8
    315c:	f1 e0       	ldi	r31, 0x01	; 1
    315e:	12 17       	cp	r17, r18
    3160:	08 f0       	brcs	.+2      	; 0x3164 <CLCD_voidSendNumber+0x16c>
    3162:	f0 e0       	ldi	r31, 0x00	; 0
    3164:	23 2f       	mov	r18, r19
    3166:	26 0d       	add	r18, r6
    3168:	e1 e0       	ldi	r30, 0x01	; 1
    316a:	23 17       	cp	r18, r19
    316c:	08 f0       	brcs	.+2      	; 0x3170 <CLCD_voidSendNumber+0x178>
    316e:	e0 e0       	ldi	r30, 0x00	; 0
    3170:	0f 2f       	mov	r16, r31
    3172:	02 0f       	add	r16, r18
    3174:	31 e0       	ldi	r19, 0x01	; 1
    3176:	02 17       	cp	r16, r18
    3178:	08 f0       	brcs	.+2      	; 0x317c <CLCD_voidSendNumber+0x184>
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	e3 2b       	or	r30, r19
    317e:	24 2f       	mov	r18, r20
    3180:	25 0d       	add	r18, r5
    3182:	31 e0       	ldi	r19, 0x01	; 1
    3184:	24 17       	cp	r18, r20
    3186:	08 f0       	brcs	.+2      	; 0x318a <CLCD_voidSendNumber+0x192>
    3188:	30 e0       	ldi	r19, 0x00	; 0
    318a:	fe 2f       	mov	r31, r30
    318c:	f2 0f       	add	r31, r18
    318e:	41 e0       	ldi	r20, 0x01	; 1
    3190:	f2 17       	cp	r31, r18
    3192:	08 f0       	brcs	.+2      	; 0x3196 <CLCD_voidSendNumber+0x19e>
    3194:	40 e0       	ldi	r20, 0x00	; 0
    3196:	34 2b       	or	r19, r20
    3198:	25 2f       	mov	r18, r21
    319a:	24 0d       	add	r18, r4
    319c:	41 e0       	ldi	r20, 0x01	; 1
    319e:	25 17       	cp	r18, r21
    31a0:	08 f0       	brcs	.+2      	; 0x31a4 <CLCD_voidSendNumber+0x1ac>
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	e3 2f       	mov	r30, r19
    31a6:	e2 0f       	add	r30, r18
    31a8:	31 e0       	ldi	r19, 0x01	; 1
    31aa:	e2 17       	cp	r30, r18
    31ac:	08 f0       	brcs	.+2      	; 0x31b0 <CLCD_voidSendNumber+0x1b8>
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	43 2b       	or	r20, r19
    31b2:	26 2f       	mov	r18, r22
    31b4:	23 0d       	add	r18, r3
    31b6:	31 e0       	ldi	r19, 0x01	; 1
    31b8:	26 17       	cp	r18, r22
    31ba:	08 f0       	brcs	.+2      	; 0x31be <CLCD_voidSendNumber+0x1c6>
    31bc:	30 e0       	ldi	r19, 0x00	; 0
    31be:	64 2f       	mov	r22, r20
    31c0:	62 0f       	add	r22, r18
    31c2:	41 e0       	ldi	r20, 0x01	; 1
    31c4:	62 17       	cp	r22, r18
    31c6:	08 f0       	brcs	.+2      	; 0x31ca <CLCD_voidSendNumber+0x1d2>
    31c8:	40 e0       	ldi	r20, 0x00	; 0
    31ca:	34 2b       	or	r19, r20
    31cc:	27 2f       	mov	r18, r23
    31ce:	22 0d       	add	r18, r2
    31d0:	41 e0       	ldi	r20, 0x01	; 1
    31d2:	27 17       	cp	r18, r23
    31d4:	08 f0       	brcs	.+2      	; 0x31d8 <CLCD_voidSendNumber+0x1e0>
    31d6:	40 e0       	ldi	r20, 0x00	; 0
    31d8:	53 2f       	mov	r21, r19
    31da:	52 0f       	add	r21, r18
    31dc:	31 e0       	ldi	r19, 0x01	; 1
    31de:	52 17       	cp	r21, r18
    31e0:	08 f0       	brcs	.+2      	; 0x31e4 <CLCD_voidSendNumber+0x1ec>
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	43 2b       	or	r20, r19
    31e6:	29 81       	ldd	r18, Y+1	; 0x01
    31e8:	28 0f       	add	r18, r24
    31ea:	31 e0       	ldi	r19, 0x01	; 1
    31ec:	28 17       	cp	r18, r24
    31ee:	08 f0       	brcs	.+2      	; 0x31f2 <CLCD_voidSendNumber+0x1fa>
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	42 0f       	add	r20, r18
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	42 17       	cp	r20, r18
    31f8:	08 f0       	brcs	.+2      	; 0x31fc <CLCD_voidSendNumber+0x204>
    31fa:	80 e0       	ldi	r24, 0x00	; 0
    31fc:	38 2b       	or	r19, r24
    31fe:	99 0e       	add	r9, r25
    3200:	b3 2f       	mov	r27, r19
    3202:	b9 0d       	add	r27, r9
    3204:	ba 83       	std	Y+2, r27	; 0x02
    3206:	48 01       	movw	r8, r16
    3208:	5f 2e       	mov	r5, r31
    320a:	2e 2e       	mov	r2, r30
    320c:	36 2e       	mov	r3, r22
    320e:	45 2e       	mov	r4, r21
    3210:	64 2e       	mov	r6, r20
    3212:	7b 2e       	mov	r7, r27
			Copy_u64Number /= 10 ;
    3214:	2b 81       	ldd	r18, Y+3	; 0x03
    3216:	3c 81       	ldd	r19, Y+4	; 0x04
    3218:	4d 81       	ldd	r20, Y+5	; 0x05
    321a:	5e 81       	ldd	r21, Y+6	; 0x06
    321c:	6f 81       	ldd	r22, Y+7	; 0x07
    321e:	78 85       	ldd	r23, Y+8	; 0x08
    3220:	89 85       	ldd	r24, Y+9	; 0x09
    3222:	9a 85       	ldd	r25, Y+10	; 0x0a
    3224:	fa e0       	ldi	r31, 0x0A	; 10
    3226:	af 2e       	mov	r10, r31
    3228:	bb 24       	eor	r11, r11
    322a:	cc 24       	eor	r12, r12
    322c:	dd 24       	eor	r13, r13
    322e:	ee 24       	eor	r14, r14
    3230:	ff 24       	eor	r15, r15
    3232:	00 e0       	ldi	r16, 0x00	; 0
    3234:	10 e0       	ldi	r17, 0x00	; 0
    3236:	0e 94 c8 00 	call	0x190	; 0x190 <__udivdi3>
    323a:	2b 83       	std	Y+3, r18	; 0x03
    323c:	3c 83       	std	Y+4, r19	; 0x04
    323e:	4d 83       	std	Y+5, r20	; 0x05
    3240:	5e 83       	std	Y+6, r21	; 0x06
    3242:	6f 83       	std	Y+7, r22	; 0x07
    3244:	78 87       	std	Y+8, r23	; 0x08
    3246:	89 87       	std	Y+9, r24	; 0x09
    3248:	9a 87       	std	Y+10, r25	; 0x0a

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }

	else{

		while( Copy_u64Number != 0 ){
    324a:	82 2f       	mov	r24, r18
    324c:	83 2b       	or	r24, r19
    324e:	84 2b       	or	r24, r20
    3250:	85 2b       	or	r24, r21
    3252:	86 2b       	or	r24, r22
    3254:	87 2b       	or	r24, r23
    3256:	e9 85       	ldd	r30, Y+9	; 0x09
    3258:	8e 2b       	or	r24, r30
    325a:	89 2b       	or	r24, r25
    325c:	09 f0       	breq	.+2      	; 0x3260 <CLCD_voidSendNumber+0x268>
    325e:	02 cf       	rjmp	.-508    	; 0x3064 <CLCD_voidSendNumber+0x6c>

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    3260:	f1 e0       	ldi	r31, 0x01	; 1
    3262:	9f 16       	cp	r9, r31
    3264:	09 f4       	brne	.+2      	; 0x3268 <CLCD_voidSendNumber+0x270>
    3266:	cb c0       	rjmp	.+406    	; 0x33fe <CLCD_voidSendNumber+0x406>

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
    3268:	29 2d       	mov	r18, r9
    326a:	38 2d       	mov	r19, r8
    326c:	45 2d       	mov	r20, r5
    326e:	52 2d       	mov	r21, r2
    3270:	63 2d       	mov	r22, r3
    3272:	74 2d       	mov	r23, r4
    3274:	c3 01       	movw	r24, r6
    3276:	ea e0       	ldi	r30, 0x0A	; 10
    3278:	ae 2e       	mov	r10, r30
    327a:	bb 24       	eor	r11, r11
    327c:	cc 24       	eor	r12, r12
    327e:	dd 24       	eor	r13, r13
    3280:	ee 24       	eor	r14, r14
    3282:	ff 24       	eor	r15, r15
    3284:	00 e0       	ldi	r16, 0x00	; 0
    3286:	10 e0       	ldi	r17, 0x00	; 0
    3288:	0e 94 3d 07 	call	0xe7a	; 0xe7a <__umoddi3>
    328c:	12 2f       	mov	r17, r18
    328e:	10 5d       	subi	r17, 0xD0	; 208
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3290:	81 e0       	ldi	r24, 0x01	; 1
    3292:	65 e0       	ldi	r22, 0x05	; 5
    3294:	41 e0       	ldi	r20, 0x01	; 1
    3296:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	66 e0       	ldi	r22, 0x06	; 6
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    32a4:	61 2f       	mov	r22, r17
    32a6:	62 95       	swap	r22
    32a8:	6f 70       	andi	r22, 0x0F	; 15
    32aa:	83 e0       	ldi	r24, 0x03	; 3
    32ac:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	67 e0       	ldi	r22, 0x07	; 7
    32b4:	41 e0       	ldi	r20, 0x01	; 1
    32b6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    32ba:	80 ed       	ldi	r24, 0xD0	; 208
    32bc:	97 e0       	ldi	r25, 0x07	; 7
    32be:	01 97       	sbiw	r24, 0x01	; 1
    32c0:	f1 f7       	brne	.-4      	; 0x32be <CLCD_voidSendNumber+0x2c6>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	67 e0       	ldi	r22, 0x07	; 7
    32c6:	40 e0       	ldi	r20, 0x00	; 0
    32c8:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    32cc:	80 ed       	ldi	r24, 0xD0	; 208
    32ce:	97 e0       	ldi	r25, 0x07	; 7
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <CLCD_voidSendNumber+0x2d8>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    32d4:	83 e0       	ldi	r24, 0x03	; 3
    32d6:	61 2f       	mov	r22, r17
    32d8:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	67 e0       	ldi	r22, 0x07	; 7
    32e0:	41 e0       	ldi	r20, 0x01	; 1
    32e2:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    32e6:	80 ed       	ldi	r24, 0xD0	; 208
    32e8:	97 e0       	ldi	r25, 0x07	; 7
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <CLCD_voidSendNumber+0x2f2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	67 e0       	ldi	r22, 0x07	; 7
    32f2:	40 e0       	ldi	r20, 0x00	; 0
    32f4:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    32f8:	80 ed       	ldi	r24, 0xD0	; 208
    32fa:	97 e0       	ldi	r25, 0x07	; 7
    32fc:	01 97       	sbiw	r24, 0x01	; 1
    32fe:	f1 f7       	brne	.-4      	; 0x32fc <CLCD_voidSendNumber+0x304>
    3300:	80 ed       	ldi	r24, 0xD0	; 208
    3302:	97 e0       	ldi	r25, 0x07	; 7
    3304:	01 97       	sbiw	r24, 0x01	; 1
    3306:	f1 f7       	brne	.-4      	; 0x3304 <CLCD_voidSendNumber+0x30c>

		}
		while( LOC_u64Reversed != 1 ){

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
			LOC_u64Reversed /= 10 ;
    3308:	29 2d       	mov	r18, r9
    330a:	38 2d       	mov	r19, r8
    330c:	45 2d       	mov	r20, r5
    330e:	52 2d       	mov	r21, r2
    3310:	63 2d       	mov	r22, r3
    3312:	74 2d       	mov	r23, r4
    3314:	c3 01       	movw	r24, r6
    3316:	10 e0       	ldi	r17, 0x00	; 0
    3318:	0e 94 c8 00 	call	0x190	; 0x190 <__udivdi3>
    331c:	92 2e       	mov	r9, r18
    331e:	83 2e       	mov	r8, r19
    3320:	54 2e       	mov	r5, r20
    3322:	25 2e       	mov	r2, r21
    3324:	36 2e       	mov	r3, r22
    3326:	47 2e       	mov	r4, r23
    3328:	3c 01       	movw	r6, r24

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    332a:	41 e0       	ldi	r20, 0x01	; 1
    332c:	94 16       	cp	r9, r20
    332e:	09 f0       	breq	.+2      	; 0x3332 <CLCD_voidSendNumber+0x33a>
    3330:	9b cf       	rjmp	.-202    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3332:	88 20       	and	r8, r8
    3334:	09 f0       	breq	.+2      	; 0x3338 <CLCD_voidSendNumber+0x340>
    3336:	98 cf       	rjmp	.-208    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3338:	55 20       	and	r5, r5
    333a:	09 f0       	breq	.+2      	; 0x333e <CLCD_voidSendNumber+0x346>
    333c:	95 cf       	rjmp	.-214    	; 0x3268 <CLCD_voidSendNumber+0x270>
    333e:	22 20       	and	r2, r2
    3340:	09 f0       	breq	.+2      	; 0x3344 <CLCD_voidSendNumber+0x34c>
    3342:	92 cf       	rjmp	.-220    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3344:	33 20       	and	r3, r3
    3346:	09 f0       	breq	.+2      	; 0x334a <CLCD_voidSendNumber+0x352>
    3348:	8f cf       	rjmp	.-226    	; 0x3268 <CLCD_voidSendNumber+0x270>
    334a:	44 20       	and	r4, r4
    334c:	09 f0       	breq	.+2      	; 0x3350 <CLCD_voidSendNumber+0x358>
    334e:	8c cf       	rjmp	.-232    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3350:	66 20       	and	r6, r6
    3352:	09 f0       	breq	.+2      	; 0x3356 <CLCD_voidSendNumber+0x35e>
    3354:	89 cf       	rjmp	.-238    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3356:	99 23       	and	r25, r25
    3358:	09 f0       	breq	.+2      	; 0x335c <CLCD_voidSendNumber+0x364>
    335a:	86 cf       	rjmp	.-244    	; 0x3268 <CLCD_voidSendNumber+0x270>
    335c:	37 c0       	rjmp	.+110    	; 0x33cc <CLCD_voidSendNumber+0x3d4>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	65 e0       	ldi	r22, 0x05	; 5
    3362:	41 e0       	ldi	r20, 0x01	; 1
    3364:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3368:	81 e0       	ldi	r24, 0x01	; 1
    336a:	66 e0       	ldi	r22, 0x06	; 6
    336c:	40 e0       	ldi	r20, 0x00	; 0
    336e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3372:	83 e0       	ldi	r24, 0x03	; 3
    3374:	63 e0       	ldi	r22, 0x03	; 3
    3376:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    337a:	81 e0       	ldi	r24, 0x01	; 1
    337c:	67 e0       	ldi	r22, 0x07	; 7
    337e:	41 e0       	ldi	r20, 0x01	; 1
    3380:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3384:	00 ed       	ldi	r16, 0xD0	; 208
    3386:	17 e0       	ldi	r17, 0x07	; 7
    3388:	c8 01       	movw	r24, r16
    338a:	01 97       	sbiw	r24, 0x01	; 1
    338c:	f1 f7       	brne	.-4      	; 0x338a <CLCD_voidSendNumber+0x392>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	67 e0       	ldi	r22, 0x07	; 7
    3392:	40 e0       	ldi	r20, 0x00	; 0
    3394:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3398:	c8 01       	movw	r24, r16
    339a:	01 97       	sbiw	r24, 0x01	; 1
    339c:	f1 f7       	brne	.-4      	; 0x339a <CLCD_voidSendNumber+0x3a2>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    339e:	83 e0       	ldi	r24, 0x03	; 3
    33a0:	60 e3       	ldi	r22, 0x30	; 48
    33a2:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	67 e0       	ldi	r22, 0x07	; 7
    33aa:	41 e0       	ldi	r20, 0x01	; 1
    33ac:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    33b0:	c8 01       	movw	r24, r16
    33b2:	01 97       	sbiw	r24, 0x01	; 1
    33b4:	f1 f7       	brne	.-4      	; 0x33b2 <CLCD_voidSendNumber+0x3ba>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	67 e0       	ldi	r22, 0x07	; 7
    33ba:	40 e0       	ldi	r20, 0x00	; 0
    33bc:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    33c0:	c8 01       	movw	r24, r16
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	f1 f7       	brne	.-4      	; 0x33c2 <CLCD_voidSendNumber+0x3ca>
    33c6:	c8 01       	movw	r24, r16
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <CLCD_voidSendNumber+0x3d0>

		}

	}

}
    33cc:	2a 96       	adiw	r28, 0x0a	; 10
    33ce:	0f b6       	in	r0, 0x3f	; 63
    33d0:	f8 94       	cli
    33d2:	de bf       	out	0x3e, r29	; 62
    33d4:	0f be       	out	0x3f, r0	; 63
    33d6:	cd bf       	out	0x3d, r28	; 61
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	1f 91       	pop	r17
    33de:	0f 91       	pop	r16
    33e0:	ff 90       	pop	r15
    33e2:	ef 90       	pop	r14
    33e4:	df 90       	pop	r13
    33e6:	cf 90       	pop	r12
    33e8:	bf 90       	pop	r11
    33ea:	af 90       	pop	r10
    33ec:	9f 90       	pop	r9
    33ee:	8f 90       	pop	r8
    33f0:	7f 90       	pop	r7
    33f2:	6f 90       	pop	r6
    33f4:	5f 90       	pop	r5
    33f6:	4f 90       	pop	r4
    33f8:	3f 90       	pop	r3
    33fa:	2f 90       	pop	r2
    33fc:	08 95       	ret

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    33fe:	88 20       	and	r8, r8
    3400:	09 f0       	breq	.+2      	; 0x3404 <CLCD_voidSendNumber+0x40c>
    3402:	32 cf       	rjmp	.-412    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3404:	55 20       	and	r5, r5
    3406:	09 f0       	breq	.+2      	; 0x340a <CLCD_voidSendNumber+0x412>
    3408:	2f cf       	rjmp	.-418    	; 0x3268 <CLCD_voidSendNumber+0x270>
    340a:	22 20       	and	r2, r2
    340c:	09 f0       	breq	.+2      	; 0x3410 <CLCD_voidSendNumber+0x418>
    340e:	2c cf       	rjmp	.-424    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3410:	33 20       	and	r3, r3
    3412:	09 f0       	breq	.+2      	; 0x3416 <CLCD_voidSendNumber+0x41e>
    3414:	29 cf       	rjmp	.-430    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3416:	44 20       	and	r4, r4
    3418:	09 f0       	breq	.+2      	; 0x341c <CLCD_voidSendNumber+0x424>
    341a:	26 cf       	rjmp	.-436    	; 0x3268 <CLCD_voidSendNumber+0x270>
    341c:	66 20       	and	r6, r6
    341e:	09 f0       	breq	.+2      	; 0x3422 <CLCD_voidSendNumber+0x42a>
    3420:	23 cf       	rjmp	.-442    	; 0x3268 <CLCD_voidSendNumber+0x270>
    3422:	77 20       	and	r7, r7
    3424:	99 f2       	breq	.-90     	; 0x33cc <CLCD_voidSendNumber+0x3d4>
    3426:	20 cf       	rjmp	.-448    	; 0x3268 <CLCD_voidSendNumber+0x270>

00003428 <CLCD_voidSendExtraChar>:
			=> Copy_u8Col --> column number (CLCD_COL_1 ... CLCD_COL_16)
* return : nothing
* Hint :-
	Address Counter can refer to CGRAM and DDRAM
*/
void CLCD_voidSendExtraChar( u8 Copy_u8Row , u8 Copy_u8Col ){
    3428:	cf 92       	push	r12
    342a:	df 92       	push	r13
    342c:	ef 92       	push	r14
    342e:	ff 92       	push	r15
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	d8 2e       	mov	r13, r24
    343a:	c6 2e       	mov	r12, r22
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    343c:	81 e0       	ldi	r24, 0x01	; 1
    343e:	65 e0       	ldi	r22, 0x05	; 5
    3440:	40 e0       	ldi	r20, 0x00	; 0
    3442:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	66 e0       	ldi	r22, 0x06	; 6
    344a:	40 e0       	ldi	r20, 0x00	; 0
    344c:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3450:	83 e0       	ldi	r24, 0x03	; 3
    3452:	64 e0       	ldi	r22, 0x04	; 4
    3454:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3458:	81 e0       	ldi	r24, 0x01	; 1
    345a:	67 e0       	ldi	r22, 0x07	; 7
    345c:	41 e0       	ldi	r20, 0x01	; 1
    345e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3462:	00 ed       	ldi	r16, 0xD0	; 208
    3464:	17 e0       	ldi	r17, 0x07	; 7
    3466:	c8 01       	movw	r24, r16
    3468:	01 97       	sbiw	r24, 0x01	; 1
    346a:	f1 f7       	brne	.-4      	; 0x3468 <CLCD_voidSendExtraChar+0x40>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	67 e0       	ldi	r22, 0x07	; 7
    3470:	40 e0       	ldi	r20, 0x00	; 0
    3472:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3476:	c8 01       	movw	r24, r16
    3478:	01 97       	sbiw	r24, 0x01	; 1
    347a:	f1 f7       	brne	.-4      	; 0x3478 <CLCD_voidSendExtraChar+0x50>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    347c:	83 e0       	ldi	r24, 0x03	; 3
    347e:	60 e4       	ldi	r22, 0x40	; 64
    3480:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3484:	81 e0       	ldi	r24, 0x01	; 1
    3486:	67 e0       	ldi	r22, 0x07	; 7
    3488:	41 e0       	ldi	r20, 0x01	; 1
    348a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    348e:	c8 01       	movw	r24, r16
    3490:	01 97       	sbiw	r24, 0x01	; 1
    3492:	f1 f7       	brne	.-4      	; 0x3490 <CLCD_voidSendExtraChar+0x68>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3494:	81 e0       	ldi	r24, 0x01	; 1
    3496:	67 e0       	ldi	r22, 0x07	; 7
    3498:	40 e0       	ldi	r20, 0x00	; 0
    349a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    349e:	c8 01       	movw	r24, r16
    34a0:	01 97       	sbiw	r24, 0x01	; 1
    34a2:	f1 f7       	brne	.-4      	; 0x34a0 <CLCD_voidSendExtraChar+0x78>
    34a4:	c8 01       	movw	r24, r16
    34a6:	01 97       	sbiw	r24, 0x01	; 1
    34a8:	f1 f7       	brne	.-4      	; 0x34a6 <CLCD_voidSendExtraChar+0x7e>
    34aa:	c8 e9       	ldi	r28, 0x98	; 152
    34ac:	d1 e0       	ldi	r29, 0x01	; 1
    34ae:	80 ed       	ldi	r24, 0xD0	; 208
    34b0:	e8 2e       	mov	r14, r24
    34b2:	87 e0       	ldi	r24, 0x07	; 7
    34b4:	f8 2e       	mov	r15, r24

	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){

		CLCD_voidSendData( CLCD_u8ExtraChar[LOC_u8Iterator] );
    34b6:	19 91       	ld	r17, Y+
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    34b8:	81 e0       	ldi	r24, 0x01	; 1
    34ba:	65 e0       	ldi	r22, 0x05	; 5
    34bc:	41 e0       	ldi	r20, 0x01	; 1
    34be:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    34c2:	81 e0       	ldi	r24, 0x01	; 1
    34c4:	66 e0       	ldi	r22, 0x06	; 6
    34c6:	40 e0       	ldi	r20, 0x00	; 0
    34c8:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    34cc:	61 2f       	mov	r22, r17
    34ce:	62 95       	swap	r22
    34d0:	6f 70       	andi	r22, 0x0F	; 15
    34d2:	83 e0       	ldi	r24, 0x03	; 3
    34d4:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	67 e0       	ldi	r22, 0x07	; 7
    34dc:	41 e0       	ldi	r20, 0x01	; 1
    34de:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    34e2:	c7 01       	movw	r24, r14
    34e4:	01 97       	sbiw	r24, 0x01	; 1
    34e6:	f1 f7       	brne	.-4      	; 0x34e4 <CLCD_voidSendExtraChar+0xbc>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	67 e0       	ldi	r22, 0x07	; 7
    34ec:	40 e0       	ldi	r20, 0x00	; 0
    34ee:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    34f2:	c7 01       	movw	r24, r14
    34f4:	01 97       	sbiw	r24, 0x01	; 1
    34f6:	f1 f7       	brne	.-4      	; 0x34f4 <CLCD_voidSendExtraChar+0xcc>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    34f8:	83 e0       	ldi	r24, 0x03	; 3
    34fa:	61 2f       	mov	r22, r17
    34fc:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3500:	81 e0       	ldi	r24, 0x01	; 1
    3502:	67 e0       	ldi	r22, 0x07	; 7
    3504:	41 e0       	ldi	r20, 0x01	; 1
    3506:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    350a:	c7 01       	movw	r24, r14
    350c:	01 97       	sbiw	r24, 0x01	; 1
    350e:	f1 f7       	brne	.-4      	; 0x350c <CLCD_voidSendExtraChar+0xe4>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3510:	81 e0       	ldi	r24, 0x01	; 1
    3512:	67 e0       	ldi	r22, 0x07	; 7
    3514:	40 e0       	ldi	r20, 0x00	; 0
    3516:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    351a:	c7 01       	movw	r24, r14
    351c:	01 97       	sbiw	r24, 0x01	; 1
    351e:	f1 f7       	brne	.-4      	; 0x351c <CLCD_voidSendExtraChar+0xf4>
    3520:	c7 01       	movw	r24, r14
    3522:	01 97       	sbiw	r24, 0x01	; 1
    3524:	f1 f7       	brne	.-4      	; 0x3522 <CLCD_voidSendExtraChar+0xfa>
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	c8 3d       	cpi	r28, 0xD8	; 216
    352a:	d8 07       	cpc	r29, r24
    352c:	09 f0       	breq	.+2      	; 0x3530 <CLCD_voidSendExtraChar+0x108>
    352e:	c3 cf       	rjmp	.-122    	; 0x34b6 <CLCD_voidSendExtraChar+0x8e>
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    3530:	8d 2d       	mov	r24, r13
    3532:	81 50       	subi	r24, 0x01	; 1
    3534:	82 30       	cpi	r24, 0x02	; 2
    3536:	08 f4       	brcc	.+2      	; 0x353a <CLCD_voidSendExtraChar+0x112>
    3538:	ee c1       	rjmp	.+988    	; 0x3916 <CLCD_voidSendExtraChar+0x4ee>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    353a:	b0 e8       	ldi	r27, 0x80	; 128
    353c:	fb 2e       	mov	r15, r27
    353e:	18 e0       	ldi	r17, 0x08	; 8
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    3540:	81 e0       	ldi	r24, 0x01	; 1
    3542:	65 e0       	ldi	r22, 0x05	; 5
    3544:	40 e0       	ldi	r20, 0x00	; 0
    3546:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	66 e0       	ldi	r22, 0x06	; 6
    354e:	40 e0       	ldi	r20, 0x00	; 0
    3550:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3554:	83 e0       	ldi	r24, 0x03	; 3
    3556:	61 2f       	mov	r22, r17
    3558:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	67 e0       	ldi	r22, 0x07	; 7
    3560:	41 e0       	ldi	r20, 0x01	; 1
    3562:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3566:	00 ed       	ldi	r16, 0xD0	; 208
    3568:	17 e0       	ldi	r17, 0x07	; 7
    356a:	c8 01       	movw	r24, r16
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	f1 f7       	brne	.-4      	; 0x356c <CLCD_voidSendExtraChar+0x144>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3570:	81 e0       	ldi	r24, 0x01	; 1
    3572:	67 e0       	ldi	r22, 0x07	; 7
    3574:	40 e0       	ldi	r20, 0x00	; 0
    3576:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    357a:	c8 01       	movw	r24, r16
    357c:	01 97       	sbiw	r24, 0x01	; 1
    357e:	f1 f7       	brne	.-4      	; 0x357c <CLCD_voidSendExtraChar+0x154>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    3580:	83 e0       	ldi	r24, 0x03	; 3
    3582:	6f 2d       	mov	r22, r15
    3584:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3588:	81 e0       	ldi	r24, 0x01	; 1
    358a:	67 e0       	ldi	r22, 0x07	; 7
    358c:	41 e0       	ldi	r20, 0x01	; 1
    358e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3592:	c8 01       	movw	r24, r16
    3594:	01 97       	sbiw	r24, 0x01	; 1
    3596:	f1 f7       	brne	.-4      	; 0x3594 <CLCD_voidSendExtraChar+0x16c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3598:	81 e0       	ldi	r24, 0x01	; 1
    359a:	67 e0       	ldi	r22, 0x07	; 7
    359c:	40 e0       	ldi	r20, 0x00	; 0
    359e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    35a2:	c8 01       	movw	r24, r16
    35a4:	01 97       	sbiw	r24, 0x01	; 1
    35a6:	f1 f7       	brne	.-4      	; 0x35a4 <CLCD_voidSendExtraChar+0x17c>
    35a8:	c8 01       	movw	r24, r16
    35aa:	01 97       	sbiw	r24, 0x01	; 1
    35ac:	f1 f7       	brne	.-4      	; 0x35aa <CLCD_voidSendExtraChar+0x182>
    35ae:	c8 01       	movw	r24, r16
    35b0:	01 97       	sbiw	r24, 0x01	; 1
    35b2:	f1 f7       	brne	.-4      	; 0x35b0 <CLCD_voidSendExtraChar+0x188>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    35b4:	81 e0       	ldi	r24, 0x01	; 1
    35b6:	65 e0       	ldi	r22, 0x05	; 5
    35b8:	41 e0       	ldi	r20, 0x01	; 1
    35ba:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    35be:	81 e0       	ldi	r24, 0x01	; 1
    35c0:	66 e0       	ldi	r22, 0x06	; 6
    35c2:	40 e0       	ldi	r20, 0x00	; 0
    35c4:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    35c8:	83 e0       	ldi	r24, 0x03	; 3
    35ca:	60 e0       	ldi	r22, 0x00	; 0
    35cc:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    35d0:	81 e0       	ldi	r24, 0x01	; 1
    35d2:	67 e0       	ldi	r22, 0x07	; 7
    35d4:	41 e0       	ldi	r20, 0x01	; 1
    35d6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    35da:	c8 01       	movw	r24, r16
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	f1 f7       	brne	.-4      	; 0x35dc <CLCD_voidSendExtraChar+0x1b4>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	67 e0       	ldi	r22, 0x07	; 7
    35e4:	40 e0       	ldi	r20, 0x00	; 0
    35e6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    35ea:	c8 01       	movw	r24, r16
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	f1 f7       	brne	.-4      	; 0x35ec <CLCD_voidSendExtraChar+0x1c4>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    35f0:	83 e0       	ldi	r24, 0x03	; 3
    35f2:	60 e0       	ldi	r22, 0x00	; 0
    35f4:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	67 e0       	ldi	r22, 0x07	; 7
    35fc:	41 e0       	ldi	r20, 0x01	; 1
    35fe:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3602:	c8 01       	movw	r24, r16
    3604:	01 97       	sbiw	r24, 0x01	; 1
    3606:	f1 f7       	brne	.-4      	; 0x3604 <CLCD_voidSendExtraChar+0x1dc>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3608:	81 e0       	ldi	r24, 0x01	; 1
    360a:	67 e0       	ldi	r22, 0x07	; 7
    360c:	40 e0       	ldi	r20, 0x00	; 0
    360e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3612:	c8 01       	movw	r24, r16
    3614:	01 97       	sbiw	r24, 0x01	; 1
    3616:	f1 f7       	brne	.-4      	; 0x3614 <CLCD_voidSendExtraChar+0x1ec>
    3618:	c8 01       	movw	r24, r16
    361a:	01 97       	sbiw	r24, 0x01	; 1
    361c:	f1 f7       	brne	.-4      	; 0x361a <CLCD_voidSendExtraChar+0x1f2>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	65 e0       	ldi	r22, 0x05	; 5
    3622:	41 e0       	ldi	r20, 0x01	; 1
    3624:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	66 e0       	ldi	r22, 0x06	; 6
    362c:	40 e0       	ldi	r20, 0x00	; 0
    362e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3632:	83 e0       	ldi	r24, 0x03	; 3
    3634:	60 e0       	ldi	r22, 0x00	; 0
    3636:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	67 e0       	ldi	r22, 0x07	; 7
    363e:	41 e0       	ldi	r20, 0x01	; 1
    3640:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3644:	c8 01       	movw	r24, r16
    3646:	01 97       	sbiw	r24, 0x01	; 1
    3648:	f1 f7       	brne	.-4      	; 0x3646 <CLCD_voidSendExtraChar+0x21e>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	67 e0       	ldi	r22, 0x07	; 7
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3654:	c8 01       	movw	r24, r16
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	f1 f7       	brne	.-4      	; 0x3656 <CLCD_voidSendExtraChar+0x22e>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    365a:	83 e0       	ldi	r24, 0x03	; 3
    365c:	61 e0       	ldi	r22, 0x01	; 1
    365e:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	67 e0       	ldi	r22, 0x07	; 7
    3666:	41 e0       	ldi	r20, 0x01	; 1
    3668:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    366c:	c8 01       	movw	r24, r16
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	f1 f7       	brne	.-4      	; 0x366e <CLCD_voidSendExtraChar+0x246>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	67 e0       	ldi	r22, 0x07	; 7
    3676:	40 e0       	ldi	r20, 0x00	; 0
    3678:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    367c:	c8 01       	movw	r24, r16
    367e:	01 97       	sbiw	r24, 0x01	; 1
    3680:	f1 f7       	brne	.-4      	; 0x367e <CLCD_voidSendExtraChar+0x256>
    3682:	c8 01       	movw	r24, r16
    3684:	01 97       	sbiw	r24, 0x01	; 1
    3686:	f1 f7       	brne	.-4      	; 0x3684 <CLCD_voidSendExtraChar+0x25c>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3688:	81 e0       	ldi	r24, 0x01	; 1
    368a:	65 e0       	ldi	r22, 0x05	; 5
    368c:	41 e0       	ldi	r20, 0x01	; 1
    368e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	66 e0       	ldi	r22, 0x06	; 6
    3696:	40 e0       	ldi	r20, 0x00	; 0
    3698:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    369c:	83 e0       	ldi	r24, 0x03	; 3
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	67 e0       	ldi	r22, 0x07	; 7
    36a8:	41 e0       	ldi	r20, 0x01	; 1
    36aa:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    36ae:	c8 01       	movw	r24, r16
    36b0:	01 97       	sbiw	r24, 0x01	; 1
    36b2:	f1 f7       	brne	.-4      	; 0x36b0 <CLCD_voidSendExtraChar+0x288>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    36b4:	81 e0       	ldi	r24, 0x01	; 1
    36b6:	67 e0       	ldi	r22, 0x07	; 7
    36b8:	40 e0       	ldi	r20, 0x00	; 0
    36ba:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    36be:	c8 01       	movw	r24, r16
    36c0:	01 97       	sbiw	r24, 0x01	; 1
    36c2:	f1 f7       	brne	.-4      	; 0x36c0 <CLCD_voidSendExtraChar+0x298>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    36c4:	83 e0       	ldi	r24, 0x03	; 3
    36c6:	62 e0       	ldi	r22, 0x02	; 2
    36c8:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	67 e0       	ldi	r22, 0x07	; 7
    36d0:	41 e0       	ldi	r20, 0x01	; 1
    36d2:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    36d6:	c8 01       	movw	r24, r16
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <CLCD_voidSendExtraChar+0x2b0>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	67 e0       	ldi	r22, 0x07	; 7
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    36e6:	c8 01       	movw	r24, r16
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <CLCD_voidSendExtraChar+0x2c0>
    36ec:	c8 01       	movw	r24, r16
    36ee:	01 97       	sbiw	r24, 0x01	; 1
    36f0:	f1 f7       	brne	.-4      	; 0x36ee <CLCD_voidSendExtraChar+0x2c6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	65 e0       	ldi	r22, 0x05	; 5
    36f6:	41 e0       	ldi	r20, 0x01	; 1
    36f8:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    36fc:	81 e0       	ldi	r24, 0x01	; 1
    36fe:	66 e0       	ldi	r22, 0x06	; 6
    3700:	40 e0       	ldi	r20, 0x00	; 0
    3702:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3706:	83 e0       	ldi	r24, 0x03	; 3
    3708:	60 e0       	ldi	r22, 0x00	; 0
    370a:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	67 e0       	ldi	r22, 0x07	; 7
    3712:	41 e0       	ldi	r20, 0x01	; 1
    3714:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3718:	c8 01       	movw	r24, r16
    371a:	01 97       	sbiw	r24, 0x01	; 1
    371c:	f1 f7       	brne	.-4      	; 0x371a <CLCD_voidSendExtraChar+0x2f2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    371e:	81 e0       	ldi	r24, 0x01	; 1
    3720:	67 e0       	ldi	r22, 0x07	; 7
    3722:	40 e0       	ldi	r20, 0x00	; 0
    3724:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3728:	c8 01       	movw	r24, r16
    372a:	01 97       	sbiw	r24, 0x01	; 1
    372c:	f1 f7       	brne	.-4      	; 0x372a <CLCD_voidSendExtraChar+0x302>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    372e:	83 e0       	ldi	r24, 0x03	; 3
    3730:	63 e0       	ldi	r22, 0x03	; 3
    3732:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	67 e0       	ldi	r22, 0x07	; 7
    373a:	41 e0       	ldi	r20, 0x01	; 1
    373c:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3740:	c8 01       	movw	r24, r16
    3742:	01 97       	sbiw	r24, 0x01	; 1
    3744:	f1 f7       	brne	.-4      	; 0x3742 <CLCD_voidSendExtraChar+0x31a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3746:	81 e0       	ldi	r24, 0x01	; 1
    3748:	67 e0       	ldi	r22, 0x07	; 7
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3750:	c8 01       	movw	r24, r16
    3752:	01 97       	sbiw	r24, 0x01	; 1
    3754:	f1 f7       	brne	.-4      	; 0x3752 <CLCD_voidSendExtraChar+0x32a>
    3756:	c8 01       	movw	r24, r16
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <CLCD_voidSendExtraChar+0x330>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    375c:	81 e0       	ldi	r24, 0x01	; 1
    375e:	65 e0       	ldi	r22, 0x05	; 5
    3760:	41 e0       	ldi	r20, 0x01	; 1
    3762:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	66 e0       	ldi	r22, 0x06	; 6
    376a:	40 e0       	ldi	r20, 0x00	; 0
    376c:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3770:	83 e0       	ldi	r24, 0x03	; 3
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3778:	81 e0       	ldi	r24, 0x01	; 1
    377a:	67 e0       	ldi	r22, 0x07	; 7
    377c:	41 e0       	ldi	r20, 0x01	; 1
    377e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3782:	c8 01       	movw	r24, r16
    3784:	01 97       	sbiw	r24, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <CLCD_voidSendExtraChar+0x35c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	67 e0       	ldi	r22, 0x07	; 7
    378c:	40 e0       	ldi	r20, 0x00	; 0
    378e:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3792:	c8 01       	movw	r24, r16
    3794:	01 97       	sbiw	r24, 0x01	; 1
    3796:	f1 f7       	brne	.-4      	; 0x3794 <CLCD_voidSendExtraChar+0x36c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3798:	83 e0       	ldi	r24, 0x03	; 3
    379a:	64 e0       	ldi	r22, 0x04	; 4
    379c:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    37a0:	81 e0       	ldi	r24, 0x01	; 1
    37a2:	67 e0       	ldi	r22, 0x07	; 7
    37a4:	41 e0       	ldi	r20, 0x01	; 1
    37a6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    37aa:	c8 01       	movw	r24, r16
    37ac:	01 97       	sbiw	r24, 0x01	; 1
    37ae:	f1 f7       	brne	.-4      	; 0x37ac <CLCD_voidSendExtraChar+0x384>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    37b0:	81 e0       	ldi	r24, 0x01	; 1
    37b2:	67 e0       	ldi	r22, 0x07	; 7
    37b4:	40 e0       	ldi	r20, 0x00	; 0
    37b6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    37ba:	c8 01       	movw	r24, r16
    37bc:	01 97       	sbiw	r24, 0x01	; 1
    37be:	f1 f7       	brne	.-4      	; 0x37bc <CLCD_voidSendExtraChar+0x394>
    37c0:	c8 01       	movw	r24, r16
    37c2:	01 97       	sbiw	r24, 0x01	; 1
    37c4:	f1 f7       	brne	.-4      	; 0x37c2 <CLCD_voidSendExtraChar+0x39a>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	65 e0       	ldi	r22, 0x05	; 5
    37ca:	41 e0       	ldi	r20, 0x01	; 1
    37cc:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	66 e0       	ldi	r22, 0x06	; 6
    37d4:	40 e0       	ldi	r20, 0x00	; 0
    37d6:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    37da:	83 e0       	ldi	r24, 0x03	; 3
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    37e2:	81 e0       	ldi	r24, 0x01	; 1
    37e4:	67 e0       	ldi	r22, 0x07	; 7
    37e6:	41 e0       	ldi	r20, 0x01	; 1
    37e8:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    37ec:	c8 01       	movw	r24, r16
    37ee:	01 97       	sbiw	r24, 0x01	; 1
    37f0:	f1 f7       	brne	.-4      	; 0x37ee <CLCD_voidSendExtraChar+0x3c6>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    37f2:	81 e0       	ldi	r24, 0x01	; 1
    37f4:	67 e0       	ldi	r22, 0x07	; 7
    37f6:	40 e0       	ldi	r20, 0x00	; 0
    37f8:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    37fc:	c8 01       	movw	r24, r16
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <CLCD_voidSendExtraChar+0x3d6>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3802:	83 e0       	ldi	r24, 0x03	; 3
    3804:	65 e0       	ldi	r22, 0x05	; 5
    3806:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	67 e0       	ldi	r22, 0x07	; 7
    380e:	41 e0       	ldi	r20, 0x01	; 1
    3810:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3814:	c8 01       	movw	r24, r16
    3816:	01 97       	sbiw	r24, 0x01	; 1
    3818:	f1 f7       	brne	.-4      	; 0x3816 <CLCD_voidSendExtraChar+0x3ee>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	67 e0       	ldi	r22, 0x07	; 7
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3824:	c8 01       	movw	r24, r16
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	f1 f7       	brne	.-4      	; 0x3826 <CLCD_voidSendExtraChar+0x3fe>
    382a:	c8 01       	movw	r24, r16
    382c:	01 97       	sbiw	r24, 0x01	; 1
    382e:	f1 f7       	brne	.-4      	; 0x382c <CLCD_voidSendExtraChar+0x404>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	65 e0       	ldi	r22, 0x05	; 5
    3834:	41 e0       	ldi	r20, 0x01	; 1
    3836:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	66 e0       	ldi	r22, 0x06	; 6
    383e:	40 e0       	ldi	r20, 0x00	; 0
    3840:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3844:	83 e0       	ldi	r24, 0x03	; 3
    3846:	60 e0       	ldi	r22, 0x00	; 0
    3848:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	67 e0       	ldi	r22, 0x07	; 7
    3850:	41 e0       	ldi	r20, 0x01	; 1
    3852:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3856:	c8 01       	movw	r24, r16
    3858:	01 97       	sbiw	r24, 0x01	; 1
    385a:	f1 f7       	brne	.-4      	; 0x3858 <CLCD_voidSendExtraChar+0x430>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    385c:	81 e0       	ldi	r24, 0x01	; 1
    385e:	67 e0       	ldi	r22, 0x07	; 7
    3860:	40 e0       	ldi	r20, 0x00	; 0
    3862:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    3866:	c8 01       	movw	r24, r16
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	f1 f7       	brne	.-4      	; 0x3868 <CLCD_voidSendExtraChar+0x440>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    386c:	83 e0       	ldi	r24, 0x03	; 3
    386e:	66 e0       	ldi	r22, 0x06	; 6
    3870:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3874:	81 e0       	ldi	r24, 0x01	; 1
    3876:	67 e0       	ldi	r22, 0x07	; 7
    3878:	41 e0       	ldi	r20, 0x01	; 1
    387a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    387e:	c8 01       	movw	r24, r16
    3880:	01 97       	sbiw	r24, 0x01	; 1
    3882:	f1 f7       	brne	.-4      	; 0x3880 <CLCD_voidSendExtraChar+0x458>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3884:	81 e0       	ldi	r24, 0x01	; 1
    3886:	67 e0       	ldi	r22, 0x07	; 7
    3888:	40 e0       	ldi	r20, 0x00	; 0
    388a:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    388e:	c8 01       	movw	r24, r16
    3890:	01 97       	sbiw	r24, 0x01	; 1
    3892:	f1 f7       	brne	.-4      	; 0x3890 <CLCD_voidSendExtraChar+0x468>
    3894:	c8 01       	movw	r24, r16
    3896:	01 97       	sbiw	r24, 0x01	; 1
    3898:	f1 f7       	brne	.-4      	; 0x3896 <CLCD_voidSendExtraChar+0x46e>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    389a:	81 e0       	ldi	r24, 0x01	; 1
    389c:	65 e0       	ldi	r22, 0x05	; 5
    389e:	41 e0       	ldi	r20, 0x01	; 1
    38a0:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    38a4:	81 e0       	ldi	r24, 0x01	; 1
    38a6:	66 e0       	ldi	r22, 0x06	; 6
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    38ae:	83 e0       	ldi	r24, 0x03	; 3
    38b0:	60 e0       	ldi	r22, 0x00	; 0
    38b2:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    38b6:	81 e0       	ldi	r24, 0x01	; 1
    38b8:	67 e0       	ldi	r22, 0x07	; 7
    38ba:	41 e0       	ldi	r20, 0x01	; 1
    38bc:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    38c0:	c8 01       	movw	r24, r16
    38c2:	01 97       	sbiw	r24, 0x01	; 1
    38c4:	f1 f7       	brne	.-4      	; 0x38c2 <CLCD_voidSendExtraChar+0x49a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	67 e0       	ldi	r22, 0x07	; 7
    38ca:	40 e0       	ldi	r20, 0x00	; 0
    38cc:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    38d0:	c8 01       	movw	r24, r16
    38d2:	01 97       	sbiw	r24, 0x01	; 1
    38d4:	f1 f7       	brne	.-4      	; 0x38d2 <CLCD_voidSendExtraChar+0x4aa>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    38d6:	83 e0       	ldi	r24, 0x03	; 3
    38d8:	67 e0       	ldi	r22, 0x07	; 7
    38da:	0e 94 a7 13 	call	0x274e	; 0x274e <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	67 e0       	ldi	r22, 0x07	; 7
    38e2:	41 e0       	ldi	r20, 0x01	; 1
    38e4:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    38e8:	c8 01       	movw	r24, r16
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	f1 f7       	brne	.-4      	; 0x38ea <CLCD_voidSendExtraChar+0x4c2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	67 e0       	ldi	r22, 0x07	; 7
    38f2:	40 e0       	ldi	r20, 0x00	; 0
    38f4:	0e 94 9b 11 	call	0x2336	; 0x2336 <DIO_enumSetPinValue>
    38f8:	c8 01       	movw	r24, r16
    38fa:	01 97       	sbiw	r24, 0x01	; 1
    38fc:	f1 f7       	brne	.-4      	; 0x38fa <CLCD_voidSendExtraChar+0x4d2>
    38fe:	c8 01       	movw	r24, r16
    3900:	01 97       	sbiw	r24, 0x01	; 1
    3902:	f1 f7       	brne	.-4      	; 0x3900 <CLCD_voidSendExtraChar+0x4d8>

		CLCD_voidSendData( LOC_u8Iterator );

	}

}
    3904:	df 91       	pop	r29
    3906:	cf 91       	pop	r28
    3908:	1f 91       	pop	r17
    390a:	0f 91       	pop	r16
    390c:	ff 90       	pop	r15
    390e:	ef 90       	pop	r14
    3910:	df 90       	pop	r13
    3912:	cf 90       	pop	r12
    3914:	08 95       	ret
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    3916:	80 e1       	ldi	r24, 0x10	; 16
    3918:	8c 15       	cp	r24, r12
    391a:	08 f4       	brcc	.+2      	; 0x391e <CLCD_voidSendExtraChar+0x4f6>
    391c:	0e ce       	rjmp	.-996    	; 0x353a <CLCD_voidSendExtraChar+0x112>
    391e:	cc 20       	and	r12, r12
    3920:	09 f4       	brne	.+2      	; 0x3924 <CLCD_voidSendExtraChar+0x4fc>
    3922:	0b ce       	rjmp	.-1002   	; 0x353a <CLCD_voidSendExtraChar+0x112>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	d8 16       	cp	r13, r24
    3928:	31 f0       	breq	.+12     	; 0x3936 <CLCD_voidSendExtraChar+0x50e>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    392a:	82 e0       	ldi	r24, 0x02	; 2
    392c:	d8 16       	cp	r13, r24
    392e:	41 f0       	breq	.+16     	; 0x3940 <CLCD_voidSendExtraChar+0x518>
    3930:	ff 24       	eor	r15, r15
    3932:	10 e0       	ldi	r17, 0x00	; 0
    3934:	05 ce       	rjmp	.-1014   	; 0x3540 <CLCD_voidSendExtraChar+0x118>
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    3936:	0f e7       	ldi	r16, 0x7F	; 127
    3938:	f0 2e       	mov	r15, r16
    393a:	fc 0c       	add	r15, r12
    393c:	18 e0       	ldi	r17, 0x08	; 8
    393e:	00 ce       	rjmp	.-1024   	; 0x3540 <CLCD_voidSendExtraChar+0x118>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    3940:	1f eb       	ldi	r17, 0xBF	; 191
    3942:	f1 2e       	mov	r15, r17
    3944:	fc 0c       	add	r15, r12
    3946:	1c e0       	ldi	r17, 0x0C	; 12
    3948:	fb cd       	rjmp	.-1034   	; 0x3540 <CLCD_voidSendExtraChar+0x118>

0000394a <INT0_ISR>:
	GIE_VoidEnable();
}

void INT0_ISR(void)
{
	modeState = PEDESTRIAN_MODE;
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	80 93 28 02 	sts	0x0228, r24
}
    3950:	08 95       	ret

00003952 <APP_voidInit>:
}

/*all Initials I need */
void APP_voidInit(void)
{
	PORT_voidInit();
    3952:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <PORT_voidInit>
	SSD_voidInitialDataPort(SSD);
    3956:	60 91 ed 01 	lds	r22, 0x01ED
    395a:	70 91 ee 01 	lds	r23, 0x01EE
    395e:	80 91 ef 01 	lds	r24, 0x01EF
    3962:	90 91 f0 01 	lds	r25, 0x01F0
    3966:	0e 94 bf 14 	call	0x297e	; 0x297e <SSD_voidInitialDataPort>
	SSD_voidEnable(SSD);
    396a:	60 91 ed 01 	lds	r22, 0x01ED
    396e:	70 91 ee 01 	lds	r23, 0x01EE
    3972:	80 91 ef 01 	lds	r24, 0x01EF
    3976:	90 91 f0 01 	lds	r25, 0x01F0
    397a:	0e 94 84 14 	call	0x2908	; 0x2908 <SSD_voidEnable>
	CLCD_voidInit();
    397e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <CLCD_voidInit>
	EXTI_voidSetSignalLatch(EXTI_FALLING_EDGE,EXTI_LINE0);
    3982:	80 e0       	ldi	r24, 0x00	; 0
    3984:	66 e0       	ldi	r22, 0x06	; 6
    3986:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <EXTI_voidSetSignalLatch>
	EXTI_voidSetCallBack(INT0_ISR,0);
    398a:	85 ea       	ldi	r24, 0xA5	; 165
    398c:	9c e1       	ldi	r25, 0x1C	; 28
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	0e 94 88 10 	call	0x2110	; 0x2110 <EXTI_voidSetCallBack>
	EXTI_voidEnableInterrupt(EXTI_LINE0);
    3994:	86 e0       	ldi	r24, 0x06	; 6
    3996:	0e 94 58 10 	call	0x20b0	; 0x20b0 <EXTI_voidEnableInterrupt>
	SW_voidInit(interrupt_SW);
    399a:	60 91 ea 01 	lds	r22, 0x01EA
    399e:	70 91 eb 01 	lds	r23, 0x01EB
    39a2:	80 91 ec 01 	lds	r24, 0x01EC
    39a6:	0e 94 3f 14 	call	0x287e	; 0x287e <SW_voidInit>
	TIMER_u8SetCallBack(APP_voidPeriodicTask,TIMER0_CTC_VECTOR_ID);
    39aa:	8f ed       	ldi	r24, 0xDF	; 223
    39ac:	9c e1       	ldi	r25, 0x1C	; 28
    39ae:	6a e0       	ldi	r22, 0x0A	; 10
    39b0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <TIMER_u8SetCallBack>
	TIMER0_voidInit();
    39b4:	0e 94 ad 0d 	call	0x1b5a	; 0x1b5a <TIMER0_voidInit>
	GIE_VoidEnable();
    39b8:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <GIE_VoidEnable>
}
    39bc:	08 95       	ret

000039be <APP_voidPeriodicTask>:
u16 Modes_Counter=0;


/*All application logic*/
void APP_voidPeriodicTask(void)
{
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
	Timer_SWCounter ++ ;
    39c2:	80 91 29 02 	lds	r24, 0x0229
    39c6:	90 91 2a 02 	lds	r25, 0x022A
    39ca:	01 96       	adiw	r24, 0x01	; 1
    39cc:	90 93 2a 02 	sts	0x022A, r25
    39d0:	80 93 29 02 	sts	0x0229, r24
	if (Timer_SWCounter == COV)
    39d4:	88 5e       	subi	r24, 0xE8	; 232
    39d6:	93 40       	sbci	r25, 0x03	; 3
    39d8:	19 f0       	breq	.+6      	; 0x39e0 <APP_voidPeriodicTask+0x22>
		}

		Timer_SWCounter = 0 ;
		TIMER0_voidSetPreload(PreLoad_Val);
	}
}
    39da:	1f 91       	pop	r17
    39dc:	0f 91       	pop	r16
    39de:	08 95       	ret
{
	Timer_SWCounter ++ ;
	if (Timer_SWCounter == COV)
	{
		// Action Every One Sec
		SSD_voidSendNumber(SSD,(Modes_Counter%5));
    39e0:	00 91 ed 01 	lds	r16, 0x01ED
    39e4:	10 91 ee 01 	lds	r17, 0x01EE
    39e8:	20 91 ef 01 	lds	r18, 0x01EF
    39ec:	30 91 f0 01 	lds	r19, 0x01F0
    39f0:	80 91 2b 02 	lds	r24, 0x022B
    39f4:	90 91 2c 02 	lds	r25, 0x022C
    39f8:	65 e0       	ldi	r22, 0x05	; 5
    39fa:	70 e0       	ldi	r23, 0x00	; 0
    39fc:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <__udivmodhi4>
    3a00:	48 2f       	mov	r20, r24
    3a02:	c9 01       	movw	r24, r18
    3a04:	b8 01       	movw	r22, r16
    3a06:	0e 94 a7 14 	call	0x294e	; 0x294e <SSD_voidSendNumber>
		Modes_Counter ++ ;
    3a0a:	20 91 2b 02 	lds	r18, 0x022B
    3a0e:	30 91 2c 02 	lds	r19, 0x022C
    3a12:	c9 01       	movw	r24, r18
    3a14:	01 96       	adiw	r24, 0x01	; 1
    3a16:	90 93 2c 02 	sts	0x022C, r25
    3a1a:	80 93 2b 02 	sts	0x022B, r24
		switch(modeState)
    3a1e:	40 91 28 02 	lds	r20, 0x0228
    3a22:	44 23       	and	r20, r20
    3a24:	09 f0       	breq	.+2      	; 0x3a28 <APP_voidPeriodicTask+0x6a>
    3a26:	5e c0       	rjmp	.+188    	; 0x3ae4 <APP_voidPeriodicTask+0x126>
		{
		case NORMAL_MODE:
			if(Modes_Counter <= 5)
    3a28:	06 97       	sbiw	r24, 0x06	; 6
    3a2a:	08 f4       	brcc	.+2      	; 0x3a2e <APP_voidPeriodicTask+0x70>
    3a2c:	7f c0       	rjmp	.+254    	; 0x3b2c <APP_voidPeriodicTask+0x16e>
				LED_voidOff(carGreenLED);
				carGreen_LED = LED_IDLE ;
				LED_voidOff(carYellowLED);
				carYellow_LED = LED_IDLE ;
			}
			else if ((Modes_Counter > 5) && (Modes_Counter <= 10))
    3a2e:	c9 01       	movw	r24, r18
    3a30:	05 97       	sbiw	r24, 0x05	; 5
    3a32:	05 97       	sbiw	r24, 0x05	; 5
    3a34:	08 f4       	brcc	.+2      	; 0x3a38 <APP_voidPeriodicTask+0x7a>
    3a36:	d1 c0       	rjmp	.+418    	; 0x3bda <APP_voidPeriodicTask+0x21c>
				LED_voidOff(carRedLED);
				carRed_LED = LED_IDLE ;
				LED_voidOff(carYellowLED);
				carYellow_LED = LED_IDLE ;
			}
			else if ((Modes_Counter > 10) && (Modes_Counter <= 15))
    3a38:	c9 01       	movw	r24, r18
    3a3a:	0a 97       	sbiw	r24, 0x0a	; 10
    3a3c:	05 97       	sbiw	r24, 0x05	; 5
    3a3e:	08 f4       	brcc	.+2      	; 0x3a42 <APP_voidPeriodicTask+0x84>
    3a40:	08 c1       	rjmp	.+528    	; 0x3c52 <APP_voidPeriodicTask+0x294>
				if (Modes_Counter==15)
				{
					Modes_Counter = 0 ;
				}
			}
			else if ((Modes_Counter > 15) && (Modes_Counter <= 20))
    3a42:	2f 50       	subi	r18, 0x0F	; 15
    3a44:	30 40       	sbci	r19, 0x00	; 0
    3a46:	25 30       	cpi	r18, 0x05	; 5
    3a48:	31 05       	cpc	r19, r1
    3a4a:	08 f0       	brcs	.+2      	; 0x3a4e <APP_voidPeriodicTask+0x90>
    3a4c:	4d c0       	rjmp	.+154    	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
			{
				CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	61 e0       	ldi	r22, 0x01	; 1
    3a52:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Wait .....         ");
    3a56:	84 e8       	ldi	r24, 0x84	; 132
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <CLCD_voidSendString>
				LED_voidOff(pedesRedLED);
    3a5e:	60 91 e1 01 	lds	r22, 0x01E1
    3a62:	70 91 e2 01 	lds	r23, 0x01E2
    3a66:	80 91 e3 01 	lds	r24, 0x01E3
    3a6a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				pedesRed_LED = LED_IDLE;
    3a6e:	10 92 25 02 	sts	0x0225, r1
				LED_voidOff(pedesGreenLED);
    3a72:	60 91 e4 01 	lds	r22, 0x01E4
    3a76:	70 91 e5 01 	lds	r23, 0x01E5
    3a7a:	80 91 e6 01 	lds	r24, 0x01E6
    3a7e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				pedesGreen_LED = LED_IDLE;
    3a82:	10 92 26 02 	sts	0x0226, r1

				LED_voidOff(carRedLED);
    3a86:	60 91 d8 01 	lds	r22, 0x01D8
    3a8a:	70 91 d9 01 	lds	r23, 0x01D9
    3a8e:	80 91 da 01 	lds	r24, 0x01DA
    3a92:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				carRed_LED = LED_IDLE ;
    3a96:	10 92 22 02 	sts	0x0222, r1
				LED_voidOff(carGreenLED);
    3a9a:	60 91 db 01 	lds	r22, 0x01DB
    3a9e:	70 91 dc 01 	lds	r23, 0x01DC
    3aa2:	80 91 dd 01 	lds	r24, 0x01DD
    3aa6:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				carGreen_LED = LED_IDLE ;
    3aaa:	10 92 23 02 	sts	0x0223, r1

				LED_voidToggle(carYellowLED);
    3aae:	60 91 de 01 	lds	r22, 0x01DE
    3ab2:	70 91 df 01 	lds	r23, 0x01DF
    3ab6:	80 91 e0 01 	lds	r24, 0x01E0
    3aba:	0e 94 c4 14 	call	0x2988	; 0x2988 <LED_voidToggle>
				LED_voidToggle(pedesYellowLED);
    3abe:	60 91 e7 01 	lds	r22, 0x01E7
    3ac2:	70 91 e8 01 	lds	r23, 0x01E8
    3ac6:	80 91 e9 01 	lds	r24, 0x01E9
    3aca:	0e 94 c4 14 	call	0x2988	; 0x2988 <LED_voidToggle>
				/* Reset Modes Counter */
				if (Modes_Counter==20)
    3ace:	80 91 2b 02 	lds	r24, 0x022B
    3ad2:	90 91 2c 02 	lds	r25, 0x022C
    3ad6:	44 97       	sbiw	r24, 0x14	; 20
    3ad8:	39 f4       	brne	.+14     	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
				{
					Modes_Counter = 0 ;
    3ada:	10 92 2c 02 	sts	0x022C, r1
    3ade:	10 92 2b 02 	sts	0x022B, r1
    3ae2:	02 c0       	rjmp	.+4      	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
	if (Timer_SWCounter == COV)
	{
		// Action Every One Sec
		SSD_voidSendNumber(SSD,(Modes_Counter%5));
		Modes_Counter ++ ;
		switch(modeState)
    3ae4:	41 30       	cpi	r20, 0x01	; 1
    3ae6:	51 f0       	breq	.+20     	; 0x3afc <APP_voidPeriodicTask+0x13e>
			}

			break;
		}

		Timer_SWCounter = 0 ;
    3ae8:	10 92 2a 02 	sts	0x022A, r1
    3aec:	10 92 29 02 	sts	0x0229, r1
		TIMER0_voidSetPreload(PreLoad_Val);
    3af0:	8d e7       	ldi	r24, 0x7D	; 125
    3af2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <TIMER0_voidSetPreload>
	}
}
    3af6:	1f 91       	pop	r17
    3af8:	0f 91       	pop	r16
    3afa:	08 95       	ret
			}


			break;
		case PEDESTRIAN_MODE:
			if((carRed_LED == LED_ACTIVE)&&(carGreen_LED == LED_IDLE)&&(carYellow_LED == LED_IDLE))
    3afc:	80 91 22 02 	lds	r24, 0x0222
    3b00:	81 30       	cpi	r24, 0x01	; 1
    3b02:	09 f4       	brne	.+2      	; 0x3b06 <APP_voidPeriodicTask+0x148>
    3b04:	59 c0       	rjmp	.+178    	; 0x3bb8 <APP_voidPeriodicTask+0x1fa>
			{
				Modes_Counter = 0 ;
				modeState = NORMAL_MODE;
			}
			else if ((carRed_LED == LED_IDLE)&&((carGreen_LED == LED_ACTIVE)||(carYellow_LED == LED_ACTIVE)))
    3b06:	88 23       	and	r24, r24
    3b08:	79 f7       	brne	.-34     	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
    3b0a:	80 91 23 02 	lds	r24, 0x0223
    3b0e:	81 30       	cpi	r24, 0x01	; 1
    3b10:	21 f0       	breq	.+8      	; 0x3b1a <APP_voidPeriodicTask+0x15c>
    3b12:	80 91 24 02 	lds	r24, 0x0224
    3b16:	81 30       	cpi	r24, 0x01	; 1
    3b18:	39 f7       	brne	.-50     	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
			{
				Modes_Counter = 16 ;
    3b1a:	80 e1       	ldi	r24, 0x10	; 16
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	90 93 2c 02 	sts	0x022C, r25
    3b22:	80 93 2b 02 	sts	0x022B, r24
				modeState = NORMAL_MODE;
    3b26:	10 92 28 02 	sts	0x0228, r1
    3b2a:	de cf       	rjmp	.-68     	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
		switch(modeState)
		{
		case NORMAL_MODE:
			if(Modes_Counter <= 5)
			{
				CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    3b2c:	81 e0       	ldi	r24, 0x01	; 1
    3b2e:	61 e0       	ldi	r22, 0x01	; 1
    3b30:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"You Can Move Now");
    3b34:	80 e6       	ldi	r24, 0x60	; 96
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <CLCD_voidSendString>
				LED_voidOn(pedesGreenLED);
    3b3c:	60 91 e4 01 	lds	r22, 0x01E4
    3b40:	70 91 e5 01 	lds	r23, 0x01E5
    3b44:	80 91 e6 01 	lds	r24, 0x01E6
    3b48:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <LED_voidOn>
				pedesGreen_LED = LED_ACTIVE ;
    3b4c:	11 e0       	ldi	r17, 0x01	; 1
    3b4e:	10 93 26 02 	sts	0x0226, r17
				LED_voidOff(pedesRedLED);
    3b52:	60 91 e1 01 	lds	r22, 0x01E1
    3b56:	70 91 e2 01 	lds	r23, 0x01E2
    3b5a:	80 91 e3 01 	lds	r24, 0x01E3
    3b5e:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				pedesRed_LED = LED_IDLE;
    3b62:	10 92 25 02 	sts	0x0225, r1
				LED_voidOff(pedesYellowLED);
    3b66:	60 91 e7 01 	lds	r22, 0x01E7
    3b6a:	70 91 e8 01 	lds	r23, 0x01E8
    3b6e:	80 91 e9 01 	lds	r24, 0x01E9
    3b72:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				pedesYellow_LED = LED_IDLE;
    3b76:	10 92 27 02 	sts	0x0227, r1

				LED_voidOn(carRedLED);
    3b7a:	60 91 d8 01 	lds	r22, 0x01D8
    3b7e:	70 91 d9 01 	lds	r23, 0x01D9
    3b82:	80 91 da 01 	lds	r24, 0x01DA
    3b86:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <LED_voidOn>
				carRed_LED = LED_ACTIVE ;
    3b8a:	10 93 22 02 	sts	0x0222, r17
				LED_voidOff(carGreenLED);
    3b8e:	60 91 db 01 	lds	r22, 0x01DB
    3b92:	70 91 dc 01 	lds	r23, 0x01DC
    3b96:	80 91 dd 01 	lds	r24, 0x01DD
    3b9a:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				carGreen_LED = LED_IDLE ;
    3b9e:	10 92 23 02 	sts	0x0223, r1

				LED_voidOn(carGreenLED);
				carGreen_LED = LED_ACTIVE ;
				LED_voidOff(carRedLED);
				carRed_LED = LED_IDLE ;
				LED_voidOff(carYellowLED);
    3ba2:	60 91 de 01 	lds	r22, 0x01DE
    3ba6:	70 91 df 01 	lds	r23, 0x01DF
    3baa:	80 91 e0 01 	lds	r24, 0x01E0
    3bae:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				carYellow_LED = LED_IDLE ;
    3bb2:	10 92 24 02 	sts	0x0224, r1
    3bb6:	98 cf       	rjmp	.-208    	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
			}


			break;
		case PEDESTRIAN_MODE:
			if((carRed_LED == LED_ACTIVE)&&(carGreen_LED == LED_IDLE)&&(carYellow_LED == LED_IDLE))
    3bb8:	80 91 23 02 	lds	r24, 0x0223
    3bbc:	88 23       	and	r24, r24
    3bbe:	09 f0       	breq	.+2      	; 0x3bc2 <APP_voidPeriodicTask+0x204>
    3bc0:	93 cf       	rjmp	.-218    	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
    3bc2:	80 91 24 02 	lds	r24, 0x0224
    3bc6:	88 23       	and	r24, r24
    3bc8:	09 f0       	breq	.+2      	; 0x3bcc <APP_voidPeriodicTask+0x20e>
    3bca:	8e cf       	rjmp	.-228    	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
			{
				Modes_Counter = 0 ;
    3bcc:	10 92 2c 02 	sts	0x022C, r1
    3bd0:	10 92 2b 02 	sts	0x022B, r1
				modeState = NORMAL_MODE;
    3bd4:	10 92 28 02 	sts	0x0228, r1
    3bd8:	87 cf       	rjmp	.-242    	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
				LED_voidOff(carYellowLED);
				carYellow_LED = LED_IDLE ;
			}
			else if ((Modes_Counter > 5) && (Modes_Counter <= 10))
			{
				CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    3bda:	81 e0       	ldi	r24, 0x01	; 1
    3bdc:	61 e0       	ldi	r22, 0x01	; 1
    3bde:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Do Not Move       ");
    3be2:	81 e7       	ldi	r24, 0x71	; 113
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <CLCD_voidSendString>
				LED_voidOn(pedesRedLED);
    3bea:	60 91 e1 01 	lds	r22, 0x01E1
    3bee:	70 91 e2 01 	lds	r23, 0x01E2
    3bf2:	80 91 e3 01 	lds	r24, 0x01E3
    3bf6:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <LED_voidOn>
				pedesRed_LED = LED_ACTIVE;
    3bfa:	11 e0       	ldi	r17, 0x01	; 1
    3bfc:	10 93 25 02 	sts	0x0225, r17
				LED_voidOff(pedesGreenLED);
    3c00:	60 91 e4 01 	lds	r22, 0x01E4
    3c04:	70 91 e5 01 	lds	r23, 0x01E5
    3c08:	80 91 e6 01 	lds	r24, 0x01E6
    3c0c:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				pedesGreen_LED = LED_IDLE;
    3c10:	10 92 26 02 	sts	0x0226, r1
				LED_voidOff(pedesYellowLED);
    3c14:	60 91 e7 01 	lds	r22, 0x01E7
    3c18:	70 91 e8 01 	lds	r23, 0x01E8
    3c1c:	80 91 e9 01 	lds	r24, 0x01E9
    3c20:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				pedesYellow_LED = LED_IDLE;
    3c24:	10 92 27 02 	sts	0x0227, r1

				LED_voidOn(carGreenLED);
    3c28:	60 91 db 01 	lds	r22, 0x01DB
    3c2c:	70 91 dc 01 	lds	r23, 0x01DC
    3c30:	80 91 dd 01 	lds	r24, 0x01DD
    3c34:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <LED_voidOn>
				carGreen_LED = LED_ACTIVE ;
    3c38:	10 93 23 02 	sts	0x0223, r17
				LED_voidOff(carRedLED);
    3c3c:	60 91 d8 01 	lds	r22, 0x01D8
    3c40:	70 91 d9 01 	lds	r23, 0x01D9
    3c44:	80 91 da 01 	lds	r24, 0x01DA
    3c48:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				carRed_LED = LED_IDLE ;
    3c4c:	10 92 22 02 	sts	0x0222, r1
    3c50:	a8 cf       	rjmp	.-176    	; 0x3ba2 <APP_voidPeriodicTask+0x1e4>
				LED_voidOff(carYellowLED);
				carYellow_LED = LED_IDLE ;
			}
			else if ((Modes_Counter > 10) && (Modes_Counter <= 15))
			{
				CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    3c52:	81 e0       	ldi	r24, 0x01	; 1
    3c54:	61 e0       	ldi	r22, 0x01	; 1
    3c56:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Wait .....         ");
    3c5a:	84 e8       	ldi	r24, 0x84	; 132
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	0e 94 b9 15 	call	0x2b72	; 0x2b72 <CLCD_voidSendString>

				LED_voidOn(pedesYellowLED);
    3c62:	60 91 e7 01 	lds	r22, 0x01E7
    3c66:	70 91 e8 01 	lds	r23, 0x01E8
    3c6a:	80 91 e9 01 	lds	r24, 0x01E9
    3c6e:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <LED_voidOn>
				pedesYellow_LED = LED_ACTIVE;
    3c72:	11 e0       	ldi	r17, 0x01	; 1
    3c74:	10 93 27 02 	sts	0x0227, r17
				LED_voidOff(pedesGreenLED);
    3c78:	60 91 e4 01 	lds	r22, 0x01E4
    3c7c:	70 91 e5 01 	lds	r23, 0x01E5
    3c80:	80 91 e6 01 	lds	r24, 0x01E6
    3c84:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				pedesGreen_LED = LED_IDLE;
    3c88:	10 92 26 02 	sts	0x0226, r1
				LED_voidOff(pedesRedLED);
    3c8c:	60 91 e1 01 	lds	r22, 0x01E1
    3c90:	70 91 e2 01 	lds	r23, 0x01E2
    3c94:	80 91 e3 01 	lds	r24, 0x01E3
    3c98:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				pedesRed_LED = LED_IDLE;
    3c9c:	10 92 25 02 	sts	0x0225, r1

				LED_voidOn(carYellowLED);
    3ca0:	60 91 de 01 	lds	r22, 0x01DE
    3ca4:	70 91 df 01 	lds	r23, 0x01DF
    3ca8:	80 91 e0 01 	lds	r24, 0x01E0
    3cac:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <LED_voidOn>
				carYellow_LED = LED_ACTIVE ;
    3cb0:	10 93 24 02 	sts	0x0224, r17
				LED_voidOff(carRedLED);
    3cb4:	60 91 d8 01 	lds	r22, 0x01D8
    3cb8:	70 91 d9 01 	lds	r23, 0x01D9
    3cbc:	80 91 da 01 	lds	r24, 0x01DA
    3cc0:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				carRed_LED = LED_IDLE ;
    3cc4:	10 92 22 02 	sts	0x0222, r1
				LED_voidOff(carGreenLED);
    3cc8:	60 91 db 01 	lds	r22, 0x01DB
    3ccc:	70 91 dc 01 	lds	r23, 0x01DC
    3cd0:	80 91 dd 01 	lds	r24, 0x01DD
    3cd4:	0e 94 d8 14 	call	0x29b0	; 0x29b0 <LED_voidOff>
				carGreen_LED = LED_IDLE ;
    3cd8:	10 92 23 02 	sts	0x0223, r1
				/* Reset Modes Counter */
				if (Modes_Counter==15)
    3cdc:	80 91 2b 02 	lds	r24, 0x022B
    3ce0:	90 91 2c 02 	lds	r25, 0x022C
    3ce4:	0f 97       	sbiw	r24, 0x0f	; 15
    3ce6:	09 f0       	breq	.+2      	; 0x3cea <APP_voidPeriodicTask+0x32c>
    3ce8:	ff ce       	rjmp	.-514    	; 0x3ae8 <APP_voidPeriodicTask+0x12a>
    3cea:	f7 ce       	rjmp	.-530    	; 0x3ada <APP_voidPeriodicTask+0x11c>

00003cec <main>:

#include "APP/APP_interface.h"

int main ()
{
	APP_voidInit();
    3cec:	0e 94 a9 1c 	call	0x3952	; 0x3952 <APP_voidInit>
    3cf0:	ff cf       	rjmp	.-2      	; 0x3cf0 <main+0x4>

00003cf2 <__udivmodhi4>:
    3cf2:	aa 1b       	sub	r26, r26
    3cf4:	bb 1b       	sub	r27, r27
    3cf6:	51 e1       	ldi	r21, 0x11	; 17
    3cf8:	07 c0       	rjmp	.+14     	; 0x3d08 <__udivmodhi4_ep>

00003cfa <__udivmodhi4_loop>:
    3cfa:	aa 1f       	adc	r26, r26
    3cfc:	bb 1f       	adc	r27, r27
    3cfe:	a6 17       	cp	r26, r22
    3d00:	b7 07       	cpc	r27, r23
    3d02:	10 f0       	brcs	.+4      	; 0x3d08 <__udivmodhi4_ep>
    3d04:	a6 1b       	sub	r26, r22
    3d06:	b7 0b       	sbc	r27, r23

00003d08 <__udivmodhi4_ep>:
    3d08:	88 1f       	adc	r24, r24
    3d0a:	99 1f       	adc	r25, r25
    3d0c:	5a 95       	dec	r21
    3d0e:	a9 f7       	brne	.-22     	; 0x3cfa <__udivmodhi4_loop>
    3d10:	80 95       	com	r24
    3d12:	90 95       	com	r25
    3d14:	bc 01       	movw	r22, r24
    3d16:	cd 01       	movw	r24, r26
    3d18:	08 95       	ret

00003d1a <__mulsi3>:
    3d1a:	62 9f       	mul	r22, r18
    3d1c:	d0 01       	movw	r26, r0
    3d1e:	73 9f       	mul	r23, r19
    3d20:	f0 01       	movw	r30, r0
    3d22:	82 9f       	mul	r24, r18
    3d24:	e0 0d       	add	r30, r0
    3d26:	f1 1d       	adc	r31, r1
    3d28:	64 9f       	mul	r22, r20
    3d2a:	e0 0d       	add	r30, r0
    3d2c:	f1 1d       	adc	r31, r1
    3d2e:	92 9f       	mul	r25, r18
    3d30:	f0 0d       	add	r31, r0
    3d32:	83 9f       	mul	r24, r19
    3d34:	f0 0d       	add	r31, r0
    3d36:	74 9f       	mul	r23, r20
    3d38:	f0 0d       	add	r31, r0
    3d3a:	65 9f       	mul	r22, r21
    3d3c:	f0 0d       	add	r31, r0
    3d3e:	99 27       	eor	r25, r25
    3d40:	72 9f       	mul	r23, r18
    3d42:	b0 0d       	add	r27, r0
    3d44:	e1 1d       	adc	r30, r1
    3d46:	f9 1f       	adc	r31, r25
    3d48:	63 9f       	mul	r22, r19
    3d4a:	b0 0d       	add	r27, r0
    3d4c:	e1 1d       	adc	r30, r1
    3d4e:	f9 1f       	adc	r31, r25
    3d50:	bd 01       	movw	r22, r26
    3d52:	cf 01       	movw	r24, r30
    3d54:	11 24       	eor	r1, r1
    3d56:	08 95       	ret

00003d58 <__udivmodsi4>:
    3d58:	a1 e2       	ldi	r26, 0x21	; 33
    3d5a:	1a 2e       	mov	r1, r26
    3d5c:	aa 1b       	sub	r26, r26
    3d5e:	bb 1b       	sub	r27, r27
    3d60:	fd 01       	movw	r30, r26
    3d62:	0d c0       	rjmp	.+26     	; 0x3d7e <__udivmodsi4_ep>

00003d64 <__udivmodsi4_loop>:
    3d64:	aa 1f       	adc	r26, r26
    3d66:	bb 1f       	adc	r27, r27
    3d68:	ee 1f       	adc	r30, r30
    3d6a:	ff 1f       	adc	r31, r31
    3d6c:	a2 17       	cp	r26, r18
    3d6e:	b3 07       	cpc	r27, r19
    3d70:	e4 07       	cpc	r30, r20
    3d72:	f5 07       	cpc	r31, r21
    3d74:	20 f0       	brcs	.+8      	; 0x3d7e <__udivmodsi4_ep>
    3d76:	a2 1b       	sub	r26, r18
    3d78:	b3 0b       	sbc	r27, r19
    3d7a:	e4 0b       	sbc	r30, r20
    3d7c:	f5 0b       	sbc	r31, r21

00003d7e <__udivmodsi4_ep>:
    3d7e:	66 1f       	adc	r22, r22
    3d80:	77 1f       	adc	r23, r23
    3d82:	88 1f       	adc	r24, r24
    3d84:	99 1f       	adc	r25, r25
    3d86:	1a 94       	dec	r1
    3d88:	69 f7       	brne	.-38     	; 0x3d64 <__udivmodsi4_loop>
    3d8a:	60 95       	com	r22
    3d8c:	70 95       	com	r23
    3d8e:	80 95       	com	r24
    3d90:	90 95       	com	r25
    3d92:	9b 01       	movw	r18, r22
    3d94:	ac 01       	movw	r20, r24
    3d96:	bd 01       	movw	r22, r26
    3d98:	cf 01       	movw	r24, r30
    3d9a:	08 95       	ret

00003d9c <__prologue_saves__>:
    3d9c:	2f 92       	push	r2
    3d9e:	3f 92       	push	r3
    3da0:	4f 92       	push	r4
    3da2:	5f 92       	push	r5
    3da4:	6f 92       	push	r6
    3da6:	7f 92       	push	r7
    3da8:	8f 92       	push	r8
    3daa:	9f 92       	push	r9
    3dac:	af 92       	push	r10
    3dae:	bf 92       	push	r11
    3db0:	cf 92       	push	r12
    3db2:	df 92       	push	r13
    3db4:	ef 92       	push	r14
    3db6:	ff 92       	push	r15
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	ca 1b       	sub	r28, r26
    3dc6:	db 0b       	sbc	r29, r27
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
    3dd2:	09 94       	ijmp

00003dd4 <__epilogue_restores__>:
    3dd4:	2a 88       	ldd	r2, Y+18	; 0x12
    3dd6:	39 88       	ldd	r3, Y+17	; 0x11
    3dd8:	48 88       	ldd	r4, Y+16	; 0x10
    3dda:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ddc:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dde:	7d 84       	ldd	r7, Y+13	; 0x0d
    3de0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3de2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3de4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3de6:	b9 84       	ldd	r11, Y+9	; 0x09
    3de8:	c8 84       	ldd	r12, Y+8	; 0x08
    3dea:	df 80       	ldd	r13, Y+7	; 0x07
    3dec:	ee 80       	ldd	r14, Y+6	; 0x06
    3dee:	fd 80       	ldd	r15, Y+5	; 0x05
    3df0:	0c 81       	ldd	r16, Y+4	; 0x04
    3df2:	1b 81       	ldd	r17, Y+3	; 0x03
    3df4:	aa 81       	ldd	r26, Y+2	; 0x02
    3df6:	b9 81       	ldd	r27, Y+1	; 0x01
    3df8:	ce 0f       	add	r28, r30
    3dfa:	d1 1d       	adc	r29, r1
    3dfc:	0f b6       	in	r0, 0x3f	; 63
    3dfe:	f8 94       	cli
    3e00:	de bf       	out	0x3e, r29	; 62
    3e02:	0f be       	out	0x3f, r0	; 63
    3e04:	cd bf       	out	0x3d, r28	; 61
    3e06:	ed 01       	movw	r28, r26
    3e08:	08 95       	ret

00003e0a <_exit>:
    3e0a:	f8 94       	cli

00003e0c <__stop_program>:
    3e0c:	ff cf       	rjmp	.-2      	; 0x3e0c <__stop_program>
