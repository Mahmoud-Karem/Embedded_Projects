
FreeRTOS_LCD_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000168  00800060  000075ee  00007682  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000489  008001c8  008001c8  000077ea  2**0
                  ALLOC
  3 .stab         000066a8  00000000  00000000  000077ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00003a5b  00000000  00000000  0000de94  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000118ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00011a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ce6  00000000  00000000  00011c7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001354  00000000  00000000  00014965  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001308  00000000  00000000  00015cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00016fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  00017184  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021ec  00000000  00000000  000174c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  000196b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ee       	ldi	r30, 0xEE	; 238
      68:	f5 e7       	ldi	r31, 0x75	; 117
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3c       	cpi	r26, 0xC8	; 200
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	16 e0       	ldi	r17, 0x06	; 6
      78:	a8 ec       	ldi	r26, 0xC8	; 200
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 35       	cpi	r26, 0x51	; 81
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 dc 38 	call	0x71b8	; 0x71b8 <main>
      8a:	0c 94 f5 3a 	jmp	0x75ea	; 0x75ea <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 ad 10 	call	0x215a	; 0x215a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__subsf3>
     1bc:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 9f 3a 	jmp	0x753e	; 0x753e <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	8b 57       	subi	r24, 0x7B	; 123
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	8b 57       	subi	r24, 0x7B	; 123
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	8b 57       	subi	r24, 0x7B	; 123
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <__epilogue_restores__>

00000ed2 <__umoddi3>:
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 9f 3a 	jmp	0x753e	; 0x753e <__prologue_saves__>
     ede:	a8 e0       	ldi	r26, 0x08	; 8
     ee0:	4e 01       	movw	r8, r28
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
     ee8:	f4 01       	movw	r30, r8
     eea:	6a 2e       	mov	r6, r26
     eec:	11 92       	st	Z+, r1
     eee:	6a 94       	dec	r6
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__umoddi3+0x1a>
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	3a 83       	std	Y+2, r19	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	98 87       	std	Y+8, r25	; 0x08
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	fc 01       	movw	r30, r24
     f08:	11 92       	st	Z+, r1
     f0a:	aa 95       	dec	r26
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <__umoddi3+0x36>
     f0e:	a9 86       	std	Y+9, r10	; 0x09
     f10:	ba 86       	std	Y+10, r11	; 0x0a
     f12:	cb 86       	std	Y+11, r12	; 0x0b
     f14:	dc 86       	std	Y+12, r13	; 0x0c
     f16:	ed 86       	std	Y+13, r14	; 0x0d
     f18:	fe 86       	std	Y+14, r15	; 0x0e
     f1a:	0f 87       	std	Y+15, r16	; 0x0f
     f1c:	18 8b       	std	Y+16, r17	; 0x10
     f1e:	29 84       	ldd	r2, Y+9	; 0x09
     f20:	3a 84       	ldd	r3, Y+10	; 0x0a
     f22:	4b 84       	ldd	r4, Y+11	; 0x0b
     f24:	5c 84       	ldd	r5, Y+12	; 0x0c
     f26:	ad 84       	ldd	r10, Y+13	; 0x0d
     f28:	be 84       	ldd	r11, Y+14	; 0x0e
     f2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f2c:	d8 88       	ldd	r13, Y+16	; 0x10
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	69 96       	adiw	r28, 0x19	; 25
     f38:	2f af       	std	Y+63, r18	; 0x3f
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	6a 96       	adiw	r28, 0x1a	; 26
     f3e:	3f af       	std	Y+63, r19	; 0x3f
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	6b 96       	adiw	r28, 0x1b	; 27
     f44:	4f af       	std	Y+63, r20	; 0x3f
     f46:	6b 97       	sbiw	r28, 0x1b	; 27
     f48:	6c 96       	adiw	r28, 0x1c	; 28
     f4a:	5f af       	std	Y+63, r21	; 0x3f
     f4c:	6c 97       	sbiw	r28, 0x1c	; 28
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	6c ac       	ldd	r6, Y+60	; 0x3c
     f52:	7d ac       	ldd	r7, Y+61	; 0x3d
     f54:	8e ac       	ldd	r8, Y+62	; 0x3e
     f56:	9f ac       	ldd	r9, Y+63	; 0x3f
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	69 aa       	std	Y+49, r6	; 0x31
     f5c:	7a aa       	std	Y+50, r7	; 0x32
     f5e:	8b aa       	std	Y+51, r8	; 0x33
     f60:	9c aa       	std	Y+52, r9	; 0x34
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	3b 01       	movw	r6, r22
     f6c:	4c 01       	movw	r8, r24
     f6e:	6d aa       	std	Y+53, r6	; 0x35
     f70:	7e aa       	std	Y+54, r7	; 0x36
     f72:	8f aa       	std	Y+55, r8	; 0x37
     f74:	98 ae       	std	Y+56, r9	; 0x38
     f76:	a1 14       	cp	r10, r1
     f78:	b1 04       	cpc	r11, r1
     f7a:	c1 04       	cpc	r12, r1
     f7c:	d1 04       	cpc	r13, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__umoddi3+0xb0>
     f80:	04 c3       	rjmp	.+1544   	; 0x158a <__umoddi3+0x6b8>
     f82:	62 14       	cp	r6, r2
     f84:	73 04       	cpc	r7, r3
     f86:	84 04       	cpc	r8, r4
     f88:	95 04       	cpc	r9, r5
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__umoddi3+0xbc>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__umoddi3+0x2bc>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	20 16       	cp	r2, r16
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	30 06       	cpc	r3, r16
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	40 06       	cpc	r4, r16
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	50 06       	cpc	r5, r16
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <__umoddi3+0xf0>
     fa0:	1f ef       	ldi	r17, 0xFF	; 255
     fa2:	21 16       	cp	r2, r17
     fa4:	31 04       	cpc	r3, r1
     fa6:	41 04       	cpc	r4, r1
     fa8:	51 04       	cpc	r5, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <__umoddi3+0xe8>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__umoddi3+0xe8>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	e8 2e       	mov	r14, r24
     fb2:	f1 2c       	mov	r15, r1
     fb4:	01 2d       	mov	r16, r1
     fb6:	11 2d       	mov	r17, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__umoddi3+0x118>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__umoddi3+0x118>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	24 16       	cp	r2, r20
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	34 06       	cpc	r3, r20
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	44 06       	cpc	r4, r20
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	54 06       	cpc	r5, r20
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__umoddi3+0x10e>
     fd4:	b8 e1       	ldi	r27, 0x18	; 24
     fd6:	eb 2e       	mov	r14, r27
     fd8:	f1 2c       	mov	r15, r1
     fda:	01 2d       	mov	r16, r1
     fdc:	11 2d       	mov	r17, r1
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__umoddi3+0x118>
     fe0:	a0 e1       	ldi	r26, 0x10	; 16
     fe2:	ea 2e       	mov	r14, r26
     fe4:	f1 2c       	mov	r15, r1
     fe6:	01 2d       	mov	r16, r1
     fe8:	11 2d       	mov	r17, r1
     fea:	d2 01       	movw	r26, r4
     fec:	c1 01       	movw	r24, r2
     fee:	0e 2c       	mov	r0, r14
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__umoddi3+0x128>
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__umoddi3+0x120>
     ffe:	8b 57       	subi	r24, 0x7B	; 123
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	dc 01       	movw	r26, r24
    1004:	2c 91       	ld	r18, X
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8e 19       	sub	r24, r14
    1010:	9f 09       	sbc	r25, r15
    1012:	a0 0b       	sbc	r26, r16
    1014:	b1 0b       	sbc	r27, r17
    1016:	5c 01       	movw	r10, r24
    1018:	6d 01       	movw	r12, r26
    101a:	a2 1a       	sub	r10, r18
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	a9 ae       	std	Y+57, r10	; 0x39
    1024:	ba ae       	std	Y+58, r11	; 0x3a
    1026:	cb ae       	std	Y+59, r12	; 0x3b
    1028:	dc ae       	std	Y+60, r13	; 0x3c
    102a:	a1 14       	cp	r10, r1
    102c:	b1 04       	cpc	r11, r1
    102e:	c1 04       	cpc	r12, r1
    1030:	d1 04       	cpc	r13, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__umoddi3+0x164>
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <__umoddi3+0x1e2>
    1036:	69 ad       	ldd	r22, Y+57	; 0x39
    1038:	06 2e       	mov	r0, r22
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__umoddi3+0x172>
    103c:	22 0c       	add	r2, r2
    103e:	33 1c       	adc	r3, r3
    1040:	44 1c       	adc	r4, r4
    1042:	55 1c       	adc	r5, r5
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <__umoddi3+0x16a>
    1048:	a4 01       	movw	r20, r8
    104a:	93 01       	movw	r18, r6
    104c:	06 2e       	mov	r0, r22
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__umoddi3+0x186>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <__umoddi3+0x17e>
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8a 19       	sub	r24, r10
    1062:	9b 09       	sbc	r25, r11
    1064:	6c 96       	adiw	r28, 0x1c	; 28
    1066:	cc ac       	ldd	r12, Y+60	; 0x3c
    1068:	dd ac       	ldd	r13, Y+61	; 0x3d
    106a:	ee ac       	ldd	r14, Y+62	; 0x3e
    106c:	ff ac       	ldd	r15, Y+63	; 0x3f
    106e:	6c 97       	sbiw	r28, 0x1c	; 28
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__umoddi3+0x1a8>
    1072:	f6 94       	lsr	r15
    1074:	e7 94       	ror	r14
    1076:	d7 94       	ror	r13
    1078:	c7 94       	ror	r12
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <__umoddi3+0x1a0>
    107e:	87 01       	movw	r16, r14
    1080:	76 01       	movw	r14, r12
    1082:	e2 2a       	or	r14, r18
    1084:	f3 2a       	or	r15, r19
    1086:	04 2b       	or	r16, r20
    1088:	15 2b       	or	r17, r21
    108a:	ed aa       	std	Y+53, r14	; 0x35
    108c:	fe aa       	std	Y+54, r15	; 0x36
    108e:	0f ab       	std	Y+55, r16	; 0x37
    1090:	18 af       	std	Y+56, r17	; 0x38
    1092:	6c 96       	adiw	r28, 0x1c	; 28
    1094:	8c ad       	ldd	r24, Y+60	; 0x3c
    1096:	9d ad       	ldd	r25, Y+61	; 0x3d
    1098:	ae ad       	ldd	r26, Y+62	; 0x3e
    109a:	bf ad       	ldd	r27, Y+63	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__umoddi3+0x1d6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	6a 95       	dec	r22
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__umoddi3+0x1ce>
    10ac:	89 ab       	std	Y+49, r24	; 0x31
    10ae:	9a ab       	std	Y+50, r25	; 0x32
    10b0:	ab ab       	std	Y+51, r26	; 0x33
    10b2:	bc ab       	std	Y+52, r27	; 0x34
    10b4:	32 01       	movw	r6, r4
    10b6:	88 24       	eor	r8, r8
    10b8:	99 24       	eor	r9, r9
    10ba:	b2 01       	movw	r22, r4
    10bc:	a1 01       	movw	r20, r2
    10be:	60 70       	andi	r22, 0x00	; 0
    10c0:	70 70       	andi	r23, 0x00	; 0
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	4c af       	std	Y+60, r20	; 0x3c
    10c6:	5d af       	std	Y+61, r21	; 0x3d
    10c8:	6e af       	std	Y+62, r22	; 0x3e
    10ca:	7f af       	std	Y+63, r23	; 0x3f
    10cc:	21 97       	sbiw	r28, 0x01	; 1
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	a4 01       	movw	r20, r8
    10d8:	93 01       	movw	r18, r6
    10da:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    10de:	7b 01       	movw	r14, r22
    10e0:	8c 01       	movw	r16, r24
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	21 97       	sbiw	r28, 0x01	; 1
    1102:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	87 01       	movw	r16, r14
    110c:	ff 24       	eor	r15, r15
    110e:	ee 24       	eor	r14, r14
    1110:	a9 a8       	ldd	r10, Y+49	; 0x31
    1112:	ba a8       	ldd	r11, Y+50	; 0x32
    1114:	cb a8       	ldd	r12, Y+51	; 0x33
    1116:	dc a8       	ldd	r13, Y+52	; 0x34
    1118:	c6 01       	movw	r24, r12
    111a:	aa 27       	eor	r26, r26
    111c:	bb 27       	eor	r27, r27
    111e:	57 01       	movw	r10, r14
    1120:	68 01       	movw	r12, r16
    1122:	a8 2a       	or	r10, r24
    1124:	b9 2a       	or	r11, r25
    1126:	ca 2a       	or	r12, r26
    1128:	db 2a       	or	r13, r27
    112a:	a2 16       	cp	r10, r18
    112c:	b3 06       	cpc	r11, r19
    112e:	c4 06       	cpc	r12, r20
    1130:	d5 06       	cpc	r13, r21
    1132:	90 f4       	brcc	.+36     	; 0x1158 <__umoddi3+0x286>
    1134:	a2 0c       	add	r10, r2
    1136:	b3 1c       	adc	r11, r3
    1138:	c4 1c       	adc	r12, r4
    113a:	d5 1c       	adc	r13, r5
    113c:	a2 14       	cp	r10, r2
    113e:	b3 04       	cpc	r11, r3
    1140:	c4 04       	cpc	r12, r4
    1142:	d5 04       	cpc	r13, r5
    1144:	48 f0       	brcs	.+18     	; 0x1158 <__umoddi3+0x286>
    1146:	a2 16       	cp	r10, r18
    1148:	b3 06       	cpc	r11, r19
    114a:	c4 06       	cpc	r12, r20
    114c:	d5 06       	cpc	r13, r21
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__umoddi3+0x286>
    1150:	a2 0c       	add	r10, r2
    1152:	b3 1c       	adc	r11, r3
    1154:	c4 1c       	adc	r12, r4
    1156:	d5 1c       	adc	r13, r5
    1158:	a2 1a       	sub	r10, r18
    115a:	b3 0a       	sbc	r11, r19
    115c:	c4 0a       	sbc	r12, r20
    115e:	d5 0a       	sbc	r13, r21
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    116c:	7b 01       	movw	r14, r22
    116e:	8c 01       	movw	r16, r24
    1170:	c6 01       	movw	r24, r12
    1172:	b5 01       	movw	r22, r10
    1174:	a4 01       	movw	r20, r8
    1176:	93 01       	movw	r18, r6
    1178:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	2c ad       	ldd	r18, Y+60	; 0x3c
    1184:	3d ad       	ldd	r19, Y+61	; 0x3d
    1186:	4e ad       	ldd	r20, Y+62	; 0x3e
    1188:	5f ad       	ldd	r21, Y+63	; 0x3f
    118a:	21 97       	sbiw	r28, 0x01	; 1
    118c:	ba c1       	rjmp	.+884    	; 0x1502 <__umoddi3+0x630>
    118e:	21 14       	cp	r2, r1
    1190:	31 04       	cpc	r3, r1
    1192:	41 04       	cpc	r4, r1
    1194:	51 04       	cpc	r5, r1
    1196:	71 f4       	brne	.+28     	; 0x11b4 <__umoddi3+0x2e2>
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    11ac:	c9 01       	movw	r24, r18
    11ae:	da 01       	movw	r26, r20
    11b0:	1c 01       	movw	r2, r24
    11b2:	2d 01       	movw	r4, r26
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 16       	cp	r2, r16
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	30 06       	cpc	r3, r16
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	40 06       	cpc	r4, r16
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	50 06       	cpc	r5, r16
    11c4:	88 f4       	brcc	.+34     	; 0x11e8 <__umoddi3+0x316>
    11c6:	1f ef       	ldi	r17, 0xFF	; 255
    11c8:	21 16       	cp	r2, r17
    11ca:	31 04       	cpc	r3, r1
    11cc:	41 04       	cpc	r4, r1
    11ce:	51 04       	cpc	r5, r1
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__umoddi3+0x30e>
    11d2:	30 f0       	brcs	.+12     	; 0x11e0 <__umoddi3+0x30e>
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	e6 2e       	mov	r14, r22
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <__umoddi3+0x33e>
    11e0:	ee 24       	eor	r14, r14
    11e2:	ff 24       	eor	r15, r15
    11e4:	87 01       	movw	r16, r14
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <__umoddi3+0x33e>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	24 16       	cp	r2, r20
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	34 06       	cpc	r3, r20
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	44 06       	cpc	r4, r20
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	54 06       	cpc	r5, r20
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__umoddi3+0x334>
    11fa:	58 e1       	ldi	r21, 0x18	; 24
    11fc:	e5 2e       	mov	r14, r21
    11fe:	f1 2c       	mov	r15, r1
    1200:	01 2d       	mov	r16, r1
    1202:	11 2d       	mov	r17, r1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <__umoddi3+0x33e>
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	e4 2e       	mov	r14, r20
    120a:	f1 2c       	mov	r15, r1
    120c:	01 2d       	mov	r16, r1
    120e:	11 2d       	mov	r17, r1
    1210:	d2 01       	movw	r26, r4
    1212:	c1 01       	movw	r24, r2
    1214:	0e 2c       	mov	r0, r14
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__umoddi3+0x34e>
    1218:	b6 95       	lsr	r27
    121a:	a7 95       	ror	r26
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__umoddi3+0x346>
    1224:	8b 57       	subi	r24, 0x7B	; 123
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	30 e2       	ldi	r19, 0x20	; 32
    122e:	a3 2e       	mov	r10, r19
    1230:	b1 2c       	mov	r11, r1
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	d6 01       	movw	r26, r12
    1238:	c5 01       	movw	r24, r10
    123a:	8e 19       	sub	r24, r14
    123c:	9f 09       	sbc	r25, r15
    123e:	a0 0b       	sbc	r26, r16
    1240:	b1 0b       	sbc	r27, r17
    1242:	7c 01       	movw	r14, r24
    1244:	8d 01       	movw	r16, r26
    1246:	e2 1a       	sub	r14, r18
    1248:	f1 08       	sbc	r15, r1
    124a:	01 09       	sbc	r16, r1
    124c:	11 09       	sbc	r17, r1
    124e:	e9 ae       	std	Y+57, r14	; 0x39
    1250:	fa ae       	std	Y+58, r15	; 0x3a
    1252:	0b af       	std	Y+59, r16	; 0x3b
    1254:	1c af       	std	Y+60, r17	; 0x3c
    1256:	e1 14       	cp	r14, r1
    1258:	f1 04       	cpc	r15, r1
    125a:	01 05       	cpc	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__umoddi3+0x39c>
    1260:	64 01       	movw	r12, r8
    1262:	53 01       	movw	r10, r6
    1264:	a2 18       	sub	r10, r2
    1266:	b3 08       	sbc	r11, r3
    1268:	c4 08       	sbc	r12, r4
    126a:	d5 08       	sbc	r13, r5
    126c:	e2 c0       	rjmp	.+452    	; 0x1432 <__umoddi3+0x560>
    126e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1270:	68 96       	adiw	r28, 0x18	; 24
    1272:	ff ae       	std	Y+63, r15	; 0x3f
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f 2c       	mov	r0, r15
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__umoddi3+0x3b0>
    127a:	22 0c       	add	r2, r2
    127c:	33 1c       	adc	r3, r3
    127e:	44 1c       	adc	r4, r4
    1280:	55 1c       	adc	r5, r5
    1282:	0a 94       	dec	r0
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__umoddi3+0x3a8>
    1286:	8a 2d       	mov	r24, r10
    1288:	8f 19       	sub	r24, r15
    128a:	64 01       	movw	r12, r8
    128c:	53 01       	movw	r10, r6
    128e:	08 2e       	mov	r0, r24
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__umoddi3+0x3c8>
    1292:	d6 94       	lsr	r13
    1294:	c7 94       	ror	r12
    1296:	b7 94       	ror	r11
    1298:	a7 94       	ror	r10
    129a:	0a 94       	dec	r0
    129c:	d2 f7       	brpl	.-12     	; 0x1292 <__umoddi3+0x3c0>
    129e:	a4 01       	movw	r20, r8
    12a0:	93 01       	movw	r18, r6
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__umoddi3+0x3da>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	fa 94       	dec	r15
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__umoddi3+0x3d2>
    12b0:	6c 96       	adiw	r28, 0x1c	; 28
    12b2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12b4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12b6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12b8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__umoddi3+0x3f4>
    12be:	96 94       	lsr	r9
    12c0:	87 94       	ror	r8
    12c2:	77 94       	ror	r7
    12c4:	67 94       	ror	r6
    12c6:	8a 95       	dec	r24
    12c8:	d2 f7       	brpl	.-12     	; 0x12be <__umoddi3+0x3ec>
    12ca:	84 01       	movw	r16, r8
    12cc:	73 01       	movw	r14, r6
    12ce:	e2 2a       	or	r14, r18
    12d0:	f3 2a       	or	r15, r19
    12d2:	04 2b       	or	r16, r20
    12d4:	15 2b       	or	r17, r21
    12d6:	ed a6       	std	Y+45, r14	; 0x2d
    12d8:	fe a6       	std	Y+46, r15	; 0x2e
    12da:	0f a7       	std	Y+47, r16	; 0x2f
    12dc:	18 ab       	std	Y+48, r17	; 0x30
    12de:	32 01       	movw	r6, r4
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	b2 01       	movw	r22, r4
    12e6:	a1 01       	movw	r20, r2
    12e8:	60 70       	andi	r22, 0x00	; 0
    12ea:	70 70       	andi	r23, 0x00	; 0
    12ec:	25 96       	adiw	r28, 0x05	; 5
    12ee:	4c af       	std	Y+60, r20	; 0x3c
    12f0:	5d af       	std	Y+61, r21	; 0x3d
    12f2:	6e af       	std	Y+62, r22	; 0x3e
    12f4:	7f af       	std	Y+63, r23	; 0x3f
    12f6:	25 97       	sbiw	r28, 0x05	; 5
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	c6 01       	movw	r24, r12
    130a:	b5 01       	movw	r22, r10
    130c:	a4 01       	movw	r20, r8
    130e:	93 01       	movw	r18, r6
    1310:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	25 96       	adiw	r28, 0x05	; 5
    131a:	2c ad       	ldd	r18, Y+60	; 0x3c
    131c:	3d ad       	ldd	r19, Y+61	; 0x3d
    131e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1320:	5f ad       	ldd	r21, Y+63	; 0x3f
    1322:	25 97       	sbiw	r28, 0x05	; 5
    1324:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	87 01       	movw	r16, r14
    132e:	ff 24       	eor	r15, r15
    1330:	ee 24       	eor	r14, r14
    1332:	ad a4       	ldd	r10, Y+45	; 0x2d
    1334:	be a4       	ldd	r11, Y+46	; 0x2e
    1336:	cf a4       	ldd	r12, Y+47	; 0x2f
    1338:	d8 a8       	ldd	r13, Y+48	; 0x30
    133a:	c6 01       	movw	r24, r12
    133c:	aa 27       	eor	r26, r26
    133e:	bb 27       	eor	r27, r27
    1340:	5c 01       	movw	r10, r24
    1342:	6d 01       	movw	r12, r26
    1344:	ae 28       	or	r10, r14
    1346:	bf 28       	or	r11, r15
    1348:	c0 2a       	or	r12, r16
    134a:	d1 2a       	or	r13, r17
    134c:	a2 16       	cp	r10, r18
    134e:	b3 06       	cpc	r11, r19
    1350:	c4 06       	cpc	r12, r20
    1352:	d5 06       	cpc	r13, r21
    1354:	90 f4       	brcc	.+36     	; 0x137a <__umoddi3+0x4a8>
    1356:	a2 0c       	add	r10, r2
    1358:	b3 1c       	adc	r11, r3
    135a:	c4 1c       	adc	r12, r4
    135c:	d5 1c       	adc	r13, r5
    135e:	a2 14       	cp	r10, r2
    1360:	b3 04       	cpc	r11, r3
    1362:	c4 04       	cpc	r12, r4
    1364:	d5 04       	cpc	r13, r5
    1366:	48 f0       	brcs	.+18     	; 0x137a <__umoddi3+0x4a8>
    1368:	a2 16       	cp	r10, r18
    136a:	b3 06       	cpc	r11, r19
    136c:	c4 06       	cpc	r12, r20
    136e:	d5 06       	cpc	r13, r21
    1370:	20 f4       	brcc	.+8      	; 0x137a <__umoddi3+0x4a8>
    1372:	a2 0c       	add	r10, r2
    1374:	b3 1c       	adc	r11, r3
    1376:	c4 1c       	adc	r12, r4
    1378:	d5 1c       	adc	r13, r5
    137a:	a2 1a       	sub	r10, r18
    137c:	b3 0a       	sbc	r11, r19
    137e:	c4 0a       	sbc	r12, r20
    1380:	d5 0a       	sbc	r13, r21
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    138e:	7b 01       	movw	r14, r22
    1390:	8c 01       	movw	r16, r24
    1392:	c6 01       	movw	r24, r12
    1394:	b5 01       	movw	r22, r10
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ac:	25 97       	sbiw	r28, 0x05	; 5
    13ae:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	87 01       	movw	r16, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	ee 24       	eor	r14, r14
    13bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13be:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c0:	af a5       	ldd	r26, Y+47	; 0x2f
    13c2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13c4:	a0 70       	andi	r26, 0x00	; 0
    13c6:	b0 70       	andi	r27, 0x00	; 0
    13c8:	57 01       	movw	r10, r14
    13ca:	68 01       	movw	r12, r16
    13cc:	a8 2a       	or	r10, r24
    13ce:	b9 2a       	or	r11, r25
    13d0:	ca 2a       	or	r12, r26
    13d2:	db 2a       	or	r13, r27
    13d4:	a2 16       	cp	r10, r18
    13d6:	b3 06       	cpc	r11, r19
    13d8:	c4 06       	cpc	r12, r20
    13da:	d5 06       	cpc	r13, r21
    13dc:	90 f4       	brcc	.+36     	; 0x1402 <__umoddi3+0x530>
    13de:	a2 0c       	add	r10, r2
    13e0:	b3 1c       	adc	r11, r3
    13e2:	c4 1c       	adc	r12, r4
    13e4:	d5 1c       	adc	r13, r5
    13e6:	a2 14       	cp	r10, r2
    13e8:	b3 04       	cpc	r11, r3
    13ea:	c4 04       	cpc	r12, r4
    13ec:	d5 04       	cpc	r13, r5
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <__umoddi3+0x530>
    13f0:	a2 16       	cp	r10, r18
    13f2:	b3 06       	cpc	r11, r19
    13f4:	c4 06       	cpc	r12, r20
    13f6:	d5 06       	cpc	r13, r21
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__umoddi3+0x530>
    13fa:	a2 0c       	add	r10, r2
    13fc:	b3 1c       	adc	r11, r3
    13fe:	c4 1c       	adc	r12, r4
    1400:	d5 1c       	adc	r13, r5
    1402:	6c 96       	adiw	r28, 0x1c	; 28
    1404:	ec ac       	ldd	r14, Y+60	; 0x3c
    1406:	fd ac       	ldd	r15, Y+61	; 0x3d
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	0f ac       	ldd	r0, Y+63	; 0x3f
    1412:	68 97       	sbiw	r28, 0x18	; 24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__umoddi3+0x54c>
    1416:	ee 0c       	add	r14, r14
    1418:	ff 1c       	adc	r15, r15
    141a:	00 1f       	adc	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <__umoddi3+0x544>
    1422:	e9 aa       	std	Y+49, r14	; 0x31
    1424:	fa aa       	std	Y+50, r15	; 0x32
    1426:	0b ab       	std	Y+51, r16	; 0x33
    1428:	1c ab       	std	Y+52, r17	; 0x34
    142a:	a2 1a       	sub	r10, r18
    142c:	b3 0a       	sbc	r11, r19
    142e:	c4 0a       	sbc	r12, r20
    1430:	d5 0a       	sbc	r13, r21
    1432:	32 01       	movw	r6, r4
    1434:	88 24       	eor	r8, r8
    1436:	99 24       	eor	r9, r9
    1438:	b2 01       	movw	r22, r4
    143a:	a1 01       	movw	r20, r2
    143c:	60 70       	andi	r22, 0x00	; 0
    143e:	70 70       	andi	r23, 0x00	; 0
    1440:	29 96       	adiw	r28, 0x09	; 9
    1442:	4c af       	std	Y+60, r20	; 0x3c
    1444:	5d af       	std	Y+61, r21	; 0x3d
    1446:	6e af       	std	Y+62, r22	; 0x3e
    1448:	7f af       	std	Y+63, r23	; 0x3f
    144a:	29 97       	sbiw	r28, 0x09	; 9
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	c6 01       	movw	r24, r12
    145e:	b5 01       	movw	r22, r10
    1460:	a4 01       	movw	r20, r8
    1462:	93 01       	movw	r18, r6
    1464:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	29 96       	adiw	r28, 0x09	; 9
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	29 97       	sbiw	r28, 0x09	; 9
    1478:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a8       	ldd	r10, Y+49	; 0x31
    1488:	ba a8       	ldd	r11, Y+50	; 0x32
    148a:	cb a8       	ldd	r12, Y+51	; 0x33
    148c:	dc a8       	ldd	r13, Y+52	; 0x34
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	57 01       	movw	r10, r14
    1496:	68 01       	movw	r12, r16
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	90 f4       	brcc	.+36     	; 0x14ce <__umoddi3+0x5fc>
    14aa:	a2 0c       	add	r10, r2
    14ac:	b3 1c       	adc	r11, r3
    14ae:	c4 1c       	adc	r12, r4
    14b0:	d5 1c       	adc	r13, r5
    14b2:	a2 14       	cp	r10, r2
    14b4:	b3 04       	cpc	r11, r3
    14b6:	c4 04       	cpc	r12, r4
    14b8:	d5 04       	cpc	r13, r5
    14ba:	48 f0       	brcs	.+18     	; 0x14ce <__umoddi3+0x5fc>
    14bc:	a2 16       	cp	r10, r18
    14be:	b3 06       	cpc	r11, r19
    14c0:	c4 06       	cpc	r12, r20
    14c2:	d5 06       	cpc	r13, r21
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__umoddi3+0x5fc>
    14c6:	a2 0c       	add	r10, r2
    14c8:	b3 1c       	adc	r11, r3
    14ca:	c4 1c       	adc	r12, r4
    14cc:	d5 1c       	adc	r13, r5
    14ce:	a2 1a       	sub	r10, r18
    14d0:	b3 0a       	sbc	r11, r19
    14d2:	c4 0a       	sbc	r12, r20
    14d4:	d5 0a       	sbc	r13, r21
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    14e2:	7b 01       	movw	r14, r22
    14e4:	8c 01       	movw	r16, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	a4 01       	movw	r20, r8
    14ec:	93 01       	movw	r18, r6
    14ee:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	87 01       	movw	r16, r14
    150c:	ff 24       	eor	r15, r15
    150e:	ee 24       	eor	r14, r14
    1510:	89 a9       	ldd	r24, Y+49	; 0x31
    1512:	9a a9       	ldd	r25, Y+50	; 0x32
    1514:	ab a9       	ldd	r26, Y+51	; 0x33
    1516:	bc a9       	ldd	r27, Y+52	; 0x34
    1518:	a0 70       	andi	r26, 0x00	; 0
    151a:	b0 70       	andi	r27, 0x00	; 0
    151c:	e8 2a       	or	r14, r24
    151e:	f9 2a       	or	r15, r25
    1520:	0a 2b       	or	r16, r26
    1522:	1b 2b       	or	r17, r27
    1524:	e2 16       	cp	r14, r18
    1526:	f3 06       	cpc	r15, r19
    1528:	04 07       	cpc	r16, r20
    152a:	15 07       	cpc	r17, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x680>
    152e:	e2 0c       	add	r14, r2
    1530:	f3 1c       	adc	r15, r3
    1532:	04 1d       	adc	r16, r4
    1534:	15 1d       	adc	r17, r5
    1536:	e2 14       	cp	r14, r2
    1538:	f3 04       	cpc	r15, r3
    153a:	04 05       	cpc	r16, r4
    153c:	15 05       	cpc	r17, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x680>
    1540:	e2 16       	cp	r14, r18
    1542:	f3 06       	cpc	r15, r19
    1544:	04 07       	cpc	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x680>
    154a:	e2 0c       	add	r14, r2
    154c:	f3 1c       	adc	r15, r3
    154e:	04 1d       	adc	r16, r4
    1550:	15 1d       	adc	r17, r5
    1552:	e2 1a       	sub	r14, r18
    1554:	f3 0a       	sbc	r15, r19
    1556:	04 0b       	sbc	r16, r20
    1558:	15 0b       	sbc	r17, r21
    155a:	d8 01       	movw	r26, r16
    155c:	c7 01       	movw	r24, r14
    155e:	09 ac       	ldd	r0, Y+57	; 0x39
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__umoddi3+0x698>
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__umoddi3+0x690>
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	ab 8b       	std	Y+19, r26	; 0x13
    1574:	bc 8b       	std	Y+20, r27	; 0x14
    1576:	1d 8a       	std	Y+21, r1	; 0x15
    1578:	1e 8a       	std	Y+22, r1	; 0x16
    157a:	1f 8a       	std	Y+23, r1	; 0x17
    157c:	18 8e       	std	Y+24, r1	; 0x18
    157e:	28 2f       	mov	r18, r24
    1580:	3a 89       	ldd	r19, Y+18	; 0x12
    1582:	4b 89       	ldd	r20, Y+19	; 0x13
    1584:	5c 89       	ldd	r21, Y+20	; 0x14
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	0c c3       	rjmp	.+1560   	; 0x1ba2 <__umoddi3+0xcd0>
    158a:	6a 14       	cp	r6, r10
    158c:	7b 04       	cpc	r7, r11
    158e:	8c 04       	cpc	r8, r12
    1590:	9d 04       	cpc	r9, r13
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__umoddi3+0x6c4>
    1594:	09 c3       	rjmp	.+1554   	; 0x1ba8 <__umoddi3+0xcd6>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	a0 16       	cp	r10, r16
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	b0 06       	cpc	r11, r16
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	c0 06       	cpc	r12, r16
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	d0 06       	cpc	r13, r16
    15a6:	88 f4       	brcc	.+34     	; 0x15ca <__umoddi3+0x6f8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	a1 16       	cp	r10, r17
    15ac:	b1 04       	cpc	r11, r1
    15ae:	c1 04       	cpc	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__umoddi3+0x6f0>
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <__umoddi3+0x6f0>
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	e2 2e       	mov	r14, r18
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <__umoddi3+0x720>
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <__umoddi3+0x720>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	a4 16       	cp	r10, r20
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	b4 06       	cpc	r11, r20
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	c4 06       	cpc	r12, r20
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	d4 06       	cpc	r13, r20
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__umoddi3+0x716>
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	e9 2e       	mov	r14, r25
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 2d       	mov	r16, r1
    15e4:	11 2d       	mov	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__umoddi3+0x720>
    15e8:	80 e1       	ldi	r24, 0x10	; 16
    15ea:	e8 2e       	mov	r14, r24
    15ec:	f1 2c       	mov	r15, r1
    15ee:	01 2d       	mov	r16, r1
    15f0:	11 2d       	mov	r17, r1
    15f2:	d6 01       	movw	r26, r12
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 2c       	mov	r0, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__umoddi3+0x730>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	0a 94       	dec	r0
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__umoddi3+0x728>
    1606:	8b 57       	subi	r24, 0x7B	; 123
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	a0 0b       	sbc	r26, r16
    161c:	b1 0b       	sbc	r27, r17
    161e:	82 1b       	sub	r24, r18
    1620:	91 09       	sbc	r25, r1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <__umoddi3+0x75e>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <__umoddi3+0x7fc>
    1630:	a6 14       	cp	r10, r6
    1632:	b7 04       	cpc	r11, r7
    1634:	c8 04       	cpc	r12, r8
    1636:	d9 04       	cpc	r13, r9
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__umoddi3+0x77e>
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	ec ac       	ldd	r14, Y+60	; 0x3c
    163e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	1f ad       	ldd	r17, Y+63	; 0x3f
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	e2 14       	cp	r14, r2
    1648:	f3 04       	cpc	r15, r3
    164a:	04 05       	cpc	r16, r4
    164c:	15 05       	cpc	r17, r5
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__umoddi3+0x7d8>
    1650:	6c 96       	adiw	r28, 0x1c	; 28
    1652:	ec ac       	ldd	r14, Y+60	; 0x3c
    1654:	fd ac       	ldd	r15, Y+61	; 0x3d
    1656:	0e ad       	ldd	r16, Y+62	; 0x3e
    1658:	1f ad       	ldd	r17, Y+63	; 0x3f
    165a:	6c 97       	sbiw	r28, 0x1c	; 28
    165c:	e2 18       	sub	r14, r2
    165e:	f3 08       	sbc	r15, r3
    1660:	04 09       	sbc	r16, r4
    1662:	15 09       	sbc	r17, r5
    1664:	a4 01       	movw	r20, r8
    1666:	93 01       	movw	r18, r6
    1668:	2a 19       	sub	r18, r10
    166a:	3b 09       	sbc	r19, r11
    166c:	4c 09       	sbc	r20, r12
    166e:	5d 09       	sbc	r21, r13
    1670:	aa 24       	eor	r10, r10
    1672:	bb 24       	eor	r11, r11
    1674:	65 01       	movw	r12, r10
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	6c ad       	ldd	r22, Y+60	; 0x3c
    167a:	7d ad       	ldd	r23, Y+61	; 0x3d
    167c:	8e ad       	ldd	r24, Y+62	; 0x3e
    167e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	6e 15       	cp	r22, r14
    1684:	7f 05       	cpc	r23, r15
    1686:	80 07       	cpc	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	28 f4       	brcc	.+10     	; 0x1696 <__umoddi3+0x7c4>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	ab 2e       	mov	r10, r27
    1690:	b1 2c       	mov	r11, r1
    1692:	c1 2c       	mov	r12, r1
    1694:	d1 2c       	mov	r13, r1
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	8a 19       	sub	r24, r10
    169c:	9b 09       	sbc	r25, r11
    169e:	ac 09       	sbc	r26, r12
    16a0:	bd 09       	sbc	r27, r13
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
    16aa:	e9 8a       	std	Y+17, r14	; 0x11
    16ac:	fa 8a       	std	Y+18, r15	; 0x12
    16ae:	0b 8b       	std	Y+19, r16	; 0x13
    16b0:	1c 8b       	std	Y+20, r17	; 0x14
    16b2:	6d a8       	ldd	r6, Y+53	; 0x35
    16b4:	7e a8       	ldd	r7, Y+54	; 0x36
    16b6:	8f a8       	ldd	r8, Y+55	; 0x37
    16b8:	98 ac       	ldd	r9, Y+56	; 0x38
    16ba:	6d 8a       	std	Y+21, r6	; 0x15
    16bc:	7e 8a       	std	Y+22, r7	; 0x16
    16be:	8f 8a       	std	Y+23, r8	; 0x17
    16c0:	98 8e       	std	Y+24, r9	; 0x18
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3a 89       	ldd	r19, Y+18	; 0x12
    16c6:	4b 89       	ldd	r20, Y+19	; 0x13
    16c8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	6a c2       	rjmp	.+1236   	; 0x1ba2 <__umoddi3+0xcd0>
    16ce:	67 96       	adiw	r28, 0x17	; 23
    16d0:	8f af       	std	Y+63, r24	; 0x3f
    16d2:	67 97       	sbiw	r28, 0x17	; 23
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	08 2e       	mov	r0, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__umoddi3+0x812>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	0a 94       	dec	r0
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__umoddi3+0x80a>
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	aa 2e       	mov	r10, r26
    16ec:	a8 1a       	sub	r10, r24
    16ee:	66 96       	adiw	r28, 0x16	; 22
    16f0:	af ae       	std	Y+63, r10	; 0x3f
    16f2:	66 97       	sbiw	r28, 0x16	; 22
    16f4:	d2 01       	movw	r26, r4
    16f6:	c1 01       	movw	r24, r2
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__umoddi3+0x830>
    16fa:	b6 95       	lsr	r27
    16fc:	a7 95       	ror	r26
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	aa 94       	dec	r10
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__umoddi3+0x828>
    1706:	6c 01       	movw	r12, r24
    1708:	7d 01       	movw	r14, r26
    170a:	c2 2a       	or	r12, r18
    170c:	d3 2a       	or	r13, r19
    170e:	e4 2a       	or	r14, r20
    1710:	f5 2a       	or	r15, r21
    1712:	c9 a6       	std	Y+41, r12	; 0x29
    1714:	da a6       	std	Y+42, r13	; 0x2a
    1716:	eb a6       	std	Y+43, r14	; 0x2b
    1718:	fc a6       	std	Y+44, r15	; 0x2c
    171a:	82 01       	movw	r16, r4
    171c:	71 01       	movw	r14, r2
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	67 97       	sbiw	r28, 0x17	; 23
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x85c>
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x854>
    1732:	ed a2       	std	Y+37, r14	; 0x25
    1734:	fe a2       	std	Y+38, r15	; 0x26
    1736:	0f a3       	std	Y+39, r16	; 0x27
    1738:	18 a7       	std	Y+40, r17	; 0x28
    173a:	64 01       	movw	r12, r8
    173c:	53 01       	movw	r10, r6
    173e:	66 96       	adiw	r28, 0x16	; 22
    1740:	0f ac       	ldd	r0, Y+63	; 0x3f
    1742:	66 97       	sbiw	r28, 0x16	; 22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__umoddi3+0x87c>
    1746:	d6 94       	lsr	r13
    1748:	c7 94       	ror	r12
    174a:	b7 94       	ror	r11
    174c:	a7 94       	ror	r10
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__umoddi3+0x874>
    1752:	a4 01       	movw	r20, r8
    1754:	93 01       	movw	r18, r6
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f ac       	ldd	r0, Y+63	; 0x3f
    175a:	67 97       	sbiw	r28, 0x17	; 23
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__umoddi3+0x894>
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	0a 94       	dec	r0
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__umoddi3+0x88c>
    176a:	6c 96       	adiw	r28, 0x1c	; 28
    176c:	8c ad       	ldd	r24, Y+60	; 0x3c
    176e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1770:	ae ad       	ldd	r26, Y+62	; 0x3e
    1772:	bf ad       	ldd	r27, Y+63	; 0x3f
    1774:	6c 97       	sbiw	r28, 0x1c	; 28
    1776:	66 96       	adiw	r28, 0x16	; 22
    1778:	0f ac       	ldd	r0, Y+63	; 0x3f
    177a:	66 97       	sbiw	r28, 0x16	; 22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <__umoddi3+0x8b4>
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	0a 94       	dec	r0
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__umoddi3+0x8ac>
    178a:	3c 01       	movw	r6, r24
    178c:	4d 01       	movw	r8, r26
    178e:	62 2a       	or	r6, r18
    1790:	73 2a       	or	r7, r19
    1792:	84 2a       	or	r8, r20
    1794:	95 2a       	or	r9, r21
    1796:	69 a2       	std	Y+33, r6	; 0x21
    1798:	7a a2       	std	Y+34, r7	; 0x22
    179a:	8b a2       	std	Y+35, r8	; 0x23
    179c:	9c a2       	std	Y+36, r9	; 0x24
    179e:	6c 96       	adiw	r28, 0x1c	; 28
    17a0:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a2:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	67 96       	adiw	r28, 0x17	; 23
    17ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ae:	67 97       	sbiw	r28, 0x17	; 23
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__umoddi3+0x8e8>
    17b2:	ee 0c       	add	r14, r14
    17b4:	ff 1c       	adc	r15, r15
    17b6:	00 1f       	adc	r16, r16
    17b8:	11 1f       	adc	r17, r17
    17ba:	0a 94       	dec	r0
    17bc:	d2 f7       	brpl	.-12     	; 0x17b2 <__umoddi3+0x8e0>
    17be:	ed 8e       	std	Y+29, r14	; 0x1d
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	0f 8f       	std	Y+31, r16	; 0x1f
    17c4:	18 a3       	std	Y+32, r17	; 0x20
    17c6:	49 a5       	ldd	r20, Y+41	; 0x29
    17c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    17cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ce:	3b 01       	movw	r6, r22
    17d0:	88 24       	eor	r8, r8
    17d2:	99 24       	eor	r9, r9
    17d4:	60 70       	andi	r22, 0x00	; 0
    17d6:	70 70       	andi	r23, 0x00	; 0
    17d8:	2d 96       	adiw	r28, 0x0d	; 13
    17da:	4c af       	std	Y+60, r20	; 0x3c
    17dc:	5d af       	std	Y+61, r21	; 0x3d
    17de:	6e af       	std	Y+62, r22	; 0x3e
    17e0:	7f af       	std	Y+63, r23	; 0x3f
    17e2:	2d 97       	sbiw	r28, 0x0d	; 13
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	c6 01       	movw	r24, r12
    17f6:	b5 01       	movw	r22, r10
    17f8:	a4 01       	movw	r20, r8
    17fa:	93 01       	movw	r18, r6
    17fc:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    1800:	c9 01       	movw	r24, r18
    1802:	da 01       	movw	r26, r20
    1804:	1c 01       	movw	r2, r24
    1806:	2d 01       	movw	r4, r26
    1808:	c2 01       	movw	r24, r4
    180a:	b1 01       	movw	r22, r2
    180c:	2d 96       	adiw	r28, 0x0d	; 13
    180e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1810:	3d ad       	ldd	r19, Y+61	; 0x3d
    1812:	4e ad       	ldd	r20, Y+62	; 0x3e
    1814:	5f ad       	ldd	r21, Y+63	; 0x3f
    1816:	2d 97       	sbiw	r28, 0x0d	; 13
    1818:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	87 01       	movw	r16, r14
    1822:	ff 24       	eor	r15, r15
    1824:	ee 24       	eor	r14, r14
    1826:	a9 a0       	ldd	r10, Y+33	; 0x21
    1828:	ba a0       	ldd	r11, Y+34	; 0x22
    182a:	cb a0       	ldd	r12, Y+35	; 0x23
    182c:	dc a0       	ldd	r13, Y+36	; 0x24
    182e:	c6 01       	movw	r24, r12
    1830:	aa 27       	eor	r26, r26
    1832:	bb 27       	eor	r27, r27
    1834:	57 01       	movw	r10, r14
    1836:	68 01       	movw	r12, r16
    1838:	a8 2a       	or	r10, r24
    183a:	b9 2a       	or	r11, r25
    183c:	ca 2a       	or	r12, r26
    183e:	db 2a       	or	r13, r27
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	00 f5       	brcc	.+64     	; 0x188a <__umoddi3+0x9b8>
    184a:	08 94       	sec
    184c:	21 08       	sbc	r2, r1
    184e:	31 08       	sbc	r3, r1
    1850:	41 08       	sbc	r4, r1
    1852:	51 08       	sbc	r5, r1
    1854:	e9 a4       	ldd	r14, Y+41	; 0x29
    1856:	fa a4       	ldd	r15, Y+42	; 0x2a
    1858:	0b a5       	ldd	r16, Y+43	; 0x2b
    185a:	1c a5       	ldd	r17, Y+44	; 0x2c
    185c:	ae 0c       	add	r10, r14
    185e:	bf 1c       	adc	r11, r15
    1860:	c0 1e       	adc	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	ae 14       	cp	r10, r14
    1866:	bf 04       	cpc	r11, r15
    1868:	c0 06       	cpc	r12, r16
    186a:	d1 06       	cpc	r13, r17
    186c:	70 f0       	brcs	.+28     	; 0x188a <__umoddi3+0x9b8>
    186e:	a2 16       	cp	r10, r18
    1870:	b3 06       	cpc	r11, r19
    1872:	c4 06       	cpc	r12, r20
    1874:	d5 06       	cpc	r13, r21
    1876:	48 f4       	brcc	.+18     	; 0x188a <__umoddi3+0x9b8>
    1878:	08 94       	sec
    187a:	21 08       	sbc	r2, r1
    187c:	31 08       	sbc	r3, r1
    187e:	41 08       	sbc	r4, r1
    1880:	51 08       	sbc	r5, r1
    1882:	ae 0c       	add	r10, r14
    1884:	bf 1c       	adc	r11, r15
    1886:	c0 1e       	adc	r12, r16
    1888:	d1 1e       	adc	r13, r17
    188a:	a2 1a       	sub	r10, r18
    188c:	b3 0a       	sbc	r11, r19
    188e:	c4 0a       	sbc	r12, r20
    1890:	d5 0a       	sbc	r13, r21
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	c6 01       	movw	r24, r12
    18a4:	b5 01       	movw	r22, r10
    18a6:	a4 01       	movw	r20, r8
    18a8:	93 01       	movw	r18, r6
    18aa:	0e 94 7d 3a 	call	0x74fa	; 0x74fa <__udivmodsi4>
    18ae:	c9 01       	movw	r24, r18
    18b0:	da 01       	movw	r26, r20
    18b2:	3c 01       	movw	r6, r24
    18b4:	4d 01       	movw	r8, r26
    18b6:	c4 01       	movw	r24, r8
    18b8:	b3 01       	movw	r22, r6
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    18be:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c4:	2d 97       	sbiw	r28, 0x0d	; 13
    18c6:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	87 01       	movw	r16, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	ee 24       	eor	r14, r14
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	ab a1       	ldd	r26, Y+35	; 0x23
    18da:	bc a1       	ldd	r27, Y+36	; 0x24
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	57 01       	movw	r10, r14
    18e2:	68 01       	movw	r12, r16
    18e4:	a8 2a       	or	r10, r24
    18e6:	b9 2a       	or	r11, r25
    18e8:	ca 2a       	or	r12, r26
    18ea:	db 2a       	or	r13, r27
    18ec:	a2 16       	cp	r10, r18
    18ee:	b3 06       	cpc	r11, r19
    18f0:	c4 06       	cpc	r12, r20
    18f2:	d5 06       	cpc	r13, r21
    18f4:	00 f5       	brcc	.+64     	; 0x1936 <__umoddi3+0xa64>
    18f6:	08 94       	sec
    18f8:	61 08       	sbc	r6, r1
    18fa:	71 08       	sbc	r7, r1
    18fc:	81 08       	sbc	r8, r1
    18fe:	91 08       	sbc	r9, r1
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	a6 0e       	add	r10, r22
    190a:	b7 1e       	adc	r11, r23
    190c:	c8 1e       	adc	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	a6 16       	cp	r10, r22
    1912:	b7 06       	cpc	r11, r23
    1914:	c8 06       	cpc	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__umoddi3+0xa64>
    191a:	a2 16       	cp	r10, r18
    191c:	b3 06       	cpc	r11, r19
    191e:	c4 06       	cpc	r12, r20
    1920:	d5 06       	cpc	r13, r21
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__umoddi3+0xa64>
    1924:	08 94       	sec
    1926:	61 08       	sbc	r6, r1
    1928:	71 08       	sbc	r7, r1
    192a:	81 08       	sbc	r8, r1
    192c:	91 08       	sbc	r9, r1
    192e:	a6 0e       	add	r10, r22
    1930:	b7 1e       	adc	r11, r23
    1932:	c8 1e       	adc	r12, r24
    1934:	d9 1e       	adc	r13, r25
    1936:	d6 01       	movw	r26, r12
    1938:	c5 01       	movw	r24, r10
    193a:	82 1b       	sub	r24, r18
    193c:	93 0b       	sbc	r25, r19
    193e:	a4 0b       	sbc	r26, r20
    1940:	b5 0b       	sbc	r27, r21
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
    194a:	d1 01       	movw	r26, r2
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	84 01       	movw	r16, r8
    1952:	73 01       	movw	r14, r6
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	a4 2e       	mov	r10, r20
    1960:	4f ef       	ldi	r20, 0xFF	; 255
    1962:	b4 2e       	mov	r11, r20
    1964:	c1 2c       	mov	r12, r1
    1966:	d1 2c       	mov	r13, r1
    1968:	ae 20       	and	r10, r14
    196a:	bf 20       	and	r11, r15
    196c:	c0 22       	and	r12, r16
    196e:	d1 22       	and	r13, r17
    1970:	78 01       	movw	r14, r16
    1972:	00 27       	eor	r16, r16
    1974:	11 27       	eor	r17, r17
    1976:	6d a0       	ldd	r6, Y+37	; 0x25
    1978:	7e a0       	ldd	r7, Y+38	; 0x26
    197a:	8f a0       	ldd	r8, Y+39	; 0x27
    197c:	98 a4       	ldd	r9, Y+40	; 0x28
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	64 22       	and	r6, r20
    1988:	75 22       	and	r7, r21
    198a:	86 22       	and	r8, r22
    198c:	97 22       	and	r9, r23
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	af a1       	ldd	r26, Y+39	; 0x27
    1994:	b8 a5       	ldd	r27, Y+40	; 0x28
    1996:	bd 01       	movw	r22, r26
    1998:	88 27       	eor	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	65 96       	adiw	r28, 0x15	; 21
    199e:	6c af       	std	Y+60, r22	; 0x3c
    19a0:	7d af       	std	Y+61, r23	; 0x3d
    19a2:	8e af       	std	Y+62, r24	; 0x3e
    19a4:	9f af       	std	Y+63, r25	; 0x3f
    19a6:	65 97       	sbiw	r28, 0x15	; 21
    19a8:	c6 01       	movw	r24, r12
    19aa:	b5 01       	movw	r22, r10
    19ac:	a4 01       	movw	r20, r8
    19ae:	93 01       	movw	r18, r6
    19b0:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c af       	std	Y+60, r22	; 0x3c
    19b8:	7d af       	std	Y+61, r23	; 0x3d
    19ba:	8e af       	std	Y+62, r24	; 0x3e
    19bc:	9f af       	std	Y+63, r25	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c6 01       	movw	r24, r12
    19c2:	b5 01       	movw	r22, r10
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    19cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ce:	65 97       	sbiw	r28, 0x15	; 21
    19d0:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    19d4:	1b 01       	movw	r2, r22
    19d6:	2c 01       	movw	r4, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	a4 01       	movw	r20, r8
    19de:	93 01       	movw	r18, r6
    19e0:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    19e4:	5b 01       	movw	r10, r22
    19e6:	6c 01       	movw	r12, r24
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	65 96       	adiw	r28, 0x15	; 21
    19ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    19f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f6:	65 97       	sbiw	r28, 0x15	; 21
    19f8:	0e 94 5e 3a 	call	0x74bc	; 0x74bc <__mulsi3>
    19fc:	7b 01       	movw	r14, r22
    19fe:	8c 01       	movw	r16, r24
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	22 0d       	add	r18, r2
    1a06:	33 1d       	adc	r19, r3
    1a08:	44 1d       	adc	r20, r4
    1a0a:	55 1d       	adc	r21, r5
    1a0c:	61 96       	adiw	r28, 0x11	; 17
    1a0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	c4 01       	movw	r24, r8
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	28 0f       	add	r18, r24
    1a20:	39 1f       	adc	r19, r25
    1a22:	4a 1f       	adc	r20, r26
    1a24:	5b 1f       	adc	r21, r27
    1a26:	2a 15       	cp	r18, r10
    1a28:	3b 05       	cpc	r19, r11
    1a2a:	4c 05       	cpc	r20, r12
    1a2c:	5d 05       	cpc	r21, r13
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__umoddi3+0xb70>
    1a30:	81 2c       	mov	r8, r1
    1a32:	91 2c       	mov	r9, r1
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	ae 2e       	mov	r10, r30
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	e8 0c       	add	r14, r8
    1a3c:	f9 1c       	adc	r15, r9
    1a3e:	0a 1d       	adc	r16, r10
    1a40:	1b 1d       	adc	r17, r11
    1a42:	ca 01       	movw	r24, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
    1a48:	57 01       	movw	r10, r14
    1a4a:	68 01       	movw	r12, r16
    1a4c:	a8 0e       	add	r10, r24
    1a4e:	b9 1e       	adc	r11, r25
    1a50:	ca 1e       	adc	r12, r26
    1a52:	db 1e       	adc	r13, r27
    1a54:	a9 01       	movw	r20, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	22 27       	eor	r18, r18
    1a5a:	61 96       	adiw	r28, 0x11	; 17
    1a5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a64:	61 97       	sbiw	r28, 0x11	; 17
    1a66:	a0 70       	andi	r26, 0x00	; 0
    1a68:	b0 70       	andi	r27, 0x00	; 0
    1a6a:	28 0f       	add	r18, r24
    1a6c:	39 1f       	adc	r19, r25
    1a6e:	4a 1f       	adc	r20, r26
    1a70:	5b 1f       	adc	r21, r27
    1a72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a76:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a78:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	70 f0       	brcs	.+28     	; 0x1aa0 <__umoddi3+0xbce>
    1a84:	ae 14       	cp	r10, r14
    1a86:	bf 04       	cpc	r11, r15
    1a88:	c0 06       	cpc	r12, r16
    1a8a:	d1 06       	cpc	r13, r17
    1a8c:	69 f5       	brne	.+90     	; 0x1ae8 <__umoddi3+0xc16>
    1a8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	20 f5       	brcc	.+72     	; 0x1ae8 <__umoddi3+0xc16>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	6d a0       	ldd	r6, Y+37	; 0x25
    1aa6:	7e a0       	ldd	r7, Y+38	; 0x26
    1aa8:	8f a0       	ldd	r8, Y+39	; 0x27
    1aaa:	98 a4       	ldd	r9, Y+40	; 0x28
    1aac:	86 19       	sub	r24, r6
    1aae:	97 09       	sbc	r25, r7
    1ab0:	a8 09       	sbc	r26, r8
    1ab2:	b9 09       	sbc	r27, r9
    1ab4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ab6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1ab8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aba:	1c a5       	ldd	r17, Y+44	; 0x2c
    1abc:	ae 18       	sub	r10, r14
    1abe:	bf 08       	sbc	r11, r15
    1ac0:	c0 0a       	sbc	r12, r16
    1ac2:	d1 0a       	sbc	r13, r17
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	87 01       	movw	r16, r14
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	4a 07       	cpc	r20, r26
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__umoddi3+0xc0c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	e2 2e       	mov	r14, r18
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	01 2d       	mov	r16, r1
    1adc:	11 2d       	mov	r17, r1
    1ade:	ae 18       	sub	r10, r14
    1ae0:	bf 08       	sbc	r11, r15
    1ae2:	c0 0a       	sbc	r12, r16
    1ae4:	d1 0a       	sbc	r13, r17
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__umoddi3+0xc1a>
    1ae8:	da 01       	movw	r26, r20
    1aea:	c9 01       	movw	r24, r18
    1aec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1aee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1af0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1af2:	98 a0       	ldd	r9, Y+32	; 0x20
    1af4:	68 1a       	sub	r6, r24
    1af6:	79 0a       	sbc	r7, r25
    1af8:	8a 0a       	sbc	r8, r26
    1afa:	9b 0a       	sbc	r9, r27
    1afc:	49 8d       	ldd	r20, Y+25	; 0x19
    1afe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b04:	4a 19       	sub	r20, r10
    1b06:	5b 09       	sbc	r21, r11
    1b08:	6c 09       	sbc	r22, r12
    1b0a:	7d 09       	sbc	r23, r13
    1b0c:	5a 01       	movw	r10, r20
    1b0e:	6b 01       	movw	r12, r22
    1b10:	22 24       	eor	r2, r2
    1b12:	33 24       	eor	r3, r3
    1b14:	21 01       	movw	r4, r2
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	66 15       	cp	r22, r6
    1b20:	77 05       	cpc	r23, r7
    1b22:	88 05       	cpc	r24, r8
    1b24:	99 05       	cpc	r25, r9
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__umoddi3+0xc60>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	28 2e       	mov	r2, r24
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	41 2c       	mov	r4, r1
    1b30:	51 2c       	mov	r5, r1
    1b32:	86 01       	movw	r16, r12
    1b34:	75 01       	movw	r14, r10
    1b36:	e2 18       	sub	r14, r2
    1b38:	f3 08       	sbc	r15, r3
    1b3a:	04 09       	sbc	r16, r4
    1b3c:	15 09       	sbc	r17, r5
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__umoddi3+0xc80>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__umoddi3+0xc78>
    1b56:	d4 01       	movw	r26, r8
    1b58:	c3 01       	movw	r24, r6
    1b5a:	67 96       	adiw	r28, 0x17	; 23
    1b5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5e:	67 97       	sbiw	r28, 0x17	; 23
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__umoddi3+0xc98>
    1b62:	b6 95       	lsr	r27
    1b64:	a7 95       	ror	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	0a 94       	dec	r0
    1b6c:	d2 f7       	brpl	.-12     	; 0x1b62 <__umoddi3+0xc90>
    1b6e:	28 2b       	or	r18, r24
    1b70:	39 2b       	or	r19, r25
    1b72:	4a 2b       	or	r20, r26
    1b74:	5b 2b       	or	r21, r27
    1b76:	29 8b       	std	Y+17, r18	; 0x11
    1b78:	3a 8b       	std	Y+18, r19	; 0x12
    1b7a:	4b 8b       	std	Y+19, r20	; 0x13
    1b7c:	5c 8b       	std	Y+20, r21	; 0x14
    1b7e:	67 96       	adiw	r28, 0x17	; 23
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	67 97       	sbiw	r28, 0x17	; 23
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__umoddi3+0xcbc>
    1b86:	16 95       	lsr	r17
    1b88:	07 95       	ror	r16
    1b8a:	f7 94       	ror	r15
    1b8c:	e7 94       	ror	r14
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__umoddi3+0xcb4>
    1b92:	ed 8a       	std	Y+21, r14	; 0x15
    1b94:	fe 8a       	std	Y+22, r15	; 0x16
    1b96:	0f 8b       	std	Y+23, r16	; 0x17
    1b98:	18 8f       	std	Y+24, r17	; 0x18
    1b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba0:	6e 2d       	mov	r22, r14
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	c5 5a       	subi	r28, 0xA5	; 165
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	e2 e1       	ldi	r30, 0x12	; 18
    1bae:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <__epilogue_restores__>

00001bb2 <_fpadd_parts>:
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ef ed       	ldi	r30, 0xDF	; 223
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	0c 94 9f 3a 	jmp	0x753e	; 0x753e <__prologue_saves__>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	fa 01       	movw	r30, r20
    1bc4:	9c 91       	ld	r25, X
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_fpadd_parts+0x1a>
    1bca:	39 c1       	rjmp	.+626    	; 0x1e3e <_fpadd_parts+0x28c>
    1bcc:	eb 01       	movw	r28, r22
    1bce:	88 81       	ld	r24, Y
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_fpadd_parts+0x24>
    1bd4:	33 c1       	rjmp	.+614    	; 0x1e3c <_fpadd_parts+0x28a>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <_fpadd_parts+0x42>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_fpadd_parts+0x2e>
    1bde:	2f c1       	rjmp	.+606    	; 0x1e3e <_fpadd_parts+0x28c>
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	9c 91       	ld	r25, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_fpadd_parts+0x3c>
    1bec:	28 c1       	rjmp	.+592    	; 0x1e3e <_fpadd_parts+0x28c>
    1bee:	ad e7       	ldi	r26, 0x7D	; 125
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	25 c1       	rjmp	.+586    	; 0x1e3e <_fpadd_parts+0x28c>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <_fpadd_parts+0x48>
    1bf8:	21 c1       	rjmp	.+578    	; 0x1e3c <_fpadd_parts+0x28a>
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	a9 f4       	brne	.+42     	; 0x1c28 <_fpadd_parts+0x76>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x52>
    1c02:	1d c1       	rjmp	.+570    	; 0x1e3e <_fpadd_parts+0x28c>
    1c04:	9a 01       	movw	r18, r20
    1c06:	ad 01       	movw	r20, r26
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	09 90       	ld	r0, Y+
    1c0e:	ae 01       	movw	r20, r28
    1c10:	e9 01       	movw	r28, r18
    1c12:	09 92       	st	Y+, r0
    1c14:	9e 01       	movw	r18, r28
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <_fpadd_parts+0x58>
    1c1a:	e2 01       	movw	r28, r4
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	9c 91       	ld	r25, X
    1c22:	89 23       	and	r24, r25
    1c24:	81 83       	std	Z+1, r24	; 0x01
    1c26:	08 c1       	rjmp	.+528    	; 0x1e38 <_fpadd_parts+0x286>
    1c28:	92 30       	cpi	r25, 0x02	; 2
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_fpadd_parts+0x7c>
    1c2c:	07 c1       	rjmp	.+526    	; 0x1e3c <_fpadd_parts+0x28a>
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	2d 90       	ld	r2, X+
    1c32:	3c 90       	ld	r3, X
    1c34:	13 97       	sbiw	r26, 0x03	; 3
    1c36:	eb 01       	movw	r28, r22
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	ad 90       	ld	r10, X+
    1c40:	bd 90       	ld	r11, X+
    1c42:	cd 90       	ld	r12, X+
    1c44:	dc 90       	ld	r13, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	ec 80       	ldd	r14, Y+4	; 0x04
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c50:	91 01       	movw	r18, r2
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	b9 01       	movw	r22, r18
    1c58:	37 ff       	sbrs	r19, 7
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <_fpadd_parts+0xb2>
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	60 32       	cpi	r22, 0x20	; 32
    1c66:	71 05       	cpc	r23, r1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_fpadd_parts+0xba>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_fpadd_parts+0x17c>
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	6c f5       	brge	.+90     	; 0x1ccc <_fpadd_parts+0x11a>
    1c72:	37 01       	movw	r6, r14
    1c74:	48 01       	movw	r8, r16
    1c76:	06 2e       	mov	r0, r22
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_fpadd_parts+0xd0>
    1c7a:	96 94       	lsr	r9
    1c7c:	87 94       	ror	r8
    1c7e:	77 94       	ror	r7
    1c80:	67 94       	ror	r6
    1c82:	0a 94       	dec	r0
    1c84:	d2 f7       	brpl	.-12     	; 0x1c7a <_fpadd_parts+0xc8>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_fpadd_parts+0xe6>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	6a 95       	dec	r22
    1c9a:	d2 f7       	brpl	.-12     	; 0x1c90 <_fpadd_parts+0xde>
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	30 40       	sbci	r19, 0x00	; 0
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	2e 21       	and	r18, r14
    1ca6:	3f 21       	and	r19, r15
    1ca8:	40 23       	and	r20, r16
    1caa:	51 23       	and	r21, r17
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <_fpadd_parts+0x10c>
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	79 01       	movw	r14, r18
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e6 28       	or	r14, r6
    1cc4:	f7 28       	or	r15, r7
    1cc6:	08 29       	or	r16, r8
    1cc8:	19 29       	or	r17, r9
    1cca:	3c c0       	rjmp	.+120    	; 0x1d44 <_fpadd_parts+0x192>
    1ccc:	23 2b       	or	r18, r19
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <_fpadd_parts+0x192>
    1cd0:	26 0e       	add	r2, r22
    1cd2:	37 1e       	adc	r3, r23
    1cd4:	35 01       	movw	r6, r10
    1cd6:	46 01       	movw	r8, r12
    1cd8:	06 2e       	mov	r0, r22
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_fpadd_parts+0x132>
    1cdc:	96 94       	lsr	r9
    1cde:	87 94       	ror	r8
    1ce0:	77 94       	ror	r7
    1ce2:	67 94       	ror	r6
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <_fpadd_parts+0x12a>
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_fpadd_parts+0x148>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <_fpadd_parts+0x140>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	2a 21       	and	r18, r10
    1d08:	3b 21       	and	r19, r11
    1d0a:	4c 21       	and	r20, r12
    1d0c:	5d 21       	and	r21, r13
    1d0e:	21 15       	cp	r18, r1
    1d10:	31 05       	cpc	r19, r1
    1d12:	41 05       	cpc	r20, r1
    1d14:	51 05       	cpc	r21, r1
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_fpadd_parts+0x16e>
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	59 01       	movw	r10, r18
    1d22:	6a 01       	movw	r12, r20
    1d24:	a6 28       	or	r10, r6
    1d26:	b7 28       	or	r11, r7
    1d28:	c8 28       	or	r12, r8
    1d2a:	d9 28       	or	r13, r9
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <_fpadd_parts+0x192>
    1d2e:	82 15       	cp	r24, r2
    1d30:	93 05       	cpc	r25, r3
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <_fpadd_parts+0x18c>
    1d34:	1c 01       	movw	r2, r24
    1d36:	aa 24       	eor	r10, r10
    1d38:	bb 24       	eor	r11, r11
    1d3a:	65 01       	movw	r12, r10
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_fpadd_parts+0x192>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 91       	ld	r25, X
    1d48:	d2 01       	movw	r26, r4
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	8c 91       	ld	r24, X
    1d4e:	98 17       	cp	r25, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_fpadd_parts+0x1a2>
    1d52:	45 c0       	rjmp	.+138    	; 0x1dde <_fpadd_parts+0x22c>
    1d54:	99 23       	and	r25, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <_fpadd_parts+0x1b4>
    1d58:	a8 01       	movw	r20, r16
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2a 19       	sub	r18, r10
    1d5e:	3b 09       	sbc	r19, r11
    1d60:	4c 09       	sbc	r20, r12
    1d62:	5d 09       	sbc	r21, r13
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <_fpadd_parts+0x1c0>
    1d66:	a6 01       	movw	r20, r12
    1d68:	95 01       	movw	r18, r10
    1d6a:	2e 19       	sub	r18, r14
    1d6c:	3f 09       	sbc	r19, r15
    1d6e:	40 0b       	sbc	r20, r16
    1d70:	51 0b       	sbc	r21, r17
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <_fpadd_parts+0x1d4>
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	33 82       	std	Z+3, r3	; 0x03
    1d7a:	22 82       	std	Z+2, r2	; 0x02
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	46 83       	std	Z+6, r20	; 0x06
    1d82:	57 83       	std	Z+7, r21	; 0x07
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <_fpadd_parts+0x20e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	33 82       	std	Z+3, r3	; 0x03
    1d8c:	22 82       	std	Z+2, r2	; 0x02
    1d8e:	88 27       	eor	r24, r24
    1d90:	99 27       	eor	r25, r25
    1d92:	dc 01       	movw	r26, r24
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	a4 0b       	sbc	r26, r20
    1d9a:	b5 0b       	sbc	r27, r21
    1d9c:	84 83       	std	Z+4, r24	; 0x04
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	a6 83       	std	Z+6, r26	; 0x06
    1da2:	b7 83       	std	Z+7, r27	; 0x07
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <_fpadd_parts+0x20e>
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	35 83       	std	Z+5, r19	; 0x05
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	a1 09       	sbc	r26, r1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	af 4f       	sbci	r26, 0xFF	; 255
    1dd8:	bf 43       	sbci	r27, 0x3F	; 63
    1dda:	28 f3       	brcs	.-54     	; 0x1da6 <_fpadd_parts+0x1f4>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <_fpadd_parts+0x242>
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	33 82       	std	Z+3, r3	; 0x03
    1de2:	22 82       	std	Z+2, r2	; 0x02
    1de4:	ea 0c       	add	r14, r10
    1de6:	fb 1c       	adc	r15, r11
    1de8:	0c 1d       	adc	r16, r12
    1dea:	1d 1d       	adc	r17, r13
    1dec:	e4 82       	std	Z+4, r14	; 0x04
    1dee:	f5 82       	std	Z+5, r15	; 0x05
    1df0:	06 83       	std	Z+6, r16	; 0x06
    1df2:	17 83       	std	Z+7, r17	; 0x07
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	80 83       	st	Z, r24
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	46 81       	ldd	r20, Z+6	; 0x06
    1dfe:	57 81       	ldd	r21, Z+7	; 0x07
    1e00:	57 ff       	sbrs	r21, 7
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <_fpadd_parts+0x286>
    1e04:	c9 01       	movw	r24, r18
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	90 70       	andi	r25, 0x00	; 0
    1e12:	a0 70       	andi	r26, 0x00	; 0
    1e14:	b0 70       	andi	r27, 0x00	; 0
    1e16:	56 95       	lsr	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	a4 2b       	or	r26, r20
    1e24:	b5 2b       	or	r27, r21
    1e26:	84 83       	std	Z+4, r24	; 0x04
    1e28:	95 83       	std	Z+5, r25	; 0x05
    1e2a:	a6 83       	std	Z+6, r26	; 0x06
    1e2c:	b7 83       	std	Z+7, r27	; 0x07
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	df 01       	movw	r26, r30
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_fpadd_parts+0x28c>
    1e3c:	d2 01       	movw	r26, r4
    1e3e:	cd 01       	movw	r24, r26
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	e2 e1       	ldi	r30, 0x12	; 18
    1e46:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <__epilogue_restores__>

00001e4a <__subsf3>:
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 ab 3a 	jmp	0x7556	; 0x7556 <__prologue_saves__+0x18>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	3e 83       	std	Y+6, r19	; 0x06
    1e62:	4f 83       	std	Y+7, r20	; 0x07
    1e64:	58 87       	std	Y+8, r21	; 0x08
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 2e       	mov	r14, r30
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	ec 0e       	add	r14, r28
    1e6e:	fd 1e       	adc	r15, r29
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0f 5e       	subi	r16, 0xEF	; 239
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	b8 01       	movw	r22, r16
    1e86:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	89 27       	eor	r24, r25
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	ae 01       	movw	r20, r28
    1e98:	47 5e       	subi	r20, 0xE7	; 231
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1ea0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1ea4:	a0 96       	adiw	r28, 0x20	; 32
    1ea6:	e6 e0       	ldi	r30, 0x06	; 6
    1ea8:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <__epilogue_restores__+0x18>

00001eac <__addsf3>:
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 ab 3a 	jmp	0x7556	; 0x7556 <__prologue_saves__+0x18>
    1eb8:	69 83       	std	Y+1, r22	; 0x01
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	2d 83       	std	Y+5, r18	; 0x05
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	4f 83       	std	Y+7, r20	; 0x07
    1ec6:	58 87       	std	Y+8, r21	; 0x08
    1ec8:	f9 e0       	ldi	r31, 0x09	; 9
    1eca:	ef 2e       	mov	r14, r31
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	ec 0e       	add	r14, r28
    1ed0:	fd 1e       	adc	r15, r29
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1edc:	8e 01       	movw	r16, r28
    1ede:	0f 5e       	subi	r16, 0xEF	; 239
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b8 01       	movw	r22, r16
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1efa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1efe:	a0 96       	adiw	r28, 0x20	; 32
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <__epilogue_restores__+0x18>

00001f06 <__mulsf3>:
    1f06:	a0 e2       	ldi	r26, 0x20	; 32
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 9f 3a 	jmp	0x753e	; 0x753e <__prologue_saves__>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	2d 83       	std	Y+5, r18	; 0x05
    1f1c:	3e 83       	std	Y+6, r19	; 0x06
    1f1e:	4f 83       	std	Y+7, r20	; 0x07
    1f20:	58 87       	std	Y+8, r21	; 0x08
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	67 5f       	subi	r22, 0xF7	; 247
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5e       	subi	r22, 0xEF	; 239
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	88 f0       	brcs	.+34     	; 0x1f66 <__mulsf3+0x60>
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	c8 f0       	brcs	.+50     	; 0x1f7c <__mulsf3+0x76>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <__mulsf3+0x4e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	51 f4       	brne	.+20     	; 0x1f66 <__mulsf3+0x60>
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__mulsf3+0x56>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <__mulsf3+0x5c>
    1f58:	92 30       	cpi	r25, 0x02	; 2
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <__mulsf3+0x76>
    1f5c:	8d e7       	ldi	r24, 0x7D	; 125
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	c6 c0       	rjmp	.+396    	; 0x20ee <__mulsf3+0x1e8>
    1f62:	92 30       	cpi	r25, 0x02	; 2
    1f64:	49 f4       	brne	.+18     	; 0x1f78 <__mulsf3+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	98 13       	cpse	r25, r24
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	2a 87       	std	Y+10, r18	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bb c0       	rjmp	.+374    	; 0x20ee <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <__mulsf3+0x88>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	98 13       	cpse	r25, r24
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	2a 8b       	std	Y+18, r18	; 0x12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b0 c0       	rjmp	.+352    	; 0x20ee <__mulsf3+0x1e8>
    1f8e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f90:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f92:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f94:	58 88       	ldd	r5, Y+16	; 0x10
    1f96:	6d 88       	ldd	r6, Y+21	; 0x15
    1f98:	7e 88       	ldd	r7, Y+22	; 0x16
    1f9a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f9c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	65 01       	movw	r12, r10
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c1 01       	movw	r24, r2
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	89 2b       	or	r24, r25
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <__mulsf3+0xf4>
    1fc0:	e6 0c       	add	r14, r6
    1fc2:	f7 1c       	adc	r15, r7
    1fc4:	08 1d       	adc	r16, r8
    1fc6:	19 1d       	adc	r17, r9
    1fc8:	9a 01       	movw	r18, r20
    1fca:	ab 01       	movw	r20, r22
    1fcc:	2a 0d       	add	r18, r10
    1fce:	3b 1d       	adc	r19, r11
    1fd0:	4c 1d       	adc	r20, r12
    1fd2:	5d 1d       	adc	r21, r13
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 14       	cp	r14, r6
    1fde:	f7 04       	cpc	r15, r7
    1fe0:	08 05       	cpc	r16, r8
    1fe2:	19 05       	cpc	r17, r9
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <__mulsf3+0xe8>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 0f       	add	r20, r24
    1ff4:	59 1f       	adc	r21, r25
    1ff6:	6a 1f       	adc	r22, r26
    1ff8:	7b 1f       	adc	r23, r27
    1ffa:	aa 0c       	add	r10, r10
    1ffc:	bb 1c       	adc	r11, r11
    1ffe:	cc 1c       	adc	r12, r12
    2000:	dd 1c       	adc	r13, r13
    2002:	97 fe       	sbrs	r9, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <__mulsf3+0x110>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	a8 2a       	or	r10, r24
    2010:	b9 2a       	or	r11, r25
    2012:	ca 2a       	or	r12, r26
    2014:	db 2a       	or	r13, r27
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	e0 32       	cpi	r30, 0x20	; 32
    201a:	f1 05       	cpc	r31, r1
    201c:	49 f0       	breq	.+18     	; 0x2030 <__mulsf3+0x12a>
    201e:	66 0c       	add	r6, r6
    2020:	77 1c       	adc	r7, r7
    2022:	88 1c       	adc	r8, r8
    2024:	99 1c       	adc	r9, r9
    2026:	56 94       	lsr	r5
    2028:	47 94       	ror	r4
    202a:	37 94       	ror	r3
    202c:	27 94       	ror	r2
    202e:	c3 cf       	rjmp	.-122    	; 0x1fb6 <__mulsf3+0xb0>
    2030:	fa 85       	ldd	r31, Y+10	; 0x0a
    2032:	ea 89       	ldd	r30, Y+18	; 0x12
    2034:	2b 89       	ldd	r18, Y+19	; 0x13
    2036:	3c 89       	ldd	r19, Y+20	; 0x14
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <__mulsf3+0x16e>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	89 2b       	or	r24, r25
    204e:	61 f0       	breq	.+24     	; 0x2068 <__mulsf3+0x162>
    2050:	16 95       	lsr	r17
    2052:	07 95       	ror	r16
    2054:	f7 94       	ror	r15
    2056:	e7 94       	ror	r14
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	e8 2a       	or	r14, r24
    2062:	f9 2a       	or	r15, r25
    2064:	0a 2b       	or	r16, r26
    2066:	1b 2b       	or	r17, r27
    2068:	76 95       	lsr	r23
    206a:	67 95       	ror	r22
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	77 fd       	sbrc	r23, 7
    2076:	e7 cf       	rjmp	.-50     	; 0x2046 <__mulsf3+0x140>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <__mulsf3+0x18c>
    207a:	44 0f       	add	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	17 fd       	sbrc	r17, 7
    2084:	41 60       	ori	r20, 0x01	; 1
    2086:	ee 0c       	add	r14, r14
    2088:	ff 1c       	adc	r15, r15
    208a:	00 1f       	adc	r16, r16
    208c:	11 1f       	adc	r17, r17
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	30 40       	sbci	r19, 0x00	; 0
    2092:	40 30       	cpi	r20, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	59 07       	cpc	r21, r25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	69 07       	cpc	r22, r25
    209c:	90 e4       	ldi	r25, 0x40	; 64
    209e:	79 07       	cpc	r23, r25
    20a0:	60 f3       	brcs	.-40     	; 0x207a <__mulsf3+0x174>
    20a2:	2b 8f       	std	Y+27, r18	; 0x1b
    20a4:	3c 8f       	std	Y+28, r19	; 0x1c
    20a6:	db 01       	movw	r26, r22
    20a8:	ca 01       	movw	r24, r20
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	80 34       	cpi	r24, 0x40	; 64
    20b4:	91 05       	cpc	r25, r1
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <__mulsf3+0x1ce>
    20bc:	47 fd       	sbrc	r20, 7
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <__mulsf3+0x1ce>
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	01 05       	cpc	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__mulsf3+0x1ce>
    20ca:	40 5c       	subi	r20, 0xC0	; 192
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	40 78       	andi	r20, 0x80	; 128
    20d4:	1a 8e       	std	Y+26, r1	; 0x1a
    20d6:	fe 17       	cp	r31, r30
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1d8>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	4d 8f       	std	Y+29, r20	; 0x1d
    20e0:	5e 8f       	std	Y+30, r21	; 0x1e
    20e2:	6f 8f       	std	Y+31, r22	; 0x1f
    20e4:	78 a3       	std	Y+32, r23	; 0x20
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	ce 01       	movw	r24, r28
    20ec:	49 96       	adiw	r24, 0x19	; 25
    20ee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e2 e1       	ldi	r30, 0x12	; 18
    20f6:	0c 94 bb 3a 	jmp	0x7576	; 0x7576 <__epilogue_restores__>

000020fa <__gtsf2>:
    20fa:	a8 e1       	ldi	r26, 0x18	; 24
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 ab 3a 	jmp	0x7556	; 0x7556 <__prologue_saves__+0x18>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	e8 2e       	mov	r14, r24
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    212a:	8e 01       	movw	r16, r28
    212c:	0f 5e       	subi	r16, 0xEF	; 239
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b8 01       	movw	r22, r16
    2136:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	40 f0       	brcs	.+16     	; 0x2150 <__gtsf2+0x56>
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	28 f0       	brcs	.+10     	; 0x2150 <__gtsf2+0x56>
    2146:	c7 01       	movw	r24, r14
    2148:	b8 01       	movw	r22, r16
    214a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <__gtsf2+0x58>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	68 96       	adiw	r28, 0x18	; 24
    2154:	e6 e0       	ldi	r30, 0x06	; 6
    2156:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <__epilogue_restores__+0x18>

0000215a <__gesf2>:
    215a:	a8 e1       	ldi	r26, 0x18	; 24
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 eb       	ldi	r30, 0xB3	; 179
    2160:	f0 e1       	ldi	r31, 0x10	; 16
    2162:	0c 94 ab 3a 	jmp	0x7556	; 0x7556 <__prologue_saves__+0x18>
    2166:	69 83       	std	Y+1, r22	; 0x01
    2168:	7a 83       	std	Y+2, r23	; 0x02
    216a:	8b 83       	std	Y+3, r24	; 0x03
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	2d 83       	std	Y+5, r18	; 0x05
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	4f 83       	std	Y+7, r20	; 0x07
    2174:	58 87       	std	Y+8, r21	; 0x08
    2176:	89 e0       	ldi	r24, 0x09	; 9
    2178:	e8 2e       	mov	r14, r24
    217a:	f1 2c       	mov	r15, r1
    217c:	ec 0e       	add	r14, r28
    217e:	fd 1e       	adc	r15, r29
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	b7 01       	movw	r22, r14
    2186:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    218a:	8e 01       	movw	r16, r28
    218c:	0f 5e       	subi	r16, 0xEF	; 239
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	ce 01       	movw	r24, r28
    2192:	05 96       	adiw	r24, 0x05	; 5
    2194:	b8 01       	movw	r22, r16
    2196:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	40 f0       	brcs	.+16     	; 0x21b0 <__gesf2+0x56>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	28 f0       	brcs	.+10     	; 0x21b0 <__gesf2+0x56>
    21a6:	c7 01       	movw	r24, r14
    21a8:	b8 01       	movw	r22, r16
    21aa:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <__gesf2+0x58>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	68 96       	adiw	r28, 0x18	; 24
    21b4:	e6 e0       	ldi	r30, 0x06	; 6
    21b6:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <__epilogue_restores__+0x18>

000021ba <__ltsf2>:
    21ba:	a8 e1       	ldi	r26, 0x18	; 24
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 ab 3a 	jmp	0x7556	; 0x7556 <__prologue_saves__+0x18>
    21c6:	69 83       	std	Y+1, r22	; 0x01
    21c8:	7a 83       	std	Y+2, r23	; 0x02
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	2d 83       	std	Y+5, r18	; 0x05
    21d0:	3e 83       	std	Y+6, r19	; 0x06
    21d2:	4f 83       	std	Y+7, r20	; 0x07
    21d4:	58 87       	std	Y+8, r21	; 0x08
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	e8 2e       	mov	r14, r24
    21da:	f1 2c       	mov	r15, r1
    21dc:	ec 0e       	add	r14, r28
    21de:	fd 1e       	adc	r15, r29
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	b7 01       	movw	r22, r14
    21e6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21ea:	8e 01       	movw	r16, r28
    21ec:	0f 5e       	subi	r16, 0xEF	; 239
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	ce 01       	movw	r24, r28
    21f2:	05 96       	adiw	r24, 0x05	; 5
    21f4:	b8 01       	movw	r22, r16
    21f6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__ltsf2+0x56>
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	28 f0       	brcs	.+10     	; 0x2210 <__ltsf2+0x56>
    2206:	c7 01       	movw	r24, r14
    2208:	b8 01       	movw	r22, r16
    220a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__ltsf2+0x58>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	68 96       	adiw	r28, 0x18	; 24
    2214:	e6 e0       	ldi	r30, 0x06	; 6
    2216:	0c 94 c7 3a 	jmp	0x758e	; 0x758e <__epilogue_restores__+0x18>

0000221a <__fixsfsi>:
    221a:	ac e0       	ldi	r26, 0x0C	; 12
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e1       	ldi	r30, 0x13	; 19
    2220:	f1 e1       	ldi	r31, 0x11	; 17
    2222:	0c 94 af 3a 	jmp	0x755e	; 0x755e <__prologue_saves__+0x20>
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	7a 83       	std	Y+2, r23	; 0x02
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	be 01       	movw	r22, r28
    2234:	6b 5f       	subi	r22, 0xFB	; 251
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	61 f1       	breq	.+88     	; 0x229a <__fixsfsi+0x80>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	50 f1       	brcs	.+84     	; 0x229a <__fixsfsi+0x80>
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	21 f4       	brne	.+8      	; 0x2252 <__fixsfsi+0x38>
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	88 23       	and	r24, r24
    224e:	51 f1       	breq	.+84     	; 0x22a4 <__fixsfsi+0x8a>
    2250:	2e c0       	rjmp	.+92     	; 0x22ae <__fixsfsi+0x94>
    2252:	2f 81       	ldd	r18, Y+7	; 0x07
    2254:	38 85       	ldd	r19, Y+8	; 0x08
    2256:	37 fd       	sbrc	r19, 7
    2258:	20 c0       	rjmp	.+64     	; 0x229a <__fixsfsi+0x80>
    225a:	6e 81       	ldd	r22, Y+6	; 0x06
    225c:	2f 31       	cpi	r18, 0x1F	; 31
    225e:	31 05       	cpc	r19, r1
    2260:	1c f0       	brlt	.+6      	; 0x2268 <__fixsfsi+0x4e>
    2262:	66 23       	and	r22, r22
    2264:	f9 f0       	breq	.+62     	; 0x22a4 <__fixsfsi+0x8a>
    2266:	23 c0       	rjmp	.+70     	; 0x22ae <__fixsfsi+0x94>
    2268:	8e e1       	ldi	r24, 0x1E	; 30
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	4b 85       	ldd	r20, Y+11	; 0x0b
    2276:	5c 85       	ldd	r21, Y+12	; 0x0c
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__fixsfsi+0x68>
    227a:	56 95       	lsr	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	8a 95       	dec	r24
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__fixsfsi+0x60>
    2286:	66 23       	and	r22, r22
    2288:	b1 f0       	breq	.+44     	; 0x22b6 <__fixsfsi+0x9c>
    228a:	50 95       	com	r21
    228c:	40 95       	com	r20
    228e:	30 95       	com	r19
    2290:	21 95       	neg	r18
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	4f 4f       	sbci	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__fixsfsi+0x9c>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__fixsfsi+0x9c>
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f ef       	ldi	r20, 0xFF	; 255
    22aa:	5f e7       	ldi	r21, 0x7F	; 127
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__fixsfsi+0x9c>
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e8       	ldi	r21, 0x80	; 128
    22b6:	b9 01       	movw	r22, r18
    22b8:	ca 01       	movw	r24, r20
    22ba:	2c 96       	adiw	r28, 0x0c	; 12
    22bc:	e2 e0       	ldi	r30, 0x02	; 2
    22be:	0c 94 cb 3a 	jmp	0x7596	; 0x7596 <__epilogue_restores__+0x20>

000022c2 <__pack_f>:
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	fc 01       	movw	r30, r24
    22ce:	e4 80       	ldd	r14, Z+4	; 0x04
    22d0:	f5 80       	ldd	r15, Z+5	; 0x05
    22d2:	06 81       	ldd	r16, Z+6	; 0x06
    22d4:	17 81       	ldd	r17, Z+7	; 0x07
    22d6:	d1 80       	ldd	r13, Z+1	; 0x01
    22d8:	80 81       	ld	r24, Z
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	48 f4       	brcc	.+18     	; 0x22f0 <__pack_f+0x2e>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e1       	ldi	r26, 0x10	; 16
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e8 2a       	or	r14, r24
    22e8:	f9 2a       	or	r15, r25
    22ea:	0a 2b       	or	r16, r26
    22ec:	1b 2b       	or	r17, r27
    22ee:	a5 c0       	rjmp	.+330    	; 0x243a <__pack_f+0x178>
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__pack_f+0x34>
    22f4:	9f c0       	rjmp	.+318    	; 0x2434 <__pack_f+0x172>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__pack_f+0x40>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__pack_f+0x4a>
    2302:	e1 14       	cp	r14, r1
    2304:	f1 04       	cpc	r15, r1
    2306:	01 05       	cpc	r16, r1
    2308:	11 05       	cpc	r17, r1
    230a:	19 f4       	brne	.+6      	; 0x2312 <__pack_f+0x50>
    230c:	e0 e0       	ldi	r30, 0x00	; 0
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	96 c0       	rjmp	.+300    	; 0x243e <__pack_f+0x17c>
    2312:	62 81       	ldd	r22, Z+2	; 0x02
    2314:	73 81       	ldd	r23, Z+3	; 0x03
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	62 38       	cpi	r22, 0x82	; 130
    231a:	79 07       	cpc	r23, r25
    231c:	0c f0       	brlt	.+2      	; 0x2320 <__pack_f+0x5e>
    231e:	5b c0       	rjmp	.+182    	; 0x23d6 <__pack_f+0x114>
    2320:	22 e8       	ldi	r18, 0x82	; 130
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	26 1b       	sub	r18, r22
    2326:	37 0b       	sbc	r19, r23
    2328:	2a 31       	cpi	r18, 0x1A	; 26
    232a:	31 05       	cpc	r19, r1
    232c:	2c f0       	brlt	.+10     	; 0x2338 <__pack_f+0x76>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	2a c0       	rjmp	.+84     	; 0x238c <__pack_f+0xca>
    2338:	b8 01       	movw	r22, r16
    233a:	a7 01       	movw	r20, r14
    233c:	02 2e       	mov	r0, r18
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__pack_f+0x86>
    2340:	76 95       	lsr	r23
    2342:	67 95       	ror	r22
    2344:	57 95       	ror	r21
    2346:	47 95       	ror	r20
    2348:	0a 94       	dec	r0
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <__pack_f+0x7e>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__pack_f+0x9c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	2a 95       	dec	r18
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <__pack_f+0x94>
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	a1 09       	sbc	r26, r1
    2366:	b1 09       	sbc	r27, r1
    2368:	8e 21       	and	r24, r14
    236a:	9f 21       	and	r25, r15
    236c:	a0 23       	and	r26, r16
    236e:	b1 23       	and	r27, r17
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	a1 05       	cpc	r26, r1
    2374:	b1 05       	cpc	r27, r1
    2376:	21 f0       	breq	.+8      	; 0x2380 <__pack_f+0xbe>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	9a 01       	movw	r18, r20
    2382:	ab 01       	movw	r20, r22
    2384:	28 2b       	or	r18, r24
    2386:	39 2b       	or	r19, r25
    2388:	4a 2b       	or	r20, r26
    238a:	5b 2b       	or	r21, r27
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	8f 77       	andi	r24, 0x7F	; 127
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	a0 70       	andi	r26, 0x00	; 0
    2396:	b0 70       	andi	r27, 0x00	; 0
    2398:	80 34       	cpi	r24, 0x40	; 64
    239a:	91 05       	cpc	r25, r1
    239c:	a1 05       	cpc	r26, r1
    239e:	b1 05       	cpc	r27, r1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <__pack_f+0xee>
    23a2:	27 ff       	sbrs	r18, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <__pack_f+0xf6>
    23a6:	20 5c       	subi	r18, 0xC0	; 192
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	4f 4f       	sbci	r20, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0xf6>
    23b0:	21 5c       	subi	r18, 0xC1	; 193
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	e0 e0       	ldi	r30, 0x00	; 0
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	20 30       	cpi	r18, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	3a 07       	cpc	r19, r26
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	4a 07       	cpc	r20, r26
    23c6:	a0 e4       	ldi	r26, 0x40	; 64
    23c8:	5a 07       	cpc	r21, r26
    23ca:	10 f0       	brcs	.+4      	; 0x23d0 <__pack_f+0x10e>
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	79 01       	movw	r14, r18
    23d2:	8a 01       	movw	r16, r20
    23d4:	27 c0       	rjmp	.+78     	; 0x2424 <__pack_f+0x162>
    23d6:	60 38       	cpi	r22, 0x80	; 128
    23d8:	71 05       	cpc	r23, r1
    23da:	64 f5       	brge	.+88     	; 0x2434 <__pack_f+0x172>
    23dc:	fb 01       	movw	r30, r22
    23de:	e1 58       	subi	r30, 0x81	; 129
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	d8 01       	movw	r26, r16
    23e4:	c7 01       	movw	r24, r14
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	a0 70       	andi	r26, 0x00	; 0
    23ec:	b0 70       	andi	r27, 0x00	; 0
    23ee:	80 34       	cpi	r24, 0x40	; 64
    23f0:	91 05       	cpc	r25, r1
    23f2:	a1 05       	cpc	r26, r1
    23f4:	b1 05       	cpc	r27, r1
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__pack_f+0x144>
    23f8:	e7 fe       	sbrs	r14, 7
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__pack_f+0x154>
    23fc:	80 e4       	ldi	r24, 0x40	; 64
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__pack_f+0x14c>
    2406:	8f e3       	ldi	r24, 0x3F	; 63
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 0e       	add	r14, r24
    2410:	f9 1e       	adc	r15, r25
    2412:	0a 1f       	adc	r16, r26
    2414:	1b 1f       	adc	r17, r27
    2416:	17 ff       	sbrs	r17, 7
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <__pack_f+0x162>
    241a:	16 95       	lsr	r17
    241c:	07 95       	ror	r16
    241e:	f7 94       	ror	r15
    2420:	e7 94       	ror	r14
    2422:	31 96       	adiw	r30, 0x01	; 1
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	16 95       	lsr	r17
    2428:	07 95       	ror	r16
    242a:	f7 94       	ror	r15
    242c:	e7 94       	ror	r14
    242e:	8a 95       	dec	r24
    2430:	d1 f7       	brne	.-12     	; 0x2426 <__pack_f+0x164>
    2432:	05 c0       	rjmp	.+10     	; 0x243e <__pack_f+0x17c>
    2434:	ee 24       	eor	r14, r14
    2436:	ff 24       	eor	r15, r15
    2438:	87 01       	movw	r16, r14
    243a:	ef ef       	ldi	r30, 0xFF	; 255
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	6e 2f       	mov	r22, r30
    2440:	67 95       	ror	r22
    2442:	66 27       	eor	r22, r22
    2444:	67 95       	ror	r22
    2446:	90 2f       	mov	r25, r16
    2448:	9f 77       	andi	r25, 0x7F	; 127
    244a:	d7 94       	ror	r13
    244c:	dd 24       	eor	r13, r13
    244e:	d7 94       	ror	r13
    2450:	8e 2f       	mov	r24, r30
    2452:	86 95       	lsr	r24
    2454:	49 2f       	mov	r20, r25
    2456:	46 2b       	or	r20, r22
    2458:	58 2f       	mov	r21, r24
    245a:	5d 29       	or	r21, r13
    245c:	b7 01       	movw	r22, r14
    245e:	ca 01       	movw	r24, r20
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	08 95       	ret

0000246c <__unpack_f>:
    246c:	fc 01       	movw	r30, r24
    246e:	db 01       	movw	r26, r22
    2470:	40 81       	ld	r20, Z
    2472:	51 81       	ldd	r21, Z+1	; 0x01
    2474:	22 81       	ldd	r18, Z+2	; 0x02
    2476:	62 2f       	mov	r22, r18
    2478:	6f 77       	andi	r22, 0x7F	; 127
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	22 1f       	adc	r18, r18
    247e:	22 27       	eor	r18, r18
    2480:	22 1f       	adc	r18, r18
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	89 2f       	mov	r24, r25
    2486:	88 0f       	add	r24, r24
    2488:	82 2b       	or	r24, r18
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	99 1f       	adc	r25, r25
    2490:	99 27       	eor	r25, r25
    2492:	99 1f       	adc	r25, r25
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	a9 f5       	brne	.+106    	; 0x250a <__unpack_f+0x9e>
    24a0:	41 15       	cp	r20, r1
    24a2:	51 05       	cpc	r21, r1
    24a4:	61 05       	cpc	r22, r1
    24a6:	71 05       	cpc	r23, r1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <__unpack_f+0x42>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	37 c0       	rjmp	.+110    	; 0x251c <__unpack_f+0xb0>
    24ae:	82 e8       	ldi	r24, 0x82	; 130
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	9a 01       	movw	r18, r20
    24bc:	ab 01       	movw	r20, r22
    24be:	67 e0       	ldi	r22, 0x07	; 7
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	44 1f       	adc	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	6a 95       	dec	r22
    24ca:	d1 f7       	brne	.-12     	; 0x24c0 <__unpack_f+0x54>
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	8c 93       	st	X, r24
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <__unpack_f+0x80>
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	44 1f       	adc	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	13 97       	sbiw	r26, 0x03	; 3
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	13 96       	adiw	r26, 0x03	; 3
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	12 97       	sbiw	r26, 0x02	; 2
    24ec:	20 30       	cpi	r18, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	38 07       	cpc	r19, r24
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	48 07       	cpc	r20, r24
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	58 07       	cpc	r21, r24
    24fa:	58 f3       	brcs	.-42     	; 0x24d2 <__unpack_f+0x66>
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	2d 93       	st	X+, r18
    2500:	3d 93       	st	X+, r19
    2502:	4d 93       	st	X+, r20
    2504:	5c 93       	st	X, r21
    2506:	17 97       	sbiw	r26, 0x07	; 7
    2508:	08 95       	ret
    250a:	2f 3f       	cpi	r18, 0xFF	; 255
    250c:	31 05       	cpc	r19, r1
    250e:	79 f4       	brne	.+30     	; 0x252e <__unpack_f+0xc2>
    2510:	41 15       	cp	r20, r1
    2512:	51 05       	cpc	r21, r1
    2514:	61 05       	cpc	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	19 f4       	brne	.+6      	; 0x2520 <__unpack_f+0xb4>
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	8c 93       	st	X, r24
    251e:	08 95       	ret
    2520:	64 ff       	sbrs	r22, 4
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__unpack_f+0xbe>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8c 93       	st	X, r24
    2528:	12 c0       	rjmp	.+36     	; 0x254e <__unpack_f+0xe2>
    252a:	1c 92       	st	X, r1
    252c:	10 c0       	rjmp	.+32     	; 0x254e <__unpack_f+0xe2>
    252e:	2f 57       	subi	r18, 0x7F	; 127
    2530:	30 40       	sbci	r19, 0x00	; 0
    2532:	13 96       	adiw	r26, 0x03	; 3
    2534:	3c 93       	st	X, r19
    2536:	2e 93       	st	-X, r18
    2538:	12 97       	sbiw	r26, 0x02	; 2
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	8c 93       	st	X, r24
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	66 1f       	adc	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	8a 95       	dec	r24
    254a:	d1 f7       	brne	.-12     	; 0x2540 <__unpack_f+0xd4>
    254c:	70 64       	ori	r23, 0x40	; 64
    254e:	14 96       	adiw	r26, 0x04	; 4
    2550:	4d 93       	st	X+, r20
    2552:	5d 93       	st	X+, r21
    2554:	6d 93       	st	X+, r22
    2556:	7c 93       	st	X, r23
    2558:	17 97       	sbiw	r26, 0x07	; 7
    255a:	08 95       	ret

0000255c <__fpcmp_parts_f>:
    255c:	1f 93       	push	r17
    255e:	dc 01       	movw	r26, r24
    2560:	fb 01       	movw	r30, r22
    2562:	9c 91       	ld	r25, X
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	08 f4       	brcc	.+2      	; 0x256a <__fpcmp_parts_f+0xe>
    2568:	47 c0       	rjmp	.+142    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    256a:	80 81       	ld	r24, Z
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	08 f4       	brcc	.+2      	; 0x2572 <__fpcmp_parts_f+0x16>
    2570:	43 c0       	rjmp	.+134    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    2572:	94 30       	cpi	r25, 0x04	; 4
    2574:	51 f4       	brne	.+20     	; 0x258a <__fpcmp_parts_f+0x2e>
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	1c 91       	ld	r17, X
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	99 f5       	brne	.+102    	; 0x25e4 <__fpcmp_parts_f+0x88>
    257e:	81 81       	ldd	r24, Z+1	; 0x01
    2580:	68 2f       	mov	r22, r24
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	61 1b       	sub	r22, r17
    2586:	71 09       	sbc	r23, r1
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <__fpcmp_parts_f+0xac>
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	21 f0       	breq	.+8      	; 0x2596 <__fpcmp_parts_f+0x3a>
    258e:	92 30       	cpi	r25, 0x02	; 2
    2590:	31 f4       	brne	.+12     	; 0x259e <__fpcmp_parts_f+0x42>
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	b9 f1       	breq	.+110    	; 0x2604 <__fpcmp_parts_f+0xa8>
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	89 f1       	breq	.+98     	; 0x25fe <__fpcmp_parts_f+0xa2>
    259c:	2d c0       	rjmp	.+90     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	1c 91       	ld	r17, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	f1 f0       	breq	.+60     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	18 17       	cp	r17, r24
    25ac:	d9 f4       	brne	.+54     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	2d 91       	ld	r18, X+
    25b2:	3c 91       	ld	r19, X
    25b4:	13 97       	sbiw	r26, 0x03	; 3
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	94 f0       	brlt	.+36     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	bc f0       	brlt	.+46     	; 0x25f4 <__fpcmp_parts_f+0x98>
    25c6:	14 96       	adiw	r26, 0x04	; 4
    25c8:	8d 91       	ld	r24, X+
    25ca:	9d 91       	ld	r25, X+
    25cc:	0d 90       	ld	r0, X+
    25ce:	bc 91       	ld	r27, X
    25d0:	a0 2d       	mov	r26, r0
    25d2:	24 81       	ldd	r18, Z+4	; 0x04
    25d4:	35 81       	ldd	r19, Z+5	; 0x05
    25d6:	46 81       	ldd	r20, Z+6	; 0x06
    25d8:	57 81       	ldd	r21, Z+7	; 0x07
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	4a 07       	cpc	r20, r26
    25e0:	5b 07       	cpc	r21, r27
    25e2:	18 f4       	brcc	.+6      	; 0x25ea <__fpcmp_parts_f+0x8e>
    25e4:	11 23       	and	r17, r17
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <__fpcmp_parts_f+0xa2>
    25ea:	82 17       	cp	r24, r18
    25ec:	93 07       	cpc	r25, r19
    25ee:	a4 07       	cpc	r26, r20
    25f0:	b5 07       	cpc	r27, r21
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <__fpcmp_parts_f+0xa8>
    25f4:	11 23       	and	r17, r17
    25f6:	19 f0       	breq	.+6      	; 0x25fe <__fpcmp_parts_f+0xa2>
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <__fpcmp_parts_f+0xac>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <__fpcmp_parts_f+0xac>
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	cb 01       	movw	r24, r22
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	27 97       	sbiw	r28, 0x07	; 7
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	9d 83       	std	Y+5, r25	; 0x05
    2624:	8c 83       	std	Y+4, r24	; 0x04
    2626:	6e 83       	std	Y+6, r22	; 0x06
    2628:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    262a:	8a e1       	ldi	r24, 0x1A	; 26
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	09 f4       	brne	.+2      	; 0x2640 <xCoRoutineCreate+0x32>
    263e:	6f c0       	rjmp	.+222    	; 0x271e <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2640:	80 91 c8 01 	lds	r24, 0x01C8
    2644:	90 91 c9 01 	lds	r25, 0x01C9
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	41 f4       	brne	.+16     	; 0x265c <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	90 93 c9 01 	sts	0x01C9, r25
    2654:	80 93 c8 01 	sts	0x01C8, r24
			prvInitialiseCoRoutineLists();
    2658:	0e 94 6e 15 	call	0x2adc	; 0x2adc <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	82 30       	cpi	r24, 0x02	; 2
    2660:	10 f0       	brcs	.+4      	; 0x2666 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    2666:	e9 81       	ldd	r30, Y+1	; 0x01
    2668:	fa 81       	ldd	r31, Y+2	; 0x02
    266a:	11 8e       	std	Z+25, r1	; 0x19
    266c:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    266e:	e9 81       	ldd	r30, Y+1	; 0x01
    2670:	fa 81       	ldd	r31, Y+2	; 0x02
    2672:	8e 81       	ldd	r24, Y+6	; 0x06
    2674:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    2676:	e9 81       	ldd	r30, Y+1	; 0x01
    2678:	fa 81       	ldd	r31, Y+2	; 0x02
    267a:	8f 81       	ldd	r24, Y+7	; 0x07
    267c:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    267e:	e9 81       	ldd	r30, Y+1	; 0x01
    2680:	fa 81       	ldd	r31, Y+2	; 0x02
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	02 96       	adiw	r24, 0x02	; 2
    2690:	0e 94 75 16 	call	0x2cea	; 0x2cea <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	0c 96       	adiw	r24, 0x0c	; 12
    269a:	0e 94 75 16 	call	0x2cea	; 0x2cea <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    269e:	e9 81       	ldd	r30, Y+1	; 0x01
    26a0:	fa 81       	ldd	r31, Y+2	; 0x02
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	91 87       	std	Z+9, r25	; 0x09
    26a8:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    26aa:	e9 81       	ldd	r30, Y+1	; 0x01
    26ac:	fa 81       	ldd	r31, Y+2	; 0x02
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	93 8b       	std	Z+19, r25	; 0x13
    26b4:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    26b6:	8e 81       	ldd	r24, Y+6	; 0x06
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	84 e0       	ldi	r24, 0x04	; 4
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	82 1b       	sub	r24, r18
    26c2:	93 0b       	sbc	r25, r19
    26c4:	e9 81       	ldd	r30, Y+1	; 0x01
    26c6:	fa 81       	ldd	r31, Y+2	; 0x02
    26c8:	95 87       	std	Z+13, r25	; 0x0d
    26ca:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    26cc:	e9 81       	ldd	r30, Y+1	; 0x01
    26ce:	fa 81       	ldd	r31, Y+2	; 0x02
    26d0:	96 89       	ldd	r25, Z+22	; 0x16
    26d2:	80 91 ca 01 	lds	r24, 0x01CA
    26d6:	89 17       	cp	r24, r25
    26d8:	28 f4       	brcc	.+10     	; 0x26e4 <xCoRoutineCreate+0xd6>
    26da:	e9 81       	ldd	r30, Y+1	; 0x01
    26dc:	fa 81       	ldd	r31, Y+2	; 0x02
    26de:	86 89       	ldd	r24, Z+22	; 0x16
    26e0:	80 93 ca 01 	sts	0x01CA, r24
    26e4:	e9 81       	ldd	r30, Y+1	; 0x01
    26e6:	fa 81       	ldd	r31, Y+2	; 0x02
    26e8:	86 89       	ldd	r24, Z+22	; 0x16
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	c9 01       	movw	r24, r18
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	82 0f       	add	r24, r18
    26fe:	93 1f       	adc	r25, r19
    2700:	ac 01       	movw	r20, r24
    2702:	4f 52       	subi	r20, 0x2F	; 47
    2704:	5e 4f       	sbci	r21, 0xFE	; 254
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	9c 01       	movw	r18, r24
    270c:	2e 5f       	subi	r18, 0xFE	; 254
    270e:	3f 4f       	sbci	r19, 0xFF	; 255
    2710:	ca 01       	movw	r24, r20
    2712:	b9 01       	movw	r22, r18
    2714:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

		xReturn = pdPASS;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	8b 83       	std	Y+3, r24	; 0x03
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2724:	27 96       	adiw	r28, 0x07	; 7
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <vCoRoutineAddToDelayedList+0x6>
    273c:	00 d0       	rcall	.+0      	; 0x273e <vCoRoutineAddToDelayedList+0x8>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <vCoRoutineAddToDelayedList+0xa>
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	8b 83       	std	Y+3, r24	; 0x03
    2748:	7e 83       	std	Y+6, r23	; 0x06
    274a:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    274c:	20 91 cb 01 	lds	r18, 0x01CB
    2750:	30 91 cc 01 	lds	r19, 0x01CC
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	82 0f       	add	r24, r18
    275a:	93 1f       	adc	r25, r19
    275c:	9a 83       	std	Y+2, r25	; 0x02
    275e:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2760:	80 91 c8 01 	lds	r24, 0x01C8
    2764:	90 91 c9 01 	lds	r25, 0x01C9
    2768:	02 96       	adiw	r24, 0x02	; 2
    276a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    276e:	e0 91 c8 01 	lds	r30, 0x01C8
    2772:	f0 91 c9 01 	lds	r31, 0x01C9
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	93 83       	std	Z+3, r25	; 0x03
    277c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    277e:	20 91 cb 01 	lds	r18, 0x01CB
    2782:	30 91 cc 01 	lds	r19, 0x01CC
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	82 17       	cp	r24, r18
    278c:	93 07       	cpc	r25, r19
    278e:	70 f4       	brcc	.+28     	; 0x27ac <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2790:	80 91 f7 01 	lds	r24, 0x01F7
    2794:	90 91 f8 01 	lds	r25, 0x01F8
    2798:	20 91 c8 01 	lds	r18, 0x01C8
    279c:	30 91 c9 01 	lds	r19, 0x01C9
    27a0:	2e 5f       	subi	r18, 0xFE	; 254
    27a2:	3f 4f       	sbci	r19, 0xFF	; 255
    27a4:	b9 01       	movw	r22, r18
    27a6:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>
    27aa:	0d c0       	rjmp	.+26     	; 0x27c6 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27ac:	80 91 f5 01 	lds	r24, 0x01F5
    27b0:	90 91 f6 01 	lds	r25, 0x01F6
    27b4:	20 91 c8 01 	lds	r18, 0x01C8
    27b8:	30 91 c9 01 	lds	r19, 0x01C9
    27bc:	2e 5f       	subi	r18, 0xFE	; 254
    27be:	3f 4f       	sbci	r19, 0xFF	; 255
    27c0:	b9 01       	movw	r22, r18
    27c2:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>
	}

	if( pxEventList )
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	61 f0       	breq	.+24     	; 0x27e6 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    27ce:	80 91 c8 01 	lds	r24, 0x01C8
    27d2:	90 91 c9 01 	lds	r25, 0x01C9
    27d6:	9c 01       	movw	r18, r24
    27d8:	24 5f       	subi	r18, 0xF4	; 244
    27da:	3f 4f       	sbci	r19, 0xFF	; 255
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	b9 01       	movw	r22, r18
    27e2:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>
	}
}
    27e6:	26 96       	adiw	r28, 0x06	; 6
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <prvCheckPendingReadyList+0x6>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	3a c0       	rjmp	.+116    	; 0x2878 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2804:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2806:	e0 91 fe 01 	lds	r30, 0x01FE
    280a:	f0 91 ff 01 	lds	r31, 0x01FF
    280e:	86 81       	ldd	r24, Z+6	; 0x06
    2810:	97 81       	ldd	r25, Z+7	; 0x07
    2812:	9a 83       	std	Y+2, r25	; 0x02
    2814:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
    281a:	0c 96       	adiw	r24, 0x0c	; 12
    281c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2820:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	02 96       	adiw	r24, 0x02	; 2
    2828:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    282c:	e9 81       	ldd	r30, Y+1	; 0x01
    282e:	fa 81       	ldd	r31, Y+2	; 0x02
    2830:	96 89       	ldd	r25, Z+22	; 0x16
    2832:	80 91 ca 01 	lds	r24, 0x01CA
    2836:	89 17       	cp	r24, r25
    2838:	28 f4       	brcc	.+10     	; 0x2844 <prvCheckPendingReadyList+0x4c>
    283a:	e9 81       	ldd	r30, Y+1	; 0x01
    283c:	fa 81       	ldd	r31, Y+2	; 0x02
    283e:	86 89       	ldd	r24, Z+22	; 0x16
    2840:	80 93 ca 01 	sts	0x01CA, r24
    2844:	e9 81       	ldd	r30, Y+1	; 0x01
    2846:	fa 81       	ldd	r31, Y+2	; 0x02
    2848:	86 89       	ldd	r24, Z+22	; 0x16
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	c9 01       	movw	r24, r18
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	82 0f       	add	r24, r18
    285e:	93 1f       	adc	r25, r19
    2860:	ac 01       	movw	r20, r24
    2862:	4f 52       	subi	r20, 0x2F	; 47
    2864:	5e 4f       	sbci	r21, 0xFE	; 254
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	9c 01       	movw	r18, r24
    286c:	2e 5f       	subi	r18, 0xFE	; 254
    286e:	3f 4f       	sbci	r19, 0xFF	; 255
    2870:	ca 01       	movw	r24, r20
    2872:	b9 01       	movw	r22, r18
    2874:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2878:	80 91 f9 01 	lds	r24, 0x01F9
    287c:	88 23       	and	r24, r24
    287e:	09 f0       	breq	.+2      	; 0x2882 <prvCheckPendingReadyList+0x8a>
    2880:	c1 cf       	rjmp	.-126    	; 0x2804 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <prvCheckDelayedList+0x6>
    2892:	00 d0       	rcall	.+0      	; 0x2894 <prvCheckDelayedList+0x8>
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2898:	0e 94 29 23 	call	0x4652	; 0x4652 <xTaskGetTickCount>
    289c:	20 91 cd 01 	lds	r18, 0x01CD
    28a0:	30 91 ce 01 	lds	r19, 0x01CE
    28a4:	82 1b       	sub	r24, r18
    28a6:	93 0b       	sbc	r25, r19
    28a8:	90 93 d0 01 	sts	0x01D0, r25
    28ac:	80 93 cf 01 	sts	0x01CF, r24
    28b0:	85 c0       	rjmp	.+266    	; 0x29bc <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    28b2:	80 91 cb 01 	lds	r24, 0x01CB
    28b6:	90 91 cc 01 	lds	r25, 0x01CC
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	90 93 cc 01 	sts	0x01CC, r25
    28c0:	80 93 cb 01 	sts	0x01CB, r24
		xPassedTicks--;
    28c4:	80 91 cf 01 	lds	r24, 0x01CF
    28c8:	90 91 d0 01 	lds	r25, 0x01D0
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	90 93 d0 01 	sts	0x01D0, r25
    28d2:	80 93 cf 01 	sts	0x01CF, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    28d6:	80 91 cb 01 	lds	r24, 0x01CB
    28da:	90 91 cc 01 	lds	r25, 0x01CC
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <prvCheckDelayedList+0x58>
    28e2:	64 c0       	rjmp	.+200    	; 0x29ac <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    28e4:	80 91 f5 01 	lds	r24, 0x01F5
    28e8:	90 91 f6 01 	lds	r25, 0x01F6
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    28f0:	80 91 f7 01 	lds	r24, 0x01F7
    28f4:	90 91 f8 01 	lds	r25, 0x01F8
    28f8:	90 93 f6 01 	sts	0x01F6, r25
    28fc:	80 93 f5 01 	sts	0x01F5, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	90 93 f8 01 	sts	0x01F8, r25
    2908:	80 93 f7 01 	sts	0x01F7, r24
    290c:	4f c0       	rjmp	.+158    	; 0x29ac <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    290e:	e0 91 f5 01 	lds	r30, 0x01F5
    2912:	f0 91 f6 01 	lds	r31, 0x01F6
    2916:	05 80       	ldd	r0, Z+5	; 0x05
    2918:	f6 81       	ldd	r31, Z+6	; 0x06
    291a:	e0 2d       	mov	r30, r0
    291c:	86 81       	ldd	r24, Z+6	; 0x06
    291e:	97 81       	ldd	r25, Z+7	; 0x07
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2924:	eb 81       	ldd	r30, Y+3	; 0x03
    2926:	fc 81       	ldd	r31, Y+4	; 0x04
    2928:	22 81       	ldd	r18, Z+2	; 0x02
    292a:	33 81       	ldd	r19, Z+3	; 0x03
    292c:	80 91 cb 01 	lds	r24, 0x01CB
    2930:	90 91 cc 01 	lds	r25, 0x01CC
    2934:	82 17       	cp	r24, r18
    2936:	93 07       	cpc	r25, r19
    2938:	08 f4       	brcc	.+2      	; 0x293c <prvCheckDelayedList+0xb0>
    293a:	40 c0       	rjmp	.+128    	; 0x29bc <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    293c:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	02 96       	adiw	r24, 0x02	; 2
    2944:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    2948:	eb 81       	ldd	r30, Y+3	; 0x03
    294a:	fc 81       	ldd	r31, Y+4	; 0x04
    294c:	84 89       	ldd	r24, Z+20	; 0x14
    294e:	95 89       	ldd	r25, Z+21	; 0x15
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	29 f0       	breq	.+10     	; 0x295e <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	0c 96       	adiw	r24, 0x0c	; 12
    295a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    295e:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    2960:	eb 81       	ldd	r30, Y+3	; 0x03
    2962:	fc 81       	ldd	r31, Y+4	; 0x04
    2964:	96 89       	ldd	r25, Z+22	; 0x16
    2966:	80 91 ca 01 	lds	r24, 0x01CA
    296a:	89 17       	cp	r24, r25
    296c:	28 f4       	brcc	.+10     	; 0x2978 <prvCheckDelayedList+0xec>
    296e:	eb 81       	ldd	r30, Y+3	; 0x03
    2970:	fc 81       	ldd	r31, Y+4	; 0x04
    2972:	86 89       	ldd	r24, Z+22	; 0x16
    2974:	80 93 ca 01 	sts	0x01CA, r24
    2978:	eb 81       	ldd	r30, Y+3	; 0x03
    297a:	fc 81       	ldd	r31, Y+4	; 0x04
    297c:	86 89       	ldd	r24, Z+22	; 0x16
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	c9 01       	movw	r24, r18
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	88 0f       	add	r24, r24
    298e:	99 1f       	adc	r25, r25
    2990:	82 0f       	add	r24, r18
    2992:	93 1f       	adc	r25, r19
    2994:	ac 01       	movw	r20, r24
    2996:	4f 52       	subi	r20, 0x2F	; 47
    2998:	5e 4f       	sbci	r21, 0xFE	; 254
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	9c 01       	movw	r18, r24
    29a0:	2e 5f       	subi	r18, 0xFE	; 254
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
    29a4:	ca 01       	movw	r24, r20
    29a6:	b9 01       	movw	r22, r18
    29a8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    29ac:	e0 91 f5 01 	lds	r30, 0x01F5
    29b0:	f0 91 f6 01 	lds	r31, 0x01F6
    29b4:	80 81       	ld	r24, Z
    29b6:	88 23       	and	r24, r24
    29b8:	09 f0       	breq	.+2      	; 0x29bc <prvCheckDelayedList+0x130>
    29ba:	a9 cf       	rjmp	.-174    	; 0x290e <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    29bc:	80 91 cf 01 	lds	r24, 0x01CF
    29c0:	90 91 d0 01 	lds	r25, 0x01D0
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	09 f0       	breq	.+2      	; 0x29ca <prvCheckDelayedList+0x13e>
    29c8:	74 cf       	rjmp	.-280    	; 0x28b2 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    29ca:	80 91 cb 01 	lds	r24, 0x01CB
    29ce:	90 91 cc 01 	lds	r25, 0x01CC
    29d2:	90 93 ce 01 	sts	0x01CE, r25
    29d6:	80 93 cd 01 	sts	0x01CD, r24
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <vCoRoutineSchedule+0x6>
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    29f2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    29f6:	0e 94 46 14 	call	0x288c	; 0x288c <prvCheckDelayedList>
    29fa:	0a c0       	rjmp	.+20     	; 0x2a10 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    29fc:	80 91 ca 01 	lds	r24, 0x01CA
    2a00:	88 23       	and	r24, r24
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <vCoRoutineSchedule+0x1e>
    2a04:	66 c0       	rjmp	.+204    	; 0x2ad2 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2a06:	80 91 ca 01 	lds	r24, 0x01CA
    2a0a:	81 50       	subi	r24, 0x01	; 1
    2a0c:	80 93 ca 01 	sts	0x01CA, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2a10:	80 91 ca 01 	lds	r24, 0x01CA
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	c9 01       	movw	r24, r18
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	82 0f       	add	r24, r18
    2a28:	93 1f       	adc	r25, r19
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	ef 52       	subi	r30, 0x2F	; 47
    2a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a30:	80 81       	ld	r24, Z
    2a32:	88 23       	and	r24, r24
    2a34:	19 f3       	breq	.-58     	; 0x29fc <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2a36:	80 91 ca 01 	lds	r24, 0x01CA
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	c9 01       	movw	r24, r18
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	82 0f       	add	r24, r18
    2a4e:	93 1f       	adc	r25, r19
    2a50:	8f 52       	subi	r24, 0x2F	; 47
    2a52:	9e 4f       	sbci	r25, 0xFE	; 254
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5c:	01 80       	ldd	r0, Z+1	; 0x01
    2a5e:	f2 81       	ldd	r31, Z+2	; 0x02
    2a60:	e0 2d       	mov	r30, r0
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	93 81       	ldd	r25, Z+3	; 0x03
    2a66:	e9 81       	ldd	r30, Y+1	; 0x01
    2a68:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6a:	92 83       	std	Z+2, r25	; 0x02
    2a6c:	81 83       	std	Z+1, r24	; 0x01
    2a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a70:	fa 81       	ldd	r31, Y+2	; 0x02
    2a72:	21 81       	ldd	r18, Z+1	; 0x01
    2a74:	32 81       	ldd	r19, Z+2	; 0x02
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	03 96       	adiw	r24, 0x03	; 3
    2a7c:	28 17       	cp	r18, r24
    2a7e:	39 07       	cpc	r19, r25
    2a80:	59 f4       	brne	.+22     	; 0x2a98 <vCoRoutineSchedule+0xb0>
    2a82:	e9 81       	ldd	r30, Y+1	; 0x01
    2a84:	fa 81       	ldd	r31, Y+2	; 0x02
    2a86:	01 80       	ldd	r0, Z+1	; 0x01
    2a88:	f2 81       	ldd	r31, Z+2	; 0x02
    2a8a:	e0 2d       	mov	r30, r0
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	e9 81       	ldd	r30, Y+1	; 0x01
    2a92:	fa 81       	ldd	r31, Y+2	; 0x02
    2a94:	92 83       	std	Z+2, r25	; 0x02
    2a96:	81 83       	std	Z+1, r24	; 0x01
    2a98:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9c:	01 80       	ldd	r0, Z+1	; 0x01
    2a9e:	f2 81       	ldd	r31, Z+2	; 0x02
    2aa0:	e0 2d       	mov	r30, r0
    2aa2:	86 81       	ldd	r24, Z+6	; 0x06
    2aa4:	97 81       	ldd	r25, Z+7	; 0x07
    2aa6:	90 93 c9 01 	sts	0x01C9, r25
    2aaa:	80 93 c8 01 	sts	0x01C8, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2aae:	e0 91 c8 01 	lds	r30, 0x01C8
    2ab2:	f0 91 c9 01 	lds	r31, 0x01C9
    2ab6:	40 81       	ld	r20, Z
    2ab8:	51 81       	ldd	r21, Z+1	; 0x01
    2aba:	80 91 c8 01 	lds	r24, 0x01C8
    2abe:	90 91 c9 01 	lds	r25, 0x01C9
    2ac2:	e0 91 c8 01 	lds	r30, 0x01C8
    2ac6:	f0 91 c9 01 	lds	r31, 0x01C9
    2aca:	27 89       	ldd	r18, Z+23	; 0x17
    2acc:	62 2f       	mov	r22, r18
    2ace:	fa 01       	movw	r30, r20
    2ad0:	09 95       	icall

	return;
}
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	0f 92       	push	r0
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2ae6:	19 82       	std	Y+1, r1	; 0x01
    2ae8:	13 c0       	rjmp	.+38     	; 0x2b10 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	c9 01       	movw	r24, r18
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	82 0f       	add	r24, r18
    2b00:	93 1f       	adc	r25, r19
    2b02:	8f 52       	subi	r24, 0x2F	; 47
    2b04:	9e 4f       	sbci	r25, 0xFE	; 254
    2b06:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	8f 5f       	subi	r24, 0xFF	; 255
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	82 30       	cpi	r24, 0x02	; 2
    2b14:	50 f3       	brcs	.-44     	; 0x2aea <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2b16:	83 ee       	ldi	r24, 0xE3	; 227
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2b1e:	8c ee       	ldi	r24, 0xEC	; 236
    2b20:	91 e0       	ldi	r25, 0x01	; 1
    2b22:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2b26:	89 ef       	ldi	r24, 0xF9	; 249
    2b28:	91 e0       	ldi	r25, 0x01	; 1
    2b2a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2b2e:	83 ee       	ldi	r24, 0xE3	; 227
    2b30:	91 e0       	ldi	r25, 0x01	; 1
    2b32:	90 93 f6 01 	sts	0x01F6, r25
    2b36:	80 93 f5 01 	sts	0x01F5, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2b3a:	8c ee       	ldi	r24, 0xEC	; 236
    2b3c:	91 e0       	ldi	r25, 0x01	; 1
    2b3e:	90 93 f8 01 	sts	0x01F8, r25
    2b42:	80 93 f7 01 	sts	0x01F7, r24
}
    2b46:	0f 90       	pop	r0
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <xCoRoutineRemoveFromEventList+0x6>
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <xCoRoutineRemoveFromEventList+0x8>
    2b56:	0f 92       	push	r0
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	9d 83       	std	Y+5, r25	; 0x05
    2b5e:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2b60:	ec 81       	ldd	r30, Y+4	; 0x04
    2b62:	fd 81       	ldd	r31, Y+5	; 0x05
    2b64:	05 80       	ldd	r0, Z+5	; 0x05
    2b66:	f6 81       	ldd	r31, Z+6	; 0x06
    2b68:	e0 2d       	mov	r30, r0
    2b6a:	86 81       	ldd	r24, Z+6	; 0x06
    2b6c:	97 81       	ldd	r25, Z+7	; 0x07
    2b6e:	9b 83       	std	Y+3, r25	; 0x03
    2b70:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	9b 81       	ldd	r25, Y+3	; 0x03
    2b76:	0c 96       	adiw	r24, 0x0c	; 12
    2b78:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b80:	9c 01       	movw	r18, r24
    2b82:	24 5f       	subi	r18, 0xF4	; 244
    2b84:	3f 4f       	sbci	r19, 0xFF	; 255
    2b86:	89 ef       	ldi	r24, 0xF9	; 249
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	b9 01       	movw	r22, r18
    2b8c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2b90:	ea 81       	ldd	r30, Y+2	; 0x02
    2b92:	fb 81       	ldd	r31, Y+3	; 0x03
    2b94:	96 89       	ldd	r25, Z+22	; 0x16
    2b96:	e0 91 c8 01 	lds	r30, 0x01C8
    2b9a:	f0 91 c9 01 	lds	r31, 0x01C9
    2b9e:	86 89       	ldd	r24, Z+22	; 0x16
    2ba0:	98 17       	cp	r25, r24
    2ba2:	18 f0       	brcs	.+6      	; 0x2baa <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    2baa:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <pvPortMalloc+0x6>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <pvPortMalloc+0x8>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    2bce:	1a 82       	std	Y+2, r1	; 0x02
    2bd0:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    2bd2:	0e 94 93 22 	call	0x4526	; 0x4526 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2bd6:	80 91 02 02 	lds	r24, 0x0202
    2bda:	90 91 03 02 	lds	r25, 0x0203
    2bde:	2b 81       	ldd	r18, Y+3	; 0x03
    2be0:	3c 81       	ldd	r19, Y+4	; 0x04
    2be2:	82 0f       	add	r24, r18
    2be4:	93 1f       	adc	r25, r19
    2be6:	23 e0       	ldi	r18, 0x03	; 3
    2be8:	88 3e       	cpi	r24, 0xE8	; 232
    2bea:	92 07       	cpc	r25, r18
    2bec:	18 f5       	brcc	.+70     	; 0x2c34 <pvPortMalloc+0x76>
    2bee:	20 91 02 02 	lds	r18, 0x0202
    2bf2:	30 91 03 02 	lds	r19, 0x0203
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	28 0f       	add	r18, r24
    2bfc:	39 1f       	adc	r19, r25
    2bfe:	80 91 02 02 	lds	r24, 0x0202
    2c02:	90 91 03 02 	lds	r25, 0x0203
    2c06:	82 17       	cp	r24, r18
    2c08:	93 07       	cpc	r25, r19
    2c0a:	a0 f4       	brcc	.+40     	; 0x2c34 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    2c0c:	80 91 02 02 	lds	r24, 0x0202
    2c10:	90 91 03 02 	lds	r25, 0x0203
    2c14:	8c 5f       	subi	r24, 0xFC	; 252
    2c16:	9d 4f       	sbci	r25, 0xFD	; 253
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    2c1c:	20 91 02 02 	lds	r18, 0x0202
    2c20:	30 91 03 02 	lds	r19, 0x0203
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	9c 81       	ldd	r25, Y+4	; 0x04
    2c28:	82 0f       	add	r24, r18
    2c2a:	93 1f       	adc	r25, r19
    2c2c:	90 93 03 02 	sts	0x0203, r25
    2c30:	80 93 02 02 	sts	0x0202, r24
		}	
	}
	xTaskResumeAll();
    2c34:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	08 95       	ret

00002c4a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <vPortFree+0x6>
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2c6a:	10 92 03 02 	sts	0x0203, r1
    2c6e:	10 92 02 02 	sts	0x0202, r1
}
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    2c80:	20 91 02 02 	lds	r18, 0x0202
    2c84:	30 91 03 02 	lds	r19, 0x0203
    2c88:	88 ee       	ldi	r24, 0xE8	; 232
    2c8a:	93 e0       	ldi	r25, 0x03	; 3
    2c8c:	82 1b       	sub	r24, r18
    2c8e:	93 0b       	sbc	r25, r19
}
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <vListInitialise+0x6>
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	9a 83       	std	Y+2, r25	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca8:	03 96       	adiw	r24, 0x03	; 3
    2caa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cac:	fa 81       	ldd	r31, Y+2	; 0x02
    2cae:	92 83       	std	Z+2, r25	; 0x02
    2cb0:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb6:	8f ef       	ldi	r24, 0xFF	; 255
    2cb8:	9f ef       	ldi	r25, 0xFF	; 255
    2cba:	94 83       	std	Z+4, r25	; 0x04
    2cbc:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc2:	03 96       	adiw	r24, 0x03	; 3
    2cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc8:	96 83       	std	Z+6, r25	; 0x06
    2cca:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	03 96       	adiw	r24, 0x03	; 3
    2cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd6:	90 87       	std	Z+8, r25	; 0x08
    2cd8:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2cda:	e9 81       	ldd	r30, Y+1	; 0x01
    2cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cde:	10 82       	st	Z, r1
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <vListInitialiseItem+0x6>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfc:	11 86       	std	Z+9, r1	; 0x09
    2cfe:	10 86       	std	Z+8, r1	; 0x08
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <vListInsertEnd+0x6>
    2d10:	00 d0       	rcall	.+0      	; 0x2d12 <vListInsertEnd+0x8>
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <vListInsertEnd+0xa>
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	9c 83       	std	Y+4, r25	; 0x04
    2d1a:	8b 83       	std	Y+3, r24	; 0x03
    2d1c:	7e 83       	std	Y+6, r23	; 0x06
    2d1e:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2d20:	eb 81       	ldd	r30, Y+3	; 0x03
    2d22:	fc 81       	ldd	r31, Y+4	; 0x04
    2d24:	81 81       	ldd	r24, Z+1	; 0x01
    2d26:	92 81       	ldd	r25, Z+2	; 0x02
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    2d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	ed 81       	ldd	r30, Y+5	; 0x05
    2d36:	fe 81       	ldd	r31, Y+6	; 0x06
    2d38:	93 83       	std	Z+3, r25	; 0x03
    2d3a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d40:	81 81       	ldd	r24, Z+1	; 0x01
    2d42:	92 81       	ldd	r25, Z+2	; 0x02
    2d44:	ed 81       	ldd	r30, Y+5	; 0x05
    2d46:	fe 81       	ldd	r31, Y+6	; 0x06
    2d48:	95 83       	std	Z+5, r25	; 0x05
    2d4a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d50:	02 80       	ldd	r0, Z+2	; 0x02
    2d52:	f3 81       	ldd	r31, Z+3	; 0x03
    2d54:	e0 2d       	mov	r30, r0
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	95 83       	std	Z+5, r25	; 0x05
    2d5c:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	93 83       	std	Z+3, r25	; 0x03
    2d68:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d70:	fc 81       	ldd	r31, Y+4	; 0x04
    2d72:	92 83       	std	Z+2, r25	; 0x02
    2d74:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2d76:	ed 81       	ldd	r30, Y+5	; 0x05
    2d78:	fe 81       	ldd	r31, Y+6	; 0x06
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7e:	91 87       	std	Z+9, r25	; 0x09
    2d80:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2d82:	eb 81       	ldd	r30, Y+3	; 0x03
    2d84:	fc 81       	ldd	r31, Y+4	; 0x04
    2d86:	80 81       	ld	r24, Z
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8e:	80 83       	st	Z, r24
}
    2d90:	26 96       	adiw	r28, 0x06	; 6
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	28 97       	sbiw	r28, 0x08	; 8
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	78 87       	std	Y+8, r23	; 0x08
    2dbc:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2dbe:	ef 81       	ldd	r30, Y+7	; 0x07
    2dc0:	f8 85       	ldd	r31, Y+8	; 0x08
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	9a 83       	std	Y+2, r25	; 0x02
    2dc8:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dce:	2f ef       	ldi	r18, 0xFF	; 255
    2dd0:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd2:	92 07       	cpc	r25, r18
    2dd4:	39 f4       	brne	.+14     	; 0x2de4 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2dd6:	ed 81       	ldd	r30, Y+5	; 0x05
    2dd8:	fe 81       	ldd	r31, Y+6	; 0x06
    2dda:	87 81       	ldd	r24, Z+7	; 0x07
    2ddc:	90 85       	ldd	r25, Z+8	; 0x08
    2dde:	9c 83       	std	Y+4, r25	; 0x04
    2de0:	8b 83       	std	Y+3, r24	; 0x03
    2de2:	18 c0       	rjmp	.+48     	; 0x2e14 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2de4:	8d 81       	ldd	r24, Y+5	; 0x05
    2de6:	9e 81       	ldd	r25, Y+6	; 0x06
    2de8:	03 96       	adiw	r24, 0x03	; 3
    2dea:	9c 83       	std	Y+4, r25	; 0x04
    2dec:	8b 83       	std	Y+3, r24	; 0x03
    2dee:	06 c0       	rjmp	.+12     	; 0x2dfc <vListInsert+0x5a>
    2df0:	eb 81       	ldd	r30, Y+3	; 0x03
    2df2:	fc 81       	ldd	r31, Y+4	; 0x04
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	9c 83       	std	Y+4, r25	; 0x04
    2dfa:	8b 83       	std	Y+3, r24	; 0x03
    2dfc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dfe:	fc 81       	ldd	r31, Y+4	; 0x04
    2e00:	02 80       	ldd	r0, Z+2	; 0x02
    2e02:	f3 81       	ldd	r31, Z+3	; 0x03
    2e04:	e0 2d       	mov	r30, r0
    2e06:	20 81       	ld	r18, Z
    2e08:	31 81       	ldd	r19, Z+1	; 0x01
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	82 17       	cp	r24, r18
    2e10:	93 07       	cpc	r25, r19
    2e12:	70 f7       	brcc	.-36     	; 0x2df0 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2e14:	eb 81       	ldd	r30, Y+3	; 0x03
    2e16:	fc 81       	ldd	r31, Y+4	; 0x04
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	ef 81       	ldd	r30, Y+7	; 0x07
    2e1e:	f8 85       	ldd	r31, Y+8	; 0x08
    2e20:	93 83       	std	Z+3, r25	; 0x03
    2e22:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e24:	ef 81       	ldd	r30, Y+7	; 0x07
    2e26:	f8 85       	ldd	r31, Y+8	; 0x08
    2e28:	02 80       	ldd	r0, Z+2	; 0x02
    2e2a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e2c:	e0 2d       	mov	r30, r0
    2e2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e30:	98 85       	ldd	r25, Y+8	; 0x08
    2e32:	95 83       	std	Z+5, r25	; 0x05
    2e34:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2e36:	ef 81       	ldd	r30, Y+7	; 0x07
    2e38:	f8 85       	ldd	r31, Y+8	; 0x08
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	95 83       	std	Z+5, r25	; 0x05
    2e40:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e42:	8f 81       	ldd	r24, Y+7	; 0x07
    2e44:	98 85       	ldd	r25, Y+8	; 0x08
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	93 83       	std	Z+3, r25	; 0x03
    2e4c:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e4e:	ef 81       	ldd	r30, Y+7	; 0x07
    2e50:	f8 85       	ldd	r31, Y+8	; 0x08
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	91 87       	std	Z+9, r25	; 0x09
    2e58:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2e5a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e5c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e5e:	80 81       	ld	r24, Z
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	ed 81       	ldd	r30, Y+5	; 0x05
    2e64:	fe 81       	ldd	r31, Y+6	; 0x06
    2e66:	80 83       	st	Z, r24
}
    2e68:	28 96       	adiw	r28, 0x08	; 8
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <vListRemove+0x6>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <vListRemove+0x8>
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e90:	b3 81       	ldd	r27, Z+3	; 0x03
    2e92:	eb 81       	ldd	r30, Y+3	; 0x03
    2e94:	fc 81       	ldd	r31, Y+4	; 0x04
    2e96:	84 81       	ldd	r24, Z+4	; 0x04
    2e98:	95 81       	ldd	r25, Z+5	; 0x05
    2e9a:	15 96       	adiw	r26, 0x05	; 5
    2e9c:	9c 93       	st	X, r25
    2e9e:	8e 93       	st	-X, r24
    2ea0:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea6:	a4 81       	ldd	r26, Z+4	; 0x04
    2ea8:	b5 81       	ldd	r27, Z+5	; 0x05
    2eaa:	eb 81       	ldd	r30, Y+3	; 0x03
    2eac:	fc 81       	ldd	r31, Y+4	; 0x04
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	93 81       	ldd	r25, Z+3	; 0x03
    2eb2:	13 96       	adiw	r26, 0x03	; 3
    2eb4:	9c 93       	st	X, r25
    2eb6:	8e 93       	st	-X, r24
    2eb8:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2eba:	eb 81       	ldd	r30, Y+3	; 0x03
    2ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ebe:	80 85       	ldd	r24, Z+8	; 0x08
    2ec0:	91 85       	ldd	r25, Z+9	; 0x09
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eca:	21 81       	ldd	r18, Z+1	; 0x01
    2ecc:	32 81       	ldd	r19, Z+2	; 0x02
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	28 17       	cp	r18, r24
    2ed4:	39 07       	cpc	r19, r25
    2ed6:	41 f4       	brne	.+16     	; 0x2ee8 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eda:	fc 81       	ldd	r31, Y+4	; 0x04
    2edc:	84 81       	ldd	r24, Z+4	; 0x04
    2ede:	95 81       	ldd	r25, Z+5	; 0x05
    2ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee4:	92 83       	std	Z+2, r25	; 0x02
    2ee6:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    2ee8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eea:	fc 81       	ldd	r31, Y+4	; 0x04
    2eec:	11 86       	std	Z+9, r1	; 0x09
    2eee:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    2ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef4:	80 81       	ld	r24, Z
    2ef6:	81 50       	subi	r24, 0x01	; 1
    2ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    2efa:	fa 81       	ldd	r31, Y+2	; 0x02
    2efc:	80 83       	st	Z, r24
}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	28 97       	sbiw	r28, 0x08	; 8
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
    2f24:	7e 83       	std	Y+6, r23	; 0x06
    2f26:	6d 83       	std	Y+5, r22	; 0x05
    2f28:	58 87       	std	Y+8, r21	; 0x08
    2f2a:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2f2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f30:	81 e1       	ldi	r24, 0x11	; 17
    2f32:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	9c 83       	std	Y+4, r25	; 0x04
    2f3c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2f3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f40:	fc 81       	ldd	r31, Y+4	; 0x04
    2f42:	82 e2       	ldi	r24, 0x22	; 34
    2f44:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	9c 83       	std	Y+4, r25	; 0x04
    2f4e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2f50:	eb 81       	ldd	r30, Y+3	; 0x03
    2f52:	fc 81       	ldd	r31, Y+4	; 0x04
    2f54:	83 e3       	ldi	r24, 0x33	; 51
    2f56:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f70:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	9c 83       	std	Y+4, r25	; 0x04
    2f7a:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f80:	89 2f       	mov	r24, r25
    2f82:	99 27       	eor	r25, r25
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	9c 83       	std	Y+4, r25	; 0x04
    2f98:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2f9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9e:	10 82       	st	Z, r1
	pxTopOfStack--;
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2faa:	eb 81       	ldd	r30, Y+3	; 0x03
    2fac:	fc 81       	ldd	r31, Y+4	; 0x04
    2fae:	80 e8       	ldi	r24, 0x80	; 128
    2fb0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9c 83       	std	Y+4, r25	; 0x04
    2fba:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	10 82       	st	Z, r1
	pxTopOfStack--;
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fce:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	9c 83       	std	Y+4, r25	; 0x04
    2fdc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2fde:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe2:	83 e0       	ldi	r24, 0x03	; 3
    2fe4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff4:	84 e0       	ldi	r24, 0x04	; 4
    2ff6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9c 83       	std	Y+4, r25	; 0x04
    3000:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    3002:	eb 81       	ldd	r30, Y+3	; 0x03
    3004:	fc 81       	ldd	r31, Y+4	; 0x04
    3006:	85 e0       	ldi	r24, 0x05	; 5
    3008:	80 83       	st	Z, r24
	pxTopOfStack--;
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    3014:	eb 81       	ldd	r30, Y+3	; 0x03
    3016:	fc 81       	ldd	r31, Y+4	; 0x04
    3018:	86 e0       	ldi	r24, 0x06	; 6
    301a:	80 83       	st	Z, r24
	pxTopOfStack--;
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    3026:	eb 81       	ldd	r30, Y+3	; 0x03
    3028:	fc 81       	ldd	r31, Y+4	; 0x04
    302a:	87 e0       	ldi	r24, 0x07	; 7
    302c:	80 83       	st	Z, r24
	pxTopOfStack--;
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    3038:	eb 81       	ldd	r30, Y+3	; 0x03
    303a:	fc 81       	ldd	r31, Y+4	; 0x04
    303c:	88 e0       	ldi	r24, 0x08	; 8
    303e:	80 83       	st	Z, r24
	pxTopOfStack--;
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	9c 81       	ldd	r25, Y+4	; 0x04
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    304a:	eb 81       	ldd	r30, Y+3	; 0x03
    304c:	fc 81       	ldd	r31, Y+4	; 0x04
    304e:	89 e0       	ldi	r24, 0x09	; 9
    3050:	80 83       	st	Z, r24
	pxTopOfStack--;
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	9c 81       	ldd	r25, Y+4	; 0x04
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    305c:	eb 81       	ldd	r30, Y+3	; 0x03
    305e:	fc 81       	ldd	r31, Y+4	; 0x04
    3060:	80 e1       	ldi	r24, 0x10	; 16
    3062:	80 83       	st	Z, r24
	pxTopOfStack--;
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	9c 81       	ldd	r25, Y+4	; 0x04
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	9c 83       	std	Y+4, r25	; 0x04
    306c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    306e:	eb 81       	ldd	r30, Y+3	; 0x03
    3070:	fc 81       	ldd	r31, Y+4	; 0x04
    3072:	81 e1       	ldi	r24, 0x11	; 17
    3074:	80 83       	st	Z, r24
	pxTopOfStack--;
    3076:	8b 81       	ldd	r24, Y+3	; 0x03
    3078:	9c 81       	ldd	r25, Y+4	; 0x04
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	9c 83       	std	Y+4, r25	; 0x04
    307e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    3080:	eb 81       	ldd	r30, Y+3	; 0x03
    3082:	fc 81       	ldd	r31, Y+4	; 0x04
    3084:	82 e1       	ldi	r24, 0x12	; 18
    3086:	80 83       	st	Z, r24
	pxTopOfStack--;
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	9c 81       	ldd	r25, Y+4	; 0x04
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	9c 83       	std	Y+4, r25	; 0x04
    3090:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    3092:	eb 81       	ldd	r30, Y+3	; 0x03
    3094:	fc 81       	ldd	r31, Y+4	; 0x04
    3096:	83 e1       	ldi	r24, 0x13	; 19
    3098:	80 83       	st	Z, r24
	pxTopOfStack--;
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	9c 83       	std	Y+4, r25	; 0x04
    30a2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    30a4:	eb 81       	ldd	r30, Y+3	; 0x03
    30a6:	fc 81       	ldd	r31, Y+4	; 0x04
    30a8:	84 e1       	ldi	r24, 0x14	; 20
    30aa:	80 83       	st	Z, r24
	pxTopOfStack--;
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    30b6:	eb 81       	ldd	r30, Y+3	; 0x03
    30b8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ba:	85 e1       	ldi	r24, 0x15	; 21
    30bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	9c 81       	ldd	r25, Y+4	; 0x04
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    30c8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ca:	fc 81       	ldd	r31, Y+4	; 0x04
    30cc:	86 e1       	ldi	r24, 0x16	; 22
    30ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	9c 83       	std	Y+4, r25	; 0x04
    30d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    30da:	eb 81       	ldd	r30, Y+3	; 0x03
    30dc:	fc 81       	ldd	r31, Y+4	; 0x04
    30de:	87 e1       	ldi	r24, 0x17	; 23
    30e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	9c 83       	std	Y+4, r25	; 0x04
    30ea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    30ec:	eb 81       	ldd	r30, Y+3	; 0x03
    30ee:	fc 81       	ldd	r31, Y+4	; 0x04
    30f0:	88 e1       	ldi	r24, 0x18	; 24
    30f2:	80 83       	st	Z, r24
	pxTopOfStack--;
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	9c 81       	ldd	r25, Y+4	; 0x04
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	9c 83       	std	Y+4, r25	; 0x04
    30fc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    30fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3100:	fc 81       	ldd	r31, Y+4	; 0x04
    3102:	89 e1       	ldi	r24, 0x19	; 25
    3104:	80 83       	st	Z, r24
	pxTopOfStack--;
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	9c 83       	std	Y+4, r25	; 0x04
    310e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    3110:	eb 81       	ldd	r30, Y+3	; 0x03
    3112:	fc 81       	ldd	r31, Y+4	; 0x04
    3114:	80 e2       	ldi	r24, 0x20	; 32
    3116:	80 83       	st	Z, r24
	pxTopOfStack--;
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	9c 81       	ldd	r25, Y+4	; 0x04
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	9c 83       	std	Y+4, r25	; 0x04
    3120:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    3122:	eb 81       	ldd	r30, Y+3	; 0x03
    3124:	fc 81       	ldd	r31, Y+4	; 0x04
    3126:	81 e2       	ldi	r24, 0x21	; 33
    3128:	80 83       	st	Z, r24
	pxTopOfStack--;
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	9c 81       	ldd	r25, Y+4	; 0x04
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    3134:	eb 81       	ldd	r30, Y+3	; 0x03
    3136:	fc 81       	ldd	r31, Y+4	; 0x04
    3138:	82 e2       	ldi	r24, 0x22	; 34
    313a:	80 83       	st	Z, r24
	pxTopOfStack--;
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	9c 83       	std	Y+4, r25	; 0x04
    3144:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    3146:	eb 81       	ldd	r30, Y+3	; 0x03
    3148:	fc 81       	ldd	r31, Y+4	; 0x04
    314a:	83 e2       	ldi	r24, 0x23	; 35
    314c:	80 83       	st	Z, r24
	pxTopOfStack--;
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	9c 81       	ldd	r25, Y+4	; 0x04
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	9c 83       	std	Y+4, r25	; 0x04
    3156:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    3158:	8f 81       	ldd	r24, Y+7	; 0x07
    315a:	98 85       	ldd	r25, Y+8	; 0x08
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	eb 81       	ldd	r30, Y+3	; 0x03
    3164:	fc 81       	ldd	r31, Y+4	; 0x04
    3166:	80 83       	st	Z, r24
	pxTopOfStack--;
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	9c 81       	ldd	r25, Y+4	; 0x04
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	9c 83       	std	Y+4, r25	; 0x04
    3170:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	89 2f       	mov	r24, r25
    3178:	99 27       	eor	r25, r25
    317a:	9a 83       	std	Y+2, r25	; 0x02
    317c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	eb 81       	ldd	r30, Y+3	; 0x03
    3182:	fc 81       	ldd	r31, Y+4	; 0x04
    3184:	80 83       	st	Z, r24
	pxTopOfStack--;
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
    3188:	9c 81       	ldd	r25, Y+4	; 0x04
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	9c 83       	std	Y+4, r25	; 0x04
    318e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    3190:	eb 81       	ldd	r30, Y+3	; 0x03
    3192:	fc 81       	ldd	r31, Y+4	; 0x04
    3194:	86 e2       	ldi	r24, 0x26	; 38
    3196:	80 83       	st	Z, r24
	pxTopOfStack--;
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	9c 83       	std	Y+4, r25	; 0x04
    31a0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    31a2:	eb 81       	ldd	r30, Y+3	; 0x03
    31a4:	fc 81       	ldd	r31, Y+4	; 0x04
    31a6:	87 e2       	ldi	r24, 0x27	; 39
    31a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	9c 83       	std	Y+4, r25	; 0x04
    31b2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    31b4:	eb 81       	ldd	r30, Y+3	; 0x03
    31b6:	fc 81       	ldd	r31, Y+4	; 0x04
    31b8:	88 e2       	ldi	r24, 0x28	; 40
    31ba:	80 83       	st	Z, r24
	pxTopOfStack--;
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	9c 81       	ldd	r25, Y+4	; 0x04
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	9c 83       	std	Y+4, r25	; 0x04
    31c4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    31c6:	eb 81       	ldd	r30, Y+3	; 0x03
    31c8:	fc 81       	ldd	r31, Y+4	; 0x04
    31ca:	89 e2       	ldi	r24, 0x29	; 41
    31cc:	80 83       	st	Z, r24
	pxTopOfStack--;
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	9c 83       	std	Y+4, r25	; 0x04
    31d6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    31d8:	eb 81       	ldd	r30, Y+3	; 0x03
    31da:	fc 81       	ldd	r31, Y+4	; 0x04
    31dc:	80 e3       	ldi	r24, 0x30	; 48
    31de:	80 83       	st	Z, r24
	pxTopOfStack--;
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	9c 83       	std	Y+4, r25	; 0x04
    31e8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    31ea:	eb 81       	ldd	r30, Y+3	; 0x03
    31ec:	fc 81       	ldd	r31, Y+4	; 0x04
    31ee:	81 e3       	ldi	r24, 0x31	; 49
    31f0:	80 83       	st	Z, r24
	pxTopOfStack--;
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	9c 81       	ldd	r25, Y+4	; 0x04
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	9c 83       	std	Y+4, r25	; 0x04
    31fa:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3200:	28 96       	adiw	r28, 0x08	; 8
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    321a:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    321e:	a0 91 ec 05 	lds	r26, 0x05EC
    3222:	b0 91 ed 05 	lds	r27, 0x05ED
    3226:	cd 91       	ld	r28, X+
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	dd 91       	ld	r29, X+
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	ff 91       	pop	r31
    3230:	ef 91       	pop	r30
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	bf 91       	pop	r27
    3238:	af 91       	pop	r26
    323a:	9f 91       	pop	r25
    323c:	8f 91       	pop	r24
    323e:	7f 91       	pop	r23
    3240:	6f 91       	pop	r22
    3242:	5f 91       	pop	r21
    3244:	4f 91       	pop	r20
    3246:	3f 91       	pop	r19
    3248:	2f 91       	pop	r18
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	ff 90       	pop	r15
    3250:	ef 90       	pop	r14
    3252:	df 90       	pop	r13
    3254:	cf 90       	pop	r12
    3256:	bf 90       	pop	r11
    3258:	af 90       	pop	r10
    325a:	9f 90       	pop	r9
    325c:	8f 90       	pop	r8
    325e:	7f 90       	pop	r7
    3260:	6f 90       	pop	r6
    3262:	5f 90       	pop	r5
    3264:	4f 90       	pop	r4
    3266:	3f 90       	pop	r3
    3268:	2f 90       	pop	r2
    326a:	1f 90       	pop	r1
    326c:	0f 90       	pop	r0
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    3272:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    3274:	81 e0       	ldi	r24, 0x01	; 1
}
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    328a:	0f 92       	push	r0
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	0f 92       	push	r0
    3292:	1f 92       	push	r1
    3294:	11 24       	eor	r1, r1
    3296:	2f 92       	push	r2
    3298:	3f 92       	push	r3
    329a:	4f 92       	push	r4
    329c:	5f 92       	push	r5
    329e:	6f 92       	push	r6
    32a0:	7f 92       	push	r7
    32a2:	8f 92       	push	r8
    32a4:	9f 92       	push	r9
    32a6:	af 92       	push	r10
    32a8:	bf 92       	push	r11
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	2f 93       	push	r18
    32b8:	3f 93       	push	r19
    32ba:	4f 93       	push	r20
    32bc:	5f 93       	push	r21
    32be:	6f 93       	push	r22
    32c0:	7f 93       	push	r23
    32c2:	8f 93       	push	r24
    32c4:	9f 93       	push	r25
    32c6:	af 93       	push	r26
    32c8:	bf 93       	push	r27
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	ef 93       	push	r30
    32d0:	ff 93       	push	r31
    32d2:	a0 91 ec 05 	lds	r26, 0x05EC
    32d6:	b0 91 ed 05 	lds	r27, 0x05ED
    32da:	0d b6       	in	r0, 0x3d	; 61
    32dc:	0d 92       	st	X+, r0
    32de:	0e b6       	in	r0, 0x3e	; 62
    32e0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    32e2:	0e 94 33 24 	call	0x4866	; 0x4866 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    32e6:	a0 91 ec 05 	lds	r26, 0x05EC
    32ea:	b0 91 ed 05 	lds	r27, 0x05ED
    32ee:	cd 91       	ld	r28, X+
    32f0:	cd bf       	out	0x3d, r28	; 61
    32f2:	dd 91       	ld	r29, X+
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	ff 91       	pop	r31
    32f8:	ef 91       	pop	r30
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	bf 91       	pop	r27
    3300:	af 91       	pop	r26
    3302:	9f 91       	pop	r25
    3304:	8f 91       	pop	r24
    3306:	7f 91       	pop	r23
    3308:	6f 91       	pop	r22
    330a:	5f 91       	pop	r21
    330c:	4f 91       	pop	r20
    330e:	3f 91       	pop	r19
    3310:	2f 91       	pop	r18
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	df 90       	pop	r13
    331c:	cf 90       	pop	r12
    331e:	bf 90       	pop	r11
    3320:	af 90       	pop	r10
    3322:	9f 90       	pop	r9
    3324:	8f 90       	pop	r8
    3326:	7f 90       	pop	r7
    3328:	6f 90       	pop	r6
    332a:	5f 90       	pop	r5
    332c:	4f 90       	pop	r4
    332e:	3f 90       	pop	r3
    3330:	2f 90       	pop	r2
    3332:	1f 90       	pop	r1
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	0f 90       	pop	r0

	asm volatile ( "ret" );
    333a:	08 95       	ret

0000333c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    333c:	0f 92       	push	r0
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	0f 92       	push	r0
    3344:	1f 92       	push	r1
    3346:	11 24       	eor	r1, r1
    3348:	2f 92       	push	r2
    334a:	3f 92       	push	r3
    334c:	4f 92       	push	r4
    334e:	5f 92       	push	r5
    3350:	6f 92       	push	r6
    3352:	7f 92       	push	r7
    3354:	8f 92       	push	r8
    3356:	9f 92       	push	r9
    3358:	af 92       	push	r10
    335a:	bf 92       	push	r11
    335c:	cf 92       	push	r12
    335e:	df 92       	push	r13
    3360:	ef 92       	push	r14
    3362:	ff 92       	push	r15
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	2f 93       	push	r18
    336a:	3f 93       	push	r19
    336c:	4f 93       	push	r20
    336e:	5f 93       	push	r21
    3370:	6f 93       	push	r22
    3372:	7f 93       	push	r23
    3374:	8f 93       	push	r24
    3376:	9f 93       	push	r25
    3378:	af 93       	push	r26
    337a:	bf 93       	push	r27
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	ef 93       	push	r30
    3382:	ff 93       	push	r31
    3384:	a0 91 ec 05 	lds	r26, 0x05EC
    3388:	b0 91 ed 05 	lds	r27, 0x05ED
    338c:	0d b6       	in	r0, 0x3d	; 61
    338e:	0d 92       	st	X+, r0
    3390:	0e b6       	in	r0, 0x3e	; 62
    3392:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    3394:	0e 94 5e 23 	call	0x46bc	; 0x46bc <vTaskIncrementTick>
	vTaskSwitchContext();
    3398:	0e 94 33 24 	call	0x4866	; 0x4866 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    339c:	a0 91 ec 05 	lds	r26, 0x05EC
    33a0:	b0 91 ed 05 	lds	r27, 0x05ED
    33a4:	cd 91       	ld	r28, X+
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	dd 91       	ld	r29, X+
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	ff 91       	pop	r31
    33ae:	ef 91       	pop	r30
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	bf 91       	pop	r27
    33b6:	af 91       	pop	r26
    33b8:	9f 91       	pop	r25
    33ba:	8f 91       	pop	r24
    33bc:	7f 91       	pop	r23
    33be:	6f 91       	pop	r22
    33c0:	5f 91       	pop	r21
    33c2:	4f 91       	pop	r20
    33c4:	3f 91       	pop	r19
    33c6:	2f 91       	pop	r18
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	df 90       	pop	r13
    33d2:	cf 90       	pop	r12
    33d4:	bf 90       	pop	r11
    33d6:	af 90       	pop	r10
    33d8:	9f 90       	pop	r9
    33da:	8f 90       	pop	r8
    33dc:	7f 90       	pop	r7
    33de:	6f 90       	pop	r6
    33e0:	5f 90       	pop	r5
    33e2:	4f 90       	pop	r4
    33e4:	3f 90       	pop	r3
    33e6:	2f 90       	pop	r2
    33e8:	1f 90       	pop	r1
    33ea:	0f 90       	pop	r0
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	0f 90       	pop	r0

	asm volatile ( "ret" );
    33f0:	08 95       	ret

000033f2 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <prvSetupTimerInterrupt+0x6>
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <prvSetupTimerInterrupt+0x8>
    33fa:	00 d0       	rcall	.+0      	; 0x33fc <prvSetupTimerInterrupt+0xa>
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    3400:	80 e4       	ldi	r24, 0x40	; 64
    3402:	9f e1       	ldi	r25, 0x1F	; 31
    3404:	a0 e0       	ldi	r26, 0x00	; 0
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	8b 83       	std	Y+3, r24	; 0x03
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	ad 83       	std	Y+5, r26	; 0x05
    340e:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	9c 81       	ldd	r25, Y+4	; 0x04
    3414:	ad 81       	ldd	r26, Y+5	; 0x05
    3416:	be 81       	ldd	r27, Y+6	; 0x06
    3418:	68 94       	set
    341a:	15 f8       	bld	r1, 5
    341c:	b6 95       	lsr	r27
    341e:	a7 95       	ror	r26
    3420:	97 95       	ror	r25
    3422:	87 95       	ror	r24
    3424:	16 94       	lsr	r1
    3426:	d1 f7       	brne	.-12     	; 0x341c <prvSetupTimerInterrupt+0x2a>
    3428:	8b 83       	std	Y+3, r24	; 0x03
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	ad 83       	std	Y+5, r26	; 0x05
    342e:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    3430:	8b 81       	ldd	r24, Y+3	; 0x03
    3432:	9c 81       	ldd	r25, Y+4	; 0x04
    3434:	ad 81       	ldd	r26, Y+5	; 0x05
    3436:	be 81       	ldd	r27, Y+6	; 0x06
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	a1 09       	sbc	r26, r1
    343c:	b1 09       	sbc	r27, r1
    343e:	8b 83       	std	Y+3, r24	; 0x03
    3440:	9c 83       	std	Y+4, r25	; 0x04
    3442:	ad 83       	std	Y+5, r26	; 0x05
    3444:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	9c 81       	ldd	r25, Y+4	; 0x04
    344e:	ad 81       	ldd	r26, Y+5	; 0x05
    3450:	be 81       	ldd	r27, Y+6	; 0x06
    3452:	89 2f       	mov	r24, r25
    3454:	9a 2f       	mov	r25, r26
    3456:	ab 2f       	mov	r26, r27
    3458:	bb 27       	eor	r27, r27
    345a:	8b 83       	std	Y+3, r24	; 0x03
    345c:	9c 83       	std	Y+4, r25	; 0x04
    345e:	ad 83       	std	Y+5, r26	; 0x05
    3460:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    3466:	eb e4       	ldi	r30, 0x4B	; 75
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	8a 81       	ldd	r24, Y+2	; 0x02
    346c:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    346e:	ea e4       	ldi	r30, 0x4A	; 74
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    3476:	8b e0       	ldi	r24, 0x0B	; 11
    3478:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    347a:	ee e4       	ldi	r30, 0x4E	; 78
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    3482:	e9 e5       	ldi	r30, 0x59	; 89
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	80 61       	ori	r24, 0x10	; 16
    348e:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    3490:	e9 e5       	ldi	r30, 0x59	; 89
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	80 83       	st	Z, r24
}
    3498:	26 96       	adiw	r28, 0x06	; 6
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <__vector_7>:
	 * count is incremented after the context is saved.
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
		vPortYieldFromTick();
    34aa:	0e 94 9e 19 	call	0x333c	; 0x333c <vPortYieldFromTick>
		asm volatile ( "reti" );
    34ae:	18 95       	reti

000034b0 <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    34b0:	df 93       	push	r29
    34b2:	cf 93       	push	r28
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	28 97       	sbiw	r28, 0x08	; 8
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	de bf       	out	0x3e, r29	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	cd bf       	out	0x3d, r28	; 61
    34c4:	8f 83       	std	Y+7, r24	; 0x07
    34c6:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    34c8:	1a 82       	std	Y+2, r1	; 0x02
    34ca:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    34cc:	8f 81       	ldd	r24, Y+7	; 0x07
    34ce:	88 23       	and	r24, r24
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <xQueueCreate+0x24>
    34d2:	8c c0       	rjmp	.+280    	; 0x35ec <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    34d4:	8f e1       	ldi	r24, 0x1F	; 31
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    34dc:	9e 83       	std	Y+6, r25	; 0x06
    34de:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    34e0:	8d 81       	ldd	r24, Y+5	; 0x05
    34e2:	9e 81       	ldd	r25, Y+6	; 0x06
    34e4:	00 97       	sbiw	r24, 0x00	; 0
    34e6:	09 f4       	brne	.+2      	; 0x34ea <xQueueCreate+0x3a>
    34e8:	81 c0       	rjmp	.+258    	; 0x35ec <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    34ea:	8f 81       	ldd	r24, Y+7	; 0x07
    34ec:	28 2f       	mov	r18, r24
    34ee:	30 e0       	ldi	r19, 0x00	; 0
    34f0:	88 85       	ldd	r24, Y+8	; 0x08
    34f2:	88 2f       	mov	r24, r24
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	ac 01       	movw	r20, r24
    34f8:	24 9f       	mul	r18, r20
    34fa:	c0 01       	movw	r24, r0
    34fc:	25 9f       	mul	r18, r21
    34fe:	90 0d       	add	r25, r0
    3500:	34 9f       	mul	r19, r20
    3502:	90 0d       	add	r25, r0
    3504:	11 24       	eor	r1, r1
    3506:	01 96       	adiw	r24, 0x01	; 1
    3508:	9c 83       	std	Y+4, r25	; 0x04
    350a:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    350c:	8b 81       	ldd	r24, Y+3	; 0x03
    350e:	9c 81       	ldd	r25, Y+4	; 0x04
    3510:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    3514:	ed 81       	ldd	r30, Y+5	; 0x05
    3516:	fe 81       	ldd	r31, Y+6	; 0x06
    3518:	91 83       	std	Z+1, r25	; 0x01
    351a:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    351c:	ed 81       	ldd	r30, Y+5	; 0x05
    351e:	fe 81       	ldd	r31, Y+6	; 0x06
    3520:	80 81       	ld	r24, Z
    3522:	91 81       	ldd	r25, Z+1	; 0x01
    3524:	00 97       	sbiw	r24, 0x00	; 0
    3526:	09 f4       	brne	.+2      	; 0x352a <xQueueCreate+0x7a>
    3528:	5d c0       	rjmp	.+186    	; 0x35e4 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    352a:	ed 81       	ldd	r30, Y+5	; 0x05
    352c:	fe 81       	ldd	r31, Y+6	; 0x06
    352e:	40 81       	ld	r20, Z
    3530:	51 81       	ldd	r21, Z+1	; 0x01
    3532:	8f 81       	ldd	r24, Y+7	; 0x07
    3534:	28 2f       	mov	r18, r24
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	88 85       	ldd	r24, Y+8	; 0x08
    353a:	88 2f       	mov	r24, r24
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	bc 01       	movw	r22, r24
    3540:	26 9f       	mul	r18, r22
    3542:	c0 01       	movw	r24, r0
    3544:	27 9f       	mul	r18, r23
    3546:	90 0d       	add	r25, r0
    3548:	36 9f       	mul	r19, r22
    354a:	90 0d       	add	r25, r0
    354c:	11 24       	eor	r1, r1
    354e:	84 0f       	add	r24, r20
    3550:	95 1f       	adc	r25, r21
    3552:	ed 81       	ldd	r30, Y+5	; 0x05
    3554:	fe 81       	ldd	r31, Y+6	; 0x06
    3556:	93 83       	std	Z+3, r25	; 0x03
    3558:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    355a:	ed 81       	ldd	r30, Y+5	; 0x05
    355c:	fe 81       	ldd	r31, Y+6	; 0x06
    355e:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    3560:	ed 81       	ldd	r30, Y+5	; 0x05
    3562:	fe 81       	ldd	r31, Y+6	; 0x06
    3564:	80 81       	ld	r24, Z
    3566:	91 81       	ldd	r25, Z+1	; 0x01
    3568:	ed 81       	ldd	r30, Y+5	; 0x05
    356a:	fe 81       	ldd	r31, Y+6	; 0x06
    356c:	95 83       	std	Z+5, r25	; 0x05
    356e:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    3570:	ed 81       	ldd	r30, Y+5	; 0x05
    3572:	fe 81       	ldd	r31, Y+6	; 0x06
    3574:	40 81       	ld	r20, Z
    3576:	51 81       	ldd	r21, Z+1	; 0x01
    3578:	8f 81       	ldd	r24, Y+7	; 0x07
    357a:	88 2f       	mov	r24, r24
    357c:	90 e0       	ldi	r25, 0x00	; 0
    357e:	9c 01       	movw	r18, r24
    3580:	21 50       	subi	r18, 0x01	; 1
    3582:	30 40       	sbci	r19, 0x00	; 0
    3584:	88 85       	ldd	r24, Y+8	; 0x08
    3586:	88 2f       	mov	r24, r24
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	bc 01       	movw	r22, r24
    358c:	26 9f       	mul	r18, r22
    358e:	c0 01       	movw	r24, r0
    3590:	27 9f       	mul	r18, r23
    3592:	90 0d       	add	r25, r0
    3594:	36 9f       	mul	r19, r22
    3596:	90 0d       	add	r25, r0
    3598:	11 24       	eor	r1, r1
    359a:	84 0f       	add	r24, r20
    359c:	95 1f       	adc	r25, r21
    359e:	ed 81       	ldd	r30, Y+5	; 0x05
    35a0:	fe 81       	ldd	r31, Y+6	; 0x06
    35a2:	97 83       	std	Z+7, r25	; 0x07
    35a4:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    35a6:	ed 81       	ldd	r30, Y+5	; 0x05
    35a8:	fe 81       	ldd	r31, Y+6	; 0x06
    35aa:	8f 81       	ldd	r24, Y+7	; 0x07
    35ac:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    35ae:	ed 81       	ldd	r30, Y+5	; 0x05
    35b0:	fe 81       	ldd	r31, Y+6	; 0x06
    35b2:	88 85       	ldd	r24, Y+8	; 0x08
    35b4:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    35b6:	ed 81       	ldd	r30, Y+5	; 0x05
    35b8:	fe 81       	ldd	r31, Y+6	; 0x06
    35ba:	8f ef       	ldi	r24, 0xFF	; 255
    35bc:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    35be:	ed 81       	ldd	r30, Y+5	; 0x05
    35c0:	fe 81       	ldd	r31, Y+6	; 0x06
    35c2:	8f ef       	ldi	r24, 0xFF	; 255
    35c4:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    35c6:	8d 81       	ldd	r24, Y+5	; 0x05
    35c8:	9e 81       	ldd	r25, Y+6	; 0x06
    35ca:	08 96       	adiw	r24, 0x08	; 8
    35cc:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    35d0:	8d 81       	ldd	r24, Y+5	; 0x05
    35d2:	9e 81       	ldd	r25, Y+6	; 0x06
    35d4:	41 96       	adiw	r24, 0x11	; 17
    35d6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    35da:	8d 81       	ldd	r24, Y+5	; 0x05
    35dc:	9e 81       	ldd	r25, Y+6	; 0x06
    35de:	9a 83       	std	Y+2, r25	; 0x02
    35e0:	89 83       	std	Y+1, r24	; 0x01
    35e2:	04 c0       	rjmp	.+8      	; 0x35ec <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    35e4:	8d 81       	ldd	r24, Y+5	; 0x05
    35e6:	9e 81       	ldd	r25, Y+6	; 0x06
    35e8:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	9a 81       	ldd	r25, Y+2	; 0x02
}
    35f0:	28 96       	adiw	r28, 0x08	; 8
    35f2:	0f b6       	in	r0, 0x3f	; 63
    35f4:	f8 94       	cli
    35f6:	de bf       	out	0x3e, r29	; 62
    35f8:	0f be       	out	0x3f, r0	; 63
    35fa:	cd bf       	out	0x3d, r28	; 61
    35fc:	cf 91       	pop	r28
    35fe:	df 91       	pop	r29
    3600:	08 95       	ret

00003602 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
    3602:	df 93       	push	r29
    3604:	cf 93       	push	r28
    3606:	00 d0       	rcall	.+0      	; 0x3608 <xQueueCreateCountingSemaphore+0x6>
    3608:	00 d0       	rcall	.+0      	; 0x360a <xQueueCreateCountingSemaphore+0x8>
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	8b 83       	std	Y+3, r24	; 0x03
    3610:	6c 83       	std	Y+4, r22	; 0x04
	xQueueHandle pxHandle;

		pxHandle = xQueueCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH );
    3612:	8b 81       	ldd	r24, Y+3	; 0x03
    3614:	60 e0       	ldi	r22, 0x00	; 0
    3616:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <xQueueCreate>
    361a:	9a 83       	std	Y+2, r25	; 0x02
    361c:	89 83       	std	Y+1, r24	; 0x01

		if( pxHandle != NULL )
    361e:	89 81       	ldd	r24, Y+1	; 0x01
    3620:	9a 81       	ldd	r25, Y+2	; 0x02
    3622:	00 97       	sbiw	r24, 0x00	; 0
    3624:	21 f0       	breq	.+8      	; 0x362e <xQueueCreateCountingSemaphore+0x2c>
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
    3626:	e9 81       	ldd	r30, Y+1	; 0x01
    3628:	fa 81       	ldd	r31, Y+2	; 0x02
    362a:	8c 81       	ldd	r24, Y+4	; 0x04
    362c:	82 8f       	std	Z+26, r24	; 0x1a
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
    362e:	89 81       	ldd	r24, Y+1	; 0x01
    3630:	9a 81       	ldd	r25, Y+2	; 0x02
	}
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	0f 90       	pop	r0
    3638:	0f 90       	pop	r0
    363a:	cf 91       	pop	r28
    363c:	df 91       	pop	r29
    363e:	08 95       	ret

00003640 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3640:	df 93       	push	r29
    3642:	cf 93       	push	r28
    3644:	cd b7       	in	r28, 0x3d	; 61
    3646:	de b7       	in	r29, 0x3e	; 62
    3648:	2c 97       	sbiw	r28, 0x0c	; 12
    364a:	0f b6       	in	r0, 0x3f	; 63
    364c:	f8 94       	cli
    364e:	de bf       	out	0x3e, r29	; 62
    3650:	0f be       	out	0x3f, r0	; 63
    3652:	cd bf       	out	0x3d, r28	; 61
    3654:	9e 83       	std	Y+6, r25	; 0x06
    3656:	8d 83       	std	Y+5, r24	; 0x05
    3658:	78 87       	std	Y+8, r23	; 0x08
    365a:	6f 83       	std	Y+7, r22	; 0x07
    365c:	5a 87       	std	Y+10, r21	; 0x0a
    365e:	49 87       	std	Y+9, r20	; 0x09
    3660:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3662:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	f8 94       	cli
    3668:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    366a:	ed 81       	ldd	r30, Y+5	; 0x05
    366c:	fe 81       	ldd	r31, Y+6	; 0x06
    366e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3670:	ed 81       	ldd	r30, Y+5	; 0x05
    3672:	fe 81       	ldd	r31, Y+6	; 0x06
    3674:	83 8d       	ldd	r24, Z+27	; 0x1b
    3676:	98 17       	cp	r25, r24
    3678:	d8 f4       	brcc	.+54     	; 0x36b0 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	2f 81       	ldd	r18, Y+7	; 0x07
    3680:	38 85       	ldd	r19, Y+8	; 0x08
    3682:	b9 01       	movw	r22, r18
    3684:	4b 85       	ldd	r20, Y+11	; 0x0b
    3686:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    368a:	ed 81       	ldd	r30, Y+5	; 0x05
    368c:	fe 81       	ldd	r31, Y+6	; 0x06
    368e:	81 89       	ldd	r24, Z+17	; 0x11
    3690:	88 23       	and	r24, r24
    3692:	49 f0       	breq	.+18     	; 0x36a6 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    3694:	8d 81       	ldd	r24, Y+5	; 0x05
    3696:	9e 81       	ldd	r25, Y+6	; 0x06
    3698:	41 96       	adiw	r24, 0x11	; 17
    369a:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <xTaskRemoveFromEventList>
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	11 f4       	brne	.+4      	; 0x36a6 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    36a2:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    36a6:	0f 90       	pop	r0
    36a8:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    36aa:	81 e0       	ldi	r24, 0x01	; 1
    36ac:	8c 87       	std	Y+12, r24	; 0x0c
    36ae:	5c c0       	rjmp	.+184    	; 0x3768 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    36b0:	89 85       	ldd	r24, Y+9	; 0x09
    36b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36b4:	00 97       	sbiw	r24, 0x00	; 0
    36b6:	21 f4       	brne	.+8      	; 0x36c0 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    36b8:	0f 90       	pop	r0
    36ba:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    36bc:	1c 86       	std	Y+12, r1	; 0x0c
    36be:	54 c0       	rjmp	.+168    	; 0x3768 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    36c0:	89 81       	ldd	r24, Y+1	; 0x01
    36c2:	88 23       	and	r24, r24
    36c4:	31 f4       	brne	.+12     	; 0x36d2 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    36c6:	ce 01       	movw	r24, r28
    36c8:	02 96       	adiw	r24, 0x02	; 2
    36ca:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    36d2:	0f 90       	pop	r0
    36d4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    36d6:	0e 94 93 22 	call	0x4526	; 0x4526 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    36da:	0f b6       	in	r0, 0x3f	; 63
    36dc:	f8 94       	cli
    36de:	0f 92       	push	r0
    36e0:	ed 81       	ldd	r30, Y+5	; 0x05
    36e2:	fe 81       	ldd	r31, Y+6	; 0x06
    36e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    36e6:	8f 3f       	cpi	r24, 0xFF	; 255
    36e8:	19 f4       	brne	.+6      	; 0x36f0 <xQueueGenericSend+0xb0>
    36ea:	ed 81       	ldd	r30, Y+5	; 0x05
    36ec:	fe 81       	ldd	r31, Y+6	; 0x06
    36ee:	15 8e       	std	Z+29, r1	; 0x1d
    36f0:	ed 81       	ldd	r30, Y+5	; 0x05
    36f2:	fe 81       	ldd	r31, Y+6	; 0x06
    36f4:	86 8d       	ldd	r24, Z+30	; 0x1e
    36f6:	8f 3f       	cpi	r24, 0xFF	; 255
    36f8:	19 f4       	brne	.+6      	; 0x3700 <xQueueGenericSend+0xc0>
    36fa:	ed 81       	ldd	r30, Y+5	; 0x05
    36fc:	fe 81       	ldd	r31, Y+6	; 0x06
    36fe:	16 8e       	std	Z+30, r1	; 0x1e
    3700:	0f 90       	pop	r0
    3702:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3704:	ce 01       	movw	r24, r28
    3706:	02 96       	adiw	r24, 0x02	; 2
    3708:	9e 01       	movw	r18, r28
    370a:	27 5f       	subi	r18, 0xF7	; 247
    370c:	3f 4f       	sbci	r19, 0xFF	; 255
    370e:	b9 01       	movw	r22, r18
    3710:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <xTaskCheckForTimeOut>
    3714:	88 23       	and	r24, r24
    3716:	09 f5       	brne	.+66     	; 0x375a <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3718:	8d 81       	ldd	r24, Y+5	; 0x05
    371a:	9e 81       	ldd	r25, Y+6	; 0x06
    371c:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <prvIsQueueFull>
    3720:	88 23       	and	r24, r24
    3722:	a1 f0       	breq	.+40     	; 0x374c <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3724:	8d 81       	ldd	r24, Y+5	; 0x05
    3726:	9e 81       	ldd	r25, Y+6	; 0x06
    3728:	08 96       	adiw	r24, 0x08	; 8
    372a:	29 85       	ldd	r18, Y+9	; 0x09
    372c:	3a 85       	ldd	r19, Y+10	; 0x0a
    372e:	b9 01       	movw	r22, r18
    3730:	0e 94 99 24 	call	0x4932	; 0x4932 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3734:	8d 81       	ldd	r24, Y+5	; 0x05
    3736:	9e 81       	ldd	r25, Y+6	; 0x06
    3738:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    373c:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>
    3740:	88 23       	and	r24, r24
    3742:	09 f0       	breq	.+2      	; 0x3746 <xQueueGenericSend+0x106>
    3744:	8f cf       	rjmp	.-226    	; 0x3664 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    3746:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
    374a:	8c cf       	rjmp	.-232    	; 0x3664 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    374c:	8d 81       	ldd	r24, Y+5	; 0x05
    374e:	9e 81       	ldd	r25, Y+6	; 0x06
    3750:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3754:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>
    3758:	85 cf       	rjmp	.-246    	; 0x3664 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    375a:	8d 81       	ldd	r24, Y+5	; 0x05
    375c:	9e 81       	ldd	r25, Y+6	; 0x06
    375e:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3762:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3766:	1c 86       	std	Y+12, r1	; 0x0c
    3768:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    376a:	2c 96       	adiw	r28, 0x0c	; 12
    376c:	0f b6       	in	r0, 0x3f	; 63
    376e:	f8 94       	cli
    3770:	de bf       	out	0x3e, r29	; 62
    3772:	0f be       	out	0x3f, r0	; 63
    3774:	cd bf       	out	0x3d, r28	; 61
    3776:	cf 91       	pop	r28
    3778:	df 91       	pop	r29
    377a:	08 95       	ret

0000377c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    377c:	df 93       	push	r29
    377e:	cf 93       	push	r28
    3780:	cd b7       	in	r28, 0x3d	; 61
    3782:	de b7       	in	r29, 0x3e	; 62
    3784:	29 97       	sbiw	r28, 0x09	; 9
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	de bf       	out	0x3e, r29	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	cd bf       	out	0x3d, r28	; 61
    3790:	9c 83       	std	Y+4, r25	; 0x04
    3792:	8b 83       	std	Y+3, r24	; 0x03
    3794:	7e 83       	std	Y+6, r23	; 0x06
    3796:	6d 83       	std	Y+5, r22	; 0x05
    3798:	58 87       	std	Y+8, r21	; 0x08
    379a:	4f 83       	std	Y+7, r20	; 0x07
    379c:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    379e:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    37a0:	eb 81       	ldd	r30, Y+3	; 0x03
    37a2:	fc 81       	ldd	r31, Y+4	; 0x04
    37a4:	92 8d       	ldd	r25, Z+26	; 0x1a
    37a6:	eb 81       	ldd	r30, Y+3	; 0x03
    37a8:	fc 81       	ldd	r31, Y+4	; 0x04
    37aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    37ac:	98 17       	cp	r25, r24
    37ae:	40 f5       	brcc	.+80     	; 0x3800 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    37b0:	8b 81       	ldd	r24, Y+3	; 0x03
    37b2:	9c 81       	ldd	r25, Y+4	; 0x04
    37b4:	2d 81       	ldd	r18, Y+5	; 0x05
    37b6:	3e 81       	ldd	r19, Y+6	; 0x06
    37b8:	b9 01       	movw	r22, r18
    37ba:	49 85       	ldd	r20, Y+9	; 0x09
    37bc:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    37c0:	eb 81       	ldd	r30, Y+3	; 0x03
    37c2:	fc 81       	ldd	r31, Y+4	; 0x04
    37c4:	86 8d       	ldd	r24, Z+30	; 0x1e
    37c6:	8f 3f       	cpi	r24, 0xFF	; 255
    37c8:	89 f4       	brne	.+34     	; 0x37ec <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    37ca:	eb 81       	ldd	r30, Y+3	; 0x03
    37cc:	fc 81       	ldd	r31, Y+4	; 0x04
    37ce:	81 89       	ldd	r24, Z+17	; 0x11
    37d0:	88 23       	and	r24, r24
    37d2:	99 f0       	breq	.+38     	; 0x37fa <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    37d4:	8b 81       	ldd	r24, Y+3	; 0x03
    37d6:	9c 81       	ldd	r25, Y+4	; 0x04
    37d8:	41 96       	adiw	r24, 0x11	; 17
    37da:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <xTaskRemoveFromEventList>
    37de:	88 23       	and	r24, r24
    37e0:	61 f0       	breq	.+24     	; 0x37fa <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    37e2:	ef 81       	ldd	r30, Y+7	; 0x07
    37e4:	f8 85       	ldd	r31, Y+8	; 0x08
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	80 83       	st	Z, r24
    37ea:	07 c0       	rjmp	.+14     	; 0x37fa <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    37ec:	eb 81       	ldd	r30, Y+3	; 0x03
    37ee:	fc 81       	ldd	r31, Y+4	; 0x04
    37f0:	86 8d       	ldd	r24, Z+30	; 0x1e
    37f2:	8f 5f       	subi	r24, 0xFF	; 255
    37f4:	eb 81       	ldd	r30, Y+3	; 0x03
    37f6:	fc 81       	ldd	r31, Y+4	; 0x04
    37f8:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	8a 83       	std	Y+2, r24	; 0x02
    37fe:	01 c0       	rjmp	.+2      	; 0x3802 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3800:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3802:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3804:	29 96       	adiw	r28, 0x09	; 9
    3806:	0f b6       	in	r0, 0x3f	; 63
    3808:	f8 94       	cli
    380a:	de bf       	out	0x3e, r29	; 62
    380c:	0f be       	out	0x3f, r0	; 63
    380e:	cd bf       	out	0x3d, r28	; 61
    3810:	cf 91       	pop	r28
    3812:	df 91       	pop	r29
    3814:	08 95       	ret

00003816 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3816:	df 93       	push	r29
    3818:	cf 93       	push	r28
    381a:	cd b7       	in	r28, 0x3d	; 61
    381c:	de b7       	in	r29, 0x3e	; 62
    381e:	2e 97       	sbiw	r28, 0x0e	; 14
    3820:	0f b6       	in	r0, 0x3f	; 63
    3822:	f8 94       	cli
    3824:	de bf       	out	0x3e, r29	; 62
    3826:	0f be       	out	0x3f, r0	; 63
    3828:	cd bf       	out	0x3d, r28	; 61
    382a:	98 87       	std	Y+8, r25	; 0x08
    382c:	8f 83       	std	Y+7, r24	; 0x07
    382e:	7a 87       	std	Y+10, r23	; 0x0a
    3830:	69 87       	std	Y+9, r22	; 0x09
    3832:	5c 87       	std	Y+12, r21	; 0x0c
    3834:	4b 87       	std	Y+11, r20	; 0x0b
    3836:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3838:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	f8 94       	cli
    383e:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3840:	ef 81       	ldd	r30, Y+7	; 0x07
    3842:	f8 85       	ldd	r31, Y+8	; 0x08
    3844:	82 8d       	ldd	r24, Z+26	; 0x1a
    3846:	88 23       	and	r24, r24
    3848:	09 f4       	brne	.+2      	; 0x384c <xQueueGenericReceive+0x36>
    384a:	3f c0       	rjmp	.+126    	; 0x38ca <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    384c:	ef 81       	ldd	r30, Y+7	; 0x07
    384e:	f8 85       	ldd	r31, Y+8	; 0x08
    3850:	86 81       	ldd	r24, Z+6	; 0x06
    3852:	97 81       	ldd	r25, Z+7	; 0x07
    3854:	9a 83       	std	Y+2, r25	; 0x02
    3856:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3858:	8f 81       	ldd	r24, Y+7	; 0x07
    385a:	98 85       	ldd	r25, Y+8	; 0x08
    385c:	29 85       	ldd	r18, Y+9	; 0x09
    385e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3860:	b9 01       	movw	r22, r18
    3862:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3866:	8d 85       	ldd	r24, Y+13	; 0x0d
    3868:	88 23       	and	r24, r24
    386a:	b1 f4       	brne	.+44     	; 0x3898 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    386c:	ef 81       	ldd	r30, Y+7	; 0x07
    386e:	f8 85       	ldd	r31, Y+8	; 0x08
    3870:	82 8d       	ldd	r24, Z+26	; 0x1a
    3872:	81 50       	subi	r24, 0x01	; 1
    3874:	ef 81       	ldd	r30, Y+7	; 0x07
    3876:	f8 85       	ldd	r31, Y+8	; 0x08
    3878:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    387a:	ef 81       	ldd	r30, Y+7	; 0x07
    387c:	f8 85       	ldd	r31, Y+8	; 0x08
    387e:	80 85       	ldd	r24, Z+8	; 0x08
    3880:	88 23       	and	r24, r24
    3882:	f1 f0       	breq	.+60     	; 0x38c0 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3884:	8f 81       	ldd	r24, Y+7	; 0x07
    3886:	98 85       	ldd	r25, Y+8	; 0x08
    3888:	08 96       	adiw	r24, 0x08	; 8
    388a:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <xTaskRemoveFromEventList>
    388e:	81 30       	cpi	r24, 0x01	; 1
    3890:	b9 f4       	brne	.+46     	; 0x38c0 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    3892:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
    3896:	14 c0       	rjmp	.+40     	; 0x38c0 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    3898:	ef 81       	ldd	r30, Y+7	; 0x07
    389a:	f8 85       	ldd	r31, Y+8	; 0x08
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	9a 81       	ldd	r25, Y+2	; 0x02
    38a0:	97 83       	std	Z+7, r25	; 0x07
    38a2:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    38a4:	ef 81       	ldd	r30, Y+7	; 0x07
    38a6:	f8 85       	ldd	r31, Y+8	; 0x08
    38a8:	81 89       	ldd	r24, Z+17	; 0x11
    38aa:	88 23       	and	r24, r24
    38ac:	49 f0       	breq	.+18     	; 0x38c0 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    38ae:	8f 81       	ldd	r24, Y+7	; 0x07
    38b0:	98 85       	ldd	r25, Y+8	; 0x08
    38b2:	41 96       	adiw	r24, 0x11	; 17
    38b4:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <xTaskRemoveFromEventList>
    38b8:	88 23       	and	r24, r24
    38ba:	11 f0       	breq	.+4      	; 0x38c0 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    38bc:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    38c0:	0f 90       	pop	r0
    38c2:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	8e 87       	std	Y+14, r24	; 0x0e
    38c8:	5c c0       	rjmp	.+184    	; 0x3982 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    38ca:	8b 85       	ldd	r24, Y+11	; 0x0b
    38cc:	9c 85       	ldd	r25, Y+12	; 0x0c
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	21 f4       	brne	.+8      	; 0x38da <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    38d2:	0f 90       	pop	r0
    38d4:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    38d6:	1e 86       	std	Y+14, r1	; 0x0e
    38d8:	54 c0       	rjmp	.+168    	; 0x3982 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    38da:	8b 81       	ldd	r24, Y+3	; 0x03
    38dc:	88 23       	and	r24, r24
    38de:	31 f4       	brne	.+12     	; 0x38ec <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    38e0:	ce 01       	movw	r24, r28
    38e2:	04 96       	adiw	r24, 0x04	; 4
    38e4:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    38ec:	0f 90       	pop	r0
    38ee:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    38f0:	0e 94 93 22 	call	0x4526	; 0x4526 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    38f4:	0f b6       	in	r0, 0x3f	; 63
    38f6:	f8 94       	cli
    38f8:	0f 92       	push	r0
    38fa:	ef 81       	ldd	r30, Y+7	; 0x07
    38fc:	f8 85       	ldd	r31, Y+8	; 0x08
    38fe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3900:	8f 3f       	cpi	r24, 0xFF	; 255
    3902:	19 f4       	brne	.+6      	; 0x390a <xQueueGenericReceive+0xf4>
    3904:	ef 81       	ldd	r30, Y+7	; 0x07
    3906:	f8 85       	ldd	r31, Y+8	; 0x08
    3908:	15 8e       	std	Z+29, r1	; 0x1d
    390a:	ef 81       	ldd	r30, Y+7	; 0x07
    390c:	f8 85       	ldd	r31, Y+8	; 0x08
    390e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3910:	8f 3f       	cpi	r24, 0xFF	; 255
    3912:	19 f4       	brne	.+6      	; 0x391a <xQueueGenericReceive+0x104>
    3914:	ef 81       	ldd	r30, Y+7	; 0x07
    3916:	f8 85       	ldd	r31, Y+8	; 0x08
    3918:	16 8e       	std	Z+30, r1	; 0x1e
    391a:	0f 90       	pop	r0
    391c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    391e:	ce 01       	movw	r24, r28
    3920:	04 96       	adiw	r24, 0x04	; 4
    3922:	9e 01       	movw	r18, r28
    3924:	25 5f       	subi	r18, 0xF5	; 245
    3926:	3f 4f       	sbci	r19, 0xFF	; 255
    3928:	b9 01       	movw	r22, r18
    392a:	0e 94 63 25 	call	0x4ac6	; 0x4ac6 <xTaskCheckForTimeOut>
    392e:	88 23       	and	r24, r24
    3930:	09 f5       	brne	.+66     	; 0x3974 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3932:	8f 81       	ldd	r24, Y+7	; 0x07
    3934:	98 85       	ldd	r25, Y+8	; 0x08
    3936:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <prvIsQueueEmpty>
    393a:	88 23       	and	r24, r24
    393c:	a1 f0       	breq	.+40     	; 0x3966 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    393e:	8f 81       	ldd	r24, Y+7	; 0x07
    3940:	98 85       	ldd	r25, Y+8	; 0x08
    3942:	41 96       	adiw	r24, 0x11	; 17
    3944:	2b 85       	ldd	r18, Y+11	; 0x0b
    3946:	3c 85       	ldd	r19, Y+12	; 0x0c
    3948:	b9 01       	movw	r22, r18
    394a:	0e 94 99 24 	call	0x4932	; 0x4932 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    394e:	8f 81       	ldd	r24, Y+7	; 0x07
    3950:	98 85       	ldd	r25, Y+8	; 0x08
    3952:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3956:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>
    395a:	88 23       	and	r24, r24
    395c:	09 f0       	breq	.+2      	; 0x3960 <xQueueGenericReceive+0x14a>
    395e:	6d cf       	rjmp	.-294    	; 0x383a <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    3960:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
    3964:	6a cf       	rjmp	.-300    	; 0x383a <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3966:	8f 81       	ldd	r24, Y+7	; 0x07
    3968:	98 85       	ldd	r25, Y+8	; 0x08
    396a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    396e:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>
    3972:	63 cf       	rjmp	.-314    	; 0x383a <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3974:	8f 81       	ldd	r24, Y+7	; 0x07
    3976:	98 85       	ldd	r25, Y+8	; 0x08
    3978:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    397c:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3980:	1e 86       	std	Y+14, r1	; 0x0e
    3982:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    3984:	2e 96       	adiw	r28, 0x0e	; 14
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	de bf       	out	0x3e, r29	; 62
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	cd bf       	out	0x3d, r28	; 61
    3990:	cf 91       	pop	r28
    3992:	df 91       	pop	r29
    3994:	08 95       	ret

00003996 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    3996:	df 93       	push	r29
    3998:	cf 93       	push	r28
    399a:	cd b7       	in	r28, 0x3d	; 61
    399c:	de b7       	in	r29, 0x3e	; 62
    399e:	28 97       	sbiw	r28, 0x08	; 8
    39a0:	0f b6       	in	r0, 0x3f	; 63
    39a2:	f8 94       	cli
    39a4:	de bf       	out	0x3e, r29	; 62
    39a6:	0f be       	out	0x3f, r0	; 63
    39a8:	cd bf       	out	0x3d, r28	; 61
    39aa:	9c 83       	std	Y+4, r25	; 0x04
    39ac:	8b 83       	std	Y+3, r24	; 0x03
    39ae:	7e 83       	std	Y+6, r23	; 0x06
    39b0:	6d 83       	std	Y+5, r22	; 0x05
    39b2:	58 87       	std	Y+8, r21	; 0x08
    39b4:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    39b6:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    39b8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ba:	fc 81       	ldd	r31, Y+4	; 0x04
    39bc:	82 8d       	ldd	r24, Z+26	; 0x1a
    39be:	88 23       	and	r24, r24
    39c0:	71 f1       	breq	.+92     	; 0x3a1e <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    39c2:	8b 81       	ldd	r24, Y+3	; 0x03
    39c4:	9c 81       	ldd	r25, Y+4	; 0x04
    39c6:	2d 81       	ldd	r18, Y+5	; 0x05
    39c8:	3e 81       	ldd	r19, Y+6	; 0x06
    39ca:	b9 01       	movw	r22, r18
    39cc:	0e 94 f0 1d 	call	0x3be0	; 0x3be0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    39d0:	eb 81       	ldd	r30, Y+3	; 0x03
    39d2:	fc 81       	ldd	r31, Y+4	; 0x04
    39d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    39d6:	81 50       	subi	r24, 0x01	; 1
    39d8:	eb 81       	ldd	r30, Y+3	; 0x03
    39da:	fc 81       	ldd	r31, Y+4	; 0x04
    39dc:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    39de:	eb 81       	ldd	r30, Y+3	; 0x03
    39e0:	fc 81       	ldd	r31, Y+4	; 0x04
    39e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    39e4:	8f 3f       	cpi	r24, 0xFF	; 255
    39e6:	89 f4       	brne	.+34     	; 0x3a0a <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    39e8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ea:	fc 81       	ldd	r31, Y+4	; 0x04
    39ec:	80 85       	ldd	r24, Z+8	; 0x08
    39ee:	88 23       	and	r24, r24
    39f0:	99 f0       	breq	.+38     	; 0x3a18 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    39f2:	8b 81       	ldd	r24, Y+3	; 0x03
    39f4:	9c 81       	ldd	r25, Y+4	; 0x04
    39f6:	08 96       	adiw	r24, 0x08	; 8
    39f8:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <xTaskRemoveFromEventList>
    39fc:	88 23       	and	r24, r24
    39fe:	61 f0       	breq	.+24     	; 0x3a18 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3a00:	ef 81       	ldd	r30, Y+7	; 0x07
    3a02:	f8 85       	ldd	r31, Y+8	; 0x08
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	80 83       	st	Z, r24
    3a08:	07 c0       	rjmp	.+14     	; 0x3a18 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3a0a:	eb 81       	ldd	r30, Y+3	; 0x03
    3a0c:	fc 81       	ldd	r31, Y+4	; 0x04
    3a0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a10:	8f 5f       	subi	r24, 0xFF	; 255
    3a12:	eb 81       	ldd	r30, Y+3	; 0x03
    3a14:	fc 81       	ldd	r31, Y+4	; 0x04
    3a16:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	8a 83       	std	Y+2, r24	; 0x02
    3a1c:	01 c0       	rjmp	.+2      	; 0x3a20 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    3a1e:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3a20:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a22:	28 96       	adiw	r28, 0x08	; 8
    3a24:	0f b6       	in	r0, 0x3f	; 63
    3a26:	f8 94       	cli
    3a28:	de bf       	out	0x3e, r29	; 62
    3a2a:	0f be       	out	0x3f, r0	; 63
    3a2c:	cd bf       	out	0x3d, r28	; 61
    3a2e:	cf 91       	pop	r28
    3a30:	df 91       	pop	r29
    3a32:	08 95       	ret

00003a34 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3a34:	df 93       	push	r29
    3a36:	cf 93       	push	r28
    3a38:	00 d0       	rcall	.+0      	; 0x3a3a <uxQueueMessagesWaiting+0x6>
    3a3a:	0f 92       	push	r0
    3a3c:	cd b7       	in	r28, 0x3d	; 61
    3a3e:	de b7       	in	r29, 0x3e	; 62
    3a40:	9b 83       	std	Y+3, r25	; 0x03
    3a42:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3a44:	0f b6       	in	r0, 0x3f	; 63
    3a46:	f8 94       	cli
    3a48:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    3a4a:	ea 81       	ldd	r30, Y+2	; 0x02
    3a4c:	fb 81       	ldd	r31, Y+3	; 0x03
    3a4e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a50:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3a52:	0f 90       	pop	r0
    3a54:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3a56:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a58:	0f 90       	pop	r0
    3a5a:	0f 90       	pop	r0
    3a5c:	0f 90       	pop	r0
    3a5e:	cf 91       	pop	r28
    3a60:	df 91       	pop	r29
    3a62:	08 95       	ret

00003a64 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3a64:	df 93       	push	r29
    3a66:	cf 93       	push	r28
    3a68:	00 d0       	rcall	.+0      	; 0x3a6a <uxQueueMessagesWaitingFromISR+0x6>
    3a6a:	0f 92       	push	r0
    3a6c:	cd b7       	in	r28, 0x3d	; 61
    3a6e:	de b7       	in	r29, 0x3e	; 62
    3a70:	9b 83       	std	Y+3, r25	; 0x03
    3a72:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    3a74:	ea 81       	ldd	r30, Y+2	; 0x02
    3a76:	fb 81       	ldd	r31, Y+3	; 0x03
    3a78:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a7a:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    3a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a7e:	0f 90       	pop	r0
    3a80:	0f 90       	pop	r0
    3a82:	0f 90       	pop	r0
    3a84:	cf 91       	pop	r28
    3a86:	df 91       	pop	r29
    3a88:	08 95       	ret

00003a8a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	00 d0       	rcall	.+0      	; 0x3a90 <vQueueDelete+0x6>
    3a90:	cd b7       	in	r28, 0x3d	; 61
    3a92:	de b7       	in	r29, 0x3e	; 62
    3a94:	9a 83       	std	Y+2, r25	; 0x02
    3a96:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3a98:	e9 81       	ldd	r30, Y+1	; 0x01
    3a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    3a9c:	80 81       	ld	r24, Z
    3a9e:	91 81       	ldd	r25, Z+1	; 0x01
    3aa0:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
	vPortFree( pxQueue );
    3aa4:	89 81       	ldd	r24, Y+1	; 0x01
    3aa6:	9a 81       	ldd	r25, Y+2	; 0x02
    3aa8:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
}
    3aac:	0f 90       	pop	r0
    3aae:	0f 90       	pop	r0
    3ab0:	cf 91       	pop	r28
    3ab2:	df 91       	pop	r29
    3ab4:	08 95       	ret

00003ab6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3ab6:	df 93       	push	r29
    3ab8:	cf 93       	push	r28
    3aba:	00 d0       	rcall	.+0      	; 0x3abc <prvCopyDataToQueue+0x6>
    3abc:	00 d0       	rcall	.+0      	; 0x3abe <prvCopyDataToQueue+0x8>
    3abe:	0f 92       	push	r0
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
    3ac4:	9a 83       	std	Y+2, r25	; 0x02
    3ac6:	89 83       	std	Y+1, r24	; 0x01
    3ac8:	7c 83       	std	Y+4, r23	; 0x04
    3aca:	6b 83       	std	Y+3, r22	; 0x03
    3acc:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3ace:	e9 81       	ldd	r30, Y+1	; 0x01
    3ad0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ad2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ad4:	88 23       	and	r24, r24
    3ad6:	09 f4       	brne	.+2      	; 0x3ada <prvCopyDataToQueue+0x24>
    3ad8:	74 c0       	rjmp	.+232    	; 0x3bc2 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3ada:	8d 81       	ldd	r24, Y+5	; 0x05
    3adc:	88 23       	and	r24, r24
    3ade:	99 f5       	brne	.+102    	; 0x3b46 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3ae0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ae2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae4:	64 81       	ldd	r22, Z+4	; 0x04
    3ae6:	75 81       	ldd	r23, Z+5	; 0x05
    3ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    3aea:	fa 81       	ldd	r31, Y+2	; 0x02
    3aec:	84 8d       	ldd	r24, Z+28	; 0x1c
    3aee:	48 2f       	mov	r20, r24
    3af0:	50 e0       	ldi	r21, 0x00	; 0
    3af2:	2b 81       	ldd	r18, Y+3	; 0x03
    3af4:	3c 81       	ldd	r19, Y+4	; 0x04
    3af6:	cb 01       	movw	r24, r22
    3af8:	b9 01       	movw	r22, r18
    3afa:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3afe:	e9 81       	ldd	r30, Y+1	; 0x01
    3b00:	fa 81       	ldd	r31, Y+2	; 0x02
    3b02:	24 81       	ldd	r18, Z+4	; 0x04
    3b04:	35 81       	ldd	r19, Z+5	; 0x05
    3b06:	e9 81       	ldd	r30, Y+1	; 0x01
    3b08:	fa 81       	ldd	r31, Y+2	; 0x02
    3b0a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b0c:	88 2f       	mov	r24, r24
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	82 0f       	add	r24, r18
    3b12:	93 1f       	adc	r25, r19
    3b14:	e9 81       	ldd	r30, Y+1	; 0x01
    3b16:	fa 81       	ldd	r31, Y+2	; 0x02
    3b18:	95 83       	std	Z+5, r25	; 0x05
    3b1a:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3b1c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b1e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b20:	24 81       	ldd	r18, Z+4	; 0x04
    3b22:	35 81       	ldd	r19, Z+5	; 0x05
    3b24:	e9 81       	ldd	r30, Y+1	; 0x01
    3b26:	fa 81       	ldd	r31, Y+2	; 0x02
    3b28:	82 81       	ldd	r24, Z+2	; 0x02
    3b2a:	93 81       	ldd	r25, Z+3	; 0x03
    3b2c:	28 17       	cp	r18, r24
    3b2e:	39 07       	cpc	r19, r25
    3b30:	08 f4       	brcc	.+2      	; 0x3b34 <prvCopyDataToQueue+0x7e>
    3b32:	47 c0       	rjmp	.+142    	; 0x3bc2 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3b34:	e9 81       	ldd	r30, Y+1	; 0x01
    3b36:	fa 81       	ldd	r31, Y+2	; 0x02
    3b38:	80 81       	ld	r24, Z
    3b3a:	91 81       	ldd	r25, Z+1	; 0x01
    3b3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b40:	95 83       	std	Z+5, r25	; 0x05
    3b42:	84 83       	std	Z+4, r24	; 0x04
    3b44:	3e c0       	rjmp	.+124    	; 0x3bc2 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3b46:	e9 81       	ldd	r30, Y+1	; 0x01
    3b48:	fa 81       	ldd	r31, Y+2	; 0x02
    3b4a:	66 81       	ldd	r22, Z+6	; 0x06
    3b4c:	77 81       	ldd	r23, Z+7	; 0x07
    3b4e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b50:	fa 81       	ldd	r31, Y+2	; 0x02
    3b52:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b54:	48 2f       	mov	r20, r24
    3b56:	50 e0       	ldi	r21, 0x00	; 0
    3b58:	2b 81       	ldd	r18, Y+3	; 0x03
    3b5a:	3c 81       	ldd	r19, Y+4	; 0x04
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	b9 01       	movw	r22, r18
    3b60:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3b64:	e9 81       	ldd	r30, Y+1	; 0x01
    3b66:	fa 81       	ldd	r31, Y+2	; 0x02
    3b68:	26 81       	ldd	r18, Z+6	; 0x06
    3b6a:	37 81       	ldd	r19, Z+7	; 0x07
    3b6c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b6e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b70:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b72:	88 2f       	mov	r24, r24
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	90 95       	com	r25
    3b78:	81 95       	neg	r24
    3b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7c:	82 0f       	add	r24, r18
    3b7e:	93 1f       	adc	r25, r19
    3b80:	e9 81       	ldd	r30, Y+1	; 0x01
    3b82:	fa 81       	ldd	r31, Y+2	; 0x02
    3b84:	97 83       	std	Z+7, r25	; 0x07
    3b86:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3b88:	e9 81       	ldd	r30, Y+1	; 0x01
    3b8a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b8c:	26 81       	ldd	r18, Z+6	; 0x06
    3b8e:	37 81       	ldd	r19, Z+7	; 0x07
    3b90:	e9 81       	ldd	r30, Y+1	; 0x01
    3b92:	fa 81       	ldd	r31, Y+2	; 0x02
    3b94:	80 81       	ld	r24, Z
    3b96:	91 81       	ldd	r25, Z+1	; 0x01
    3b98:	28 17       	cp	r18, r24
    3b9a:	39 07       	cpc	r19, r25
    3b9c:	90 f4       	brcc	.+36     	; 0x3bc2 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3b9e:	e9 81       	ldd	r30, Y+1	; 0x01
    3ba0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ba2:	22 81       	ldd	r18, Z+2	; 0x02
    3ba4:	33 81       	ldd	r19, Z+3	; 0x03
    3ba6:	e9 81       	ldd	r30, Y+1	; 0x01
    3ba8:	fa 81       	ldd	r31, Y+2	; 0x02
    3baa:	84 8d       	ldd	r24, Z+28	; 0x1c
    3bac:	88 2f       	mov	r24, r24
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	90 95       	com	r25
    3bb2:	81 95       	neg	r24
    3bb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bb6:	82 0f       	add	r24, r18
    3bb8:	93 1f       	adc	r25, r19
    3bba:	e9 81       	ldd	r30, Y+1	; 0x01
    3bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bbe:	97 83       	std	Z+7, r25	; 0x07
    3bc0:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    3bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    3bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    3bc6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bc8:	8f 5f       	subi	r24, 0xFF	; 255
    3bca:	e9 81       	ldd	r30, Y+1	; 0x01
    3bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bce:	82 8f       	std	Z+26, r24	; 0x1a
}
    3bd0:	0f 90       	pop	r0
    3bd2:	0f 90       	pop	r0
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	cf 91       	pop	r28
    3bdc:	df 91       	pop	r29
    3bde:	08 95       	ret

00003be0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    3be0:	df 93       	push	r29
    3be2:	cf 93       	push	r28
    3be4:	00 d0       	rcall	.+0      	; 0x3be6 <prvCopyDataFromQueue+0x6>
    3be6:	00 d0       	rcall	.+0      	; 0x3be8 <prvCopyDataFromQueue+0x8>
    3be8:	cd b7       	in	r28, 0x3d	; 61
    3bea:	de b7       	in	r29, 0x3e	; 62
    3bec:	9a 83       	std	Y+2, r25	; 0x02
    3bee:	89 83       	std	Y+1, r24	; 0x01
    3bf0:	7c 83       	std	Y+4, r23	; 0x04
    3bf2:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3bf4:	e9 81       	ldd	r30, Y+1	; 0x01
    3bf6:	fa 81       	ldd	r31, Y+2	; 0x02
    3bf8:	80 81       	ld	r24, Z
    3bfa:	91 81       	ldd	r25, Z+1	; 0x01
    3bfc:	00 97       	sbiw	r24, 0x00	; 0
    3bfe:	89 f1       	breq	.+98     	; 0x3c62 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3c00:	e9 81       	ldd	r30, Y+1	; 0x01
    3c02:	fa 81       	ldd	r31, Y+2	; 0x02
    3c04:	26 81       	ldd	r18, Z+6	; 0x06
    3c06:	37 81       	ldd	r19, Z+7	; 0x07
    3c08:	e9 81       	ldd	r30, Y+1	; 0x01
    3c0a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c0c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c0e:	88 2f       	mov	r24, r24
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	82 0f       	add	r24, r18
    3c14:	93 1f       	adc	r25, r19
    3c16:	e9 81       	ldd	r30, Y+1	; 0x01
    3c18:	fa 81       	ldd	r31, Y+2	; 0x02
    3c1a:	97 83       	std	Z+7, r25	; 0x07
    3c1c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c20:	fa 81       	ldd	r31, Y+2	; 0x02
    3c22:	26 81       	ldd	r18, Z+6	; 0x06
    3c24:	37 81       	ldd	r19, Z+7	; 0x07
    3c26:	e9 81       	ldd	r30, Y+1	; 0x01
    3c28:	fa 81       	ldd	r31, Y+2	; 0x02
    3c2a:	82 81       	ldd	r24, Z+2	; 0x02
    3c2c:	93 81       	ldd	r25, Z+3	; 0x03
    3c2e:	28 17       	cp	r18, r24
    3c30:	39 07       	cpc	r19, r25
    3c32:	40 f0       	brcs	.+16     	; 0x3c44 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3c34:	e9 81       	ldd	r30, Y+1	; 0x01
    3c36:	fa 81       	ldd	r31, Y+2	; 0x02
    3c38:	80 81       	ld	r24, Z
    3c3a:	91 81       	ldd	r25, Z+1	; 0x01
    3c3c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c3e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c40:	97 83       	std	Z+7, r25	; 0x07
    3c42:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3c44:	e9 81       	ldd	r30, Y+1	; 0x01
    3c46:	fa 81       	ldd	r31, Y+2	; 0x02
    3c48:	46 81       	ldd	r20, Z+6	; 0x06
    3c4a:	57 81       	ldd	r21, Z+7	; 0x07
    3c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c50:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c52:	28 2f       	mov	r18, r24
    3c54:	30 e0       	ldi	r19, 0x00	; 0
    3c56:	8b 81       	ldd	r24, Y+3	; 0x03
    3c58:	9c 81       	ldd	r25, Y+4	; 0x04
    3c5a:	ba 01       	movw	r22, r20
    3c5c:	a9 01       	movw	r20, r18
    3c5e:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <memcpy>
	}
}
    3c62:	0f 90       	pop	r0
    3c64:	0f 90       	pop	r0
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	cf 91       	pop	r28
    3c6c:	df 91       	pop	r29
    3c6e:	08 95       	ret

00003c70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3c70:	df 93       	push	r29
    3c72:	cf 93       	push	r28
    3c74:	00 d0       	rcall	.+0      	; 0x3c76 <prvUnlockQueue+0x6>
    3c76:	cd b7       	in	r28, 0x3d	; 61
    3c78:	de b7       	in	r29, 0x3e	; 62
    3c7a:	9a 83       	std	Y+2, r25	; 0x02
    3c7c:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3c7e:	0f b6       	in	r0, 0x3f	; 63
    3c80:	f8 94       	cli
    3c82:	0f 92       	push	r0
    3c84:	15 c0       	rjmp	.+42     	; 0x3cb0 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c86:	e9 81       	ldd	r30, Y+1	; 0x01
    3c88:	fa 81       	ldd	r31, Y+2	; 0x02
    3c8a:	81 89       	ldd	r24, Z+17	; 0x11
    3c8c:	88 23       	and	r24, r24
    3c8e:	a9 f0       	breq	.+42     	; 0x3cba <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3c90:	89 81       	ldd	r24, Y+1	; 0x01
    3c92:	9a 81       	ldd	r25, Y+2	; 0x02
    3c94:	41 96       	adiw	r24, 0x11	; 17
    3c96:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <xTaskRemoveFromEventList>
    3c9a:	88 23       	and	r24, r24
    3c9c:	11 f0       	breq	.+4      	; 0x3ca2 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3c9e:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3ca2:	e9 81       	ldd	r30, Y+1	; 0x01
    3ca4:	fa 81       	ldd	r31, Y+2	; 0x02
    3ca6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3ca8:	81 50       	subi	r24, 0x01	; 1
    3caa:	e9 81       	ldd	r30, Y+1	; 0x01
    3cac:	fa 81       	ldd	r31, Y+2	; 0x02
    3cae:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3cb0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb2:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb4:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cb6:	18 16       	cp	r1, r24
    3cb8:	34 f3       	brlt	.-52     	; 0x3c86 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3cba:	e9 81       	ldd	r30, Y+1	; 0x01
    3cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cbe:	8f ef       	ldi	r24, 0xFF	; 255
    3cc0:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3cc2:	0f 90       	pop	r0
    3cc4:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3cc6:	0f b6       	in	r0, 0x3f	; 63
    3cc8:	f8 94       	cli
    3cca:	0f 92       	push	r0
    3ccc:	15 c0       	rjmp	.+42     	; 0x3cf8 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3cce:	e9 81       	ldd	r30, Y+1	; 0x01
    3cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    3cd2:	80 85       	ldd	r24, Z+8	; 0x08
    3cd4:	88 23       	and	r24, r24
    3cd6:	a9 f0       	breq	.+42     	; 0x3d02 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3cd8:	89 81       	ldd	r24, Y+1	; 0x01
    3cda:	9a 81       	ldd	r25, Y+2	; 0x02
    3cdc:	08 96       	adiw	r24, 0x08	; 8
    3cde:	0e 94 e2 24 	call	0x49c4	; 0x49c4 <xTaskRemoveFromEventList>
    3ce2:	88 23       	and	r24, r24
    3ce4:	11 f0       	breq	.+4      	; 0x3cea <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    3ce6:	0e 94 ca 25 	call	0x4b94	; 0x4b94 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    3cea:	e9 81       	ldd	r30, Y+1	; 0x01
    3cec:	fa 81       	ldd	r31, Y+2	; 0x02
    3cee:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cf0:	81 50       	subi	r24, 0x01	; 1
    3cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    3cf4:	fa 81       	ldd	r31, Y+2	; 0x02
    3cf6:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    3cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    3cfc:	85 8d       	ldd	r24, Z+29	; 0x1d
    3cfe:	18 16       	cp	r1, r24
    3d00:	34 f3       	brlt	.-52     	; 0x3cce <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3d02:	e9 81       	ldd	r30, Y+1	; 0x01
    3d04:	fa 81       	ldd	r31, Y+2	; 0x02
    3d06:	8f ef       	ldi	r24, 0xFF	; 255
    3d08:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3d0a:	0f 90       	pop	r0
    3d0c:	0f be       	out	0x3f, r0	; 63
}
    3d0e:	0f 90       	pop	r0
    3d10:	0f 90       	pop	r0
    3d12:	cf 91       	pop	r28
    3d14:	df 91       	pop	r29
    3d16:	08 95       	ret

00003d18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	00 d0       	rcall	.+0      	; 0x3d1e <prvIsQueueEmpty+0x6>
    3d1e:	0f 92       	push	r0
    3d20:	cd b7       	in	r28, 0x3d	; 61
    3d22:	de b7       	in	r29, 0x3e	; 62
    3d24:	9b 83       	std	Y+3, r25	; 0x03
    3d26:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3d28:	0f b6       	in	r0, 0x3f	; 63
    3d2a:	f8 94       	cli
    3d2c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3d2e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d30:	fb 81       	ldd	r31, Y+3	; 0x03
    3d32:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d34:	19 82       	std	Y+1, r1	; 0x01
    3d36:	88 23       	and	r24, r24
    3d38:	11 f4       	brne	.+4      	; 0x3d3e <prvIsQueueEmpty+0x26>
    3d3a:	81 e0       	ldi	r24, 0x01	; 1
    3d3c:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3d3e:	0f 90       	pop	r0
    3d40:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3d42:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d44:	0f 90       	pop	r0
    3d46:	0f 90       	pop	r0
    3d48:	0f 90       	pop	r0
    3d4a:	cf 91       	pop	r28
    3d4c:	df 91       	pop	r29
    3d4e:	08 95       	ret

00003d50 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3d50:	df 93       	push	r29
    3d52:	cf 93       	push	r28
    3d54:	00 d0       	rcall	.+0      	; 0x3d56 <xQueueIsQueueEmptyFromISR+0x6>
    3d56:	0f 92       	push	r0
    3d58:	cd b7       	in	r28, 0x3d	; 61
    3d5a:	de b7       	in	r29, 0x3e	; 62
    3d5c:	9b 83       	std	Y+3, r25	; 0x03
    3d5e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3d60:	ea 81       	ldd	r30, Y+2	; 0x02
    3d62:	fb 81       	ldd	r31, Y+3	; 0x03
    3d64:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d66:	19 82       	std	Y+1, r1	; 0x01
    3d68:	88 23       	and	r24, r24
    3d6a:	11 f4       	brne	.+4      	; 0x3d70 <xQueueIsQueueEmptyFromISR+0x20>
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3d70:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d72:	0f 90       	pop	r0
    3d74:	0f 90       	pop	r0
    3d76:	0f 90       	pop	r0
    3d78:	cf 91       	pop	r28
    3d7a:	df 91       	pop	r29
    3d7c:	08 95       	ret

00003d7e <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3d7e:	df 93       	push	r29
    3d80:	cf 93       	push	r28
    3d82:	00 d0       	rcall	.+0      	; 0x3d84 <prvIsQueueFull+0x6>
    3d84:	0f 92       	push	r0
    3d86:	cd b7       	in	r28, 0x3d	; 61
    3d88:	de b7       	in	r29, 0x3e	; 62
    3d8a:	9b 83       	std	Y+3, r25	; 0x03
    3d8c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3d8e:	0f b6       	in	r0, 0x3f	; 63
    3d90:	f8 94       	cli
    3d92:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3d94:	ea 81       	ldd	r30, Y+2	; 0x02
    3d96:	fb 81       	ldd	r31, Y+3	; 0x03
    3d98:	92 8d       	ldd	r25, Z+26	; 0x1a
    3d9a:	ea 81       	ldd	r30, Y+2	; 0x02
    3d9c:	fb 81       	ldd	r31, Y+3	; 0x03
    3d9e:	83 8d       	ldd	r24, Z+27	; 0x1b
    3da0:	19 82       	std	Y+1, r1	; 0x01
    3da2:	98 17       	cp	r25, r24
    3da4:	11 f4       	brne	.+4      	; 0x3daa <prvIsQueueFull+0x2c>
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3daa:	0f 90       	pop	r0
    3dac:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3dae:	89 81       	ldd	r24, Y+1	; 0x01
}
    3db0:	0f 90       	pop	r0
    3db2:	0f 90       	pop	r0
    3db4:	0f 90       	pop	r0
    3db6:	cf 91       	pop	r28
    3db8:	df 91       	pop	r29
    3dba:	08 95       	ret

00003dbc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3dbc:	df 93       	push	r29
    3dbe:	cf 93       	push	r28
    3dc0:	00 d0       	rcall	.+0      	; 0x3dc2 <xQueueIsQueueFullFromISR+0x6>
    3dc2:	0f 92       	push	r0
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62
    3dc8:	9b 83       	std	Y+3, r25	; 0x03
    3dca:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3dcc:	ea 81       	ldd	r30, Y+2	; 0x02
    3dce:	fb 81       	ldd	r31, Y+3	; 0x03
    3dd0:	92 8d       	ldd	r25, Z+26	; 0x1a
    3dd2:	ea 81       	ldd	r30, Y+2	; 0x02
    3dd4:	fb 81       	ldd	r31, Y+3	; 0x03
    3dd6:	83 8d       	ldd	r24, Z+27	; 0x1b
    3dd8:	19 82       	std	Y+1, r1	; 0x01
    3dda:	98 17       	cp	r25, r24
    3ddc:	11 f4       	brne	.+4      	; 0x3de2 <xQueueIsQueueFullFromISR+0x26>
    3dde:	81 e0       	ldi	r24, 0x01	; 1
    3de0:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3de2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3de4:	0f 90       	pop	r0
    3de6:	0f 90       	pop	r0
    3de8:	0f 90       	pop	r0
    3dea:	cf 91       	pop	r28
    3dec:	df 91       	pop	r29
    3dee:	08 95       	ret

00003df0 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3df0:	af 92       	push	r10
    3df2:	bf 92       	push	r11
    3df4:	cf 92       	push	r12
    3df6:	df 92       	push	r13
    3df8:	ef 92       	push	r14
    3dfa:	ff 92       	push	r15
    3dfc:	0f 93       	push	r16
    3dfe:	1f 93       	push	r17
    3e00:	df 93       	push	r29
    3e02:	cf 93       	push	r28
    3e04:	cd b7       	in	r28, 0x3d	; 61
    3e06:	de b7       	in	r29, 0x3e	; 62
    3e08:	64 97       	sbiw	r28, 0x14	; 20
    3e0a:	0f b6       	in	r0, 0x3f	; 63
    3e0c:	f8 94       	cli
    3e0e:	de bf       	out	0x3e, r29	; 62
    3e10:	0f be       	out	0x3f, r0	; 63
    3e12:	cd bf       	out	0x3d, r28	; 61
    3e14:	9f 83       	std	Y+7, r25	; 0x07
    3e16:	8e 83       	std	Y+6, r24	; 0x06
    3e18:	79 87       	std	Y+9, r23	; 0x09
    3e1a:	68 87       	std	Y+8, r22	; 0x08
    3e1c:	5b 87       	std	Y+11, r21	; 0x0b
    3e1e:	4a 87       	std	Y+10, r20	; 0x0a
    3e20:	3d 87       	std	Y+13, r19	; 0x0d
    3e22:	2c 87       	std	Y+12, r18	; 0x0c
    3e24:	0e 87       	std	Y+14, r16	; 0x0e
    3e26:	f8 8a       	std	Y+16, r15	; 0x10
    3e28:	ef 86       	std	Y+15, r14	; 0x0f
    3e2a:	da 8a       	std	Y+18, r13	; 0x12
    3e2c:	c9 8a       	std	Y+17, r12	; 0x11
    3e2e:	bc 8a       	std	Y+20, r11	; 0x14
    3e30:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3e32:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e34:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e36:	29 89       	ldd	r18, Y+17	; 0x11
    3e38:	3a 89       	ldd	r19, Y+18	; 0x12
    3e3a:	b9 01       	movw	r22, r18
    3e3c:	0e 94 fd 26 	call	0x4dfa	; 0x4dfa <prvAllocateTCBAndStack>
    3e40:	9c 83       	std	Y+4, r25	; 0x04
    3e42:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    3e44:	8b 81       	ldd	r24, Y+3	; 0x03
    3e46:	9c 81       	ldd	r25, Y+4	; 0x04
    3e48:	00 97       	sbiw	r24, 0x00	; 0
    3e4a:	09 f4       	brne	.+2      	; 0x3e4e <xTaskGenericCreate+0x5e>
    3e4c:	99 c0       	rjmp	.+306    	; 0x3f80 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3e4e:	eb 81       	ldd	r30, Y+3	; 0x03
    3e50:	fc 81       	ldd	r31, Y+4	; 0x04
    3e52:	27 89       	ldd	r18, Z+23	; 0x17
    3e54:	30 8d       	ldd	r19, Z+24	; 0x18
    3e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e58:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e5a:	01 97       	sbiw	r24, 0x01	; 1
    3e5c:	82 0f       	add	r24, r18
    3e5e:	93 1f       	adc	r25, r19
    3e60:	9a 83       	std	Y+2, r25	; 0x02
    3e62:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    3e64:	8b 81       	ldd	r24, Y+3	; 0x03
    3e66:	9c 81       	ldd	r25, Y+4	; 0x04
    3e68:	28 85       	ldd	r18, Y+8	; 0x08
    3e6a:	39 85       	ldd	r19, Y+9	; 0x09
    3e6c:	eb 89       	ldd	r30, Y+19	; 0x13
    3e6e:	fc 89       	ldd	r31, Y+20	; 0x14
    3e70:	aa 85       	ldd	r26, Y+10	; 0x0a
    3e72:	bb 85       	ldd	r27, Y+11	; 0x0b
    3e74:	b9 01       	movw	r22, r18
    3e76:	4e 85       	ldd	r20, Y+14	; 0x0e
    3e78:	9f 01       	movw	r18, r30
    3e7a:	8d 01       	movw	r16, r26
    3e7c:	0e 94 de 25 	call	0x4bbc	; 0x4bbc <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	9a 81       	ldd	r25, Y+2	; 0x02
    3e84:	2e 81       	ldd	r18, Y+6	; 0x06
    3e86:	3f 81       	ldd	r19, Y+7	; 0x07
    3e88:	4c 85       	ldd	r20, Y+12	; 0x0c
    3e8a:	5d 85       	ldd	r21, Y+13	; 0x0d
    3e8c:	b9 01       	movw	r22, r18
    3e8e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <pxPortInitialiseStack>
    3e92:	eb 81       	ldd	r30, Y+3	; 0x03
    3e94:	fc 81       	ldd	r31, Y+4	; 0x04
    3e96:	91 83       	std	Z+1, r25	; 0x01
    3e98:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    3e9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3e9c:	98 89       	ldd	r25, Y+16	; 0x10
    3e9e:	00 97       	sbiw	r24, 0x00	; 0
    3ea0:	31 f0       	breq	.+12     	; 0x3eae <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3ea2:	ef 85       	ldd	r30, Y+15	; 0x0f
    3ea4:	f8 89       	ldd	r31, Y+16	; 0x10
    3ea6:	8b 81       	ldd	r24, Y+3	; 0x03
    3ea8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eaa:	91 83       	std	Z+1, r25	; 0x01
    3eac:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    3eae:	0f b6       	in	r0, 0x3f	; 63
    3eb0:	f8 94       	cli
    3eb2:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    3eb4:	80 91 ef 05 	lds	r24, 0x05EF
    3eb8:	8f 5f       	subi	r24, 0xFF	; 255
    3eba:	80 93 ef 05 	sts	0x05EF, r24
			if( pxCurrentTCB == NULL )
    3ebe:	80 91 ec 05 	lds	r24, 0x05EC
    3ec2:	90 91 ed 05 	lds	r25, 0x05ED
    3ec6:	00 97       	sbiw	r24, 0x00	; 0
    3ec8:	69 f4       	brne	.+26     	; 0x3ee4 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3eca:	8b 81       	ldd	r24, Y+3	; 0x03
    3ecc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ece:	90 93 ed 05 	sts	0x05ED, r25
    3ed2:	80 93 ec 05 	sts	0x05EC, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3ed6:	80 91 ef 05 	lds	r24, 0x05EF
    3eda:	81 30       	cpi	r24, 0x01	; 1
    3edc:	a9 f4       	brne	.+42     	; 0x3f08 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3ede:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <prvInitialiseTaskLists>
    3ee2:	12 c0       	rjmp	.+36     	; 0x3f08 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3ee4:	80 91 f4 05 	lds	r24, 0x05F4
    3ee8:	88 23       	and	r24, r24
    3eea:	71 f4       	brne	.+28     	; 0x3f08 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3eec:	e0 91 ec 05 	lds	r30, 0x05EC
    3ef0:	f0 91 ed 05 	lds	r31, 0x05ED
    3ef4:	96 89       	ldd	r25, Z+22	; 0x16
    3ef6:	8e 85       	ldd	r24, Y+14	; 0x0e
    3ef8:	89 17       	cp	r24, r25
    3efa:	30 f0       	brcs	.+12     	; 0x3f08 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    3efc:	8b 81       	ldd	r24, Y+3	; 0x03
    3efe:	9c 81       	ldd	r25, Y+4	; 0x04
    3f00:	90 93 ed 05 	sts	0x05ED, r25
    3f04:	80 93 ec 05 	sts	0x05EC, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3f08:	eb 81       	ldd	r30, Y+3	; 0x03
    3f0a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f0c:	96 89       	ldd	r25, Z+22	; 0x16
    3f0e:	80 91 f2 05 	lds	r24, 0x05F2
    3f12:	89 17       	cp	r24, r25
    3f14:	28 f4       	brcc	.+10     	; 0x3f20 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3f16:	eb 81       	ldd	r30, Y+3	; 0x03
    3f18:	fc 81       	ldd	r31, Y+4	; 0x04
    3f1a:	86 89       	ldd	r24, Z+22	; 0x16
    3f1c:	80 93 f2 05 	sts	0x05F2, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3f20:	80 91 f9 05 	lds	r24, 0x05F9
    3f24:	8f 5f       	subi	r24, 0xFF	; 255
    3f26:	80 93 f9 05 	sts	0x05F9, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    3f2a:	eb 81       	ldd	r30, Y+3	; 0x03
    3f2c:	fc 81       	ldd	r31, Y+4	; 0x04
    3f2e:	96 89       	ldd	r25, Z+22	; 0x16
    3f30:	80 91 f3 05 	lds	r24, 0x05F3
    3f34:	89 17       	cp	r24, r25
    3f36:	28 f4       	brcc	.+10     	; 0x3f42 <xTaskGenericCreate+0x152>
    3f38:	eb 81       	ldd	r30, Y+3	; 0x03
    3f3a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f3c:	86 89       	ldd	r24, Z+22	; 0x16
    3f3e:	80 93 f3 05 	sts	0x05F3, r24
    3f42:	eb 81       	ldd	r30, Y+3	; 0x03
    3f44:	fc 81       	ldd	r31, Y+4	; 0x04
    3f46:	86 89       	ldd	r24, Z+22	; 0x16
    3f48:	28 2f       	mov	r18, r24
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	c9 01       	movw	r24, r18
    3f4e:	88 0f       	add	r24, r24
    3f50:	99 1f       	adc	r25, r25
    3f52:	88 0f       	add	r24, r24
    3f54:	99 1f       	adc	r25, r25
    3f56:	88 0f       	add	r24, r24
    3f58:	99 1f       	adc	r25, r25
    3f5a:	82 0f       	add	r24, r18
    3f5c:	93 1f       	adc	r25, r19
    3f5e:	ac 01       	movw	r20, r24
    3f60:	46 50       	subi	r20, 0x06	; 6
    3f62:	5a 4f       	sbci	r21, 0xFA	; 250
    3f64:	8b 81       	ldd	r24, Y+3	; 0x03
    3f66:	9c 81       	ldd	r25, Y+4	; 0x04
    3f68:	9c 01       	movw	r18, r24
    3f6a:	2e 5f       	subi	r18, 0xFE	; 254
    3f6c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f6e:	ca 01       	movw	r24, r20
    3f70:	b9 01       	movw	r22, r18
    3f72:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

			xReturn = pdPASS;
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3f7a:	0f 90       	pop	r0
    3f7c:	0f be       	out	0x3f, r0	; 63
    3f7e:	02 c0       	rjmp	.+4      	; 0x3f84 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3f80:	8f ef       	ldi	r24, 0xFF	; 255
    3f82:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    3f84:	8d 81       	ldd	r24, Y+5	; 0x05
    3f86:	81 30       	cpi	r24, 0x01	; 1
    3f88:	71 f4       	brne	.+28     	; 0x3fa6 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    3f8a:	80 91 f4 05 	lds	r24, 0x05F4
    3f8e:	88 23       	and	r24, r24
    3f90:	51 f0       	breq	.+20     	; 0x3fa6 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3f92:	e0 91 ec 05 	lds	r30, 0x05EC
    3f96:	f0 91 ed 05 	lds	r31, 0x05ED
    3f9a:	96 89       	ldd	r25, Z+22	; 0x16
    3f9c:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f9e:	98 17       	cp	r25, r24
    3fa0:	10 f4       	brcc	.+4      	; 0x3fa6 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    3fa2:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
			}
		}
	}

	return xReturn;
    3fa6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3fa8:	64 96       	adiw	r28, 0x14	; 20
    3faa:	0f b6       	in	r0, 0x3f	; 63
    3fac:	f8 94       	cli
    3fae:	de bf       	out	0x3e, r29	; 62
    3fb0:	0f be       	out	0x3f, r0	; 63
    3fb2:	cd bf       	out	0x3d, r28	; 61
    3fb4:	cf 91       	pop	r28
    3fb6:	df 91       	pop	r29
    3fb8:	1f 91       	pop	r17
    3fba:	0f 91       	pop	r16
    3fbc:	ff 90       	pop	r15
    3fbe:	ef 90       	pop	r14
    3fc0:	df 90       	pop	r13
    3fc2:	cf 90       	pop	r12
    3fc4:	bf 90       	pop	r11
    3fc6:	af 90       	pop	r10
    3fc8:	08 95       	ret

00003fca <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3fca:	df 93       	push	r29
    3fcc:	cf 93       	push	r28
    3fce:	00 d0       	rcall	.+0      	; 0x3fd0 <vTaskDelete+0x6>
    3fd0:	00 d0       	rcall	.+0      	; 0x3fd2 <vTaskDelete+0x8>
    3fd2:	00 d0       	rcall	.+0      	; 0x3fd4 <vTaskDelete+0xa>
    3fd4:	cd b7       	in	r28, 0x3d	; 61
    3fd6:	de b7       	in	r29, 0x3e	; 62
    3fd8:	9c 83       	std	Y+4, r25	; 0x04
    3fda:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3fe2:	20 91 ec 05 	lds	r18, 0x05EC
    3fe6:	30 91 ed 05 	lds	r19, 0x05ED
    3fea:	8b 81       	ldd	r24, Y+3	; 0x03
    3fec:	9c 81       	ldd	r25, Y+4	; 0x04
    3fee:	82 17       	cp	r24, r18
    3ff0:	93 07       	cpc	r25, r19
    3ff2:	11 f4       	brne	.+4      	; 0x3ff8 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    3ff4:	1c 82       	std	Y+4, r1	; 0x04
    3ff6:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    3ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffc:	00 97       	sbiw	r24, 0x00	; 0
    3ffe:	39 f4       	brne	.+14     	; 0x400e <vTaskDelete+0x44>
    4000:	80 91 ec 05 	lds	r24, 0x05EC
    4004:	90 91 ed 05 	lds	r25, 0x05ED
    4008:	9e 83       	std	Y+6, r25	; 0x06
    400a:	8d 83       	std	Y+5, r24	; 0x05
    400c:	04 c0       	rjmp	.+8      	; 0x4016 <vTaskDelete+0x4c>
    400e:	8b 81       	ldd	r24, Y+3	; 0x03
    4010:	9c 81       	ldd	r25, Y+4	; 0x04
    4012:	9e 83       	std	Y+6, r25	; 0x06
    4014:	8d 83       	std	Y+5, r24	; 0x05
    4016:	8d 81       	ldd	r24, Y+5	; 0x05
    4018:	9e 81       	ldd	r25, Y+6	; 0x06
    401a:	9a 83       	std	Y+2, r25	; 0x02
    401c:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    401e:	89 81       	ldd	r24, Y+1	; 0x01
    4020:	9a 81       	ldd	r25, Y+2	; 0x02
    4022:	02 96       	adiw	r24, 0x02	; 2
    4024:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4028:	e9 81       	ldd	r30, Y+1	; 0x01
    402a:	fa 81       	ldd	r31, Y+2	; 0x02
    402c:	84 89       	ldd	r24, Z+20	; 0x14
    402e:	95 89       	ldd	r25, Z+21	; 0x15
    4030:	00 97       	sbiw	r24, 0x00	; 0
    4032:	29 f0       	breq	.+10     	; 0x403e <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4034:	89 81       	ldd	r24, Y+1	; 0x01
    4036:	9a 81       	ldd	r25, Y+2	; 0x02
    4038:	0c 96       	adiw	r24, 0x0c	; 12
    403a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    403e:	89 81       	ldd	r24, Y+1	; 0x01
    4040:	9a 81       	ldd	r25, Y+2	; 0x02
    4042:	9c 01       	movw	r18, r24
    4044:	2e 5f       	subi	r18, 0xFE	; 254
    4046:	3f 4f       	sbci	r19, 0xFF	; 255
    4048:	8d e3       	ldi	r24, 0x3D	; 61
    404a:	96 e0       	ldi	r25, 0x06	; 6
    404c:	b9 01       	movw	r22, r18
    404e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4052:	80 91 ee 05 	lds	r24, 0x05EE
    4056:	8f 5f       	subi	r24, 0xFF	; 255
    4058:	80 93 ee 05 	sts	0x05EE, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    405c:	80 91 f9 05 	lds	r24, 0x05F9
    4060:	8f 5f       	subi	r24, 0xFF	; 255
    4062:	80 93 f9 05 	sts	0x05F9, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4066:	0f 90       	pop	r0
    4068:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    406a:	80 91 f4 05 	lds	r24, 0x05F4
    406e:	88 23       	and	r24, r24
    4070:	31 f0       	breq	.+12     	; 0x407e <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4072:	8b 81       	ldd	r24, Y+3	; 0x03
    4074:	9c 81       	ldd	r25, Y+4	; 0x04
    4076:	00 97       	sbiw	r24, 0x00	; 0
    4078:	11 f4       	brne	.+4      	; 0x407e <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    407a:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
			}
		}
	}
    407e:	26 96       	adiw	r28, 0x06	; 6
    4080:	0f b6       	in	r0, 0x3f	; 63
    4082:	f8 94       	cli
    4084:	de bf       	out	0x3e, r29	; 62
    4086:	0f be       	out	0x3f, r0	; 63
    4088:	cd bf       	out	0x3d, r28	; 61
    408a:	cf 91       	pop	r28
    408c:	df 91       	pop	r29
    408e:	08 95       	ret

00004090 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    4090:	df 93       	push	r29
    4092:	cf 93       	push	r28
    4094:	cd b7       	in	r28, 0x3d	; 61
    4096:	de b7       	in	r29, 0x3e	; 62
    4098:	28 97       	sbiw	r28, 0x08	; 8
    409a:	0f b6       	in	r0, 0x3f	; 63
    409c:	f8 94       	cli
    409e:	de bf       	out	0x3e, r29	; 62
    40a0:	0f be       	out	0x3f, r0	; 63
    40a2:	cd bf       	out	0x3d, r28	; 61
    40a4:	9e 83       	std	Y+6, r25	; 0x06
    40a6:	8d 83       	std	Y+5, r24	; 0x05
    40a8:	78 87       	std	Y+8, r23	; 0x08
    40aa:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    40ac:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    40ae:	0e 94 93 22 	call	0x4526	; 0x4526 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    40b2:	ed 81       	ldd	r30, Y+5	; 0x05
    40b4:	fe 81       	ldd	r31, Y+6	; 0x06
    40b6:	20 81       	ld	r18, Z
    40b8:	31 81       	ldd	r19, Z+1	; 0x01
    40ba:	8f 81       	ldd	r24, Y+7	; 0x07
    40bc:	98 85       	ldd	r25, Y+8	; 0x08
    40be:	82 0f       	add	r24, r18
    40c0:	93 1f       	adc	r25, r19
    40c2:	9c 83       	std	Y+4, r25	; 0x04
    40c4:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    40c6:	ed 81       	ldd	r30, Y+5	; 0x05
    40c8:	fe 81       	ldd	r31, Y+6	; 0x06
    40ca:	20 81       	ld	r18, Z
    40cc:	31 81       	ldd	r19, Z+1	; 0x01
    40ce:	80 91 f0 05 	lds	r24, 0x05F0
    40d2:	90 91 f1 05 	lds	r25, 0x05F1
    40d6:	82 17       	cp	r24, r18
    40d8:	93 07       	cpc	r25, r19
    40da:	a8 f4       	brcc	.+42     	; 0x4106 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    40dc:	ed 81       	ldd	r30, Y+5	; 0x05
    40de:	fe 81       	ldd	r31, Y+6	; 0x06
    40e0:	20 81       	ld	r18, Z
    40e2:	31 81       	ldd	r19, Z+1	; 0x01
    40e4:	8b 81       	ldd	r24, Y+3	; 0x03
    40e6:	9c 81       	ldd	r25, Y+4	; 0x04
    40e8:	82 17       	cp	r24, r18
    40ea:	93 07       	cpc	r25, r19
    40ec:	00 f5       	brcc	.+64     	; 0x412e <vTaskDelayUntil+0x9e>
    40ee:	20 91 f0 05 	lds	r18, 0x05F0
    40f2:	30 91 f1 05 	lds	r19, 0x05F1
    40f6:	8b 81       	ldd	r24, Y+3	; 0x03
    40f8:	9c 81       	ldd	r25, Y+4	; 0x04
    40fa:	28 17       	cp	r18, r24
    40fc:	39 07       	cpc	r19, r25
    40fe:	b8 f4       	brcc	.+46     	; 0x412e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    4100:	81 e0       	ldi	r24, 0x01	; 1
    4102:	89 83       	std	Y+1, r24	; 0x01
    4104:	14 c0       	rjmp	.+40     	; 0x412e <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4106:	ed 81       	ldd	r30, Y+5	; 0x05
    4108:	fe 81       	ldd	r31, Y+6	; 0x06
    410a:	20 81       	ld	r18, Z
    410c:	31 81       	ldd	r19, Z+1	; 0x01
    410e:	8b 81       	ldd	r24, Y+3	; 0x03
    4110:	9c 81       	ldd	r25, Y+4	; 0x04
    4112:	82 17       	cp	r24, r18
    4114:	93 07       	cpc	r25, r19
    4116:	48 f0       	brcs	.+18     	; 0x412a <vTaskDelayUntil+0x9a>
    4118:	20 91 f0 05 	lds	r18, 0x05F0
    411c:	30 91 f1 05 	lds	r19, 0x05F1
    4120:	8b 81       	ldd	r24, Y+3	; 0x03
    4122:	9c 81       	ldd	r25, Y+4	; 0x04
    4124:	28 17       	cp	r18, r24
    4126:	39 07       	cpc	r19, r25
    4128:	10 f4       	brcc	.+4      	; 0x412e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    412e:	ed 81       	ldd	r30, Y+5	; 0x05
    4130:	fe 81       	ldd	r31, Y+6	; 0x06
    4132:	8b 81       	ldd	r24, Y+3	; 0x03
    4134:	9c 81       	ldd	r25, Y+4	; 0x04
    4136:	91 83       	std	Z+1, r25	; 0x01
    4138:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    413a:	89 81       	ldd	r24, Y+1	; 0x01
    413c:	88 23       	and	r24, r24
    413e:	59 f0       	breq	.+22     	; 0x4156 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4140:	80 91 ec 05 	lds	r24, 0x05EC
    4144:	90 91 ed 05 	lds	r25, 0x05ED
    4148:	02 96       	adiw	r24, 0x02	; 2
    414a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    414e:	8b 81       	ldd	r24, Y+3	; 0x03
    4150:	9c 81       	ldd	r25, Y+4	; 0x04
    4152:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4156:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>
    415a:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    415c:	8a 81       	ldd	r24, Y+2	; 0x02
    415e:	88 23       	and	r24, r24
    4160:	11 f4       	brne	.+4      	; 0x4166 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    4162:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
		}
	}
    4166:	28 96       	adiw	r28, 0x08	; 8
    4168:	0f b6       	in	r0, 0x3f	; 63
    416a:	f8 94       	cli
    416c:	de bf       	out	0x3e, r29	; 62
    416e:	0f be       	out	0x3f, r0	; 63
    4170:	cd bf       	out	0x3d, r28	; 61
    4172:	cf 91       	pop	r28
    4174:	df 91       	pop	r29
    4176:	08 95       	ret

00004178 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4178:	df 93       	push	r29
    417a:	cf 93       	push	r28
    417c:	00 d0       	rcall	.+0      	; 0x417e <vTaskDelay+0x6>
    417e:	00 d0       	rcall	.+0      	; 0x4180 <vTaskDelay+0x8>
    4180:	0f 92       	push	r0
    4182:	cd b7       	in	r28, 0x3d	; 61
    4184:	de b7       	in	r29, 0x3e	; 62
    4186:	9d 83       	std	Y+5, r25	; 0x05
    4188:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    418a:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    418c:	8c 81       	ldd	r24, Y+4	; 0x04
    418e:	9d 81       	ldd	r25, Y+5	; 0x05
    4190:	00 97       	sbiw	r24, 0x00	; 0
    4192:	d1 f0       	breq	.+52     	; 0x41c8 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    4194:	0e 94 93 22 	call	0x4526	; 0x4526 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    4198:	20 91 f0 05 	lds	r18, 0x05F0
    419c:	30 91 f1 05 	lds	r19, 0x05F1
    41a0:	8c 81       	ldd	r24, Y+4	; 0x04
    41a2:	9d 81       	ldd	r25, Y+5	; 0x05
    41a4:	82 0f       	add	r24, r18
    41a6:	93 1f       	adc	r25, r19
    41a8:	9b 83       	std	Y+3, r25	; 0x03
    41aa:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    41ac:	80 91 ec 05 	lds	r24, 0x05EC
    41b0:	90 91 ed 05 	lds	r25, 0x05ED
    41b4:	02 96       	adiw	r24, 0x02	; 2
    41b6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    41ba:	8a 81       	ldd	r24, Y+2	; 0x02
    41bc:	9b 81       	ldd	r25, Y+3	; 0x03
    41be:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    41c2:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>
    41c6:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    41c8:	89 81       	ldd	r24, Y+1	; 0x01
    41ca:	88 23       	and	r24, r24
    41cc:	11 f4       	brne	.+4      	; 0x41d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    41ce:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
		}
	}
    41d2:	0f 90       	pop	r0
    41d4:	0f 90       	pop	r0
    41d6:	0f 90       	pop	r0
    41d8:	0f 90       	pop	r0
    41da:	0f 90       	pop	r0
    41dc:	cf 91       	pop	r28
    41de:	df 91       	pop	r29
    41e0:	08 95       	ret

000041e2 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( xTaskHandle pxTaskToSuspend )
	{
    41e2:	df 93       	push	r29
    41e4:	cf 93       	push	r28
    41e6:	00 d0       	rcall	.+0      	; 0x41e8 <vTaskSuspend+0x6>
    41e8:	00 d0       	rcall	.+0      	; 0x41ea <vTaskSuspend+0x8>
    41ea:	00 d0       	rcall	.+0      	; 0x41ec <vTaskSuspend+0xa>
    41ec:	cd b7       	in	r28, 0x3d	; 61
    41ee:	de b7       	in	r29, 0x3e	; 62
    41f0:	9c 83       	std	Y+4, r25	; 0x04
    41f2:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    41f4:	0f b6       	in	r0, 0x3f	; 63
    41f6:	f8 94       	cli
    41f8:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			suspended. */
			if( pxTaskToSuspend == pxCurrentTCB )
    41fa:	20 91 ec 05 	lds	r18, 0x05EC
    41fe:	30 91 ed 05 	lds	r19, 0x05ED
    4202:	8b 81       	ldd	r24, Y+3	; 0x03
    4204:	9c 81       	ldd	r25, Y+4	; 0x04
    4206:	82 17       	cp	r24, r18
    4208:	93 07       	cpc	r25, r19
    420a:	11 f4       	brne	.+4      	; 0x4210 <vTaskSuspend+0x2e>
			{
				pxTaskToSuspend = NULL;
    420c:	1c 82       	std	Y+4, r1	; 0x04
    420e:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are suspending ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToSuspend );
    4210:	8b 81       	ldd	r24, Y+3	; 0x03
    4212:	9c 81       	ldd	r25, Y+4	; 0x04
    4214:	00 97       	sbiw	r24, 0x00	; 0
    4216:	39 f4       	brne	.+14     	; 0x4226 <vTaskSuspend+0x44>
    4218:	80 91 ec 05 	lds	r24, 0x05EC
    421c:	90 91 ed 05 	lds	r25, 0x05ED
    4220:	9e 83       	std	Y+6, r25	; 0x06
    4222:	8d 83       	std	Y+5, r24	; 0x05
    4224:	04 c0       	rjmp	.+8      	; 0x422e <vTaskSuspend+0x4c>
    4226:	8b 81       	ldd	r24, Y+3	; 0x03
    4228:	9c 81       	ldd	r25, Y+4	; 0x04
    422a:	9e 83       	std	Y+6, r25	; 0x06
    422c:	8d 83       	std	Y+5, r24	; 0x05
    422e:	8d 81       	ldd	r24, Y+5	; 0x05
    4230:	9e 81       	ldd	r25, Y+6	; 0x06
    4232:	9a 83       	std	Y+2, r25	; 0x02
    4234:	89 83       	std	Y+1, r24	; 0x01

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the	suspended list. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    4236:	89 81       	ldd	r24, Y+1	; 0x01
    4238:	9a 81       	ldd	r25, Y+2	; 0x02
    423a:	02 96       	adiw	r24, 0x02	; 2
    423c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4240:	e9 81       	ldd	r30, Y+1	; 0x01
    4242:	fa 81       	ldd	r31, Y+2	; 0x02
    4244:	84 89       	ldd	r24, Z+20	; 0x14
    4246:	95 89       	ldd	r25, Z+21	; 0x15
    4248:	00 97       	sbiw	r24, 0x00	; 0
    424a:	29 f0       	breq	.+10     	; 0x4256 <vTaskSuspend+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    424c:	89 81       	ldd	r24, Y+1	; 0x01
    424e:	9a 81       	ldd	r25, Y+2	; 0x02
    4250:	0c 96       	adiw	r24, 0x0c	; 12
    4252:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xSuspendedTaskList, &( pxTCB->xGenericListItem ) );
    4256:	89 81       	ldd	r24, Y+1	; 0x01
    4258:	9a 81       	ldd	r25, Y+2	; 0x02
    425a:	9c 01       	movw	r18, r24
    425c:	2e 5f       	subi	r18, 0xFE	; 254
    425e:	3f 4f       	sbci	r19, 0xFF	; 255
    4260:	86 e4       	ldi	r24, 0x46	; 70
    4262:	96 e0       	ldi	r25, 0x06	; 6
    4264:	b9 01       	movw	r22, r18
    4266:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
		}
		taskEXIT_CRITICAL();
    426a:	0f 90       	pop	r0
    426c:	0f be       	out	0x3f, r0	; 63

		if( ( void * ) pxTaskToSuspend == NULL )
    426e:	8b 81       	ldd	r24, Y+3	; 0x03
    4270:	9c 81       	ldd	r25, Y+4	; 0x04
    4272:	00 97       	sbiw	r24, 0x00	; 0
    4274:	a1 f4       	brne	.+40     	; 0x429e <vTaskSuspend+0xbc>
		{
			if( xSchedulerRunning != pdFALSE )
    4276:	80 91 f4 05 	lds	r24, 0x05F4
    427a:	88 23       	and	r24, r24
    427c:	19 f0       	breq	.+6      	; 0x4284 <vTaskSuspend+0xa2>
			{
				/* We have just suspended the current task. */
				portYIELD_WITHIN_API();
    427e:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
    4282:	0d c0       	rjmp	.+26     	; 0x429e <vTaskSuspend+0xbc>
			else
			{
				/* The scheduler is not running, but the task that was pointed
				to by pxCurrentTCB has just been suspended and pxCurrentTCB
				must be adjusted to point to a different task. */
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
    4284:	90 91 46 06 	lds	r25, 0x0646
    4288:	80 91 ef 05 	lds	r24, 0x05EF
    428c:	98 17       	cp	r25, r24
    428e:	29 f4       	brne	.+10     	; 0x429a <vTaskSuspend+0xb8>
				{
					/* No other tasks are ready, so set pxCurrentTCB back to
					NULL so when the next task is created pxCurrentTCB will
					be set to point to it no matter what its relative priority
					is. */
					pxCurrentTCB = NULL;
    4290:	10 92 ed 05 	sts	0x05ED, r1
    4294:	10 92 ec 05 	sts	0x05EC, r1
    4298:	02 c0       	rjmp	.+4      	; 0x429e <vTaskSuspend+0xbc>
				}
				else
				{
					vTaskSwitchContext();
    429a:	0e 94 33 24 	call	0x4866	; 0x4866 <vTaskSwitchContext>
				}
			}
		}
	}
    429e:	26 96       	adiw	r28, 0x06	; 6
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	08 95       	ret

000042b0 <xTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	signed portBASE_TYPE xTaskIsTaskSuspended( xTaskHandle xTask )
	{
    42b0:	df 93       	push	r29
    42b2:	cf 93       	push	r28
    42b4:	00 d0       	rcall	.+0      	; 0x42b6 <xTaskIsTaskSuspended+0x6>
    42b6:	00 d0       	rcall	.+0      	; 0x42b8 <xTaskIsTaskSuspended+0x8>
    42b8:	0f 92       	push	r0
    42ba:	cd b7       	in	r28, 0x3d	; 61
    42bc:	de b7       	in	r29, 0x3e	; 62
    42be:	9d 83       	std	Y+5, r25	; 0x05
    42c0:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xReturn = pdFALSE;
    42c2:	1b 82       	std	Y+3, r1	; 0x03
	const tskTCB * const pxTCB = ( tskTCB * ) xTask;
    42c4:	8c 81       	ldd	r24, Y+4	; 0x04
    42c6:	9d 81       	ldd	r25, Y+5	; 0x05
    42c8:	9a 83       	std	Y+2, r25	; 0x02
    42ca:	89 83       	std	Y+1, r24	; 0x01
		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task we are attempting to resume actually in the
		suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xGenericListItem ) ) != pdFALSE )
    42cc:	e9 81       	ldd	r30, Y+1	; 0x01
    42ce:	fa 81       	ldd	r31, Y+2	; 0x02
    42d0:	82 85       	ldd	r24, Z+10	; 0x0a
    42d2:	93 85       	ldd	r25, Z+11	; 0x0b
    42d4:	26 e0       	ldi	r18, 0x06	; 6
    42d6:	86 34       	cpi	r24, 0x46	; 70
    42d8:	92 07       	cpc	r25, r18
    42da:	81 f4       	brne	.+32     	; 0x42fc <xTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) != pdTRUE )
    42dc:	e9 81       	ldd	r30, Y+1	; 0x01
    42de:	fa 81       	ldd	r31, Y+2	; 0x02
    42e0:	84 89       	ldd	r24, Z+20	; 0x14
    42e2:	95 89       	ldd	r25, Z+21	; 0x15
    42e4:	26 e0       	ldi	r18, 0x06	; 6
    42e6:	84 33       	cpi	r24, 0x34	; 52
    42e8:	92 07       	cpc	r25, r18
    42ea:	41 f0       	breq	.+16     	; 0x42fc <xTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the
				Suspended state?  It is possible to be in the suspended
				list because it is blocked on a task with no timeout
				specified. */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) == pdTRUE )
    42ec:	e9 81       	ldd	r30, Y+1	; 0x01
    42ee:	fa 81       	ldd	r31, Y+2	; 0x02
    42f0:	84 89       	ldd	r24, Z+20	; 0x14
    42f2:	95 89       	ldd	r25, Z+21	; 0x15
    42f4:	00 97       	sbiw	r24, 0x00	; 0
    42f6:	11 f4       	brne	.+4      	; 0x42fc <xTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
    42f8:	81 e0       	ldi	r24, 0x01	; 1
    42fa:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}

		return xReturn;
    42fc:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    42fe:	0f 90       	pop	r0
    4300:	0f 90       	pop	r0
    4302:	0f 90       	pop	r0
    4304:	0f 90       	pop	r0
    4306:	0f 90       	pop	r0
    4308:	cf 91       	pop	r28
    430a:	df 91       	pop	r29
    430c:	08 95       	ret

0000430e <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( xTaskHandle pxTaskToResume )
	{
    430e:	df 93       	push	r29
    4310:	cf 93       	push	r28
    4312:	00 d0       	rcall	.+0      	; 0x4314 <vTaskResume+0x6>
    4314:	00 d0       	rcall	.+0      	; 0x4316 <vTaskResume+0x8>
    4316:	cd b7       	in	r28, 0x3d	; 61
    4318:	de b7       	in	r29, 0x3e	; 62
    431a:	9c 83       	std	Y+4, r25	; 0x04
    431c:	8b 83       	std	Y+3, r24	; 0x03
		/* It does not make sense to resume the calling task. */
		configASSERT( pxTaskToResume );

		/* Remove the task from whichever list it is currently in, and place
		it in the ready list. */
		pxTCB = ( tskTCB * ) pxTaskToResume;
    431e:	8b 81       	ldd	r24, Y+3	; 0x03
    4320:	9c 81       	ldd	r25, Y+4	; 0x04
    4322:	9a 83       	std	Y+2, r25	; 0x02
    4324:	89 83       	std	Y+1, r24	; 0x01

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
    4326:	89 81       	ldd	r24, Y+1	; 0x01
    4328:	9a 81       	ldd	r25, Y+2	; 0x02
    432a:	00 97       	sbiw	r24, 0x00	; 0
    432c:	09 f4       	brne	.+2      	; 0x4330 <vTaskResume+0x22>
    432e:	4c c0       	rjmp	.+152    	; 0x43c8 <vTaskResume+0xba>
    4330:	20 91 ec 05 	lds	r18, 0x05EC
    4334:	30 91 ed 05 	lds	r19, 0x05ED
    4338:	89 81       	ldd	r24, Y+1	; 0x01
    433a:	9a 81       	ldd	r25, Y+2	; 0x02
    433c:	82 17       	cp	r24, r18
    433e:	93 07       	cpc	r25, r19
    4340:	09 f4       	brne	.+2      	; 0x4344 <vTaskResume+0x36>
    4342:	42 c0       	rjmp	.+132    	; 0x43c8 <vTaskResume+0xba>
		{
			taskENTER_CRITICAL();
    4344:	0f b6       	in	r0, 0x3f	; 63
    4346:	f8 94       	cli
    4348:	0f 92       	push	r0
			{
				if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    434a:	89 81       	ldd	r24, Y+1	; 0x01
    434c:	9a 81       	ldd	r25, Y+2	; 0x02
    434e:	0e 94 58 21 	call	0x42b0	; 0x42b0 <xTaskIsTaskSuspended>
    4352:	81 30       	cpi	r24, 0x01	; 1
    4354:	b9 f5       	brne	.+110    	; 0x43c4 <vTaskResume+0xb6>
				{
					traceTASK_RESUME( pxTCB );

					/* As we are in a critical section we can access the ready
					lists even if the scheduler is suspended. */
					vListRemove(  &( pxTCB->xGenericListItem ) );
    4356:	89 81       	ldd	r24, Y+1	; 0x01
    4358:	9a 81       	ldd	r25, Y+2	; 0x02
    435a:	02 96       	adiw	r24, 0x02	; 2
    435c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4360:	e9 81       	ldd	r30, Y+1	; 0x01
    4362:	fa 81       	ldd	r31, Y+2	; 0x02
    4364:	96 89       	ldd	r25, Z+22	; 0x16
    4366:	80 91 f3 05 	lds	r24, 0x05F3
    436a:	89 17       	cp	r24, r25
    436c:	28 f4       	brcc	.+10     	; 0x4378 <vTaskResume+0x6a>
    436e:	e9 81       	ldd	r30, Y+1	; 0x01
    4370:	fa 81       	ldd	r31, Y+2	; 0x02
    4372:	86 89       	ldd	r24, Z+22	; 0x16
    4374:	80 93 f3 05 	sts	0x05F3, r24
    4378:	e9 81       	ldd	r30, Y+1	; 0x01
    437a:	fa 81       	ldd	r31, Y+2	; 0x02
    437c:	86 89       	ldd	r24, Z+22	; 0x16
    437e:	28 2f       	mov	r18, r24
    4380:	30 e0       	ldi	r19, 0x00	; 0
    4382:	c9 01       	movw	r24, r18
    4384:	88 0f       	add	r24, r24
    4386:	99 1f       	adc	r25, r25
    4388:	88 0f       	add	r24, r24
    438a:	99 1f       	adc	r25, r25
    438c:	88 0f       	add	r24, r24
    438e:	99 1f       	adc	r25, r25
    4390:	82 0f       	add	r24, r18
    4392:	93 1f       	adc	r25, r19
    4394:	ac 01       	movw	r20, r24
    4396:	46 50       	subi	r20, 0x06	; 6
    4398:	5a 4f       	sbci	r21, 0xFA	; 250
    439a:	89 81       	ldd	r24, Y+1	; 0x01
    439c:	9a 81       	ldd	r25, Y+2	; 0x02
    439e:	9c 01       	movw	r18, r24
    43a0:	2e 5f       	subi	r18, 0xFE	; 254
    43a2:	3f 4f       	sbci	r19, 0xFF	; 255
    43a4:	ca 01       	movw	r24, r20
    43a6:	b9 01       	movw	r22, r18
    43a8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

					/* We may have just resumed a higher priority task. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    43ac:	e9 81       	ldd	r30, Y+1	; 0x01
    43ae:	fa 81       	ldd	r31, Y+2	; 0x02
    43b0:	96 89       	ldd	r25, Z+22	; 0x16
    43b2:	e0 91 ec 05 	lds	r30, 0x05EC
    43b6:	f0 91 ed 05 	lds	r31, 0x05ED
    43ba:	86 89       	ldd	r24, Z+22	; 0x16
    43bc:	98 17       	cp	r25, r24
    43be:	10 f0       	brcs	.+4      	; 0x43c4 <vTaskResume+0xb6>
					{
						/* This yield may not cause the task just resumed to run, but
						will leave the lists in the correct state for the next yield. */
						portYIELD_WITHIN_API();
    43c0:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
					}
				}
			}
			taskEXIT_CRITICAL();
    43c4:	0f 90       	pop	r0
    43c6:	0f be       	out	0x3f, r0	; 63
		}
	}
    43c8:	0f 90       	pop	r0
    43ca:	0f 90       	pop	r0
    43cc:	0f 90       	pop	r0
    43ce:	0f 90       	pop	r0
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	portBASE_TYPE xTaskResumeFromISR( xTaskHandle pxTaskToResume )
	{
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	00 d0       	rcall	.+0      	; 0x43dc <xTaskResumeFromISR+0x6>
    43dc:	00 d0       	rcall	.+0      	; 0x43de <xTaskResumeFromISR+0x8>
    43de:	0f 92       	push	r0
    43e0:	cd b7       	in	r28, 0x3d	; 61
    43e2:	de b7       	in	r29, 0x3e	; 62
    43e4:	9d 83       	std	Y+5, r25	; 0x05
    43e6:	8c 83       	std	Y+4, r24	; 0x04
	portBASE_TYPE xYieldRequired = pdFALSE;
    43e8:	1b 82       	std	Y+3, r1	; 0x03
	tskTCB *pxTCB;

		configASSERT( pxTaskToResume );

		pxTCB = ( tskTCB * ) pxTaskToResume;
    43ea:	8c 81       	ldd	r24, Y+4	; 0x04
    43ec:	9d 81       	ldd	r25, Y+5	; 0x05
    43ee:	9a 83       	std	Y+2, r25	; 0x02
    43f0:	89 83       	std	Y+1, r24	; 0x01

		if( xTaskIsTaskSuspended( pxTCB ) == pdTRUE )
    43f2:	89 81       	ldd	r24, Y+1	; 0x01
    43f4:	9a 81       	ldd	r25, Y+2	; 0x02
    43f6:	0e 94 58 21 	call	0x42b0	; 0x42b0 <xTaskIsTaskSuspended>
    43fa:	81 30       	cpi	r24, 0x01	; 1
    43fc:	09 f0       	breq	.+2      	; 0x4400 <xTaskResumeFromISR+0x2a>
    43fe:	47 c0       	rjmp	.+142    	; 0x448e <xTaskResumeFromISR+0xb8>
		{
			traceTASK_RESUME_FROM_ISR( pxTCB );

			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4400:	80 91 f5 05 	lds	r24, 0x05F5
    4404:	88 23       	and	r24, r24
    4406:	c9 f5       	brne	.+114    	; 0x447a <xTaskResumeFromISR+0xa4>
			{
				xYieldRequired = ( pxTCB->uxPriority >= pxCurrentTCB->uxPriority );
    4408:	e9 81       	ldd	r30, Y+1	; 0x01
    440a:	fa 81       	ldd	r31, Y+2	; 0x02
    440c:	96 89       	ldd	r25, Z+22	; 0x16
    440e:	e0 91 ec 05 	lds	r30, 0x05EC
    4412:	f0 91 ed 05 	lds	r31, 0x05ED
    4416:	86 89       	ldd	r24, Z+22	; 0x16
    4418:	1b 82       	std	Y+3, r1	; 0x03
    441a:	98 17       	cp	r25, r24
    441c:	10 f0       	brcs	.+4      	; 0x4422 <xTaskResumeFromISR+0x4c>
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	8b 83       	std	Y+3, r24	; 0x03
				vListRemove(  &( pxTCB->xGenericListItem ) );
    4422:	89 81       	ldd	r24, Y+1	; 0x01
    4424:	9a 81       	ldd	r25, Y+2	; 0x02
    4426:	02 96       	adiw	r24, 0x02	; 2
    4428:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
				prvAddTaskToReadyQueue( pxTCB );
    442c:	e9 81       	ldd	r30, Y+1	; 0x01
    442e:	fa 81       	ldd	r31, Y+2	; 0x02
    4430:	96 89       	ldd	r25, Z+22	; 0x16
    4432:	80 91 f3 05 	lds	r24, 0x05F3
    4436:	89 17       	cp	r24, r25
    4438:	28 f4       	brcc	.+10     	; 0x4444 <xTaskResumeFromISR+0x6e>
    443a:	e9 81       	ldd	r30, Y+1	; 0x01
    443c:	fa 81       	ldd	r31, Y+2	; 0x02
    443e:	86 89       	ldd	r24, Z+22	; 0x16
    4440:	80 93 f3 05 	sts	0x05F3, r24
    4444:	e9 81       	ldd	r30, Y+1	; 0x01
    4446:	fa 81       	ldd	r31, Y+2	; 0x02
    4448:	86 89       	ldd	r24, Z+22	; 0x16
    444a:	28 2f       	mov	r18, r24
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	c9 01       	movw	r24, r18
    4450:	88 0f       	add	r24, r24
    4452:	99 1f       	adc	r25, r25
    4454:	88 0f       	add	r24, r24
    4456:	99 1f       	adc	r25, r25
    4458:	88 0f       	add	r24, r24
    445a:	99 1f       	adc	r25, r25
    445c:	82 0f       	add	r24, r18
    445e:	93 1f       	adc	r25, r19
    4460:	ac 01       	movw	r20, r24
    4462:	46 50       	subi	r20, 0x06	; 6
    4464:	5a 4f       	sbci	r21, 0xFA	; 250
    4466:	89 81       	ldd	r24, Y+1	; 0x01
    4468:	9a 81       	ldd	r25, Y+2	; 0x02
    446a:	9c 01       	movw	r18, r24
    446c:	2e 5f       	subi	r18, 0xFE	; 254
    446e:	3f 4f       	sbci	r19, 0xFF	; 255
    4470:	ca 01       	movw	r24, r20
    4472:	b9 01       	movw	r22, r18
    4474:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
    4478:	0a c0       	rjmp	.+20     	; 0x448e <xTaskResumeFromISR+0xb8>
			else
			{
				/* We cannot access the delayed or ready lists, so will hold this
				task pending until the scheduler is resumed, at which point a
				yield will be performed if necessary. */
				vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
    447a:	89 81       	ldd	r24, Y+1	; 0x01
    447c:	9a 81       	ldd	r25, Y+2	; 0x02
    447e:	9c 01       	movw	r18, r24
    4480:	24 5f       	subi	r18, 0xF4	; 244
    4482:	3f 4f       	sbci	r19, 0xFF	; 255
    4484:	84 e3       	ldi	r24, 0x34	; 52
    4486:	96 e0       	ldi	r25, 0x06	; 6
    4488:	b9 01       	movw	r22, r18
    448a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
			}
		}

		return xYieldRequired;
    448e:	8b 81       	ldd	r24, Y+3	; 0x03
	}
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	cf 91       	pop	r28
    449c:	df 91       	pop	r29
    449e:	08 95       	ret

000044a0 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    44a0:	af 92       	push	r10
    44a2:	bf 92       	push	r11
    44a4:	cf 92       	push	r12
    44a6:	df 92       	push	r13
    44a8:	ef 92       	push	r14
    44aa:	ff 92       	push	r15
    44ac:	0f 93       	push	r16
    44ae:	df 93       	push	r29
    44b0:	cf 93       	push	r28
    44b2:	0f 92       	push	r0
    44b4:	cd b7       	in	r28, 0x3d	; 61
    44b6:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    44b8:	20 e6       	ldi	r18, 0x60	; 96
    44ba:	30 e0       	ldi	r19, 0x00	; 0
    44bc:	84 ed       	ldi	r24, 0xD4	; 212
    44be:	95 e2       	ldi	r25, 0x25	; 37
    44c0:	b9 01       	movw	r22, r18
    44c2:	4a ef       	ldi	r20, 0xFA	; 250
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	20 e0       	ldi	r18, 0x00	; 0
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	00 e0       	ldi	r16, 0x00	; 0
    44cc:	ee 24       	eor	r14, r14
    44ce:	ff 24       	eor	r15, r15
    44d0:	cc 24       	eor	r12, r12
    44d2:	dd 24       	eor	r13, r13
    44d4:	aa 24       	eor	r10, r10
    44d6:	bb 24       	eor	r11, r11
    44d8:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <xTaskGenericCreate>
    44dc:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    44de:	89 81       	ldd	r24, Y+1	; 0x01
    44e0:	81 30       	cpi	r24, 0x01	; 1
    44e2:	51 f4       	brne	.+20     	; 0x44f8 <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    44e4:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    44e6:	81 e0       	ldi	r24, 0x01	; 1
    44e8:	80 93 f4 05 	sts	0x05F4, r24
		xTickCount = ( portTickType ) 0U;
    44ec:	10 92 f1 05 	sts	0x05F1, r1
    44f0:	10 92 f0 05 	sts	0x05F0, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    44f4:	0e 94 09 19 	call	0x3212	; 0x3212 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    44f8:	0f 90       	pop	r0
    44fa:	cf 91       	pop	r28
    44fc:	df 91       	pop	r29
    44fe:	0f 91       	pop	r16
    4500:	ff 90       	pop	r15
    4502:	ef 90       	pop	r14
    4504:	df 90       	pop	r13
    4506:	cf 90       	pop	r12
    4508:	bf 90       	pop	r11
    450a:	af 90       	pop	r10
    450c:	08 95       	ret

0000450e <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    450e:	df 93       	push	r29
    4510:	cf 93       	push	r28
    4512:	cd b7       	in	r28, 0x3d	; 61
    4514:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4516:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    4518:	10 92 f4 05 	sts	0x05F4, r1
	vPortEndScheduler();
    451c:	0e 94 3e 19 	call	0x327c	; 0x327c <vPortEndScheduler>
}
    4520:	cf 91       	pop	r28
    4522:	df 91       	pop	r29
    4524:	08 95       	ret

00004526 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4526:	df 93       	push	r29
    4528:	cf 93       	push	r28
    452a:	cd b7       	in	r28, 0x3d	; 61
    452c:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    452e:	80 91 f5 05 	lds	r24, 0x05F5
    4532:	8f 5f       	subi	r24, 0xFF	; 255
    4534:	80 93 f5 05 	sts	0x05F5, r24
}
    4538:	cf 91       	pop	r28
    453a:	df 91       	pop	r29
    453c:	08 95       	ret

0000453e <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    453e:	df 93       	push	r29
    4540:	cf 93       	push	r28
    4542:	00 d0       	rcall	.+0      	; 0x4544 <xTaskResumeAll+0x6>
    4544:	00 d0       	rcall	.+0      	; 0x4546 <xTaskResumeAll+0x8>
    4546:	cd b7       	in	r28, 0x3d	; 61
    4548:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    454a:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    454c:	0f b6       	in	r0, 0x3f	; 63
    454e:	f8 94       	cli
    4550:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    4552:	80 91 f5 05 	lds	r24, 0x05F5
    4556:	81 50       	subi	r24, 0x01	; 1
    4558:	80 93 f5 05 	sts	0x05F5, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    455c:	80 91 f5 05 	lds	r24, 0x05F5
    4560:	88 23       	and	r24, r24
    4562:	09 f0       	breq	.+2      	; 0x4566 <xTaskResumeAll+0x28>
    4564:	6c c0       	rjmp	.+216    	; 0x463e <xTaskResumeAll+0x100>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    4566:	80 91 ef 05 	lds	r24, 0x05EF
    456a:	88 23       	and	r24, r24
    456c:	09 f4       	brne	.+2      	; 0x4570 <xTaskResumeAll+0x32>
    456e:	67 c0       	rjmp	.+206    	; 0x463e <xTaskResumeAll+0x100>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    4570:	19 82       	std	Y+1, r1	; 0x01
    4572:	41 c0       	rjmp	.+130    	; 0x45f6 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    4574:	e0 91 39 06 	lds	r30, 0x0639
    4578:	f0 91 3a 06 	lds	r31, 0x063A
    457c:	86 81       	ldd	r24, Z+6	; 0x06
    457e:	97 81       	ldd	r25, Z+7	; 0x07
    4580:	9c 83       	std	Y+4, r25	; 0x04
    4582:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    4584:	8b 81       	ldd	r24, Y+3	; 0x03
    4586:	9c 81       	ldd	r25, Y+4	; 0x04
    4588:	0c 96       	adiw	r24, 0x0c	; 12
    458a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    458e:	8b 81       	ldd	r24, Y+3	; 0x03
    4590:	9c 81       	ldd	r25, Y+4	; 0x04
    4592:	02 96       	adiw	r24, 0x02	; 2
    4594:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    4598:	eb 81       	ldd	r30, Y+3	; 0x03
    459a:	fc 81       	ldd	r31, Y+4	; 0x04
    459c:	96 89       	ldd	r25, Z+22	; 0x16
    459e:	80 91 f3 05 	lds	r24, 0x05F3
    45a2:	89 17       	cp	r24, r25
    45a4:	28 f4       	brcc	.+10     	; 0x45b0 <xTaskResumeAll+0x72>
    45a6:	eb 81       	ldd	r30, Y+3	; 0x03
    45a8:	fc 81       	ldd	r31, Y+4	; 0x04
    45aa:	86 89       	ldd	r24, Z+22	; 0x16
    45ac:	80 93 f3 05 	sts	0x05F3, r24
    45b0:	eb 81       	ldd	r30, Y+3	; 0x03
    45b2:	fc 81       	ldd	r31, Y+4	; 0x04
    45b4:	86 89       	ldd	r24, Z+22	; 0x16
    45b6:	28 2f       	mov	r18, r24
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	c9 01       	movw	r24, r18
    45bc:	88 0f       	add	r24, r24
    45be:	99 1f       	adc	r25, r25
    45c0:	88 0f       	add	r24, r24
    45c2:	99 1f       	adc	r25, r25
    45c4:	88 0f       	add	r24, r24
    45c6:	99 1f       	adc	r25, r25
    45c8:	82 0f       	add	r24, r18
    45ca:	93 1f       	adc	r25, r19
    45cc:	86 50       	subi	r24, 0x06	; 6
    45ce:	9a 4f       	sbci	r25, 0xFA	; 250
    45d0:	2b 81       	ldd	r18, Y+3	; 0x03
    45d2:	3c 81       	ldd	r19, Y+4	; 0x04
    45d4:	2e 5f       	subi	r18, 0xFE	; 254
    45d6:	3f 4f       	sbci	r19, 0xFF	; 255
    45d8:	b9 01       	movw	r22, r18
    45da:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    45de:	eb 81       	ldd	r30, Y+3	; 0x03
    45e0:	fc 81       	ldd	r31, Y+4	; 0x04
    45e2:	96 89       	ldd	r25, Z+22	; 0x16
    45e4:	e0 91 ec 05 	lds	r30, 0x05EC
    45e8:	f0 91 ed 05 	lds	r31, 0x05ED
    45ec:	86 89       	ldd	r24, Z+22	; 0x16
    45ee:	98 17       	cp	r25, r24
    45f0:	10 f0       	brcs	.+4      	; 0x45f6 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    45f2:	81 e0       	ldi	r24, 0x01	; 1
    45f4:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    45f6:	80 91 34 06 	lds	r24, 0x0634
    45fa:	88 23       	and	r24, r24
    45fc:	09 f0       	breq	.+2      	; 0x4600 <xTaskResumeAll+0xc2>
    45fe:	ba cf       	rjmp	.-140    	; 0x4574 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4600:	80 91 f6 05 	lds	r24, 0x05F6
    4604:	88 23       	and	r24, r24
    4606:	71 f0       	breq	.+28     	; 0x4624 <xTaskResumeAll+0xe6>
    4608:	07 c0       	rjmp	.+14     	; 0x4618 <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    460a:	0e 94 5e 23 	call	0x46bc	; 0x46bc <vTaskIncrementTick>
						--uxMissedTicks;
    460e:	80 91 f6 05 	lds	r24, 0x05F6
    4612:	81 50       	subi	r24, 0x01	; 1
    4614:	80 93 f6 05 	sts	0x05F6, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4618:	80 91 f6 05 	lds	r24, 0x05F6
    461c:	88 23       	and	r24, r24
    461e:	a9 f7       	brne	.-22     	; 0x460a <xTaskResumeAll+0xcc>
					/* As we have processed some ticks it is appropriate to yield
					to ensure the highest priority task that is ready to run is
					the task actually running. */
					#if configUSE_PREEMPTION == 1
					{
						xYieldRequired = pdTRUE;
    4620:	81 e0       	ldi	r24, 0x01	; 1
    4622:	89 83       	std	Y+1, r24	; 0x01
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4624:	89 81       	ldd	r24, Y+1	; 0x01
    4626:	81 30       	cpi	r24, 0x01	; 1
    4628:	21 f0       	breq	.+8      	; 0x4632 <xTaskResumeAll+0xf4>
    462a:	80 91 f7 05 	lds	r24, 0x05F7
    462e:	81 30       	cpi	r24, 0x01	; 1
    4630:	31 f4       	brne	.+12     	; 0x463e <xTaskResumeAll+0x100>
				{
					xAlreadyYielded = pdTRUE;
    4632:	81 e0       	ldi	r24, 0x01	; 1
    4634:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    4636:	10 92 f7 05 	sts	0x05F7, r1
					portYIELD_WITHIN_API();
    463a:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    463e:	0f 90       	pop	r0
    4640:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    4642:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4644:	0f 90       	pop	r0
    4646:	0f 90       	pop	r0
    4648:	0f 90       	pop	r0
    464a:	0f 90       	pop	r0
    464c:	cf 91       	pop	r28
    464e:	df 91       	pop	r29
    4650:	08 95       	ret

00004652 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    4652:	df 93       	push	r29
    4654:	cf 93       	push	r28
    4656:	00 d0       	rcall	.+0      	; 0x4658 <xTaskGetTickCount+0x6>
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    465c:	0f b6       	in	r0, 0x3f	; 63
    465e:	f8 94       	cli
    4660:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    4662:	80 91 f0 05 	lds	r24, 0x05F0
    4666:	90 91 f1 05 	lds	r25, 0x05F1
    466a:	9a 83       	std	Y+2, r25	; 0x02
    466c:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    466e:	0f 90       	pop	r0
    4670:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    4672:	89 81       	ldd	r24, Y+1	; 0x01
    4674:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	cf 91       	pop	r28
    467c:	df 91       	pop	r29
    467e:	08 95       	ret

00004680 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    4680:	df 93       	push	r29
    4682:	cf 93       	push	r28
    4684:	00 d0       	rcall	.+0      	; 0x4686 <xTaskGetTickCountFromISR+0x6>
    4686:	0f 92       	push	r0
    4688:	cd b7       	in	r28, 0x3d	; 61
    468a:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    468c:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    468e:	80 91 f0 05 	lds	r24, 0x05F0
    4692:	90 91 f1 05 	lds	r25, 0x05F1
    4696:	9b 83       	std	Y+3, r25	; 0x03
    4698:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    469a:	8a 81       	ldd	r24, Y+2	; 0x02
    469c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    469e:	0f 90       	pop	r0
    46a0:	0f 90       	pop	r0
    46a2:	0f 90       	pop	r0
    46a4:	cf 91       	pop	r28
    46a6:	df 91       	pop	r29
    46a8:	08 95       	ret

000046aa <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    46aa:	df 93       	push	r29
    46ac:	cf 93       	push	r28
    46ae:	cd b7       	in	r28, 0x3d	; 61
    46b0:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    46b2:	80 91 ef 05 	lds	r24, 0x05EF
}
    46b6:	cf 91       	pop	r28
    46b8:	df 91       	pop	r29
    46ba:	08 95       	ret

000046bc <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    46bc:	df 93       	push	r29
    46be:	cf 93       	push	r28
    46c0:	00 d0       	rcall	.+0      	; 0x46c2 <vTaskIncrementTick+0x6>
    46c2:	00 d0       	rcall	.+0      	; 0x46c4 <vTaskIncrementTick+0x8>
    46c4:	00 d0       	rcall	.+0      	; 0x46c6 <vTaskIncrementTick+0xa>
    46c6:	cd b7       	in	r28, 0x3d	; 61
    46c8:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    46ca:	80 91 f5 05 	lds	r24, 0x05F5
    46ce:	88 23       	and	r24, r24
    46d0:	09 f0       	breq	.+2      	; 0x46d4 <vTaskIncrementTick+0x18>
    46d2:	bb c0       	rjmp	.+374    	; 0x484a <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    46d4:	80 91 f0 05 	lds	r24, 0x05F0
    46d8:	90 91 f1 05 	lds	r25, 0x05F1
    46dc:	01 96       	adiw	r24, 0x01	; 1
    46de:	90 93 f1 05 	sts	0x05F1, r25
    46e2:	80 93 f0 05 	sts	0x05F0, r24
		if( xTickCount == ( portTickType ) 0U )
    46e6:	80 91 f0 05 	lds	r24, 0x05F0
    46ea:	90 91 f1 05 	lds	r25, 0x05F1
    46ee:	00 97       	sbiw	r24, 0x00	; 0
    46f0:	d1 f5       	brne	.+116    	; 0x4766 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    46f2:	80 91 30 06 	lds	r24, 0x0630
    46f6:	90 91 31 06 	lds	r25, 0x0631
    46fa:	9c 83       	std	Y+4, r25	; 0x04
    46fc:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    46fe:	80 91 32 06 	lds	r24, 0x0632
    4702:	90 91 33 06 	lds	r25, 0x0633
    4706:	90 93 31 06 	sts	0x0631, r25
    470a:	80 93 30 06 	sts	0x0630, r24
			pxOverflowDelayedTaskList = pxTemp;
    470e:	8b 81       	ldd	r24, Y+3	; 0x03
    4710:	9c 81       	ldd	r25, Y+4	; 0x04
    4712:	90 93 33 06 	sts	0x0633, r25
    4716:	80 93 32 06 	sts	0x0632, r24
			xNumOfOverflows++;
    471a:	80 91 f8 05 	lds	r24, 0x05F8
    471e:	8f 5f       	subi	r24, 0xFF	; 255
    4720:	80 93 f8 05 	sts	0x05F8, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4724:	e0 91 30 06 	lds	r30, 0x0630
    4728:	f0 91 31 06 	lds	r31, 0x0631
    472c:	80 81       	ld	r24, Z
    472e:	88 23       	and	r24, r24
    4730:	39 f4       	brne	.+14     	; 0x4740 <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4732:	8f ef       	ldi	r24, 0xFF	; 255
    4734:	9f ef       	ldi	r25, 0xFF	; 255
    4736:	90 93 86 01 	sts	0x0186, r25
    473a:	80 93 85 01 	sts	0x0185, r24
    473e:	13 c0       	rjmp	.+38     	; 0x4766 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    4740:	e0 91 30 06 	lds	r30, 0x0630
    4744:	f0 91 31 06 	lds	r31, 0x0631
    4748:	05 80       	ldd	r0, Z+5	; 0x05
    474a:	f6 81       	ldd	r31, Z+6	; 0x06
    474c:	e0 2d       	mov	r30, r0
    474e:	86 81       	ldd	r24, Z+6	; 0x06
    4750:	97 81       	ldd	r25, Z+7	; 0x07
    4752:	9e 83       	std	Y+6, r25	; 0x06
    4754:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    4756:	ed 81       	ldd	r30, Y+5	; 0x05
    4758:	fe 81       	ldd	r31, Y+6	; 0x06
    475a:	82 81       	ldd	r24, Z+2	; 0x02
    475c:	93 81       	ldd	r25, Z+3	; 0x03
    475e:	90 93 86 01 	sts	0x0186, r25
    4762:	80 93 85 01 	sts	0x0185, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    4766:	20 91 f0 05 	lds	r18, 0x05F0
    476a:	30 91 f1 05 	lds	r19, 0x05F1
    476e:	80 91 85 01 	lds	r24, 0x0185
    4772:	90 91 86 01 	lds	r25, 0x0186
    4776:	28 17       	cp	r18, r24
    4778:	39 07       	cpc	r19, r25
    477a:	08 f4       	brcc	.+2      	; 0x477e <vTaskIncrementTick+0xc2>
    477c:	6b c0       	rjmp	.+214    	; 0x4854 <vTaskIncrementTick+0x198>
    477e:	e0 91 30 06 	lds	r30, 0x0630
    4782:	f0 91 31 06 	lds	r31, 0x0631
    4786:	80 81       	ld	r24, Z
    4788:	88 23       	and	r24, r24
    478a:	39 f4       	brne	.+14     	; 0x479a <vTaskIncrementTick+0xde>
    478c:	8f ef       	ldi	r24, 0xFF	; 255
    478e:	9f ef       	ldi	r25, 0xFF	; 255
    4790:	90 93 86 01 	sts	0x0186, r25
    4794:	80 93 85 01 	sts	0x0185, r24
    4798:	5d c0       	rjmp	.+186    	; 0x4854 <vTaskIncrementTick+0x198>
    479a:	e0 91 30 06 	lds	r30, 0x0630
    479e:	f0 91 31 06 	lds	r31, 0x0631
    47a2:	05 80       	ldd	r0, Z+5	; 0x05
    47a4:	f6 81       	ldd	r31, Z+6	; 0x06
    47a6:	e0 2d       	mov	r30, r0
    47a8:	86 81       	ldd	r24, Z+6	; 0x06
    47aa:	97 81       	ldd	r25, Z+7	; 0x07
    47ac:	9e 83       	std	Y+6, r25	; 0x06
    47ae:	8d 83       	std	Y+5, r24	; 0x05
    47b0:	ed 81       	ldd	r30, Y+5	; 0x05
    47b2:	fe 81       	ldd	r31, Y+6	; 0x06
    47b4:	82 81       	ldd	r24, Z+2	; 0x02
    47b6:	93 81       	ldd	r25, Z+3	; 0x03
    47b8:	9a 83       	std	Y+2, r25	; 0x02
    47ba:	89 83       	std	Y+1, r24	; 0x01
    47bc:	20 91 f0 05 	lds	r18, 0x05F0
    47c0:	30 91 f1 05 	lds	r19, 0x05F1
    47c4:	89 81       	ldd	r24, Y+1	; 0x01
    47c6:	9a 81       	ldd	r25, Y+2	; 0x02
    47c8:	28 17       	cp	r18, r24
    47ca:	39 07       	cpc	r19, r25
    47cc:	38 f4       	brcc	.+14     	; 0x47dc <vTaskIncrementTick+0x120>
    47ce:	89 81       	ldd	r24, Y+1	; 0x01
    47d0:	9a 81       	ldd	r25, Y+2	; 0x02
    47d2:	90 93 86 01 	sts	0x0186, r25
    47d6:	80 93 85 01 	sts	0x0185, r24
    47da:	3c c0       	rjmp	.+120    	; 0x4854 <vTaskIncrementTick+0x198>
    47dc:	8d 81       	ldd	r24, Y+5	; 0x05
    47de:	9e 81       	ldd	r25, Y+6	; 0x06
    47e0:	02 96       	adiw	r24, 0x02	; 2
    47e2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
    47e6:	ed 81       	ldd	r30, Y+5	; 0x05
    47e8:	fe 81       	ldd	r31, Y+6	; 0x06
    47ea:	84 89       	ldd	r24, Z+20	; 0x14
    47ec:	95 89       	ldd	r25, Z+21	; 0x15
    47ee:	00 97       	sbiw	r24, 0x00	; 0
    47f0:	29 f0       	breq	.+10     	; 0x47fc <vTaskIncrementTick+0x140>
    47f2:	8d 81       	ldd	r24, Y+5	; 0x05
    47f4:	9e 81       	ldd	r25, Y+6	; 0x06
    47f6:	0c 96       	adiw	r24, 0x0c	; 12
    47f8:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
    47fc:	ed 81       	ldd	r30, Y+5	; 0x05
    47fe:	fe 81       	ldd	r31, Y+6	; 0x06
    4800:	96 89       	ldd	r25, Z+22	; 0x16
    4802:	80 91 f3 05 	lds	r24, 0x05F3
    4806:	89 17       	cp	r24, r25
    4808:	28 f4       	brcc	.+10     	; 0x4814 <vTaskIncrementTick+0x158>
    480a:	ed 81       	ldd	r30, Y+5	; 0x05
    480c:	fe 81       	ldd	r31, Y+6	; 0x06
    480e:	86 89       	ldd	r24, Z+22	; 0x16
    4810:	80 93 f3 05 	sts	0x05F3, r24
    4814:	ed 81       	ldd	r30, Y+5	; 0x05
    4816:	fe 81       	ldd	r31, Y+6	; 0x06
    4818:	86 89       	ldd	r24, Z+22	; 0x16
    481a:	28 2f       	mov	r18, r24
    481c:	30 e0       	ldi	r19, 0x00	; 0
    481e:	c9 01       	movw	r24, r18
    4820:	88 0f       	add	r24, r24
    4822:	99 1f       	adc	r25, r25
    4824:	88 0f       	add	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	88 0f       	add	r24, r24
    482a:	99 1f       	adc	r25, r25
    482c:	82 0f       	add	r24, r18
    482e:	93 1f       	adc	r25, r19
    4830:	ac 01       	movw	r20, r24
    4832:	46 50       	subi	r20, 0x06	; 6
    4834:	5a 4f       	sbci	r21, 0xFA	; 250
    4836:	8d 81       	ldd	r24, Y+5	; 0x05
    4838:	9e 81       	ldd	r25, Y+6	; 0x06
    483a:	9c 01       	movw	r18, r24
    483c:	2e 5f       	subi	r18, 0xFE	; 254
    483e:	3f 4f       	sbci	r19, 0xFF	; 255
    4840:	ca 01       	movw	r24, r20
    4842:	b9 01       	movw	r22, r18
    4844:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
    4848:	9a cf       	rjmp	.-204    	; 0x477e <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    484a:	80 91 f6 05 	lds	r24, 0x05F6
    484e:	8f 5f       	subi	r24, 0xFF	; 255
    4850:	80 93 f6 05 	sts	0x05F6, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    4854:	26 96       	adiw	r28, 0x06	; 6
    4856:	0f b6       	in	r0, 0x3f	; 63
    4858:	f8 94       	cli
    485a:	de bf       	out	0x3e, r29	; 62
    485c:	0f be       	out	0x3f, r0	; 63
    485e:	cd bf       	out	0x3d, r28	; 61
    4860:	cf 91       	pop	r28
    4862:	df 91       	pop	r29
    4864:	08 95       	ret

00004866 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    4866:	df 93       	push	r29
    4868:	cf 93       	push	r28
    486a:	00 d0       	rcall	.+0      	; 0x486c <vTaskSwitchContext+0x6>
    486c:	cd b7       	in	r28, 0x3d	; 61
    486e:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    4870:	80 91 f5 05 	lds	r24, 0x05F5
    4874:	88 23       	and	r24, r24
    4876:	49 f0       	breq	.+18     	; 0x488a <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	80 93 f7 05 	sts	0x05F7, r24
    487e:	54 c0       	rjmp	.+168    	; 0x4928 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    4880:	80 91 f3 05 	lds	r24, 0x05F3
    4884:	81 50       	subi	r24, 0x01	; 1
    4886:	80 93 f3 05 	sts	0x05F3, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    488a:	80 91 f3 05 	lds	r24, 0x05F3
    488e:	28 2f       	mov	r18, r24
    4890:	30 e0       	ldi	r19, 0x00	; 0
    4892:	c9 01       	movw	r24, r18
    4894:	88 0f       	add	r24, r24
    4896:	99 1f       	adc	r25, r25
    4898:	88 0f       	add	r24, r24
    489a:	99 1f       	adc	r25, r25
    489c:	88 0f       	add	r24, r24
    489e:	99 1f       	adc	r25, r25
    48a0:	82 0f       	add	r24, r18
    48a2:	93 1f       	adc	r25, r19
    48a4:	fc 01       	movw	r30, r24
    48a6:	e6 50       	subi	r30, 0x06	; 6
    48a8:	fa 4f       	sbci	r31, 0xFA	; 250
    48aa:	80 81       	ld	r24, Z
    48ac:	88 23       	and	r24, r24
    48ae:	41 f3       	breq	.-48     	; 0x4880 <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    48b0:	80 91 f3 05 	lds	r24, 0x05F3
    48b4:	28 2f       	mov	r18, r24
    48b6:	30 e0       	ldi	r19, 0x00	; 0
    48b8:	c9 01       	movw	r24, r18
    48ba:	88 0f       	add	r24, r24
    48bc:	99 1f       	adc	r25, r25
    48be:	88 0f       	add	r24, r24
    48c0:	99 1f       	adc	r25, r25
    48c2:	88 0f       	add	r24, r24
    48c4:	99 1f       	adc	r25, r25
    48c6:	82 0f       	add	r24, r18
    48c8:	93 1f       	adc	r25, r19
    48ca:	86 50       	subi	r24, 0x06	; 6
    48cc:	9a 4f       	sbci	r25, 0xFA	; 250
    48ce:	9a 83       	std	Y+2, r25	; 0x02
    48d0:	89 83       	std	Y+1, r24	; 0x01
    48d2:	e9 81       	ldd	r30, Y+1	; 0x01
    48d4:	fa 81       	ldd	r31, Y+2	; 0x02
    48d6:	01 80       	ldd	r0, Z+1	; 0x01
    48d8:	f2 81       	ldd	r31, Z+2	; 0x02
    48da:	e0 2d       	mov	r30, r0
    48dc:	82 81       	ldd	r24, Z+2	; 0x02
    48de:	93 81       	ldd	r25, Z+3	; 0x03
    48e0:	e9 81       	ldd	r30, Y+1	; 0x01
    48e2:	fa 81       	ldd	r31, Y+2	; 0x02
    48e4:	92 83       	std	Z+2, r25	; 0x02
    48e6:	81 83       	std	Z+1, r24	; 0x01
    48e8:	e9 81       	ldd	r30, Y+1	; 0x01
    48ea:	fa 81       	ldd	r31, Y+2	; 0x02
    48ec:	21 81       	ldd	r18, Z+1	; 0x01
    48ee:	32 81       	ldd	r19, Z+2	; 0x02
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	9a 81       	ldd	r25, Y+2	; 0x02
    48f4:	03 96       	adiw	r24, 0x03	; 3
    48f6:	28 17       	cp	r18, r24
    48f8:	39 07       	cpc	r19, r25
    48fa:	59 f4       	brne	.+22     	; 0x4912 <vTaskSwitchContext+0xac>
    48fc:	e9 81       	ldd	r30, Y+1	; 0x01
    48fe:	fa 81       	ldd	r31, Y+2	; 0x02
    4900:	01 80       	ldd	r0, Z+1	; 0x01
    4902:	f2 81       	ldd	r31, Z+2	; 0x02
    4904:	e0 2d       	mov	r30, r0
    4906:	82 81       	ldd	r24, Z+2	; 0x02
    4908:	93 81       	ldd	r25, Z+3	; 0x03
    490a:	e9 81       	ldd	r30, Y+1	; 0x01
    490c:	fa 81       	ldd	r31, Y+2	; 0x02
    490e:	92 83       	std	Z+2, r25	; 0x02
    4910:	81 83       	std	Z+1, r24	; 0x01
    4912:	e9 81       	ldd	r30, Y+1	; 0x01
    4914:	fa 81       	ldd	r31, Y+2	; 0x02
    4916:	01 80       	ldd	r0, Z+1	; 0x01
    4918:	f2 81       	ldd	r31, Z+2	; 0x02
    491a:	e0 2d       	mov	r30, r0
    491c:	86 81       	ldd	r24, Z+6	; 0x06
    491e:	97 81       	ldd	r25, Z+7	; 0x07
    4920:	90 93 ed 05 	sts	0x05ED, r25
    4924:	80 93 ec 05 	sts	0x05EC, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	cf 91       	pop	r28
    492e:	df 91       	pop	r29
    4930:	08 95       	ret

00004932 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    4932:	df 93       	push	r29
    4934:	cf 93       	push	r28
    4936:	00 d0       	rcall	.+0      	; 0x4938 <vTaskPlaceOnEventList+0x6>
    4938:	00 d0       	rcall	.+0      	; 0x493a <vTaskPlaceOnEventList+0x8>
    493a:	00 d0       	rcall	.+0      	; 0x493c <vTaskPlaceOnEventList+0xa>
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
    4940:	9c 83       	std	Y+4, r25	; 0x04
    4942:	8b 83       	std	Y+3, r24	; 0x03
    4944:	7e 83       	std	Y+6, r23	; 0x06
    4946:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4948:	4b 81       	ldd	r20, Y+3	; 0x03
    494a:	5c 81       	ldd	r21, Y+4	; 0x04
    494c:	80 91 ec 05 	lds	r24, 0x05EC
    4950:	90 91 ed 05 	lds	r25, 0x05ED
    4954:	9c 01       	movw	r18, r24
    4956:	24 5f       	subi	r18, 0xF4	; 244
    4958:	3f 4f       	sbci	r19, 0xFF	; 255
    495a:	ca 01       	movw	r24, r20
    495c:	b9 01       	movw	r22, r18
    495e:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4962:	80 91 ec 05 	lds	r24, 0x05EC
    4966:	90 91 ed 05 	lds	r25, 0x05ED
    496a:	02 96       	adiw	r24, 0x02	; 2
    496c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>


	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
    4970:	8d 81       	ldd	r24, Y+5	; 0x05
    4972:	9e 81       	ldd	r25, Y+6	; 0x06
    4974:	2f ef       	ldi	r18, 0xFF	; 255
    4976:	8f 3f       	cpi	r24, 0xFF	; 255
    4978:	92 07       	cpc	r25, r18
    497a:	69 f4       	brne	.+26     	; 0x4996 <vTaskPlaceOnEventList+0x64>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    497c:	80 91 ec 05 	lds	r24, 0x05EC
    4980:	90 91 ed 05 	lds	r25, 0x05ED
    4984:	9c 01       	movw	r18, r24
    4986:	2e 5f       	subi	r18, 0xFE	; 254
    4988:	3f 4f       	sbci	r19, 0xFF	; 255
    498a:	86 e4       	ldi	r24, 0x46	; 70
    498c:	96 e0       	ldi	r25, 0x06	; 6
    498e:	b9 01       	movw	r22, r18
    4990:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
    4994:	0e c0       	rjmp	.+28     	; 0x49b2 <vTaskPlaceOnEventList+0x80>
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    4996:	20 91 f0 05 	lds	r18, 0x05F0
    499a:	30 91 f1 05 	lds	r19, 0x05F1
    499e:	8d 81       	ldd	r24, Y+5	; 0x05
    49a0:	9e 81       	ldd	r25, Y+6	; 0x06
    49a2:	82 0f       	add	r24, r18
    49a4:	93 1f       	adc	r25, r19
    49a6:	9a 83       	std	Y+2, r25	; 0x02
    49a8:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    49aa:	89 81       	ldd	r24, Y+1	; 0x01
    49ac:	9a 81       	ldd	r25, Y+2	; 0x02
    49ae:	0e 94 b4 26 	call	0x4d68	; 0x4d68 <prvAddCurrentTaskToDelayedList>
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
			prvAddCurrentTaskToDelayedList( xTimeToWake );
	}
	#endif
}
    49b2:	26 96       	adiw	r28, 0x06	; 6
    49b4:	0f b6       	in	r0, 0x3f	; 63
    49b6:	f8 94       	cli
    49b8:	de bf       	out	0x3e, r29	; 62
    49ba:	0f be       	out	0x3f, r0	; 63
    49bc:	cd bf       	out	0x3d, r28	; 61
    49be:	cf 91       	pop	r28
    49c0:	df 91       	pop	r29
    49c2:	08 95       	ret

000049c4 <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    49c4:	df 93       	push	r29
    49c6:	cf 93       	push	r28
    49c8:	00 d0       	rcall	.+0      	; 0x49ca <xTaskRemoveFromEventList+0x6>
    49ca:	00 d0       	rcall	.+0      	; 0x49cc <xTaskRemoveFromEventList+0x8>
    49cc:	0f 92       	push	r0
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
    49d2:	9d 83       	std	Y+5, r25	; 0x05
    49d4:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    49d6:	ec 81       	ldd	r30, Y+4	; 0x04
    49d8:	fd 81       	ldd	r31, Y+5	; 0x05
    49da:	05 80       	ldd	r0, Z+5	; 0x05
    49dc:	f6 81       	ldd	r31, Z+6	; 0x06
    49de:	e0 2d       	mov	r30, r0
    49e0:	86 81       	ldd	r24, Z+6	; 0x06
    49e2:	97 81       	ldd	r25, Z+7	; 0x07
    49e4:	9b 83       	std	Y+3, r25	; 0x03
    49e6:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    49e8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ea:	9b 81       	ldd	r25, Y+3	; 0x03
    49ec:	0c 96       	adiw	r24, 0x0c	; 12
    49ee:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    49f2:	80 91 f5 05 	lds	r24, 0x05F5
    49f6:	88 23       	and	r24, r24
    49f8:	61 f5       	brne	.+88     	; 0x4a52 <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    49fa:	8a 81       	ldd	r24, Y+2	; 0x02
    49fc:	9b 81       	ldd	r25, Y+3	; 0x03
    49fe:	02 96       	adiw	r24, 0x02	; 2
    4a00:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    4a04:	ea 81       	ldd	r30, Y+2	; 0x02
    4a06:	fb 81       	ldd	r31, Y+3	; 0x03
    4a08:	96 89       	ldd	r25, Z+22	; 0x16
    4a0a:	80 91 f3 05 	lds	r24, 0x05F3
    4a0e:	89 17       	cp	r24, r25
    4a10:	28 f4       	brcc	.+10     	; 0x4a1c <xTaskRemoveFromEventList+0x58>
    4a12:	ea 81       	ldd	r30, Y+2	; 0x02
    4a14:	fb 81       	ldd	r31, Y+3	; 0x03
    4a16:	86 89       	ldd	r24, Z+22	; 0x16
    4a18:	80 93 f3 05 	sts	0x05F3, r24
    4a1c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a1e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a20:	86 89       	ldd	r24, Z+22	; 0x16
    4a22:	28 2f       	mov	r18, r24
    4a24:	30 e0       	ldi	r19, 0x00	; 0
    4a26:	c9 01       	movw	r24, r18
    4a28:	88 0f       	add	r24, r24
    4a2a:	99 1f       	adc	r25, r25
    4a2c:	88 0f       	add	r24, r24
    4a2e:	99 1f       	adc	r25, r25
    4a30:	88 0f       	add	r24, r24
    4a32:	99 1f       	adc	r25, r25
    4a34:	82 0f       	add	r24, r18
    4a36:	93 1f       	adc	r25, r19
    4a38:	ac 01       	movw	r20, r24
    4a3a:	46 50       	subi	r20, 0x06	; 6
    4a3c:	5a 4f       	sbci	r21, 0xFA	; 250
    4a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4a40:	9b 81       	ldd	r25, Y+3	; 0x03
    4a42:	9c 01       	movw	r18, r24
    4a44:	2e 5f       	subi	r18, 0xFE	; 254
    4a46:	3f 4f       	sbci	r19, 0xFF	; 255
    4a48:	ca 01       	movw	r24, r20
    4a4a:	b9 01       	movw	r22, r18
    4a4c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
    4a50:	0a c0       	rjmp	.+20     	; 0x4a66 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    4a52:	8a 81       	ldd	r24, Y+2	; 0x02
    4a54:	9b 81       	ldd	r25, Y+3	; 0x03
    4a56:	9c 01       	movw	r18, r24
    4a58:	24 5f       	subi	r18, 0xF4	; 244
    4a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a5c:	84 e3       	ldi	r24, 0x34	; 52
    4a5e:	96 e0       	ldi	r25, 0x06	; 6
    4a60:	b9 01       	movw	r22, r18
    4a62:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4a66:	ea 81       	ldd	r30, Y+2	; 0x02
    4a68:	fb 81       	ldd	r31, Y+3	; 0x03
    4a6a:	96 89       	ldd	r25, Z+22	; 0x16
    4a6c:	e0 91 ec 05 	lds	r30, 0x05EC
    4a70:	f0 91 ed 05 	lds	r31, 0x05ED
    4a74:	86 89       	ldd	r24, Z+22	; 0x16
    4a76:	98 17       	cp	r25, r24
    4a78:	18 f0       	brcs	.+6      	; 0x4a80 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    4a7a:	81 e0       	ldi	r24, 0x01	; 1
    4a7c:	89 83       	std	Y+1, r24	; 0x01
    4a7e:	01 c0       	rjmp	.+2      	; 0x4a82 <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    4a80:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    4a82:	89 81       	ldd	r24, Y+1	; 0x01
}
    4a84:	0f 90       	pop	r0
    4a86:	0f 90       	pop	r0
    4a88:	0f 90       	pop	r0
    4a8a:	0f 90       	pop	r0
    4a8c:	0f 90       	pop	r0
    4a8e:	cf 91       	pop	r28
    4a90:	df 91       	pop	r29
    4a92:	08 95       	ret

00004a94 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    4a94:	df 93       	push	r29
    4a96:	cf 93       	push	r28
    4a98:	00 d0       	rcall	.+0      	; 0x4a9a <vTaskSetTimeOutState+0x6>
    4a9a:	cd b7       	in	r28, 0x3d	; 61
    4a9c:	de b7       	in	r29, 0x3e	; 62
    4a9e:	9a 83       	std	Y+2, r25	; 0x02
    4aa0:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    4aa2:	80 91 f8 05 	lds	r24, 0x05F8
    4aa6:	e9 81       	ldd	r30, Y+1	; 0x01
    4aa8:	fa 81       	ldd	r31, Y+2	; 0x02
    4aaa:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    4aac:	80 91 f0 05 	lds	r24, 0x05F0
    4ab0:	90 91 f1 05 	lds	r25, 0x05F1
    4ab4:	e9 81       	ldd	r30, Y+1	; 0x01
    4ab6:	fa 81       	ldd	r31, Y+2	; 0x02
    4ab8:	92 83       	std	Z+2, r25	; 0x02
    4aba:	81 83       	std	Z+1, r24	; 0x01
}
    4abc:	0f 90       	pop	r0
    4abe:	0f 90       	pop	r0
    4ac0:	cf 91       	pop	r28
    4ac2:	df 91       	pop	r29
    4ac4:	08 95       	ret

00004ac6 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    4ac6:	df 93       	push	r29
    4ac8:	cf 93       	push	r28
    4aca:	00 d0       	rcall	.+0      	; 0x4acc <xTaskCheckForTimeOut+0x6>
    4acc:	00 d0       	rcall	.+0      	; 0x4ace <xTaskCheckForTimeOut+0x8>
    4ace:	0f 92       	push	r0
    4ad0:	cd b7       	in	r28, 0x3d	; 61
    4ad2:	de b7       	in	r29, 0x3e	; 62
    4ad4:	9b 83       	std	Y+3, r25	; 0x03
    4ad6:	8a 83       	std	Y+2, r24	; 0x02
    4ad8:	7d 83       	std	Y+5, r23	; 0x05
    4ada:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4adc:	0f b6       	in	r0, 0x3f	; 63
    4ade:	f8 94       	cli
    4ae0:	0f 92       	push	r0
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
    4ae2:	ec 81       	ldd	r30, Y+4	; 0x04
    4ae4:	fd 81       	ldd	r31, Y+5	; 0x05
    4ae6:	80 81       	ld	r24, Z
    4ae8:	91 81       	ldd	r25, Z+1	; 0x01
    4aea:	2f ef       	ldi	r18, 0xFF	; 255
    4aec:	8f 3f       	cpi	r24, 0xFF	; 255
    4aee:	92 07       	cpc	r25, r18
    4af0:	11 f4       	brne	.+4      	; 0x4af6 <xTaskCheckForTimeOut+0x30>
			{
				xReturn = pdFALSE;
    4af2:	19 82       	std	Y+1, r1	; 0x01
    4af4:	44 c0       	rjmp	.+136    	; 0x4b7e <xTaskCheckForTimeOut+0xb8>
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    4af6:	ea 81       	ldd	r30, Y+2	; 0x02
    4af8:	fb 81       	ldd	r31, Y+3	; 0x03
    4afa:	90 81       	ld	r25, Z
    4afc:	80 91 f8 05 	lds	r24, 0x05F8
    4b00:	98 17       	cp	r25, r24
    4b02:	71 f0       	breq	.+28     	; 0x4b20 <xTaskCheckForTimeOut+0x5a>
    4b04:	ea 81       	ldd	r30, Y+2	; 0x02
    4b06:	fb 81       	ldd	r31, Y+3	; 0x03
    4b08:	21 81       	ldd	r18, Z+1	; 0x01
    4b0a:	32 81       	ldd	r19, Z+2	; 0x02
    4b0c:	80 91 f0 05 	lds	r24, 0x05F0
    4b10:	90 91 f1 05 	lds	r25, 0x05F1
    4b14:	82 17       	cp	r24, r18
    4b16:	93 07       	cpc	r25, r19
    4b18:	18 f0       	brcs	.+6      	; 0x4b20 <xTaskCheckForTimeOut+0x5a>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	89 83       	std	Y+1, r24	; 0x01
    4b1e:	2f c0       	rjmp	.+94     	; 0x4b7e <xTaskCheckForTimeOut+0xb8>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4b20:	20 91 f0 05 	lds	r18, 0x05F0
    4b24:	30 91 f1 05 	lds	r19, 0x05F1
    4b28:	ea 81       	ldd	r30, Y+2	; 0x02
    4b2a:	fb 81       	ldd	r31, Y+3	; 0x03
    4b2c:	81 81       	ldd	r24, Z+1	; 0x01
    4b2e:	92 81       	ldd	r25, Z+2	; 0x02
    4b30:	28 1b       	sub	r18, r24
    4b32:	39 0b       	sbc	r19, r25
    4b34:	ec 81       	ldd	r30, Y+4	; 0x04
    4b36:	fd 81       	ldd	r31, Y+5	; 0x05
    4b38:	80 81       	ld	r24, Z
    4b3a:	91 81       	ldd	r25, Z+1	; 0x01
    4b3c:	28 17       	cp	r18, r24
    4b3e:	39 07       	cpc	r19, r25
    4b40:	e0 f4       	brcc	.+56     	; 0x4b7a <xTaskCheckForTimeOut+0xb4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4b42:	ec 81       	ldd	r30, Y+4	; 0x04
    4b44:	fd 81       	ldd	r31, Y+5	; 0x05
    4b46:	40 81       	ld	r20, Z
    4b48:	51 81       	ldd	r21, Z+1	; 0x01
    4b4a:	ea 81       	ldd	r30, Y+2	; 0x02
    4b4c:	fb 81       	ldd	r31, Y+3	; 0x03
    4b4e:	21 81       	ldd	r18, Z+1	; 0x01
    4b50:	32 81       	ldd	r19, Z+2	; 0x02
    4b52:	80 91 f0 05 	lds	r24, 0x05F0
    4b56:	90 91 f1 05 	lds	r25, 0x05F1
    4b5a:	b9 01       	movw	r22, r18
    4b5c:	68 1b       	sub	r22, r24
    4b5e:	79 0b       	sbc	r23, r25
    4b60:	cb 01       	movw	r24, r22
    4b62:	84 0f       	add	r24, r20
    4b64:	95 1f       	adc	r25, r21
    4b66:	ec 81       	ldd	r30, Y+4	; 0x04
    4b68:	fd 81       	ldd	r31, Y+5	; 0x05
    4b6a:	91 83       	std	Z+1, r25	; 0x01
    4b6c:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    4b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b70:	9b 81       	ldd	r25, Y+3	; 0x03
    4b72:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    4b76:	19 82       	std	Y+1, r1	; 0x01
    4b78:	02 c0       	rjmp	.+4      	; 0x4b7e <xTaskCheckForTimeOut+0xb8>
		}
		else
		{
			xReturn = pdTRUE;
    4b7a:	81 e0       	ldi	r24, 0x01	; 1
    4b7c:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    4b7e:	0f 90       	pop	r0
    4b80:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4b82:	89 81       	ldd	r24, Y+1	; 0x01
}
    4b84:	0f 90       	pop	r0
    4b86:	0f 90       	pop	r0
    4b88:	0f 90       	pop	r0
    4b8a:	0f 90       	pop	r0
    4b8c:	0f 90       	pop	r0
    4b8e:	cf 91       	pop	r28
    4b90:	df 91       	pop	r29
    4b92:	08 95       	ret

00004b94 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    4b94:	df 93       	push	r29
    4b96:	cf 93       	push	r28
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    4b9c:	81 e0       	ldi	r24, 0x01	; 1
    4b9e:	80 93 f7 05 	sts	0x05F7, r24
}
    4ba2:	cf 91       	pop	r28
    4ba4:	df 91       	pop	r29
    4ba6:	08 95       	ret

00004ba8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    4ba8:	df 93       	push	r29
    4baa:	cf 93       	push	r28
    4bac:	00 d0       	rcall	.+0      	; 0x4bae <prvIdleTask+0x6>
    4bae:	cd b7       	in	r28, 0x3d	; 61
    4bb0:	de b7       	in	r29, 0x3e	; 62
    4bb2:	9a 83       	std	Y+2, r25	; 0x02
    4bb4:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    4bb6:	0e 94 76 26 	call	0x4cec	; 0x4cec <prvCheckTasksWaitingTermination>
    4bba:	fd cf       	rjmp	.-6      	; 0x4bb6 <prvIdleTask+0xe>

00004bbc <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    4bbc:	0f 93       	push	r16
    4bbe:	1f 93       	push	r17
    4bc0:	df 93       	push	r29
    4bc2:	cf 93       	push	r28
    4bc4:	cd b7       	in	r28, 0x3d	; 61
    4bc6:	de b7       	in	r29, 0x3e	; 62
    4bc8:	29 97       	sbiw	r28, 0x09	; 9
    4bca:	0f b6       	in	r0, 0x3f	; 63
    4bcc:	f8 94       	cli
    4bce:	de bf       	out	0x3e, r29	; 62
    4bd0:	0f be       	out	0x3f, r0	; 63
    4bd2:	cd bf       	out	0x3d, r28	; 61
    4bd4:	9a 83       	std	Y+2, r25	; 0x02
    4bd6:	89 83       	std	Y+1, r24	; 0x01
    4bd8:	7c 83       	std	Y+4, r23	; 0x04
    4bda:	6b 83       	std	Y+3, r22	; 0x03
    4bdc:	4d 83       	std	Y+5, r20	; 0x05
    4bde:	3f 83       	std	Y+7, r19	; 0x07
    4be0:	2e 83       	std	Y+6, r18	; 0x06
    4be2:	19 87       	std	Y+9, r17	; 0x09
    4be4:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    4be6:	89 81       	ldd	r24, Y+1	; 0x01
    4be8:	9a 81       	ldd	r25, Y+2	; 0x02
    4bea:	49 96       	adiw	r24, 0x19	; 25
    4bec:	2b 81       	ldd	r18, Y+3	; 0x03
    4bee:	3c 81       	ldd	r19, Y+4	; 0x04
    4bf0:	b9 01       	movw	r22, r18
    4bf2:	48 e0       	ldi	r20, 0x08	; 8
    4bf4:	50 e0       	ldi	r21, 0x00	; 0
    4bf6:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    4bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    4bfe:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4c00:	8d 81       	ldd	r24, Y+5	; 0x05
    4c02:	84 30       	cpi	r24, 0x04	; 4
    4c04:	10 f0       	brcs	.+4      	; 0x4c0a <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    4c06:	83 e0       	ldi	r24, 0x03	; 3
    4c08:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    4c0a:	e9 81       	ldd	r30, Y+1	; 0x01
    4c0c:	fa 81       	ldd	r31, Y+2	; 0x02
    4c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    4c10:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    4c12:	89 81       	ldd	r24, Y+1	; 0x01
    4c14:	9a 81       	ldd	r25, Y+2	; 0x02
    4c16:	02 96       	adiw	r24, 0x02	; 2
    4c18:	0e 94 75 16 	call	0x2cea	; 0x2cea <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4c1c:	89 81       	ldd	r24, Y+1	; 0x01
    4c1e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c20:	0c 96       	adiw	r24, 0x0c	; 12
    4c22:	0e 94 75 16 	call	0x2cea	; 0x2cea <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    4c26:	e9 81       	ldd	r30, Y+1	; 0x01
    4c28:	fa 81       	ldd	r31, Y+2	; 0x02
    4c2a:	89 81       	ldd	r24, Y+1	; 0x01
    4c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    4c2e:	91 87       	std	Z+9, r25	; 0x09
    4c30:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    4c32:	8d 81       	ldd	r24, Y+5	; 0x05
    4c34:	28 2f       	mov	r18, r24
    4c36:	30 e0       	ldi	r19, 0x00	; 0
    4c38:	84 e0       	ldi	r24, 0x04	; 4
    4c3a:	90 e0       	ldi	r25, 0x00	; 0
    4c3c:	82 1b       	sub	r24, r18
    4c3e:	93 0b       	sbc	r25, r19
    4c40:	e9 81       	ldd	r30, Y+1	; 0x01
    4c42:	fa 81       	ldd	r31, Y+2	; 0x02
    4c44:	95 87       	std	Z+13, r25	; 0x0d
    4c46:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4c48:	e9 81       	ldd	r30, Y+1	; 0x01
    4c4a:	fa 81       	ldd	r31, Y+2	; 0x02
    4c4c:	89 81       	ldd	r24, Y+1	; 0x01
    4c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    4c50:	93 8b       	std	Z+19, r25	; 0x13
    4c52:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    4c54:	29 96       	adiw	r28, 0x09	; 9
    4c56:	0f b6       	in	r0, 0x3f	; 63
    4c58:	f8 94       	cli
    4c5a:	de bf       	out	0x3e, r29	; 62
    4c5c:	0f be       	out	0x3f, r0	; 63
    4c5e:	cd bf       	out	0x3d, r28	; 61
    4c60:	cf 91       	pop	r28
    4c62:	df 91       	pop	r29
    4c64:	1f 91       	pop	r17
    4c66:	0f 91       	pop	r16
    4c68:	08 95       	ret

00004c6a <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    4c6a:	df 93       	push	r29
    4c6c:	cf 93       	push	r28
    4c6e:	0f 92       	push	r0
    4c70:	cd b7       	in	r28, 0x3d	; 61
    4c72:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4c74:	19 82       	std	Y+1, r1	; 0x01
    4c76:	13 c0       	rjmp	.+38     	; 0x4c9e <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    4c78:	89 81       	ldd	r24, Y+1	; 0x01
    4c7a:	28 2f       	mov	r18, r24
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	c9 01       	movw	r24, r18
    4c80:	88 0f       	add	r24, r24
    4c82:	99 1f       	adc	r25, r25
    4c84:	88 0f       	add	r24, r24
    4c86:	99 1f       	adc	r25, r25
    4c88:	88 0f       	add	r24, r24
    4c8a:	99 1f       	adc	r25, r25
    4c8c:	82 0f       	add	r24, r18
    4c8e:	93 1f       	adc	r25, r19
    4c90:	86 50       	subi	r24, 0x06	; 6
    4c92:	9a 4f       	sbci	r25, 0xFA	; 250
    4c94:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    4c98:	89 81       	ldd	r24, Y+1	; 0x01
    4c9a:	8f 5f       	subi	r24, 0xFF	; 255
    4c9c:	89 83       	std	Y+1, r24	; 0x01
    4c9e:	89 81       	ldd	r24, Y+1	; 0x01
    4ca0:	84 30       	cpi	r24, 0x04	; 4
    4ca2:	50 f3       	brcs	.-44     	; 0x4c78 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    4ca4:	8e e1       	ldi	r24, 0x1E	; 30
    4ca6:	96 e0       	ldi	r25, 0x06	; 6
    4ca8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    4cac:	87 e2       	ldi	r24, 0x27	; 39
    4cae:	96 e0       	ldi	r25, 0x06	; 6
    4cb0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    4cb4:	84 e3       	ldi	r24, 0x34	; 52
    4cb6:	96 e0       	ldi	r25, 0x06	; 6
    4cb8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    4cbc:	8d e3       	ldi	r24, 0x3D	; 61
    4cbe:	96 e0       	ldi	r25, 0x06	; 6
    4cc0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
    4cc4:	86 e4       	ldi	r24, 0x46	; 70
    4cc6:	96 e0       	ldi	r25, 0x06	; 6
    4cc8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    4ccc:	8e e1       	ldi	r24, 0x1E	; 30
    4cce:	96 e0       	ldi	r25, 0x06	; 6
    4cd0:	90 93 31 06 	sts	0x0631, r25
    4cd4:	80 93 30 06 	sts	0x0630, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    4cd8:	87 e2       	ldi	r24, 0x27	; 39
    4cda:	96 e0       	ldi	r25, 0x06	; 6
    4cdc:	90 93 33 06 	sts	0x0633, r25
    4ce0:	80 93 32 06 	sts	0x0632, r24
}
    4ce4:	0f 90       	pop	r0
    4ce6:	cf 91       	pop	r28
    4ce8:	df 91       	pop	r29
    4cea:	08 95       	ret

00004cec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    4cec:	df 93       	push	r29
    4cee:	cf 93       	push	r28
    4cf0:	00 d0       	rcall	.+0      	; 0x4cf2 <prvCheckTasksWaitingTermination+0x6>
    4cf2:	0f 92       	push	r0
    4cf4:	cd b7       	in	r28, 0x3d	; 61
    4cf6:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4cf8:	80 91 ee 05 	lds	r24, 0x05EE
    4cfc:	88 23       	and	r24, r24
    4cfe:	71 f1       	breq	.+92     	; 0x4d5c <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    4d00:	0e 94 93 22 	call	0x4526	; 0x4526 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4d04:	80 91 3d 06 	lds	r24, 0x063D
    4d08:	1b 82       	std	Y+3, r1	; 0x03
    4d0a:	88 23       	and	r24, r24
    4d0c:	11 f4       	brne	.+4      	; 0x4d12 <prvCheckTasksWaitingTermination+0x26>
    4d0e:	81 e0       	ldi	r24, 0x01	; 1
    4d10:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    4d12:	0e 94 9f 22 	call	0x453e	; 0x453e <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4d16:	8b 81       	ldd	r24, Y+3	; 0x03
    4d18:	88 23       	and	r24, r24
    4d1a:	01 f5       	brne	.+64     	; 0x4d5c <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4d1c:	0f b6       	in	r0, 0x3f	; 63
    4d1e:	f8 94       	cli
    4d20:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4d22:	e0 91 42 06 	lds	r30, 0x0642
    4d26:	f0 91 43 06 	lds	r31, 0x0643
    4d2a:	86 81       	ldd	r24, Z+6	; 0x06
    4d2c:	97 81       	ldd	r25, Z+7	; 0x07
    4d2e:	9a 83       	std	Y+2, r25	; 0x02
    4d30:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    4d32:	89 81       	ldd	r24, Y+1	; 0x01
    4d34:	9a 81       	ldd	r25, Y+2	; 0x02
    4d36:	02 96       	adiw	r24, 0x02	; 2
    4d38:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
					--uxCurrentNumberOfTasks;
    4d3c:	80 91 ef 05 	lds	r24, 0x05EF
    4d40:	81 50       	subi	r24, 0x01	; 1
    4d42:	80 93 ef 05 	sts	0x05EF, r24
					--uxTasksDeleted;
    4d46:	80 91 ee 05 	lds	r24, 0x05EE
    4d4a:	81 50       	subi	r24, 0x01	; 1
    4d4c:	80 93 ee 05 	sts	0x05EE, r24
				}
				taskEXIT_CRITICAL();
    4d50:	0f 90       	pop	r0
    4d52:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    4d54:	89 81       	ldd	r24, Y+1	; 0x01
    4d56:	9a 81       	ldd	r25, Y+2	; 0x02
    4d58:	0e 94 4d 27 	call	0x4e9a	; 0x4e9a <prvDeleteTCB>
			}
		}
	}
	#endif
}
    4d5c:	0f 90       	pop	r0
    4d5e:	0f 90       	pop	r0
    4d60:	0f 90       	pop	r0
    4d62:	cf 91       	pop	r28
    4d64:	df 91       	pop	r29
    4d66:	08 95       	ret

00004d68 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    4d68:	df 93       	push	r29
    4d6a:	cf 93       	push	r28
    4d6c:	00 d0       	rcall	.+0      	; 0x4d6e <prvAddCurrentTaskToDelayedList+0x6>
    4d6e:	cd b7       	in	r28, 0x3d	; 61
    4d70:	de b7       	in	r29, 0x3e	; 62
    4d72:	9a 83       	std	Y+2, r25	; 0x02
    4d74:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4d76:	e0 91 ec 05 	lds	r30, 0x05EC
    4d7a:	f0 91 ed 05 	lds	r31, 0x05ED
    4d7e:	89 81       	ldd	r24, Y+1	; 0x01
    4d80:	9a 81       	ldd	r25, Y+2	; 0x02
    4d82:	93 83       	std	Z+3, r25	; 0x03
    4d84:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    4d86:	20 91 f0 05 	lds	r18, 0x05F0
    4d8a:	30 91 f1 05 	lds	r19, 0x05F1
    4d8e:	89 81       	ldd	r24, Y+1	; 0x01
    4d90:	9a 81       	ldd	r25, Y+2	; 0x02
    4d92:	82 17       	cp	r24, r18
    4d94:	93 07       	cpc	r25, r19
    4d96:	70 f4       	brcc	.+28     	; 0x4db4 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4d98:	80 91 32 06 	lds	r24, 0x0632
    4d9c:	90 91 33 06 	lds	r25, 0x0633
    4da0:	20 91 ec 05 	lds	r18, 0x05EC
    4da4:	30 91 ed 05 	lds	r19, 0x05ED
    4da8:	2e 5f       	subi	r18, 0xFE	; 254
    4daa:	3f 4f       	sbci	r19, 0xFF	; 255
    4dac:	b9 01       	movw	r22, r18
    4dae:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>
    4db2:	1e c0       	rjmp	.+60     	; 0x4df0 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4db4:	40 91 30 06 	lds	r20, 0x0630
    4db8:	50 91 31 06 	lds	r21, 0x0631
    4dbc:	80 91 ec 05 	lds	r24, 0x05EC
    4dc0:	90 91 ed 05 	lds	r25, 0x05ED
    4dc4:	9c 01       	movw	r18, r24
    4dc6:	2e 5f       	subi	r18, 0xFE	; 254
    4dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    4dca:	ca 01       	movw	r24, r20
    4dcc:	b9 01       	movw	r22, r18
    4dce:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4dd2:	20 91 85 01 	lds	r18, 0x0185
    4dd6:	30 91 86 01 	lds	r19, 0x0186
    4dda:	89 81       	ldd	r24, Y+1	; 0x01
    4ddc:	9a 81       	ldd	r25, Y+2	; 0x02
    4dde:	82 17       	cp	r24, r18
    4de0:	93 07       	cpc	r25, r19
    4de2:	30 f4       	brcc	.+12     	; 0x4df0 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4de4:	89 81       	ldd	r24, Y+1	; 0x01
    4de6:	9a 81       	ldd	r25, Y+2	; 0x02
    4de8:	90 93 86 01 	sts	0x0186, r25
    4dec:	80 93 85 01 	sts	0x0185, r24
		}
	}
}
    4df0:	0f 90       	pop	r0
    4df2:	0f 90       	pop	r0
    4df4:	cf 91       	pop	r28
    4df6:	df 91       	pop	r29
    4df8:	08 95       	ret

00004dfa <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4dfa:	df 93       	push	r29
    4dfc:	cf 93       	push	r28
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	28 97       	sbiw	r28, 0x08	; 8
    4e04:	0f b6       	in	r0, 0x3f	; 63
    4e06:	f8 94       	cli
    4e08:	de bf       	out	0x3e, r29	; 62
    4e0a:	0f be       	out	0x3f, r0	; 63
    4e0c:	cd bf       	out	0x3d, r28	; 61
    4e0e:	9c 83       	std	Y+4, r25	; 0x04
    4e10:	8b 83       	std	Y+3, r24	; 0x03
    4e12:	7e 83       	std	Y+6, r23	; 0x06
    4e14:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4e16:	81 e2       	ldi	r24, 0x21	; 33
    4e18:	90 e0       	ldi	r25, 0x00	; 0
    4e1a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    4e1e:	9a 83       	std	Y+2, r25	; 0x02
    4e20:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    4e22:	89 81       	ldd	r24, Y+1	; 0x01
    4e24:	9a 81       	ldd	r25, Y+2	; 0x02
    4e26:	00 97       	sbiw	r24, 0x00	; 0
    4e28:	69 f1       	breq	.+90     	; 0x4e84 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e2e:	00 97       	sbiw	r24, 0x00	; 0
    4e30:	39 f4       	brne	.+14     	; 0x4e40 <prvAllocateTCBAndStack+0x46>
    4e32:	8b 81       	ldd	r24, Y+3	; 0x03
    4e34:	9c 81       	ldd	r25, Y+4	; 0x04
    4e36:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    4e3a:	98 87       	std	Y+8, r25	; 0x08
    4e3c:	8f 83       	std	Y+7, r24	; 0x07
    4e3e:	04 c0       	rjmp	.+8      	; 0x4e48 <prvAllocateTCBAndStack+0x4e>
    4e40:	8d 81       	ldd	r24, Y+5	; 0x05
    4e42:	9e 81       	ldd	r25, Y+6	; 0x06
    4e44:	98 87       	std	Y+8, r25	; 0x08
    4e46:	8f 83       	std	Y+7, r24	; 0x07
    4e48:	e9 81       	ldd	r30, Y+1	; 0x01
    4e4a:	fa 81       	ldd	r31, Y+2	; 0x02
    4e4c:	8f 81       	ldd	r24, Y+7	; 0x07
    4e4e:	98 85       	ldd	r25, Y+8	; 0x08
    4e50:	90 8f       	std	Z+24, r25	; 0x18
    4e52:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    4e54:	e9 81       	ldd	r30, Y+1	; 0x01
    4e56:	fa 81       	ldd	r31, Y+2	; 0x02
    4e58:	87 89       	ldd	r24, Z+23	; 0x17
    4e5a:	90 8d       	ldd	r25, Z+24	; 0x18
    4e5c:	00 97       	sbiw	r24, 0x00	; 0
    4e5e:	39 f4       	brne	.+14     	; 0x4e6e <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4e60:	89 81       	ldd	r24, Y+1	; 0x01
    4e62:	9a 81       	ldd	r25, Y+2	; 0x02
    4e64:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
			pxNewTCB = NULL;
    4e68:	1a 82       	std	Y+2, r1	; 0x02
    4e6a:	19 82       	std	Y+1, r1	; 0x01
    4e6c:	0b c0       	rjmp	.+22     	; 0x4e84 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4e6e:	e9 81       	ldd	r30, Y+1	; 0x01
    4e70:	fa 81       	ldd	r31, Y+2	; 0x02
    4e72:	87 89       	ldd	r24, Z+23	; 0x17
    4e74:	90 8d       	ldd	r25, Z+24	; 0x18
    4e76:	2b 81       	ldd	r18, Y+3	; 0x03
    4e78:	3c 81       	ldd	r19, Y+4	; 0x04
    4e7a:	65 ea       	ldi	r22, 0xA5	; 165
    4e7c:	70 e0       	ldi	r23, 0x00	; 0
    4e7e:	a9 01       	movw	r20, r18
    4e80:	0e 94 df 3a 	call	0x75be	; 0x75be <memset>
		}
	}

	return pxNewTCB;
    4e84:	89 81       	ldd	r24, Y+1	; 0x01
    4e86:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4e88:	28 96       	adiw	r28, 0x08	; 8
    4e8a:	0f b6       	in	r0, 0x3f	; 63
    4e8c:	f8 94       	cli
    4e8e:	de bf       	out	0x3e, r29	; 62
    4e90:	0f be       	out	0x3f, r0	; 63
    4e92:	cd bf       	out	0x3d, r28	; 61
    4e94:	cf 91       	pop	r28
    4e96:	df 91       	pop	r29
    4e98:	08 95       	ret

00004e9a <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4e9a:	df 93       	push	r29
    4e9c:	cf 93       	push	r28
    4e9e:	00 d0       	rcall	.+0      	; 0x4ea0 <prvDeleteTCB+0x6>
    4ea0:	cd b7       	in	r28, 0x3d	; 61
    4ea2:	de b7       	in	r29, 0x3e	; 62
    4ea4:	9a 83       	std	Y+2, r25	; 0x02
    4ea6:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4ea8:	e9 81       	ldd	r30, Y+1	; 0x01
    4eaa:	fa 81       	ldd	r31, Y+2	; 0x02
    4eac:	87 89       	ldd	r24, Z+23	; 0x17
    4eae:	90 8d       	ldd	r25, Z+24	; 0x18
    4eb0:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
		vPortFree( pxTCB );
    4eb4:	89 81       	ldd	r24, Y+1	; 0x01
    4eb6:	9a 81       	ldd	r25, Y+2	; 0x02
    4eb8:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
	}
    4ebc:	0f 90       	pop	r0
    4ebe:	0f 90       	pop	r0
    4ec0:	cf 91       	pop	r28
    4ec2:	df 91       	pop	r29
    4ec4:	08 95       	ret

00004ec6 <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    4ec6:	df 93       	push	r29
    4ec8:	cf 93       	push	r28
    4eca:	cd b7       	in	r28, 0x3d	; 61
    4ecc:	de b7       	in	r29, 0x3e	; 62
    4ece:	28 97       	sbiw	r28, 0x08	; 8
    4ed0:	0f b6       	in	r0, 0x3f	; 63
    4ed2:	f8 94       	cli
    4ed4:	de bf       	out	0x3e, r29	; 62
    4ed6:	0f be       	out	0x3f, r0	; 63
    4ed8:	cd bf       	out	0x3d, r28	; 61
    4eda:	8a 83       	std	Y+2, r24	; 0x02
    4edc:	6b 83       	std	Y+3, r22	; 0x03
    4ede:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    4ee0:	81 e0       	ldi	r24, 0x01	; 1
    4ee2:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    4ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee6:	84 30       	cpi	r24, 0x04	; 4
    4ee8:	08 f0       	brcs	.+2      	; 0x4eec <DIO_enumSetPinDirection+0x26>
    4eea:	f1 c0       	rjmp	.+482    	; 0x50ce <DIO_enumSetPinDirection+0x208>
    4eec:	8b 81       	ldd	r24, Y+3	; 0x03
    4eee:	88 30       	cpi	r24, 0x08	; 8
    4ef0:	08 f0       	brcs	.+2      	; 0x4ef4 <DIO_enumSetPinDirection+0x2e>
    4ef2:	ed c0       	rjmp	.+474    	; 0x50ce <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    4ef4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ef6:	81 30       	cpi	r24, 0x01	; 1
    4ef8:	09 f0       	breq	.+2      	; 0x4efc <DIO_enumSetPinDirection+0x36>
    4efa:	6f c0       	rjmp	.+222    	; 0x4fda <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    4efc:	8a 81       	ldd	r24, Y+2	; 0x02
    4efe:	28 2f       	mov	r18, r24
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	38 87       	std	Y+8, r19	; 0x08
    4f04:	2f 83       	std	Y+7, r18	; 0x07
    4f06:	8f 81       	ldd	r24, Y+7	; 0x07
    4f08:	98 85       	ldd	r25, Y+8	; 0x08
    4f0a:	81 30       	cpi	r24, 0x01	; 1
    4f0c:	91 05       	cpc	r25, r1
    4f0e:	49 f1       	breq	.+82     	; 0x4f62 <DIO_enumSetPinDirection+0x9c>
    4f10:	2f 81       	ldd	r18, Y+7	; 0x07
    4f12:	38 85       	ldd	r19, Y+8	; 0x08
    4f14:	22 30       	cpi	r18, 0x02	; 2
    4f16:	31 05       	cpc	r19, r1
    4f18:	2c f4       	brge	.+10     	; 0x4f24 <DIO_enumSetPinDirection+0x5e>
    4f1a:	8f 81       	ldd	r24, Y+7	; 0x07
    4f1c:	98 85       	ldd	r25, Y+8	; 0x08
    4f1e:	00 97       	sbiw	r24, 0x00	; 0
    4f20:	61 f0       	breq	.+24     	; 0x4f3a <DIO_enumSetPinDirection+0x74>
    4f22:	d6 c0       	rjmp	.+428    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
    4f24:	2f 81       	ldd	r18, Y+7	; 0x07
    4f26:	38 85       	ldd	r19, Y+8	; 0x08
    4f28:	22 30       	cpi	r18, 0x02	; 2
    4f2a:	31 05       	cpc	r19, r1
    4f2c:	71 f1       	breq	.+92     	; 0x4f8a <DIO_enumSetPinDirection+0xc4>
    4f2e:	8f 81       	ldd	r24, Y+7	; 0x07
    4f30:	98 85       	ldd	r25, Y+8	; 0x08
    4f32:	83 30       	cpi	r24, 0x03	; 3
    4f34:	91 05       	cpc	r25, r1
    4f36:	e9 f1       	breq	.+122    	; 0x4fb2 <DIO_enumSetPinDirection+0xec>
    4f38:	cb c0       	rjmp	.+406    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    4f3a:	aa e3       	ldi	r26, 0x3A	; 58
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	ea e3       	ldi	r30, 0x3A	; 58
    4f40:	f0 e0       	ldi	r31, 0x00	; 0
    4f42:	80 81       	ld	r24, Z
    4f44:	48 2f       	mov	r20, r24
    4f46:	8b 81       	ldd	r24, Y+3	; 0x03
    4f48:	28 2f       	mov	r18, r24
    4f4a:	30 e0       	ldi	r19, 0x00	; 0
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	02 2e       	mov	r0, r18
    4f52:	02 c0       	rjmp	.+4      	; 0x4f58 <DIO_enumSetPinDirection+0x92>
    4f54:	88 0f       	add	r24, r24
    4f56:	99 1f       	adc	r25, r25
    4f58:	0a 94       	dec	r0
    4f5a:	e2 f7       	brpl	.-8      	; 0x4f54 <DIO_enumSetPinDirection+0x8e>
    4f5c:	84 2b       	or	r24, r20
    4f5e:	8c 93       	st	X, r24
    4f60:	b7 c0       	rjmp	.+366    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    4f62:	a7 e3       	ldi	r26, 0x37	; 55
    4f64:	b0 e0       	ldi	r27, 0x00	; 0
    4f66:	e7 e3       	ldi	r30, 0x37	; 55
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	80 81       	ld	r24, Z
    4f6c:	48 2f       	mov	r20, r24
    4f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f70:	28 2f       	mov	r18, r24
    4f72:	30 e0       	ldi	r19, 0x00	; 0
    4f74:	81 e0       	ldi	r24, 0x01	; 1
    4f76:	90 e0       	ldi	r25, 0x00	; 0
    4f78:	02 2e       	mov	r0, r18
    4f7a:	02 c0       	rjmp	.+4      	; 0x4f80 <DIO_enumSetPinDirection+0xba>
    4f7c:	88 0f       	add	r24, r24
    4f7e:	99 1f       	adc	r25, r25
    4f80:	0a 94       	dec	r0
    4f82:	e2 f7       	brpl	.-8      	; 0x4f7c <DIO_enumSetPinDirection+0xb6>
    4f84:	84 2b       	or	r24, r20
    4f86:	8c 93       	st	X, r24
    4f88:	a3 c0       	rjmp	.+326    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    4f8a:	a4 e3       	ldi	r26, 0x34	; 52
    4f8c:	b0 e0       	ldi	r27, 0x00	; 0
    4f8e:	e4 e3       	ldi	r30, 0x34	; 52
    4f90:	f0 e0       	ldi	r31, 0x00	; 0
    4f92:	80 81       	ld	r24, Z
    4f94:	48 2f       	mov	r20, r24
    4f96:	8b 81       	ldd	r24, Y+3	; 0x03
    4f98:	28 2f       	mov	r18, r24
    4f9a:	30 e0       	ldi	r19, 0x00	; 0
    4f9c:	81 e0       	ldi	r24, 0x01	; 1
    4f9e:	90 e0       	ldi	r25, 0x00	; 0
    4fa0:	02 2e       	mov	r0, r18
    4fa2:	02 c0       	rjmp	.+4      	; 0x4fa8 <DIO_enumSetPinDirection+0xe2>
    4fa4:	88 0f       	add	r24, r24
    4fa6:	99 1f       	adc	r25, r25
    4fa8:	0a 94       	dec	r0
    4faa:	e2 f7       	brpl	.-8      	; 0x4fa4 <DIO_enumSetPinDirection+0xde>
    4fac:	84 2b       	or	r24, r20
    4fae:	8c 93       	st	X, r24
    4fb0:	8f c0       	rjmp	.+286    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    4fb2:	a1 e3       	ldi	r26, 0x31	; 49
    4fb4:	b0 e0       	ldi	r27, 0x00	; 0
    4fb6:	e1 e3       	ldi	r30, 0x31	; 49
    4fb8:	f0 e0       	ldi	r31, 0x00	; 0
    4fba:	80 81       	ld	r24, Z
    4fbc:	48 2f       	mov	r20, r24
    4fbe:	8b 81       	ldd	r24, Y+3	; 0x03
    4fc0:	28 2f       	mov	r18, r24
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	81 e0       	ldi	r24, 0x01	; 1
    4fc6:	90 e0       	ldi	r25, 0x00	; 0
    4fc8:	02 2e       	mov	r0, r18
    4fca:	02 c0       	rjmp	.+4      	; 0x4fd0 <DIO_enumSetPinDirection+0x10a>
    4fcc:	88 0f       	add	r24, r24
    4fce:	99 1f       	adc	r25, r25
    4fd0:	0a 94       	dec	r0
    4fd2:	e2 f7       	brpl	.-8      	; 0x4fcc <DIO_enumSetPinDirection+0x106>
    4fd4:	84 2b       	or	r24, r20
    4fd6:	8c 93       	st	X, r24
    4fd8:	7b c0       	rjmp	.+246    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    4fda:	8c 81       	ldd	r24, Y+4	; 0x04
    4fdc:	88 23       	and	r24, r24
    4fde:	09 f0       	breq	.+2      	; 0x4fe2 <DIO_enumSetPinDirection+0x11c>
    4fe0:	74 c0       	rjmp	.+232    	; 0x50ca <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    4fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe4:	28 2f       	mov	r18, r24
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	3e 83       	std	Y+6, r19	; 0x06
    4fea:	2d 83       	std	Y+5, r18	; 0x05
    4fec:	8d 81       	ldd	r24, Y+5	; 0x05
    4fee:	9e 81       	ldd	r25, Y+6	; 0x06
    4ff0:	81 30       	cpi	r24, 0x01	; 1
    4ff2:	91 05       	cpc	r25, r1
    4ff4:	59 f1       	breq	.+86     	; 0x504c <DIO_enumSetPinDirection+0x186>
    4ff6:	2d 81       	ldd	r18, Y+5	; 0x05
    4ff8:	3e 81       	ldd	r19, Y+6	; 0x06
    4ffa:	22 30       	cpi	r18, 0x02	; 2
    4ffc:	31 05       	cpc	r19, r1
    4ffe:	2c f4       	brge	.+10     	; 0x500a <DIO_enumSetPinDirection+0x144>
    5000:	8d 81       	ldd	r24, Y+5	; 0x05
    5002:	9e 81       	ldd	r25, Y+6	; 0x06
    5004:	00 97       	sbiw	r24, 0x00	; 0
    5006:	69 f0       	breq	.+26     	; 0x5022 <DIO_enumSetPinDirection+0x15c>
    5008:	63 c0       	rjmp	.+198    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
    500a:	2d 81       	ldd	r18, Y+5	; 0x05
    500c:	3e 81       	ldd	r19, Y+6	; 0x06
    500e:	22 30       	cpi	r18, 0x02	; 2
    5010:	31 05       	cpc	r19, r1
    5012:	89 f1       	breq	.+98     	; 0x5076 <DIO_enumSetPinDirection+0x1b0>
    5014:	8d 81       	ldd	r24, Y+5	; 0x05
    5016:	9e 81       	ldd	r25, Y+6	; 0x06
    5018:	83 30       	cpi	r24, 0x03	; 3
    501a:	91 05       	cpc	r25, r1
    501c:	09 f4       	brne	.+2      	; 0x5020 <DIO_enumSetPinDirection+0x15a>
    501e:	40 c0       	rjmp	.+128    	; 0x50a0 <DIO_enumSetPinDirection+0x1da>
    5020:	57 c0       	rjmp	.+174    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    5022:	aa e3       	ldi	r26, 0x3A	; 58
    5024:	b0 e0       	ldi	r27, 0x00	; 0
    5026:	ea e3       	ldi	r30, 0x3A	; 58
    5028:	f0 e0       	ldi	r31, 0x00	; 0
    502a:	80 81       	ld	r24, Z
    502c:	48 2f       	mov	r20, r24
    502e:	8b 81       	ldd	r24, Y+3	; 0x03
    5030:	28 2f       	mov	r18, r24
    5032:	30 e0       	ldi	r19, 0x00	; 0
    5034:	81 e0       	ldi	r24, 0x01	; 1
    5036:	90 e0       	ldi	r25, 0x00	; 0
    5038:	02 2e       	mov	r0, r18
    503a:	02 c0       	rjmp	.+4      	; 0x5040 <DIO_enumSetPinDirection+0x17a>
    503c:	88 0f       	add	r24, r24
    503e:	99 1f       	adc	r25, r25
    5040:	0a 94       	dec	r0
    5042:	e2 f7       	brpl	.-8      	; 0x503c <DIO_enumSetPinDirection+0x176>
    5044:	80 95       	com	r24
    5046:	84 23       	and	r24, r20
    5048:	8c 93       	st	X, r24
    504a:	42 c0       	rjmp	.+132    	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    504c:	a7 e3       	ldi	r26, 0x37	; 55
    504e:	b0 e0       	ldi	r27, 0x00	; 0
    5050:	e7 e3       	ldi	r30, 0x37	; 55
    5052:	f0 e0       	ldi	r31, 0x00	; 0
    5054:	80 81       	ld	r24, Z
    5056:	48 2f       	mov	r20, r24
    5058:	8b 81       	ldd	r24, Y+3	; 0x03
    505a:	28 2f       	mov	r18, r24
    505c:	30 e0       	ldi	r19, 0x00	; 0
    505e:	81 e0       	ldi	r24, 0x01	; 1
    5060:	90 e0       	ldi	r25, 0x00	; 0
    5062:	02 2e       	mov	r0, r18
    5064:	02 c0       	rjmp	.+4      	; 0x506a <DIO_enumSetPinDirection+0x1a4>
    5066:	88 0f       	add	r24, r24
    5068:	99 1f       	adc	r25, r25
    506a:	0a 94       	dec	r0
    506c:	e2 f7       	brpl	.-8      	; 0x5066 <DIO_enumSetPinDirection+0x1a0>
    506e:	80 95       	com	r24
    5070:	84 23       	and	r24, r20
    5072:	8c 93       	st	X, r24
    5074:	2d c0       	rjmp	.+90     	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    5076:	a4 e3       	ldi	r26, 0x34	; 52
    5078:	b0 e0       	ldi	r27, 0x00	; 0
    507a:	e4 e3       	ldi	r30, 0x34	; 52
    507c:	f0 e0       	ldi	r31, 0x00	; 0
    507e:	80 81       	ld	r24, Z
    5080:	48 2f       	mov	r20, r24
    5082:	8b 81       	ldd	r24, Y+3	; 0x03
    5084:	28 2f       	mov	r18, r24
    5086:	30 e0       	ldi	r19, 0x00	; 0
    5088:	81 e0       	ldi	r24, 0x01	; 1
    508a:	90 e0       	ldi	r25, 0x00	; 0
    508c:	02 2e       	mov	r0, r18
    508e:	02 c0       	rjmp	.+4      	; 0x5094 <DIO_enumSetPinDirection+0x1ce>
    5090:	88 0f       	add	r24, r24
    5092:	99 1f       	adc	r25, r25
    5094:	0a 94       	dec	r0
    5096:	e2 f7       	brpl	.-8      	; 0x5090 <DIO_enumSetPinDirection+0x1ca>
    5098:	80 95       	com	r24
    509a:	84 23       	and	r24, r20
    509c:	8c 93       	st	X, r24
    509e:	18 c0       	rjmp	.+48     	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    50a0:	a1 e3       	ldi	r26, 0x31	; 49
    50a2:	b0 e0       	ldi	r27, 0x00	; 0
    50a4:	e1 e3       	ldi	r30, 0x31	; 49
    50a6:	f0 e0       	ldi	r31, 0x00	; 0
    50a8:	80 81       	ld	r24, Z
    50aa:	48 2f       	mov	r20, r24
    50ac:	8b 81       	ldd	r24, Y+3	; 0x03
    50ae:	28 2f       	mov	r18, r24
    50b0:	30 e0       	ldi	r19, 0x00	; 0
    50b2:	81 e0       	ldi	r24, 0x01	; 1
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	02 2e       	mov	r0, r18
    50b8:	02 c0       	rjmp	.+4      	; 0x50be <DIO_enumSetPinDirection+0x1f8>
    50ba:	88 0f       	add	r24, r24
    50bc:	99 1f       	adc	r25, r25
    50be:	0a 94       	dec	r0
    50c0:	e2 f7       	brpl	.-8      	; 0x50ba <DIO_enumSetPinDirection+0x1f4>
    50c2:	80 95       	com	r24
    50c4:	84 23       	and	r24, r20
    50c6:	8c 93       	st	X, r24
    50c8:	03 c0       	rjmp	.+6      	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    50ca:	19 82       	std	Y+1, r1	; 0x01
    50cc:	01 c0       	rjmp	.+2      	; 0x50d0 <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    50ce:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    50d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    50d2:	28 96       	adiw	r28, 0x08	; 8
    50d4:	0f b6       	in	r0, 0x3f	; 63
    50d6:	f8 94       	cli
    50d8:	de bf       	out	0x3e, r29	; 62
    50da:	0f be       	out	0x3f, r0	; 63
    50dc:	cd bf       	out	0x3d, r28	; 61
    50de:	cf 91       	pop	r28
    50e0:	df 91       	pop	r29
    50e2:	08 95       	ret

000050e4 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    50e4:	df 93       	push	r29
    50e6:	cf 93       	push	r28
    50e8:	cd b7       	in	r28, 0x3d	; 61
    50ea:	de b7       	in	r29, 0x3e	; 62
    50ec:	28 97       	sbiw	r28, 0x08	; 8
    50ee:	0f b6       	in	r0, 0x3f	; 63
    50f0:	f8 94       	cli
    50f2:	de bf       	out	0x3e, r29	; 62
    50f4:	0f be       	out	0x3f, r0	; 63
    50f6:	cd bf       	out	0x3d, r28	; 61
    50f8:	8a 83       	std	Y+2, r24	; 0x02
    50fa:	6b 83       	std	Y+3, r22	; 0x03
    50fc:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    5102:	8a 81       	ldd	r24, Y+2	; 0x02
    5104:	84 30       	cpi	r24, 0x04	; 4
    5106:	08 f0       	brcs	.+2      	; 0x510a <DIO_enumSetPinValue+0x26>
    5108:	f1 c0       	rjmp	.+482    	; 0x52ec <DIO_enumSetPinValue+0x208>
    510a:	8b 81       	ldd	r24, Y+3	; 0x03
    510c:	88 30       	cpi	r24, 0x08	; 8
    510e:	08 f0       	brcs	.+2      	; 0x5112 <DIO_enumSetPinValue+0x2e>
    5110:	ed c0       	rjmp	.+474    	; 0x52ec <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    5112:	8c 81       	ldd	r24, Y+4	; 0x04
    5114:	81 30       	cpi	r24, 0x01	; 1
    5116:	09 f0       	breq	.+2      	; 0x511a <DIO_enumSetPinValue+0x36>
    5118:	6f c0       	rjmp	.+222    	; 0x51f8 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    511a:	8a 81       	ldd	r24, Y+2	; 0x02
    511c:	28 2f       	mov	r18, r24
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	38 87       	std	Y+8, r19	; 0x08
    5122:	2f 83       	std	Y+7, r18	; 0x07
    5124:	8f 81       	ldd	r24, Y+7	; 0x07
    5126:	98 85       	ldd	r25, Y+8	; 0x08
    5128:	81 30       	cpi	r24, 0x01	; 1
    512a:	91 05       	cpc	r25, r1
    512c:	49 f1       	breq	.+82     	; 0x5180 <DIO_enumSetPinValue+0x9c>
    512e:	2f 81       	ldd	r18, Y+7	; 0x07
    5130:	38 85       	ldd	r19, Y+8	; 0x08
    5132:	22 30       	cpi	r18, 0x02	; 2
    5134:	31 05       	cpc	r19, r1
    5136:	2c f4       	brge	.+10     	; 0x5142 <DIO_enumSetPinValue+0x5e>
    5138:	8f 81       	ldd	r24, Y+7	; 0x07
    513a:	98 85       	ldd	r25, Y+8	; 0x08
    513c:	00 97       	sbiw	r24, 0x00	; 0
    513e:	61 f0       	breq	.+24     	; 0x5158 <DIO_enumSetPinValue+0x74>
    5140:	d6 c0       	rjmp	.+428    	; 0x52ee <DIO_enumSetPinValue+0x20a>
    5142:	2f 81       	ldd	r18, Y+7	; 0x07
    5144:	38 85       	ldd	r19, Y+8	; 0x08
    5146:	22 30       	cpi	r18, 0x02	; 2
    5148:	31 05       	cpc	r19, r1
    514a:	71 f1       	breq	.+92     	; 0x51a8 <DIO_enumSetPinValue+0xc4>
    514c:	8f 81       	ldd	r24, Y+7	; 0x07
    514e:	98 85       	ldd	r25, Y+8	; 0x08
    5150:	83 30       	cpi	r24, 0x03	; 3
    5152:	91 05       	cpc	r25, r1
    5154:	e9 f1       	breq	.+122    	; 0x51d0 <DIO_enumSetPinValue+0xec>
    5156:	cb c0       	rjmp	.+406    	; 0x52ee <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    5158:	ab e3       	ldi	r26, 0x3B	; 59
    515a:	b0 e0       	ldi	r27, 0x00	; 0
    515c:	eb e3       	ldi	r30, 0x3B	; 59
    515e:	f0 e0       	ldi	r31, 0x00	; 0
    5160:	80 81       	ld	r24, Z
    5162:	48 2f       	mov	r20, r24
    5164:	8b 81       	ldd	r24, Y+3	; 0x03
    5166:	28 2f       	mov	r18, r24
    5168:	30 e0       	ldi	r19, 0x00	; 0
    516a:	81 e0       	ldi	r24, 0x01	; 1
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	02 2e       	mov	r0, r18
    5170:	02 c0       	rjmp	.+4      	; 0x5176 <DIO_enumSetPinValue+0x92>
    5172:	88 0f       	add	r24, r24
    5174:	99 1f       	adc	r25, r25
    5176:	0a 94       	dec	r0
    5178:	e2 f7       	brpl	.-8      	; 0x5172 <DIO_enumSetPinValue+0x8e>
    517a:	84 2b       	or	r24, r20
    517c:	8c 93       	st	X, r24
    517e:	b7 c0       	rjmp	.+366    	; 0x52ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    5180:	a8 e3       	ldi	r26, 0x38	; 56
    5182:	b0 e0       	ldi	r27, 0x00	; 0
    5184:	e8 e3       	ldi	r30, 0x38	; 56
    5186:	f0 e0       	ldi	r31, 0x00	; 0
    5188:	80 81       	ld	r24, Z
    518a:	48 2f       	mov	r20, r24
    518c:	8b 81       	ldd	r24, Y+3	; 0x03
    518e:	28 2f       	mov	r18, r24
    5190:	30 e0       	ldi	r19, 0x00	; 0
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	02 2e       	mov	r0, r18
    5198:	02 c0       	rjmp	.+4      	; 0x519e <DIO_enumSetPinValue+0xba>
    519a:	88 0f       	add	r24, r24
    519c:	99 1f       	adc	r25, r25
    519e:	0a 94       	dec	r0
    51a0:	e2 f7       	brpl	.-8      	; 0x519a <DIO_enumSetPinValue+0xb6>
    51a2:	84 2b       	or	r24, r20
    51a4:	8c 93       	st	X, r24
    51a6:	a3 c0       	rjmp	.+326    	; 0x52ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    51a8:	a5 e3       	ldi	r26, 0x35	; 53
    51aa:	b0 e0       	ldi	r27, 0x00	; 0
    51ac:	e5 e3       	ldi	r30, 0x35	; 53
    51ae:	f0 e0       	ldi	r31, 0x00	; 0
    51b0:	80 81       	ld	r24, Z
    51b2:	48 2f       	mov	r20, r24
    51b4:	8b 81       	ldd	r24, Y+3	; 0x03
    51b6:	28 2f       	mov	r18, r24
    51b8:	30 e0       	ldi	r19, 0x00	; 0
    51ba:	81 e0       	ldi	r24, 0x01	; 1
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	02 2e       	mov	r0, r18
    51c0:	02 c0       	rjmp	.+4      	; 0x51c6 <DIO_enumSetPinValue+0xe2>
    51c2:	88 0f       	add	r24, r24
    51c4:	99 1f       	adc	r25, r25
    51c6:	0a 94       	dec	r0
    51c8:	e2 f7       	brpl	.-8      	; 0x51c2 <DIO_enumSetPinValue+0xde>
    51ca:	84 2b       	or	r24, r20
    51cc:	8c 93       	st	X, r24
    51ce:	8f c0       	rjmp	.+286    	; 0x52ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    51d0:	a2 e3       	ldi	r26, 0x32	; 50
    51d2:	b0 e0       	ldi	r27, 0x00	; 0
    51d4:	e2 e3       	ldi	r30, 0x32	; 50
    51d6:	f0 e0       	ldi	r31, 0x00	; 0
    51d8:	80 81       	ld	r24, Z
    51da:	48 2f       	mov	r20, r24
    51dc:	8b 81       	ldd	r24, Y+3	; 0x03
    51de:	28 2f       	mov	r18, r24
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	81 e0       	ldi	r24, 0x01	; 1
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	02 2e       	mov	r0, r18
    51e8:	02 c0       	rjmp	.+4      	; 0x51ee <DIO_enumSetPinValue+0x10a>
    51ea:	88 0f       	add	r24, r24
    51ec:	99 1f       	adc	r25, r25
    51ee:	0a 94       	dec	r0
    51f0:	e2 f7       	brpl	.-8      	; 0x51ea <DIO_enumSetPinValue+0x106>
    51f2:	84 2b       	or	r24, r20
    51f4:	8c 93       	st	X, r24
    51f6:	7b c0       	rjmp	.+246    	; 0x52ee <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    51f8:	8c 81       	ldd	r24, Y+4	; 0x04
    51fa:	88 23       	and	r24, r24
    51fc:	09 f0       	breq	.+2      	; 0x5200 <DIO_enumSetPinValue+0x11c>
    51fe:	74 c0       	rjmp	.+232    	; 0x52e8 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    5200:	8a 81       	ldd	r24, Y+2	; 0x02
    5202:	28 2f       	mov	r18, r24
    5204:	30 e0       	ldi	r19, 0x00	; 0
    5206:	3e 83       	std	Y+6, r19	; 0x06
    5208:	2d 83       	std	Y+5, r18	; 0x05
    520a:	8d 81       	ldd	r24, Y+5	; 0x05
    520c:	9e 81       	ldd	r25, Y+6	; 0x06
    520e:	81 30       	cpi	r24, 0x01	; 1
    5210:	91 05       	cpc	r25, r1
    5212:	59 f1       	breq	.+86     	; 0x526a <DIO_enumSetPinValue+0x186>
    5214:	2d 81       	ldd	r18, Y+5	; 0x05
    5216:	3e 81       	ldd	r19, Y+6	; 0x06
    5218:	22 30       	cpi	r18, 0x02	; 2
    521a:	31 05       	cpc	r19, r1
    521c:	2c f4       	brge	.+10     	; 0x5228 <DIO_enumSetPinValue+0x144>
    521e:	8d 81       	ldd	r24, Y+5	; 0x05
    5220:	9e 81       	ldd	r25, Y+6	; 0x06
    5222:	00 97       	sbiw	r24, 0x00	; 0
    5224:	69 f0       	breq	.+26     	; 0x5240 <DIO_enumSetPinValue+0x15c>
    5226:	63 c0       	rjmp	.+198    	; 0x52ee <DIO_enumSetPinValue+0x20a>
    5228:	2d 81       	ldd	r18, Y+5	; 0x05
    522a:	3e 81       	ldd	r19, Y+6	; 0x06
    522c:	22 30       	cpi	r18, 0x02	; 2
    522e:	31 05       	cpc	r19, r1
    5230:	89 f1       	breq	.+98     	; 0x5294 <DIO_enumSetPinValue+0x1b0>
    5232:	8d 81       	ldd	r24, Y+5	; 0x05
    5234:	9e 81       	ldd	r25, Y+6	; 0x06
    5236:	83 30       	cpi	r24, 0x03	; 3
    5238:	91 05       	cpc	r25, r1
    523a:	09 f4       	brne	.+2      	; 0x523e <DIO_enumSetPinValue+0x15a>
    523c:	40 c0       	rjmp	.+128    	; 0x52be <DIO_enumSetPinValue+0x1da>
    523e:	57 c0       	rjmp	.+174    	; 0x52ee <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    5240:	ab e3       	ldi	r26, 0x3B	; 59
    5242:	b0 e0       	ldi	r27, 0x00	; 0
    5244:	eb e3       	ldi	r30, 0x3B	; 59
    5246:	f0 e0       	ldi	r31, 0x00	; 0
    5248:	80 81       	ld	r24, Z
    524a:	48 2f       	mov	r20, r24
    524c:	8b 81       	ldd	r24, Y+3	; 0x03
    524e:	28 2f       	mov	r18, r24
    5250:	30 e0       	ldi	r19, 0x00	; 0
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	90 e0       	ldi	r25, 0x00	; 0
    5256:	02 2e       	mov	r0, r18
    5258:	02 c0       	rjmp	.+4      	; 0x525e <DIO_enumSetPinValue+0x17a>
    525a:	88 0f       	add	r24, r24
    525c:	99 1f       	adc	r25, r25
    525e:	0a 94       	dec	r0
    5260:	e2 f7       	brpl	.-8      	; 0x525a <DIO_enumSetPinValue+0x176>
    5262:	80 95       	com	r24
    5264:	84 23       	and	r24, r20
    5266:	8c 93       	st	X, r24
    5268:	42 c0       	rjmp	.+132    	; 0x52ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    526a:	a8 e3       	ldi	r26, 0x38	; 56
    526c:	b0 e0       	ldi	r27, 0x00	; 0
    526e:	e8 e3       	ldi	r30, 0x38	; 56
    5270:	f0 e0       	ldi	r31, 0x00	; 0
    5272:	80 81       	ld	r24, Z
    5274:	48 2f       	mov	r20, r24
    5276:	8b 81       	ldd	r24, Y+3	; 0x03
    5278:	28 2f       	mov	r18, r24
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	81 e0       	ldi	r24, 0x01	; 1
    527e:	90 e0       	ldi	r25, 0x00	; 0
    5280:	02 2e       	mov	r0, r18
    5282:	02 c0       	rjmp	.+4      	; 0x5288 <DIO_enumSetPinValue+0x1a4>
    5284:	88 0f       	add	r24, r24
    5286:	99 1f       	adc	r25, r25
    5288:	0a 94       	dec	r0
    528a:	e2 f7       	brpl	.-8      	; 0x5284 <DIO_enumSetPinValue+0x1a0>
    528c:	80 95       	com	r24
    528e:	84 23       	and	r24, r20
    5290:	8c 93       	st	X, r24
    5292:	2d c0       	rjmp	.+90     	; 0x52ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    5294:	a5 e3       	ldi	r26, 0x35	; 53
    5296:	b0 e0       	ldi	r27, 0x00	; 0
    5298:	e5 e3       	ldi	r30, 0x35	; 53
    529a:	f0 e0       	ldi	r31, 0x00	; 0
    529c:	80 81       	ld	r24, Z
    529e:	48 2f       	mov	r20, r24
    52a0:	8b 81       	ldd	r24, Y+3	; 0x03
    52a2:	28 2f       	mov	r18, r24
    52a4:	30 e0       	ldi	r19, 0x00	; 0
    52a6:	81 e0       	ldi	r24, 0x01	; 1
    52a8:	90 e0       	ldi	r25, 0x00	; 0
    52aa:	02 2e       	mov	r0, r18
    52ac:	02 c0       	rjmp	.+4      	; 0x52b2 <DIO_enumSetPinValue+0x1ce>
    52ae:	88 0f       	add	r24, r24
    52b0:	99 1f       	adc	r25, r25
    52b2:	0a 94       	dec	r0
    52b4:	e2 f7       	brpl	.-8      	; 0x52ae <DIO_enumSetPinValue+0x1ca>
    52b6:	80 95       	com	r24
    52b8:	84 23       	and	r24, r20
    52ba:	8c 93       	st	X, r24
    52bc:	18 c0       	rjmp	.+48     	; 0x52ee <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    52be:	a2 e3       	ldi	r26, 0x32	; 50
    52c0:	b0 e0       	ldi	r27, 0x00	; 0
    52c2:	e2 e3       	ldi	r30, 0x32	; 50
    52c4:	f0 e0       	ldi	r31, 0x00	; 0
    52c6:	80 81       	ld	r24, Z
    52c8:	48 2f       	mov	r20, r24
    52ca:	8b 81       	ldd	r24, Y+3	; 0x03
    52cc:	28 2f       	mov	r18, r24
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	81 e0       	ldi	r24, 0x01	; 1
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	02 2e       	mov	r0, r18
    52d6:	02 c0       	rjmp	.+4      	; 0x52dc <DIO_enumSetPinValue+0x1f8>
    52d8:	88 0f       	add	r24, r24
    52da:	99 1f       	adc	r25, r25
    52dc:	0a 94       	dec	r0
    52de:	e2 f7       	brpl	.-8      	; 0x52d8 <DIO_enumSetPinValue+0x1f4>
    52e0:	80 95       	com	r24
    52e2:	84 23       	and	r24, r20
    52e4:	8c 93       	st	X, r24
    52e6:	03 c0       	rjmp	.+6      	; 0x52ee <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    52e8:	19 82       	std	Y+1, r1	; 0x01
    52ea:	01 c0       	rjmp	.+2      	; 0x52ee <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    52ec:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    52ee:	89 81       	ldd	r24, Y+1	; 0x01

}
    52f0:	28 96       	adiw	r28, 0x08	; 8
    52f2:	0f b6       	in	r0, 0x3f	; 63
    52f4:	f8 94       	cli
    52f6:	de bf       	out	0x3e, r29	; 62
    52f8:	0f be       	out	0x3f, r0	; 63
    52fa:	cd bf       	out	0x3d, r28	; 61
    52fc:	cf 91       	pop	r28
    52fe:	df 91       	pop	r29
    5300:	08 95       	ret

00005302 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    5302:	df 93       	push	r29
    5304:	cf 93       	push	r28
    5306:	cd b7       	in	r28, 0x3d	; 61
    5308:	de b7       	in	r29, 0x3e	; 62
    530a:	27 97       	sbiw	r28, 0x07	; 7
    530c:	0f b6       	in	r0, 0x3f	; 63
    530e:	f8 94       	cli
    5310:	de bf       	out	0x3e, r29	; 62
    5312:	0f be       	out	0x3f, r0	; 63
    5314:	cd bf       	out	0x3d, r28	; 61
    5316:	8a 83       	std	Y+2, r24	; 0x02
    5318:	6b 83       	std	Y+3, r22	; 0x03
    531a:	5d 83       	std	Y+5, r21	; 0x05
    531c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    531e:	81 e0       	ldi	r24, 0x01	; 1
    5320:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    5322:	8a 81       	ldd	r24, Y+2	; 0x02
    5324:	84 30       	cpi	r24, 0x04	; 4
    5326:	08 f0       	brcs	.+2      	; 0x532a <DIO_enumGetPinValue+0x28>
    5328:	a6 c0       	rjmp	.+332    	; 0x5476 <DIO_enumGetPinValue+0x174>
    532a:	8b 81       	ldd	r24, Y+3	; 0x03
    532c:	88 30       	cpi	r24, 0x08	; 8
    532e:	08 f0       	brcs	.+2      	; 0x5332 <DIO_enumGetPinValue+0x30>
    5330:	a2 c0       	rjmp	.+324    	; 0x5476 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    5332:	8a 81       	ldd	r24, Y+2	; 0x02
    5334:	28 2f       	mov	r18, r24
    5336:	30 e0       	ldi	r19, 0x00	; 0
    5338:	3f 83       	std	Y+7, r19	; 0x07
    533a:	2e 83       	std	Y+6, r18	; 0x06
    533c:	4e 81       	ldd	r20, Y+6	; 0x06
    533e:	5f 81       	ldd	r21, Y+7	; 0x07
    5340:	41 30       	cpi	r20, 0x01	; 1
    5342:	51 05       	cpc	r21, r1
    5344:	c1 f1       	breq	.+112    	; 0x53b6 <DIO_enumGetPinValue+0xb4>
    5346:	8e 81       	ldd	r24, Y+6	; 0x06
    5348:	9f 81       	ldd	r25, Y+7	; 0x07
    534a:	82 30       	cpi	r24, 0x02	; 2
    534c:	91 05       	cpc	r25, r1
    534e:	34 f4       	brge	.+12     	; 0x535c <DIO_enumGetPinValue+0x5a>
    5350:	2e 81       	ldd	r18, Y+6	; 0x06
    5352:	3f 81       	ldd	r19, Y+7	; 0x07
    5354:	21 15       	cp	r18, r1
    5356:	31 05       	cpc	r19, r1
    5358:	71 f0       	breq	.+28     	; 0x5376 <DIO_enumGetPinValue+0x74>
    535a:	8e c0       	rjmp	.+284    	; 0x5478 <DIO_enumGetPinValue+0x176>
    535c:	4e 81       	ldd	r20, Y+6	; 0x06
    535e:	5f 81       	ldd	r21, Y+7	; 0x07
    5360:	42 30       	cpi	r20, 0x02	; 2
    5362:	51 05       	cpc	r21, r1
    5364:	09 f4       	brne	.+2      	; 0x5368 <DIO_enumGetPinValue+0x66>
    5366:	47 c0       	rjmp	.+142    	; 0x53f6 <DIO_enumGetPinValue+0xf4>
    5368:	8e 81       	ldd	r24, Y+6	; 0x06
    536a:	9f 81       	ldd	r25, Y+7	; 0x07
    536c:	83 30       	cpi	r24, 0x03	; 3
    536e:	91 05       	cpc	r25, r1
    5370:	09 f4       	brne	.+2      	; 0x5374 <DIO_enumGetPinValue+0x72>
    5372:	61 c0       	rjmp	.+194    	; 0x5436 <DIO_enumGetPinValue+0x134>
    5374:	81 c0       	rjmp	.+258    	; 0x5478 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    5376:	e9 e3       	ldi	r30, 0x39	; 57
    5378:	f0 e0       	ldi	r31, 0x00	; 0
    537a:	80 81       	ld	r24, Z
    537c:	48 2f       	mov	r20, r24
    537e:	50 e0       	ldi	r21, 0x00	; 0
    5380:	8b 81       	ldd	r24, Y+3	; 0x03
    5382:	28 2f       	mov	r18, r24
    5384:	30 e0       	ldi	r19, 0x00	; 0
    5386:	81 e0       	ldi	r24, 0x01	; 1
    5388:	90 e0       	ldi	r25, 0x00	; 0
    538a:	02 c0       	rjmp	.+4      	; 0x5390 <DIO_enumGetPinValue+0x8e>
    538c:	88 0f       	add	r24, r24
    538e:	99 1f       	adc	r25, r25
    5390:	2a 95       	dec	r18
    5392:	e2 f7       	brpl	.-8      	; 0x538c <DIO_enumGetPinValue+0x8a>
    5394:	9a 01       	movw	r18, r20
    5396:	28 23       	and	r18, r24
    5398:	39 23       	and	r19, r25
    539a:	8b 81       	ldd	r24, Y+3	; 0x03
    539c:	88 2f       	mov	r24, r24
    539e:	90 e0       	ldi	r25, 0x00	; 0
    53a0:	a9 01       	movw	r20, r18
    53a2:	02 c0       	rjmp	.+4      	; 0x53a8 <DIO_enumGetPinValue+0xa6>
    53a4:	55 95       	asr	r21
    53a6:	47 95       	ror	r20
    53a8:	8a 95       	dec	r24
    53aa:	e2 f7       	brpl	.-8      	; 0x53a4 <DIO_enumGetPinValue+0xa2>
    53ac:	ca 01       	movw	r24, r20
    53ae:	ec 81       	ldd	r30, Y+4	; 0x04
    53b0:	fd 81       	ldd	r31, Y+5	; 0x05
    53b2:	80 83       	st	Z, r24
    53b4:	61 c0       	rjmp	.+194    	; 0x5478 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    53b6:	e6 e3       	ldi	r30, 0x36	; 54
    53b8:	f0 e0       	ldi	r31, 0x00	; 0
    53ba:	80 81       	ld	r24, Z
    53bc:	48 2f       	mov	r20, r24
    53be:	50 e0       	ldi	r21, 0x00	; 0
    53c0:	8b 81       	ldd	r24, Y+3	; 0x03
    53c2:	28 2f       	mov	r18, r24
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	90 e0       	ldi	r25, 0x00	; 0
    53ca:	02 c0       	rjmp	.+4      	; 0x53d0 <DIO_enumGetPinValue+0xce>
    53cc:	88 0f       	add	r24, r24
    53ce:	99 1f       	adc	r25, r25
    53d0:	2a 95       	dec	r18
    53d2:	e2 f7       	brpl	.-8      	; 0x53cc <DIO_enumGetPinValue+0xca>
    53d4:	9a 01       	movw	r18, r20
    53d6:	28 23       	and	r18, r24
    53d8:	39 23       	and	r19, r25
    53da:	8b 81       	ldd	r24, Y+3	; 0x03
    53dc:	88 2f       	mov	r24, r24
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	a9 01       	movw	r20, r18
    53e2:	02 c0       	rjmp	.+4      	; 0x53e8 <DIO_enumGetPinValue+0xe6>
    53e4:	55 95       	asr	r21
    53e6:	47 95       	ror	r20
    53e8:	8a 95       	dec	r24
    53ea:	e2 f7       	brpl	.-8      	; 0x53e4 <DIO_enumGetPinValue+0xe2>
    53ec:	ca 01       	movw	r24, r20
    53ee:	ec 81       	ldd	r30, Y+4	; 0x04
    53f0:	fd 81       	ldd	r31, Y+5	; 0x05
    53f2:	80 83       	st	Z, r24
    53f4:	41 c0       	rjmp	.+130    	; 0x5478 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    53f6:	e3 e3       	ldi	r30, 0x33	; 51
    53f8:	f0 e0       	ldi	r31, 0x00	; 0
    53fa:	80 81       	ld	r24, Z
    53fc:	48 2f       	mov	r20, r24
    53fe:	50 e0       	ldi	r21, 0x00	; 0
    5400:	8b 81       	ldd	r24, Y+3	; 0x03
    5402:	28 2f       	mov	r18, r24
    5404:	30 e0       	ldi	r19, 0x00	; 0
    5406:	81 e0       	ldi	r24, 0x01	; 1
    5408:	90 e0       	ldi	r25, 0x00	; 0
    540a:	02 c0       	rjmp	.+4      	; 0x5410 <DIO_enumGetPinValue+0x10e>
    540c:	88 0f       	add	r24, r24
    540e:	99 1f       	adc	r25, r25
    5410:	2a 95       	dec	r18
    5412:	e2 f7       	brpl	.-8      	; 0x540c <DIO_enumGetPinValue+0x10a>
    5414:	9a 01       	movw	r18, r20
    5416:	28 23       	and	r18, r24
    5418:	39 23       	and	r19, r25
    541a:	8b 81       	ldd	r24, Y+3	; 0x03
    541c:	88 2f       	mov	r24, r24
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	a9 01       	movw	r20, r18
    5422:	02 c0       	rjmp	.+4      	; 0x5428 <DIO_enumGetPinValue+0x126>
    5424:	55 95       	asr	r21
    5426:	47 95       	ror	r20
    5428:	8a 95       	dec	r24
    542a:	e2 f7       	brpl	.-8      	; 0x5424 <DIO_enumGetPinValue+0x122>
    542c:	ca 01       	movw	r24, r20
    542e:	ec 81       	ldd	r30, Y+4	; 0x04
    5430:	fd 81       	ldd	r31, Y+5	; 0x05
    5432:	80 83       	st	Z, r24
    5434:	21 c0       	rjmp	.+66     	; 0x5478 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    5436:	e0 e3       	ldi	r30, 0x30	; 48
    5438:	f0 e0       	ldi	r31, 0x00	; 0
    543a:	80 81       	ld	r24, Z
    543c:	48 2f       	mov	r20, r24
    543e:	50 e0       	ldi	r21, 0x00	; 0
    5440:	8b 81       	ldd	r24, Y+3	; 0x03
    5442:	28 2f       	mov	r18, r24
    5444:	30 e0       	ldi	r19, 0x00	; 0
    5446:	81 e0       	ldi	r24, 0x01	; 1
    5448:	90 e0       	ldi	r25, 0x00	; 0
    544a:	02 c0       	rjmp	.+4      	; 0x5450 <DIO_enumGetPinValue+0x14e>
    544c:	88 0f       	add	r24, r24
    544e:	99 1f       	adc	r25, r25
    5450:	2a 95       	dec	r18
    5452:	e2 f7       	brpl	.-8      	; 0x544c <DIO_enumGetPinValue+0x14a>
    5454:	9a 01       	movw	r18, r20
    5456:	28 23       	and	r18, r24
    5458:	39 23       	and	r19, r25
    545a:	8b 81       	ldd	r24, Y+3	; 0x03
    545c:	88 2f       	mov	r24, r24
    545e:	90 e0       	ldi	r25, 0x00	; 0
    5460:	a9 01       	movw	r20, r18
    5462:	02 c0       	rjmp	.+4      	; 0x5468 <DIO_enumGetPinValue+0x166>
    5464:	55 95       	asr	r21
    5466:	47 95       	ror	r20
    5468:	8a 95       	dec	r24
    546a:	e2 f7       	brpl	.-8      	; 0x5464 <DIO_enumGetPinValue+0x162>
    546c:	ca 01       	movw	r24, r20
    546e:	ec 81       	ldd	r30, Y+4	; 0x04
    5470:	fd 81       	ldd	r31, Y+5	; 0x05
    5472:	80 83       	st	Z, r24
    5474:	01 c0       	rjmp	.+2      	; 0x5478 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    5476:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    5478:	89 81       	ldd	r24, Y+1	; 0x01
}
    547a:	27 96       	adiw	r28, 0x07	; 7
    547c:	0f b6       	in	r0, 0x3f	; 63
    547e:	f8 94       	cli
    5480:	de bf       	out	0x3e, r29	; 62
    5482:	0f be       	out	0x3f, r0	; 63
    5484:	cd bf       	out	0x3d, r28	; 61
    5486:	cf 91       	pop	r28
    5488:	df 91       	pop	r29
    548a:	08 95       	ret

0000548c <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    548c:	df 93       	push	r29
    548e:	cf 93       	push	r28
    5490:	00 d0       	rcall	.+0      	; 0x5492 <DIO_enumTogglePinValue+0x6>
    5492:	00 d0       	rcall	.+0      	; 0x5494 <DIO_enumTogglePinValue+0x8>
    5494:	0f 92       	push	r0
    5496:	cd b7       	in	r28, 0x3d	; 61
    5498:	de b7       	in	r29, 0x3e	; 62
    549a:	8a 83       	std	Y+2, r24	; 0x02
    549c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    54a2:	8b 81       	ldd	r24, Y+3	; 0x03
    54a4:	88 30       	cpi	r24, 0x08	; 8
    54a6:	08 f0       	brcs	.+2      	; 0x54aa <DIO_enumTogglePinValue+0x1e>
    54a8:	6f c0       	rjmp	.+222    	; 0x5588 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    54aa:	8a 81       	ldd	r24, Y+2	; 0x02
    54ac:	28 2f       	mov	r18, r24
    54ae:	30 e0       	ldi	r19, 0x00	; 0
    54b0:	3d 83       	std	Y+5, r19	; 0x05
    54b2:	2c 83       	std	Y+4, r18	; 0x04
    54b4:	8c 81       	ldd	r24, Y+4	; 0x04
    54b6:	9d 81       	ldd	r25, Y+5	; 0x05
    54b8:	81 30       	cpi	r24, 0x01	; 1
    54ba:	91 05       	cpc	r25, r1
    54bc:	49 f1       	breq	.+82     	; 0x5510 <DIO_enumTogglePinValue+0x84>
    54be:	2c 81       	ldd	r18, Y+4	; 0x04
    54c0:	3d 81       	ldd	r19, Y+5	; 0x05
    54c2:	22 30       	cpi	r18, 0x02	; 2
    54c4:	31 05       	cpc	r19, r1
    54c6:	2c f4       	brge	.+10     	; 0x54d2 <DIO_enumTogglePinValue+0x46>
    54c8:	8c 81       	ldd	r24, Y+4	; 0x04
    54ca:	9d 81       	ldd	r25, Y+5	; 0x05
    54cc:	00 97       	sbiw	r24, 0x00	; 0
    54ce:	61 f0       	breq	.+24     	; 0x54e8 <DIO_enumTogglePinValue+0x5c>
    54d0:	5c c0       	rjmp	.+184    	; 0x558a <DIO_enumTogglePinValue+0xfe>
    54d2:	2c 81       	ldd	r18, Y+4	; 0x04
    54d4:	3d 81       	ldd	r19, Y+5	; 0x05
    54d6:	22 30       	cpi	r18, 0x02	; 2
    54d8:	31 05       	cpc	r19, r1
    54da:	71 f1       	breq	.+92     	; 0x5538 <DIO_enumTogglePinValue+0xac>
    54dc:	8c 81       	ldd	r24, Y+4	; 0x04
    54de:	9d 81       	ldd	r25, Y+5	; 0x05
    54e0:	83 30       	cpi	r24, 0x03	; 3
    54e2:	91 05       	cpc	r25, r1
    54e4:	e9 f1       	breq	.+122    	; 0x5560 <DIO_enumTogglePinValue+0xd4>
    54e6:	51 c0       	rjmp	.+162    	; 0x558a <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    54e8:	ab e3       	ldi	r26, 0x3B	; 59
    54ea:	b0 e0       	ldi	r27, 0x00	; 0
    54ec:	eb e3       	ldi	r30, 0x3B	; 59
    54ee:	f0 e0       	ldi	r31, 0x00	; 0
    54f0:	80 81       	ld	r24, Z
    54f2:	48 2f       	mov	r20, r24
    54f4:	8b 81       	ldd	r24, Y+3	; 0x03
    54f6:	28 2f       	mov	r18, r24
    54f8:	30 e0       	ldi	r19, 0x00	; 0
    54fa:	81 e0       	ldi	r24, 0x01	; 1
    54fc:	90 e0       	ldi	r25, 0x00	; 0
    54fe:	02 2e       	mov	r0, r18
    5500:	02 c0       	rjmp	.+4      	; 0x5506 <DIO_enumTogglePinValue+0x7a>
    5502:	88 0f       	add	r24, r24
    5504:	99 1f       	adc	r25, r25
    5506:	0a 94       	dec	r0
    5508:	e2 f7       	brpl	.-8      	; 0x5502 <DIO_enumTogglePinValue+0x76>
    550a:	84 27       	eor	r24, r20
    550c:	8c 93       	st	X, r24
    550e:	3d c0       	rjmp	.+122    	; 0x558a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    5510:	a8 e3       	ldi	r26, 0x38	; 56
    5512:	b0 e0       	ldi	r27, 0x00	; 0
    5514:	e8 e3       	ldi	r30, 0x38	; 56
    5516:	f0 e0       	ldi	r31, 0x00	; 0
    5518:	80 81       	ld	r24, Z
    551a:	48 2f       	mov	r20, r24
    551c:	8b 81       	ldd	r24, Y+3	; 0x03
    551e:	28 2f       	mov	r18, r24
    5520:	30 e0       	ldi	r19, 0x00	; 0
    5522:	81 e0       	ldi	r24, 0x01	; 1
    5524:	90 e0       	ldi	r25, 0x00	; 0
    5526:	02 2e       	mov	r0, r18
    5528:	02 c0       	rjmp	.+4      	; 0x552e <DIO_enumTogglePinValue+0xa2>
    552a:	88 0f       	add	r24, r24
    552c:	99 1f       	adc	r25, r25
    552e:	0a 94       	dec	r0
    5530:	e2 f7       	brpl	.-8      	; 0x552a <DIO_enumTogglePinValue+0x9e>
    5532:	84 27       	eor	r24, r20
    5534:	8c 93       	st	X, r24
    5536:	29 c0       	rjmp	.+82     	; 0x558a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    5538:	a5 e3       	ldi	r26, 0x35	; 53
    553a:	b0 e0       	ldi	r27, 0x00	; 0
    553c:	e5 e3       	ldi	r30, 0x35	; 53
    553e:	f0 e0       	ldi	r31, 0x00	; 0
    5540:	80 81       	ld	r24, Z
    5542:	48 2f       	mov	r20, r24
    5544:	8b 81       	ldd	r24, Y+3	; 0x03
    5546:	28 2f       	mov	r18, r24
    5548:	30 e0       	ldi	r19, 0x00	; 0
    554a:	81 e0       	ldi	r24, 0x01	; 1
    554c:	90 e0       	ldi	r25, 0x00	; 0
    554e:	02 2e       	mov	r0, r18
    5550:	02 c0       	rjmp	.+4      	; 0x5556 <DIO_enumTogglePinValue+0xca>
    5552:	88 0f       	add	r24, r24
    5554:	99 1f       	adc	r25, r25
    5556:	0a 94       	dec	r0
    5558:	e2 f7       	brpl	.-8      	; 0x5552 <DIO_enumTogglePinValue+0xc6>
    555a:	84 27       	eor	r24, r20
    555c:	8c 93       	st	X, r24
    555e:	15 c0       	rjmp	.+42     	; 0x558a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    5560:	a2 e3       	ldi	r26, 0x32	; 50
    5562:	b0 e0       	ldi	r27, 0x00	; 0
    5564:	e2 e3       	ldi	r30, 0x32	; 50
    5566:	f0 e0       	ldi	r31, 0x00	; 0
    5568:	80 81       	ld	r24, Z
    556a:	48 2f       	mov	r20, r24
    556c:	8b 81       	ldd	r24, Y+3	; 0x03
    556e:	28 2f       	mov	r18, r24
    5570:	30 e0       	ldi	r19, 0x00	; 0
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	02 2e       	mov	r0, r18
    5578:	02 c0       	rjmp	.+4      	; 0x557e <DIO_enumTogglePinValue+0xf2>
    557a:	88 0f       	add	r24, r24
    557c:	99 1f       	adc	r25, r25
    557e:	0a 94       	dec	r0
    5580:	e2 f7       	brpl	.-8      	; 0x557a <DIO_enumTogglePinValue+0xee>
    5582:	84 27       	eor	r24, r20
    5584:	8c 93       	st	X, r24
    5586:	01 c0       	rjmp	.+2      	; 0x558a <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    5588:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    558a:	89 81       	ldd	r24, Y+1	; 0x01
}
    558c:	0f 90       	pop	r0
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	0f 90       	pop	r0
    5594:	0f 90       	pop	r0
    5596:	cf 91       	pop	r28
    5598:	df 91       	pop	r29
    559a:	08 95       	ret

0000559c <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    559c:	df 93       	push	r29
    559e:	cf 93       	push	r28
    55a0:	00 d0       	rcall	.+0      	; 0x55a2 <DIO_enumConnectPullup+0x6>
    55a2:	00 d0       	rcall	.+0      	; 0x55a4 <DIO_enumConnectPullup+0x8>
    55a4:	00 d0       	rcall	.+0      	; 0x55a6 <DIO_enumConnectPullup+0xa>
    55a6:	cd b7       	in	r28, 0x3d	; 61
    55a8:	de b7       	in	r29, 0x3e	; 62
    55aa:	8a 83       	std	Y+2, r24	; 0x02
    55ac:	6b 83       	std	Y+3, r22	; 0x03
    55ae:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    55b0:	81 e0       	ldi	r24, 0x01	; 1
    55b2:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    55b4:	8a 81       	ldd	r24, Y+2	; 0x02
    55b6:	84 30       	cpi	r24, 0x04	; 4
    55b8:	08 f0       	brcs	.+2      	; 0x55bc <DIO_enumConnectPullup+0x20>
    55ba:	3e c1       	rjmp	.+636    	; 0x5838 <DIO_enumConnectPullup+0x29c>
    55bc:	8b 81       	ldd	r24, Y+3	; 0x03
    55be:	88 30       	cpi	r24, 0x08	; 8
    55c0:	08 f0       	brcs	.+2      	; 0x55c4 <DIO_enumConnectPullup+0x28>
    55c2:	3a c1       	rjmp	.+628    	; 0x5838 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    55c4:	8a 81       	ldd	r24, Y+2	; 0x02
    55c6:	28 2f       	mov	r18, r24
    55c8:	30 e0       	ldi	r19, 0x00	; 0
    55ca:	3e 83       	std	Y+6, r19	; 0x06
    55cc:	2d 83       	std	Y+5, r18	; 0x05
    55ce:	8d 81       	ldd	r24, Y+5	; 0x05
    55d0:	9e 81       	ldd	r25, Y+6	; 0x06
    55d2:	81 30       	cpi	r24, 0x01	; 1
    55d4:	91 05       	cpc	r25, r1
    55d6:	09 f4       	brne	.+2      	; 0x55da <DIO_enumConnectPullup+0x3e>
    55d8:	5d c0       	rjmp	.+186    	; 0x5694 <DIO_enumConnectPullup+0xf8>
    55da:	2d 81       	ldd	r18, Y+5	; 0x05
    55dc:	3e 81       	ldd	r19, Y+6	; 0x06
    55de:	22 30       	cpi	r18, 0x02	; 2
    55e0:	31 05       	cpc	r19, r1
    55e2:	2c f4       	brge	.+10     	; 0x55ee <DIO_enumConnectPullup+0x52>
    55e4:	8d 81       	ldd	r24, Y+5	; 0x05
    55e6:	9e 81       	ldd	r25, Y+6	; 0x06
    55e8:	00 97       	sbiw	r24, 0x00	; 0
    55ea:	71 f0       	breq	.+28     	; 0x5608 <DIO_enumConnectPullup+0x6c>
    55ec:	26 c1       	rjmp	.+588    	; 0x583a <DIO_enumConnectPullup+0x29e>
    55ee:	2d 81       	ldd	r18, Y+5	; 0x05
    55f0:	3e 81       	ldd	r19, Y+6	; 0x06
    55f2:	22 30       	cpi	r18, 0x02	; 2
    55f4:	31 05       	cpc	r19, r1
    55f6:	09 f4       	brne	.+2      	; 0x55fa <DIO_enumConnectPullup+0x5e>
    55f8:	93 c0       	rjmp	.+294    	; 0x5720 <DIO_enumConnectPullup+0x184>
    55fa:	8d 81       	ldd	r24, Y+5	; 0x05
    55fc:	9e 81       	ldd	r25, Y+6	; 0x06
    55fe:	83 30       	cpi	r24, 0x03	; 3
    5600:	91 05       	cpc	r25, r1
    5602:	09 f4       	brne	.+2      	; 0x5606 <DIO_enumConnectPullup+0x6a>
    5604:	d3 c0       	rjmp	.+422    	; 0x57ac <DIO_enumConnectPullup+0x210>
    5606:	19 c1       	rjmp	.+562    	; 0x583a <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    5608:	8c 81       	ldd	r24, Y+4	; 0x04
    560a:	81 30       	cpi	r24, 0x01	; 1
    560c:	71 f5       	brne	.+92     	; 0x566a <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    560e:	a0 e5       	ldi	r26, 0x50	; 80
    5610:	b0 e0       	ldi	r27, 0x00	; 0
    5612:	e0 e5       	ldi	r30, 0x50	; 80
    5614:	f0 e0       	ldi	r31, 0x00	; 0
    5616:	80 81       	ld	r24, Z
    5618:	8b 7f       	andi	r24, 0xFB	; 251
    561a:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    561c:	aa e3       	ldi	r26, 0x3A	; 58
    561e:	b0 e0       	ldi	r27, 0x00	; 0
    5620:	ea e3       	ldi	r30, 0x3A	; 58
    5622:	f0 e0       	ldi	r31, 0x00	; 0
    5624:	80 81       	ld	r24, Z
    5626:	48 2f       	mov	r20, r24
    5628:	8b 81       	ldd	r24, Y+3	; 0x03
    562a:	28 2f       	mov	r18, r24
    562c:	30 e0       	ldi	r19, 0x00	; 0
    562e:	81 e0       	ldi	r24, 0x01	; 1
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	02 c0       	rjmp	.+4      	; 0x5638 <DIO_enumConnectPullup+0x9c>
    5634:	88 0f       	add	r24, r24
    5636:	99 1f       	adc	r25, r25
    5638:	2a 95       	dec	r18
    563a:	e2 f7       	brpl	.-8      	; 0x5634 <DIO_enumConnectPullup+0x98>
    563c:	80 95       	com	r24
    563e:	84 23       	and	r24, r20
    5640:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    5642:	ab e3       	ldi	r26, 0x3B	; 59
    5644:	b0 e0       	ldi	r27, 0x00	; 0
    5646:	eb e3       	ldi	r30, 0x3B	; 59
    5648:	f0 e0       	ldi	r31, 0x00	; 0
    564a:	80 81       	ld	r24, Z
    564c:	48 2f       	mov	r20, r24
    564e:	8b 81       	ldd	r24, Y+3	; 0x03
    5650:	28 2f       	mov	r18, r24
    5652:	30 e0       	ldi	r19, 0x00	; 0
    5654:	81 e0       	ldi	r24, 0x01	; 1
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	02 2e       	mov	r0, r18
    565a:	02 c0       	rjmp	.+4      	; 0x5660 <DIO_enumConnectPullup+0xc4>
    565c:	88 0f       	add	r24, r24
    565e:	99 1f       	adc	r25, r25
    5660:	0a 94       	dec	r0
    5662:	e2 f7       	brpl	.-8      	; 0x565c <DIO_enumConnectPullup+0xc0>
    5664:	84 2b       	or	r24, r20
    5666:	8c 93       	st	X, r24
    5668:	e8 c0       	rjmp	.+464    	; 0x583a <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    566a:	ab e3       	ldi	r26, 0x3B	; 59
    566c:	b0 e0       	ldi	r27, 0x00	; 0
    566e:	eb e3       	ldi	r30, 0x3B	; 59
    5670:	f0 e0       	ldi	r31, 0x00	; 0
    5672:	80 81       	ld	r24, Z
    5674:	48 2f       	mov	r20, r24
    5676:	8b 81       	ldd	r24, Y+3	; 0x03
    5678:	28 2f       	mov	r18, r24
    567a:	30 e0       	ldi	r19, 0x00	; 0
    567c:	81 e0       	ldi	r24, 0x01	; 1
    567e:	90 e0       	ldi	r25, 0x00	; 0
    5680:	02 2e       	mov	r0, r18
    5682:	02 c0       	rjmp	.+4      	; 0x5688 <DIO_enumConnectPullup+0xec>
    5684:	88 0f       	add	r24, r24
    5686:	99 1f       	adc	r25, r25
    5688:	0a 94       	dec	r0
    568a:	e2 f7       	brpl	.-8      	; 0x5684 <DIO_enumConnectPullup+0xe8>
    568c:	80 95       	com	r24
    568e:	84 23       	and	r24, r20
    5690:	8c 93       	st	X, r24
    5692:	d3 c0       	rjmp	.+422    	; 0x583a <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    5694:	8c 81       	ldd	r24, Y+4	; 0x04
    5696:	81 30       	cpi	r24, 0x01	; 1
    5698:	71 f5       	brne	.+92     	; 0x56f6 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    569a:	a0 e5       	ldi	r26, 0x50	; 80
    569c:	b0 e0       	ldi	r27, 0x00	; 0
    569e:	e0 e5       	ldi	r30, 0x50	; 80
    56a0:	f0 e0       	ldi	r31, 0x00	; 0
    56a2:	80 81       	ld	r24, Z
    56a4:	8b 7f       	andi	r24, 0xFB	; 251
    56a6:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    56a8:	a7 e3       	ldi	r26, 0x37	; 55
    56aa:	b0 e0       	ldi	r27, 0x00	; 0
    56ac:	e7 e3       	ldi	r30, 0x37	; 55
    56ae:	f0 e0       	ldi	r31, 0x00	; 0
    56b0:	80 81       	ld	r24, Z
    56b2:	48 2f       	mov	r20, r24
    56b4:	8b 81       	ldd	r24, Y+3	; 0x03
    56b6:	28 2f       	mov	r18, r24
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	81 e0       	ldi	r24, 0x01	; 1
    56bc:	90 e0       	ldi	r25, 0x00	; 0
    56be:	02 c0       	rjmp	.+4      	; 0x56c4 <DIO_enumConnectPullup+0x128>
    56c0:	88 0f       	add	r24, r24
    56c2:	99 1f       	adc	r25, r25
    56c4:	2a 95       	dec	r18
    56c6:	e2 f7       	brpl	.-8      	; 0x56c0 <DIO_enumConnectPullup+0x124>
    56c8:	80 95       	com	r24
    56ca:	84 23       	and	r24, r20
    56cc:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    56ce:	a8 e3       	ldi	r26, 0x38	; 56
    56d0:	b0 e0       	ldi	r27, 0x00	; 0
    56d2:	e8 e3       	ldi	r30, 0x38	; 56
    56d4:	f0 e0       	ldi	r31, 0x00	; 0
    56d6:	80 81       	ld	r24, Z
    56d8:	48 2f       	mov	r20, r24
    56da:	8b 81       	ldd	r24, Y+3	; 0x03
    56dc:	28 2f       	mov	r18, r24
    56de:	30 e0       	ldi	r19, 0x00	; 0
    56e0:	81 e0       	ldi	r24, 0x01	; 1
    56e2:	90 e0       	ldi	r25, 0x00	; 0
    56e4:	02 2e       	mov	r0, r18
    56e6:	02 c0       	rjmp	.+4      	; 0x56ec <DIO_enumConnectPullup+0x150>
    56e8:	88 0f       	add	r24, r24
    56ea:	99 1f       	adc	r25, r25
    56ec:	0a 94       	dec	r0
    56ee:	e2 f7       	brpl	.-8      	; 0x56e8 <DIO_enumConnectPullup+0x14c>
    56f0:	84 2b       	or	r24, r20
    56f2:	8c 93       	st	X, r24
    56f4:	a2 c0       	rjmp	.+324    	; 0x583a <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    56f6:	a8 e3       	ldi	r26, 0x38	; 56
    56f8:	b0 e0       	ldi	r27, 0x00	; 0
    56fa:	e8 e3       	ldi	r30, 0x38	; 56
    56fc:	f0 e0       	ldi	r31, 0x00	; 0
    56fe:	80 81       	ld	r24, Z
    5700:	48 2f       	mov	r20, r24
    5702:	8b 81       	ldd	r24, Y+3	; 0x03
    5704:	28 2f       	mov	r18, r24
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	81 e0       	ldi	r24, 0x01	; 1
    570a:	90 e0       	ldi	r25, 0x00	; 0
    570c:	02 2e       	mov	r0, r18
    570e:	02 c0       	rjmp	.+4      	; 0x5714 <DIO_enumConnectPullup+0x178>
    5710:	88 0f       	add	r24, r24
    5712:	99 1f       	adc	r25, r25
    5714:	0a 94       	dec	r0
    5716:	e2 f7       	brpl	.-8      	; 0x5710 <DIO_enumConnectPullup+0x174>
    5718:	80 95       	com	r24
    571a:	84 23       	and	r24, r20
    571c:	8c 93       	st	X, r24
    571e:	8d c0       	rjmp	.+282    	; 0x583a <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    5720:	8c 81       	ldd	r24, Y+4	; 0x04
    5722:	81 30       	cpi	r24, 0x01	; 1
    5724:	71 f5       	brne	.+92     	; 0x5782 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    5726:	a0 e5       	ldi	r26, 0x50	; 80
    5728:	b0 e0       	ldi	r27, 0x00	; 0
    572a:	e0 e5       	ldi	r30, 0x50	; 80
    572c:	f0 e0       	ldi	r31, 0x00	; 0
    572e:	80 81       	ld	r24, Z
    5730:	8b 7f       	andi	r24, 0xFB	; 251
    5732:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    5734:	a4 e3       	ldi	r26, 0x34	; 52
    5736:	b0 e0       	ldi	r27, 0x00	; 0
    5738:	e4 e3       	ldi	r30, 0x34	; 52
    573a:	f0 e0       	ldi	r31, 0x00	; 0
    573c:	80 81       	ld	r24, Z
    573e:	48 2f       	mov	r20, r24
    5740:	8b 81       	ldd	r24, Y+3	; 0x03
    5742:	28 2f       	mov	r18, r24
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	81 e0       	ldi	r24, 0x01	; 1
    5748:	90 e0       	ldi	r25, 0x00	; 0
    574a:	02 c0       	rjmp	.+4      	; 0x5750 <DIO_enumConnectPullup+0x1b4>
    574c:	88 0f       	add	r24, r24
    574e:	99 1f       	adc	r25, r25
    5750:	2a 95       	dec	r18
    5752:	e2 f7       	brpl	.-8      	; 0x574c <DIO_enumConnectPullup+0x1b0>
    5754:	80 95       	com	r24
    5756:	84 23       	and	r24, r20
    5758:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    575a:	a5 e3       	ldi	r26, 0x35	; 53
    575c:	b0 e0       	ldi	r27, 0x00	; 0
    575e:	e5 e3       	ldi	r30, 0x35	; 53
    5760:	f0 e0       	ldi	r31, 0x00	; 0
    5762:	80 81       	ld	r24, Z
    5764:	48 2f       	mov	r20, r24
    5766:	8b 81       	ldd	r24, Y+3	; 0x03
    5768:	28 2f       	mov	r18, r24
    576a:	30 e0       	ldi	r19, 0x00	; 0
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	90 e0       	ldi	r25, 0x00	; 0
    5770:	02 2e       	mov	r0, r18
    5772:	02 c0       	rjmp	.+4      	; 0x5778 <DIO_enumConnectPullup+0x1dc>
    5774:	88 0f       	add	r24, r24
    5776:	99 1f       	adc	r25, r25
    5778:	0a 94       	dec	r0
    577a:	e2 f7       	brpl	.-8      	; 0x5774 <DIO_enumConnectPullup+0x1d8>
    577c:	84 2b       	or	r24, r20
    577e:	8c 93       	st	X, r24
    5780:	5c c0       	rjmp	.+184    	; 0x583a <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    5782:	a5 e3       	ldi	r26, 0x35	; 53
    5784:	b0 e0       	ldi	r27, 0x00	; 0
    5786:	e5 e3       	ldi	r30, 0x35	; 53
    5788:	f0 e0       	ldi	r31, 0x00	; 0
    578a:	80 81       	ld	r24, Z
    578c:	48 2f       	mov	r20, r24
    578e:	8b 81       	ldd	r24, Y+3	; 0x03
    5790:	28 2f       	mov	r18, r24
    5792:	30 e0       	ldi	r19, 0x00	; 0
    5794:	81 e0       	ldi	r24, 0x01	; 1
    5796:	90 e0       	ldi	r25, 0x00	; 0
    5798:	02 2e       	mov	r0, r18
    579a:	02 c0       	rjmp	.+4      	; 0x57a0 <DIO_enumConnectPullup+0x204>
    579c:	88 0f       	add	r24, r24
    579e:	99 1f       	adc	r25, r25
    57a0:	0a 94       	dec	r0
    57a2:	e2 f7       	brpl	.-8      	; 0x579c <DIO_enumConnectPullup+0x200>
    57a4:	80 95       	com	r24
    57a6:	84 23       	and	r24, r20
    57a8:	8c 93       	st	X, r24
    57aa:	47 c0       	rjmp	.+142    	; 0x583a <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    57ac:	8c 81       	ldd	r24, Y+4	; 0x04
    57ae:	81 30       	cpi	r24, 0x01	; 1
    57b0:	71 f5       	brne	.+92     	; 0x580e <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    57b2:	a0 e5       	ldi	r26, 0x50	; 80
    57b4:	b0 e0       	ldi	r27, 0x00	; 0
    57b6:	e0 e5       	ldi	r30, 0x50	; 80
    57b8:	f0 e0       	ldi	r31, 0x00	; 0
    57ba:	80 81       	ld	r24, Z
    57bc:	8b 7f       	andi	r24, 0xFB	; 251
    57be:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    57c0:	a1 e3       	ldi	r26, 0x31	; 49
    57c2:	b0 e0       	ldi	r27, 0x00	; 0
    57c4:	e1 e3       	ldi	r30, 0x31	; 49
    57c6:	f0 e0       	ldi	r31, 0x00	; 0
    57c8:	80 81       	ld	r24, Z
    57ca:	48 2f       	mov	r20, r24
    57cc:	8b 81       	ldd	r24, Y+3	; 0x03
    57ce:	28 2f       	mov	r18, r24
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	81 e0       	ldi	r24, 0x01	; 1
    57d4:	90 e0       	ldi	r25, 0x00	; 0
    57d6:	02 c0       	rjmp	.+4      	; 0x57dc <DIO_enumConnectPullup+0x240>
    57d8:	88 0f       	add	r24, r24
    57da:	99 1f       	adc	r25, r25
    57dc:	2a 95       	dec	r18
    57de:	e2 f7       	brpl	.-8      	; 0x57d8 <DIO_enumConnectPullup+0x23c>
    57e0:	80 95       	com	r24
    57e2:	84 23       	and	r24, r20
    57e4:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    57e6:	a2 e3       	ldi	r26, 0x32	; 50
    57e8:	b0 e0       	ldi	r27, 0x00	; 0
    57ea:	e2 e3       	ldi	r30, 0x32	; 50
    57ec:	f0 e0       	ldi	r31, 0x00	; 0
    57ee:	80 81       	ld	r24, Z
    57f0:	48 2f       	mov	r20, r24
    57f2:	8b 81       	ldd	r24, Y+3	; 0x03
    57f4:	28 2f       	mov	r18, r24
    57f6:	30 e0       	ldi	r19, 0x00	; 0
    57f8:	81 e0       	ldi	r24, 0x01	; 1
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	02 2e       	mov	r0, r18
    57fe:	02 c0       	rjmp	.+4      	; 0x5804 <DIO_enumConnectPullup+0x268>
    5800:	88 0f       	add	r24, r24
    5802:	99 1f       	adc	r25, r25
    5804:	0a 94       	dec	r0
    5806:	e2 f7       	brpl	.-8      	; 0x5800 <DIO_enumConnectPullup+0x264>
    5808:	84 2b       	or	r24, r20
    580a:	8c 93       	st	X, r24
    580c:	16 c0       	rjmp	.+44     	; 0x583a <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    580e:	a2 e3       	ldi	r26, 0x32	; 50
    5810:	b0 e0       	ldi	r27, 0x00	; 0
    5812:	e2 e3       	ldi	r30, 0x32	; 50
    5814:	f0 e0       	ldi	r31, 0x00	; 0
    5816:	80 81       	ld	r24, Z
    5818:	48 2f       	mov	r20, r24
    581a:	8b 81       	ldd	r24, Y+3	; 0x03
    581c:	28 2f       	mov	r18, r24
    581e:	30 e0       	ldi	r19, 0x00	; 0
    5820:	81 e0       	ldi	r24, 0x01	; 1
    5822:	90 e0       	ldi	r25, 0x00	; 0
    5824:	02 2e       	mov	r0, r18
    5826:	02 c0       	rjmp	.+4      	; 0x582c <DIO_enumConnectPullup+0x290>
    5828:	88 0f       	add	r24, r24
    582a:	99 1f       	adc	r25, r25
    582c:	0a 94       	dec	r0
    582e:	e2 f7       	brpl	.-8      	; 0x5828 <DIO_enumConnectPullup+0x28c>
    5830:	80 95       	com	r24
    5832:	84 23       	and	r24, r20
    5834:	8c 93       	st	X, r24
    5836:	01 c0       	rjmp	.+2      	; 0x583a <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    5838:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    583a:	89 81       	ldd	r24, Y+1	; 0x01


}
    583c:	26 96       	adiw	r28, 0x06	; 6
    583e:	0f b6       	in	r0, 0x3f	; 63
    5840:	f8 94       	cli
    5842:	de bf       	out	0x3e, r29	; 62
    5844:	0f be       	out	0x3f, r0	; 63
    5846:	cd bf       	out	0x3d, r28	; 61
    5848:	cf 91       	pop	r28
    584a:	df 91       	pop	r29
    584c:	08 95       	ret

0000584e <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
    584e:	df 93       	push	r29
    5850:	cf 93       	push	r28
    5852:	00 d0       	rcall	.+0      	; 0x5854 <DIO_enumSetPortDirection+0x6>
    5854:	00 d0       	rcall	.+0      	; 0x5856 <DIO_enumSetPortDirection+0x8>
    5856:	0f 92       	push	r0
    5858:	cd b7       	in	r28, 0x3d	; 61
    585a:	de b7       	in	r29, 0x3e	; 62
    585c:	8a 83       	std	Y+2, r24	; 0x02
    585e:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5860:	81 e0       	ldi	r24, 0x01	; 1
    5862:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    5864:	8a 81       	ldd	r24, Y+2	; 0x02
    5866:	84 30       	cpi	r24, 0x04	; 4
    5868:	a8 f5       	brcc	.+106    	; 0x58d4 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    586a:	8a 81       	ldd	r24, Y+2	; 0x02
    586c:	28 2f       	mov	r18, r24
    586e:	30 e0       	ldi	r19, 0x00	; 0
    5870:	3d 83       	std	Y+5, r19	; 0x05
    5872:	2c 83       	std	Y+4, r18	; 0x04
    5874:	8c 81       	ldd	r24, Y+4	; 0x04
    5876:	9d 81       	ldd	r25, Y+5	; 0x05
    5878:	81 30       	cpi	r24, 0x01	; 1
    587a:	91 05       	cpc	r25, r1
    587c:	d1 f0       	breq	.+52     	; 0x58b2 <DIO_enumSetPortDirection+0x64>
    587e:	2c 81       	ldd	r18, Y+4	; 0x04
    5880:	3d 81       	ldd	r19, Y+5	; 0x05
    5882:	22 30       	cpi	r18, 0x02	; 2
    5884:	31 05       	cpc	r19, r1
    5886:	2c f4       	brge	.+10     	; 0x5892 <DIO_enumSetPortDirection+0x44>
    5888:	8c 81       	ldd	r24, Y+4	; 0x04
    588a:	9d 81       	ldd	r25, Y+5	; 0x05
    588c:	00 97       	sbiw	r24, 0x00	; 0
    588e:	61 f0       	breq	.+24     	; 0x58a8 <DIO_enumSetPortDirection+0x5a>
    5890:	1f c0       	rjmp	.+62     	; 0x58d0 <DIO_enumSetPortDirection+0x82>
    5892:	2c 81       	ldd	r18, Y+4	; 0x04
    5894:	3d 81       	ldd	r19, Y+5	; 0x05
    5896:	22 30       	cpi	r18, 0x02	; 2
    5898:	31 05       	cpc	r19, r1
    589a:	81 f0       	breq	.+32     	; 0x58bc <DIO_enumSetPortDirection+0x6e>
    589c:	8c 81       	ldd	r24, Y+4	; 0x04
    589e:	9d 81       	ldd	r25, Y+5	; 0x05
    58a0:	83 30       	cpi	r24, 0x03	; 3
    58a2:	91 05       	cpc	r25, r1
    58a4:	81 f0       	breq	.+32     	; 0x58c6 <DIO_enumSetPortDirection+0x78>
    58a6:	14 c0       	rjmp	.+40     	; 0x58d0 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    58a8:	ea e3       	ldi	r30, 0x3A	; 58
    58aa:	f0 e0       	ldi	r31, 0x00	; 0
    58ac:	8b 81       	ldd	r24, Y+3	; 0x03
    58ae:	80 83       	st	Z, r24
    58b0:	12 c0       	rjmp	.+36     	; 0x58d6 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    58b2:	e7 e3       	ldi	r30, 0x37	; 55
    58b4:	f0 e0       	ldi	r31, 0x00	; 0
    58b6:	8b 81       	ldd	r24, Y+3	; 0x03
    58b8:	80 83       	st	Z, r24
    58ba:	0d c0       	rjmp	.+26     	; 0x58d6 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    58bc:	e4 e3       	ldi	r30, 0x34	; 52
    58be:	f0 e0       	ldi	r31, 0x00	; 0
    58c0:	8b 81       	ldd	r24, Y+3	; 0x03
    58c2:	80 83       	st	Z, r24
    58c4:	08 c0       	rjmp	.+16     	; 0x58d6 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    58c6:	e1 e3       	ldi	r30, 0x31	; 49
    58c8:	f0 e0       	ldi	r31, 0x00	; 0
    58ca:	8b 81       	ldd	r24, Y+3	; 0x03
    58cc:	80 83       	st	Z, r24
    58ce:	03 c0       	rjmp	.+6      	; 0x58d6 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    58d0:	19 82       	std	Y+1, r1	; 0x01
    58d2:	01 c0       	rjmp	.+2      	; 0x58d6 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    58d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    58d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    58d8:	0f 90       	pop	r0
    58da:	0f 90       	pop	r0
    58dc:	0f 90       	pop	r0
    58de:	0f 90       	pop	r0
    58e0:	0f 90       	pop	r0
    58e2:	cf 91       	pop	r28
    58e4:	df 91       	pop	r29
    58e6:	08 95       	ret

000058e8 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    58e8:	df 93       	push	r29
    58ea:	cf 93       	push	r28
    58ec:	00 d0       	rcall	.+0      	; 0x58ee <DIO_enumSetPortValue+0x6>
    58ee:	00 d0       	rcall	.+0      	; 0x58f0 <DIO_enumSetPortValue+0x8>
    58f0:	0f 92       	push	r0
    58f2:	cd b7       	in	r28, 0x3d	; 61
    58f4:	de b7       	in	r29, 0x3e	; 62
    58f6:	8a 83       	std	Y+2, r24	; 0x02
    58f8:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    58fa:	81 e0       	ldi	r24, 0x01	; 1
    58fc:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    58fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5900:	84 30       	cpi	r24, 0x04	; 4
    5902:	a8 f5       	brcc	.+106    	; 0x596e <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    5904:	8a 81       	ldd	r24, Y+2	; 0x02
    5906:	28 2f       	mov	r18, r24
    5908:	30 e0       	ldi	r19, 0x00	; 0
    590a:	3d 83       	std	Y+5, r19	; 0x05
    590c:	2c 83       	std	Y+4, r18	; 0x04
    590e:	8c 81       	ldd	r24, Y+4	; 0x04
    5910:	9d 81       	ldd	r25, Y+5	; 0x05
    5912:	81 30       	cpi	r24, 0x01	; 1
    5914:	91 05       	cpc	r25, r1
    5916:	d1 f0       	breq	.+52     	; 0x594c <DIO_enumSetPortValue+0x64>
    5918:	2c 81       	ldd	r18, Y+4	; 0x04
    591a:	3d 81       	ldd	r19, Y+5	; 0x05
    591c:	22 30       	cpi	r18, 0x02	; 2
    591e:	31 05       	cpc	r19, r1
    5920:	2c f4       	brge	.+10     	; 0x592c <DIO_enumSetPortValue+0x44>
    5922:	8c 81       	ldd	r24, Y+4	; 0x04
    5924:	9d 81       	ldd	r25, Y+5	; 0x05
    5926:	00 97       	sbiw	r24, 0x00	; 0
    5928:	61 f0       	breq	.+24     	; 0x5942 <DIO_enumSetPortValue+0x5a>
    592a:	1f c0       	rjmp	.+62     	; 0x596a <DIO_enumSetPortValue+0x82>
    592c:	2c 81       	ldd	r18, Y+4	; 0x04
    592e:	3d 81       	ldd	r19, Y+5	; 0x05
    5930:	22 30       	cpi	r18, 0x02	; 2
    5932:	31 05       	cpc	r19, r1
    5934:	81 f0       	breq	.+32     	; 0x5956 <DIO_enumSetPortValue+0x6e>
    5936:	8c 81       	ldd	r24, Y+4	; 0x04
    5938:	9d 81       	ldd	r25, Y+5	; 0x05
    593a:	83 30       	cpi	r24, 0x03	; 3
    593c:	91 05       	cpc	r25, r1
    593e:	81 f0       	breq	.+32     	; 0x5960 <DIO_enumSetPortValue+0x78>
    5940:	14 c0       	rjmp	.+40     	; 0x596a <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    5942:	eb e3       	ldi	r30, 0x3B	; 59
    5944:	f0 e0       	ldi	r31, 0x00	; 0
    5946:	8b 81       	ldd	r24, Y+3	; 0x03
    5948:	80 83       	st	Z, r24
    594a:	12 c0       	rjmp	.+36     	; 0x5970 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    594c:	e8 e3       	ldi	r30, 0x38	; 56
    594e:	f0 e0       	ldi	r31, 0x00	; 0
    5950:	8b 81       	ldd	r24, Y+3	; 0x03
    5952:	80 83       	st	Z, r24
    5954:	0d c0       	rjmp	.+26     	; 0x5970 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    5956:	e5 e3       	ldi	r30, 0x35	; 53
    5958:	f0 e0       	ldi	r31, 0x00	; 0
    595a:	8b 81       	ldd	r24, Y+3	; 0x03
    595c:	80 83       	st	Z, r24
    595e:	08 c0       	rjmp	.+16     	; 0x5970 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    5960:	e2 e3       	ldi	r30, 0x32	; 50
    5962:	f0 e0       	ldi	r31, 0x00	; 0
    5964:	8b 81       	ldd	r24, Y+3	; 0x03
    5966:	80 83       	st	Z, r24
    5968:	03 c0       	rjmp	.+6      	; 0x5970 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    596a:	19 82       	std	Y+1, r1	; 0x01
    596c:	01 c0       	rjmp	.+2      	; 0x5970 <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    596e:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    5970:	89 81       	ldd	r24, Y+1	; 0x01
}
    5972:	0f 90       	pop	r0
    5974:	0f 90       	pop	r0
    5976:	0f 90       	pop	r0
    5978:	0f 90       	pop	r0
    597a:	0f 90       	pop	r0
    597c:	cf 91       	pop	r28
    597e:	df 91       	pop	r29
    5980:	08 95       	ret

00005982 <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
    5982:	df 93       	push	r29
    5984:	cf 93       	push	r28
    5986:	00 d0       	rcall	.+0      	; 0x5988 <DIO_enumTogglePortValue+0x6>
    5988:	00 d0       	rcall	.+0      	; 0x598a <DIO_enumTogglePortValue+0x8>
    598a:	cd b7       	in	r28, 0x3d	; 61
    598c:	de b7       	in	r29, 0x3e	; 62
    598e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5990:	81 e0       	ldi	r24, 0x01	; 1
    5992:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    5994:	8a 81       	ldd	r24, Y+2	; 0x02
    5996:	84 30       	cpi	r24, 0x04	; 4
    5998:	08 f0       	brcs	.+2      	; 0x599c <DIO_enumTogglePortValue+0x1a>
    599a:	3f c0       	rjmp	.+126    	; 0x5a1a <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    599c:	8a 81       	ldd	r24, Y+2	; 0x02
    599e:	28 2f       	mov	r18, r24
    59a0:	30 e0       	ldi	r19, 0x00	; 0
    59a2:	3c 83       	std	Y+4, r19	; 0x04
    59a4:	2b 83       	std	Y+3, r18	; 0x03
    59a6:	8b 81       	ldd	r24, Y+3	; 0x03
    59a8:	9c 81       	ldd	r25, Y+4	; 0x04
    59aa:	81 30       	cpi	r24, 0x01	; 1
    59ac:	91 05       	cpc	r25, r1
    59ae:	e9 f0       	breq	.+58     	; 0x59ea <DIO_enumTogglePortValue+0x68>
    59b0:	2b 81       	ldd	r18, Y+3	; 0x03
    59b2:	3c 81       	ldd	r19, Y+4	; 0x04
    59b4:	22 30       	cpi	r18, 0x02	; 2
    59b6:	31 05       	cpc	r19, r1
    59b8:	2c f4       	brge	.+10     	; 0x59c4 <DIO_enumTogglePortValue+0x42>
    59ba:	8b 81       	ldd	r24, Y+3	; 0x03
    59bc:	9c 81       	ldd	r25, Y+4	; 0x04
    59be:	00 97       	sbiw	r24, 0x00	; 0
    59c0:	61 f0       	breq	.+24     	; 0x59da <DIO_enumTogglePortValue+0x58>
    59c2:	2c c0       	rjmp	.+88     	; 0x5a1c <DIO_enumTogglePortValue+0x9a>
    59c4:	2b 81       	ldd	r18, Y+3	; 0x03
    59c6:	3c 81       	ldd	r19, Y+4	; 0x04
    59c8:	22 30       	cpi	r18, 0x02	; 2
    59ca:	31 05       	cpc	r19, r1
    59cc:	b1 f0       	breq	.+44     	; 0x59fa <DIO_enumTogglePortValue+0x78>
    59ce:	8b 81       	ldd	r24, Y+3	; 0x03
    59d0:	9c 81       	ldd	r25, Y+4	; 0x04
    59d2:	83 30       	cpi	r24, 0x03	; 3
    59d4:	91 05       	cpc	r25, r1
    59d6:	c9 f0       	breq	.+50     	; 0x5a0a <DIO_enumTogglePortValue+0x88>
    59d8:	21 c0       	rjmp	.+66     	; 0x5a1c <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    59da:	ab e3       	ldi	r26, 0x3B	; 59
    59dc:	b0 e0       	ldi	r27, 0x00	; 0
    59de:	eb e3       	ldi	r30, 0x3B	; 59
    59e0:	f0 e0       	ldi	r31, 0x00	; 0
    59e2:	80 81       	ld	r24, Z
    59e4:	80 95       	com	r24
    59e6:	8c 93       	st	X, r24
    59e8:	19 c0       	rjmp	.+50     	; 0x5a1c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    59ea:	a8 e3       	ldi	r26, 0x38	; 56
    59ec:	b0 e0       	ldi	r27, 0x00	; 0
    59ee:	e8 e3       	ldi	r30, 0x38	; 56
    59f0:	f0 e0       	ldi	r31, 0x00	; 0
    59f2:	80 81       	ld	r24, Z
    59f4:	80 95       	com	r24
    59f6:	8c 93       	st	X, r24
    59f8:	11 c0       	rjmp	.+34     	; 0x5a1c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    59fa:	a5 e3       	ldi	r26, 0x35	; 53
    59fc:	b0 e0       	ldi	r27, 0x00	; 0
    59fe:	e5 e3       	ldi	r30, 0x35	; 53
    5a00:	f0 e0       	ldi	r31, 0x00	; 0
    5a02:	80 81       	ld	r24, Z
    5a04:	80 95       	com	r24
    5a06:	8c 93       	st	X, r24
    5a08:	09 c0       	rjmp	.+18     	; 0x5a1c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    5a0a:	a2 e3       	ldi	r26, 0x32	; 50
    5a0c:	b0 e0       	ldi	r27, 0x00	; 0
    5a0e:	e2 e3       	ldi	r30, 0x32	; 50
    5a10:	f0 e0       	ldi	r31, 0x00	; 0
    5a12:	80 81       	ld	r24, Z
    5a14:	80 95       	com	r24
    5a16:	8c 93       	st	X, r24
    5a18:	01 c0       	rjmp	.+2      	; 0x5a1c <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    5a1a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    5a1c:	89 81       	ldd	r24, Y+1	; 0x01
}
    5a1e:	0f 90       	pop	r0
    5a20:	0f 90       	pop	r0
    5a22:	0f 90       	pop	r0
    5a24:	0f 90       	pop	r0
    5a26:	cf 91       	pop	r28
    5a28:	df 91       	pop	r29
    5a2a:	08 95       	ret

00005a2c <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    5a2c:	df 93       	push	r29
    5a2e:	cf 93       	push	r28
    5a30:	00 d0       	rcall	.+0      	; 0x5a32 <DIO_enumGetPortValue+0x6>
    5a32:	00 d0       	rcall	.+0      	; 0x5a34 <DIO_enumGetPortValue+0x8>
    5a34:	00 d0       	rcall	.+0      	; 0x5a36 <DIO_enumGetPortValue+0xa>
    5a36:	cd b7       	in	r28, 0x3d	; 61
    5a38:	de b7       	in	r29, 0x3e	; 62
    5a3a:	8a 83       	std	Y+2, r24	; 0x02
    5a3c:	7c 83       	std	Y+4, r23	; 0x04
    5a3e:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5a40:	81 e0       	ldi	r24, 0x01	; 1
    5a42:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    5a44:	8a 81       	ldd	r24, Y+2	; 0x02
    5a46:	84 30       	cpi	r24, 0x04	; 4
    5a48:	e8 f5       	brcc	.+122    	; 0x5ac4 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
    5a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    5a4c:	28 2f       	mov	r18, r24
    5a4e:	30 e0       	ldi	r19, 0x00	; 0
    5a50:	3e 83       	std	Y+6, r19	; 0x06
    5a52:	2d 83       	std	Y+5, r18	; 0x05
    5a54:	8d 81       	ldd	r24, Y+5	; 0x05
    5a56:	9e 81       	ldd	r25, Y+6	; 0x06
    5a58:	81 30       	cpi	r24, 0x01	; 1
    5a5a:	91 05       	cpc	r25, r1
    5a5c:	e1 f0       	breq	.+56     	; 0x5a96 <DIO_enumGetPortValue+0x6a>
    5a5e:	2d 81       	ldd	r18, Y+5	; 0x05
    5a60:	3e 81       	ldd	r19, Y+6	; 0x06
    5a62:	22 30       	cpi	r18, 0x02	; 2
    5a64:	31 05       	cpc	r19, r1
    5a66:	2c f4       	brge	.+10     	; 0x5a72 <DIO_enumGetPortValue+0x46>
    5a68:	8d 81       	ldd	r24, Y+5	; 0x05
    5a6a:	9e 81       	ldd	r25, Y+6	; 0x06
    5a6c:	00 97       	sbiw	r24, 0x00	; 0
    5a6e:	61 f0       	breq	.+24     	; 0x5a88 <DIO_enumGetPortValue+0x5c>
    5a70:	27 c0       	rjmp	.+78     	; 0x5ac0 <DIO_enumGetPortValue+0x94>
    5a72:	2d 81       	ldd	r18, Y+5	; 0x05
    5a74:	3e 81       	ldd	r19, Y+6	; 0x06
    5a76:	22 30       	cpi	r18, 0x02	; 2
    5a78:	31 05       	cpc	r19, r1
    5a7a:	a1 f0       	breq	.+40     	; 0x5aa4 <DIO_enumGetPortValue+0x78>
    5a7c:	8d 81       	ldd	r24, Y+5	; 0x05
    5a7e:	9e 81       	ldd	r25, Y+6	; 0x06
    5a80:	83 30       	cpi	r24, 0x03	; 3
    5a82:	91 05       	cpc	r25, r1
    5a84:	b1 f0       	breq	.+44     	; 0x5ab2 <DIO_enumGetPortValue+0x86>
    5a86:	1c c0       	rjmp	.+56     	; 0x5ac0 <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    5a88:	e9 e3       	ldi	r30, 0x39	; 57
    5a8a:	f0 e0       	ldi	r31, 0x00	; 0
    5a8c:	80 81       	ld	r24, Z
    5a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    5a90:	fc 81       	ldd	r31, Y+4	; 0x04
    5a92:	80 83       	st	Z, r24
    5a94:	18 c0       	rjmp	.+48     	; 0x5ac6 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    5a96:	e6 e3       	ldi	r30, 0x36	; 54
    5a98:	f0 e0       	ldi	r31, 0x00	; 0
    5a9a:	80 81       	ld	r24, Z
    5a9c:	eb 81       	ldd	r30, Y+3	; 0x03
    5a9e:	fc 81       	ldd	r31, Y+4	; 0x04
    5aa0:	80 83       	st	Z, r24
    5aa2:	11 c0       	rjmp	.+34     	; 0x5ac6 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    5aa4:	e3 e3       	ldi	r30, 0x33	; 51
    5aa6:	f0 e0       	ldi	r31, 0x00	; 0
    5aa8:	80 81       	ld	r24, Z
    5aaa:	eb 81       	ldd	r30, Y+3	; 0x03
    5aac:	fc 81       	ldd	r31, Y+4	; 0x04
    5aae:	80 83       	st	Z, r24
    5ab0:	0a c0       	rjmp	.+20     	; 0x5ac6 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    5ab2:	e0 e3       	ldi	r30, 0x30	; 48
    5ab4:	f0 e0       	ldi	r31, 0x00	; 0
    5ab6:	80 81       	ld	r24, Z
    5ab8:	eb 81       	ldd	r30, Y+3	; 0x03
    5aba:	fc 81       	ldd	r31, Y+4	; 0x04
    5abc:	80 83       	st	Z, r24
    5abe:	03 c0       	rjmp	.+6      	; 0x5ac6 <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
    5ac0:	19 82       	std	Y+1, r1	; 0x01
    5ac2:	01 c0       	rjmp	.+2      	; 0x5ac6 <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    5ac4:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    5ac6:	89 81       	ldd	r24, Y+1	; 0x01
}
    5ac8:	26 96       	adiw	r28, 0x06	; 6
    5aca:	0f b6       	in	r0, 0x3f	; 63
    5acc:	f8 94       	cli
    5ace:	de bf       	out	0x3e, r29	; 62
    5ad0:	0f be       	out	0x3f, r0	; 63
    5ad2:	cd bf       	out	0x3d, r28	; 61
    5ad4:	cf 91       	pop	r28
    5ad6:	df 91       	pop	r29
    5ad8:	08 95       	ret

00005ada <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    5ada:	df 93       	push	r29
    5adc:	cf 93       	push	r28
    5ade:	00 d0       	rcall	.+0      	; 0x5ae0 <DIO_voidWriteHighNibbles+0x6>
    5ae0:	00 d0       	rcall	.+0      	; 0x5ae2 <DIO_voidWriteHighNibbles+0x8>
    5ae2:	0f 92       	push	r0
    5ae4:	cd b7       	in	r28, 0x3d	; 61
    5ae6:	de b7       	in	r29, 0x3e	; 62
    5ae8:	8a 83       	std	Y+2, r24	; 0x02
    5aea:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5aec:	81 e0       	ldi	r24, 0x01	; 1
    5aee:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    5af0:	8a 81       	ldd	r24, Y+2	; 0x02
    5af2:	84 30       	cpi	r24, 0x04	; 4
    5af4:	08 f0       	brcs	.+2      	; 0x5af8 <DIO_voidWriteHighNibbles+0x1e>
    5af6:	63 c0       	rjmp	.+198    	; 0x5bbe <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    5af8:	8b 81       	ldd	r24, Y+3	; 0x03
    5afa:	82 95       	swap	r24
    5afc:	80 7f       	andi	r24, 0xF0	; 240
    5afe:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    5b00:	8a 81       	ldd	r24, Y+2	; 0x02
    5b02:	28 2f       	mov	r18, r24
    5b04:	30 e0       	ldi	r19, 0x00	; 0
    5b06:	3d 83       	std	Y+5, r19	; 0x05
    5b08:	2c 83       	std	Y+4, r18	; 0x04
    5b0a:	8c 81       	ldd	r24, Y+4	; 0x04
    5b0c:	9d 81       	ldd	r25, Y+5	; 0x05
    5b0e:	81 30       	cpi	r24, 0x01	; 1
    5b10:	91 05       	cpc	r25, r1
    5b12:	29 f1       	breq	.+74     	; 0x5b5e <DIO_voidWriteHighNibbles+0x84>
    5b14:	2c 81       	ldd	r18, Y+4	; 0x04
    5b16:	3d 81       	ldd	r19, Y+5	; 0x05
    5b18:	22 30       	cpi	r18, 0x02	; 2
    5b1a:	31 05       	cpc	r19, r1
    5b1c:	2c f4       	brge	.+10     	; 0x5b28 <DIO_voidWriteHighNibbles+0x4e>
    5b1e:	8c 81       	ldd	r24, Y+4	; 0x04
    5b20:	9d 81       	ldd	r25, Y+5	; 0x05
    5b22:	00 97       	sbiw	r24, 0x00	; 0
    5b24:	61 f0       	breq	.+24     	; 0x5b3e <DIO_voidWriteHighNibbles+0x64>
    5b26:	4c c0       	rjmp	.+152    	; 0x5bc0 <DIO_voidWriteHighNibbles+0xe6>
    5b28:	2c 81       	ldd	r18, Y+4	; 0x04
    5b2a:	3d 81       	ldd	r19, Y+5	; 0x05
    5b2c:	22 30       	cpi	r18, 0x02	; 2
    5b2e:	31 05       	cpc	r19, r1
    5b30:	31 f1       	breq	.+76     	; 0x5b7e <DIO_voidWriteHighNibbles+0xa4>
    5b32:	8c 81       	ldd	r24, Y+4	; 0x04
    5b34:	9d 81       	ldd	r25, Y+5	; 0x05
    5b36:	83 30       	cpi	r24, 0x03	; 3
    5b38:	91 05       	cpc	r25, r1
    5b3a:	89 f1       	breq	.+98     	; 0x5b9e <DIO_voidWriteHighNibbles+0xc4>
    5b3c:	41 c0       	rjmp	.+130    	; 0x5bc0 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    5b3e:	ab e3       	ldi	r26, 0x3B	; 59
    5b40:	b0 e0       	ldi	r27, 0x00	; 0
    5b42:	eb e3       	ldi	r30, 0x3B	; 59
    5b44:	f0 e0       	ldi	r31, 0x00	; 0
    5b46:	80 81       	ld	r24, Z
    5b48:	8f 70       	andi	r24, 0x0F	; 15
    5b4a:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    5b4c:	ab e3       	ldi	r26, 0x3B	; 59
    5b4e:	b0 e0       	ldi	r27, 0x00	; 0
    5b50:	eb e3       	ldi	r30, 0x3B	; 59
    5b52:	f0 e0       	ldi	r31, 0x00	; 0
    5b54:	90 81       	ld	r25, Z
    5b56:	8b 81       	ldd	r24, Y+3	; 0x03
    5b58:	89 2b       	or	r24, r25
    5b5a:	8c 93       	st	X, r24
    5b5c:	31 c0       	rjmp	.+98     	; 0x5bc0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    5b5e:	a8 e3       	ldi	r26, 0x38	; 56
    5b60:	b0 e0       	ldi	r27, 0x00	; 0
    5b62:	e8 e3       	ldi	r30, 0x38	; 56
    5b64:	f0 e0       	ldi	r31, 0x00	; 0
    5b66:	80 81       	ld	r24, Z
    5b68:	8f 70       	andi	r24, 0x0F	; 15
    5b6a:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    5b6c:	a8 e3       	ldi	r26, 0x38	; 56
    5b6e:	b0 e0       	ldi	r27, 0x00	; 0
    5b70:	e8 e3       	ldi	r30, 0x38	; 56
    5b72:	f0 e0       	ldi	r31, 0x00	; 0
    5b74:	90 81       	ld	r25, Z
    5b76:	8b 81       	ldd	r24, Y+3	; 0x03
    5b78:	89 2b       	or	r24, r25
    5b7a:	8c 93       	st	X, r24
    5b7c:	21 c0       	rjmp	.+66     	; 0x5bc0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    5b7e:	a5 e3       	ldi	r26, 0x35	; 53
    5b80:	b0 e0       	ldi	r27, 0x00	; 0
    5b82:	e5 e3       	ldi	r30, 0x35	; 53
    5b84:	f0 e0       	ldi	r31, 0x00	; 0
    5b86:	80 81       	ld	r24, Z
    5b88:	8f 70       	andi	r24, 0x0F	; 15
    5b8a:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    5b8c:	a5 e3       	ldi	r26, 0x35	; 53
    5b8e:	b0 e0       	ldi	r27, 0x00	; 0
    5b90:	e5 e3       	ldi	r30, 0x35	; 53
    5b92:	f0 e0       	ldi	r31, 0x00	; 0
    5b94:	90 81       	ld	r25, Z
    5b96:	8b 81       	ldd	r24, Y+3	; 0x03
    5b98:	89 2b       	or	r24, r25
    5b9a:	8c 93       	st	X, r24
    5b9c:	11 c0       	rjmp	.+34     	; 0x5bc0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    5b9e:	a2 e3       	ldi	r26, 0x32	; 50
    5ba0:	b0 e0       	ldi	r27, 0x00	; 0
    5ba2:	e2 e3       	ldi	r30, 0x32	; 50
    5ba4:	f0 e0       	ldi	r31, 0x00	; 0
    5ba6:	80 81       	ld	r24, Z
    5ba8:	8f 70       	andi	r24, 0x0F	; 15
    5baa:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    5bac:	a2 e3       	ldi	r26, 0x32	; 50
    5bae:	b0 e0       	ldi	r27, 0x00	; 0
    5bb0:	e2 e3       	ldi	r30, 0x32	; 50
    5bb2:	f0 e0       	ldi	r31, 0x00	; 0
    5bb4:	90 81       	ld	r25, Z
    5bb6:	8b 81       	ldd	r24, Y+3	; 0x03
    5bb8:	89 2b       	or	r24, r25
    5bba:	8c 93       	st	X, r24
    5bbc:	01 c0       	rjmp	.+2      	; 0x5bc0 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    5bbe:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    5bc0:	89 81       	ldd	r24, Y+1	; 0x01

}
    5bc2:	0f 90       	pop	r0
    5bc4:	0f 90       	pop	r0
    5bc6:	0f 90       	pop	r0
    5bc8:	0f 90       	pop	r0
    5bca:	0f 90       	pop	r0
    5bcc:	cf 91       	pop	r28
    5bce:	df 91       	pop	r29
    5bd0:	08 95       	ret

00005bd2 <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    5bd2:	df 93       	push	r29
    5bd4:	cf 93       	push	r28
    5bd6:	00 d0       	rcall	.+0      	; 0x5bd8 <DIO_voidWriteLowNibbles+0x6>
    5bd8:	00 d0       	rcall	.+0      	; 0x5bda <DIO_voidWriteLowNibbles+0x8>
    5bda:	0f 92       	push	r0
    5bdc:	cd b7       	in	r28, 0x3d	; 61
    5bde:	de b7       	in	r29, 0x3e	; 62
    5be0:	8a 83       	std	Y+2, r24	; 0x02
    5be2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5be4:	81 e0       	ldi	r24, 0x01	; 1
    5be6:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
    5be8:	8a 81       	ldd	r24, Y+2	; 0x02
    5bea:	84 30       	cpi	r24, 0x04	; 4
    5bec:	08 f0       	brcs	.+2      	; 0x5bf0 <DIO_voidWriteLowNibbles+0x1e>
    5bee:	62 c0       	rjmp	.+196    	; 0x5cb4 <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
    5bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    5bf2:	8f 70       	andi	r24, 0x0F	; 15
    5bf4:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    5bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    5bf8:	28 2f       	mov	r18, r24
    5bfa:	30 e0       	ldi	r19, 0x00	; 0
    5bfc:	3d 83       	std	Y+5, r19	; 0x05
    5bfe:	2c 83       	std	Y+4, r18	; 0x04
    5c00:	8c 81       	ldd	r24, Y+4	; 0x04
    5c02:	9d 81       	ldd	r25, Y+5	; 0x05
    5c04:	81 30       	cpi	r24, 0x01	; 1
    5c06:	91 05       	cpc	r25, r1
    5c08:	29 f1       	breq	.+74     	; 0x5c54 <DIO_voidWriteLowNibbles+0x82>
    5c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    5c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    5c0e:	22 30       	cpi	r18, 0x02	; 2
    5c10:	31 05       	cpc	r19, r1
    5c12:	2c f4       	brge	.+10     	; 0x5c1e <DIO_voidWriteLowNibbles+0x4c>
    5c14:	8c 81       	ldd	r24, Y+4	; 0x04
    5c16:	9d 81       	ldd	r25, Y+5	; 0x05
    5c18:	00 97       	sbiw	r24, 0x00	; 0
    5c1a:	61 f0       	breq	.+24     	; 0x5c34 <DIO_voidWriteLowNibbles+0x62>
    5c1c:	4c c0       	rjmp	.+152    	; 0x5cb6 <DIO_voidWriteLowNibbles+0xe4>
    5c1e:	2c 81       	ldd	r18, Y+4	; 0x04
    5c20:	3d 81       	ldd	r19, Y+5	; 0x05
    5c22:	22 30       	cpi	r18, 0x02	; 2
    5c24:	31 05       	cpc	r19, r1
    5c26:	31 f1       	breq	.+76     	; 0x5c74 <DIO_voidWriteLowNibbles+0xa2>
    5c28:	8c 81       	ldd	r24, Y+4	; 0x04
    5c2a:	9d 81       	ldd	r25, Y+5	; 0x05
    5c2c:	83 30       	cpi	r24, 0x03	; 3
    5c2e:	91 05       	cpc	r25, r1
    5c30:	89 f1       	breq	.+98     	; 0x5c94 <DIO_voidWriteLowNibbles+0xc2>
    5c32:	41 c0       	rjmp	.+130    	; 0x5cb6 <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    5c34:	ab e3       	ldi	r26, 0x3B	; 59
    5c36:	b0 e0       	ldi	r27, 0x00	; 0
    5c38:	eb e3       	ldi	r30, 0x3B	; 59
    5c3a:	f0 e0       	ldi	r31, 0x00	; 0
    5c3c:	80 81       	ld	r24, Z
    5c3e:	80 7f       	andi	r24, 0xF0	; 240
    5c40:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
    5c42:	ab e3       	ldi	r26, 0x3B	; 59
    5c44:	b0 e0       	ldi	r27, 0x00	; 0
    5c46:	eb e3       	ldi	r30, 0x3B	; 59
    5c48:	f0 e0       	ldi	r31, 0x00	; 0
    5c4a:	90 81       	ld	r25, Z
    5c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c4e:	89 2b       	or	r24, r25
    5c50:	8c 93       	st	X, r24
    5c52:	31 c0       	rjmp	.+98     	; 0x5cb6 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    5c54:	a8 e3       	ldi	r26, 0x38	; 56
    5c56:	b0 e0       	ldi	r27, 0x00	; 0
    5c58:	e8 e3       	ldi	r30, 0x38	; 56
    5c5a:	f0 e0       	ldi	r31, 0x00	; 0
    5c5c:	80 81       	ld	r24, Z
    5c5e:	80 7f       	andi	r24, 0xF0	; 240
    5c60:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
    5c62:	a8 e3       	ldi	r26, 0x38	; 56
    5c64:	b0 e0       	ldi	r27, 0x00	; 0
    5c66:	e8 e3       	ldi	r30, 0x38	; 56
    5c68:	f0 e0       	ldi	r31, 0x00	; 0
    5c6a:	90 81       	ld	r25, Z
    5c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c6e:	89 2b       	or	r24, r25
    5c70:	8c 93       	st	X, r24
    5c72:	21 c0       	rjmp	.+66     	; 0x5cb6 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    5c74:	a5 e3       	ldi	r26, 0x35	; 53
    5c76:	b0 e0       	ldi	r27, 0x00	; 0
    5c78:	e5 e3       	ldi	r30, 0x35	; 53
    5c7a:	f0 e0       	ldi	r31, 0x00	; 0
    5c7c:	80 81       	ld	r24, Z
    5c7e:	80 7f       	andi	r24, 0xF0	; 240
    5c80:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
    5c82:	a5 e3       	ldi	r26, 0x35	; 53
    5c84:	b0 e0       	ldi	r27, 0x00	; 0
    5c86:	e5 e3       	ldi	r30, 0x35	; 53
    5c88:	f0 e0       	ldi	r31, 0x00	; 0
    5c8a:	90 81       	ld	r25, Z
    5c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c8e:	89 2b       	or	r24, r25
    5c90:	8c 93       	st	X, r24
    5c92:	11 c0       	rjmp	.+34     	; 0x5cb6 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    5c94:	a2 e3       	ldi	r26, 0x32	; 50
    5c96:	b0 e0       	ldi	r27, 0x00	; 0
    5c98:	e2 e3       	ldi	r30, 0x32	; 50
    5c9a:	f0 e0       	ldi	r31, 0x00	; 0
    5c9c:	80 81       	ld	r24, Z
    5c9e:	80 7f       	andi	r24, 0xF0	; 240
    5ca0:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
    5ca2:	a2 e3       	ldi	r26, 0x32	; 50
    5ca4:	b0 e0       	ldi	r27, 0x00	; 0
    5ca6:	e2 e3       	ldi	r30, 0x32	; 50
    5ca8:	f0 e0       	ldi	r31, 0x00	; 0
    5caa:	90 81       	ld	r25, Z
    5cac:	8b 81       	ldd	r24, Y+3	; 0x03
    5cae:	89 2b       	or	r24, r25
    5cb0:	8c 93       	st	X, r24
    5cb2:	01 c0       	rjmp	.+2      	; 0x5cb6 <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
    5cb4:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    5cb6:	89 81       	ldd	r24, Y+1	; 0x01

}
    5cb8:	0f 90       	pop	r0
    5cba:	0f 90       	pop	r0
    5cbc:	0f 90       	pop	r0
    5cbe:	0f 90       	pop	r0
    5cc0:	0f 90       	pop	r0
    5cc2:	cf 91       	pop	r28
    5cc4:	df 91       	pop	r29
    5cc6:	08 95       	ret

00005cc8 <CLCD_voidInit>:
/*
* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
void CLCD_voidInit        ( void ){
    5cc8:	0f 93       	push	r16
    5cca:	1f 93       	push	r17
    5ccc:	df 93       	push	r29
    5cce:	cf 93       	push	r28
    5cd0:	cd b7       	in	r28, 0x3d	; 61
    5cd2:	de b7       	in	r29, 0x3e	; 62
    5cd4:	c6 54       	subi	r28, 0x46	; 70
    5cd6:	d0 40       	sbci	r29, 0x00	; 0
    5cd8:	0f b6       	in	r0, 0x3f	; 63
    5cda:	f8 94       	cli
    5cdc:	de bf       	out	0x3e, r29	; 62
    5cde:	0f be       	out	0x3f, r0	; 63
    5ce0:	cd bf       	out	0x3d, r28	; 61
    5ce2:	fe 01       	movw	r30, r28
    5ce4:	ed 5b       	subi	r30, 0xBD	; 189
    5ce6:	ff 4f       	sbci	r31, 0xFF	; 255
    5ce8:	80 e0       	ldi	r24, 0x00	; 0
    5cea:	90 e0       	ldi	r25, 0x00	; 0
    5cec:	a8 e4       	ldi	r26, 0x48	; 72
    5cee:	b2 e4       	ldi	r27, 0x42	; 66
    5cf0:	80 83       	st	Z, r24
    5cf2:	91 83       	std	Z+1, r25	; 0x01
    5cf4:	a2 83       	std	Z+2, r26	; 0x02
    5cf6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5cf8:	8e 01       	movw	r16, r28
    5cfa:	01 5c       	subi	r16, 0xC1	; 193
    5cfc:	1f 4f       	sbci	r17, 0xFF	; 255
    5cfe:	fe 01       	movw	r30, r28
    5d00:	ed 5b       	subi	r30, 0xBD	; 189
    5d02:	ff 4f       	sbci	r31, 0xFF	; 255
    5d04:	60 81       	ld	r22, Z
    5d06:	71 81       	ldd	r23, Z+1	; 0x01
    5d08:	82 81       	ldd	r24, Z+2	; 0x02
    5d0a:	93 81       	ldd	r25, Z+3	; 0x03
    5d0c:	20 e0       	ldi	r18, 0x00	; 0
    5d0e:	30 e0       	ldi	r19, 0x00	; 0
    5d10:	4a ef       	ldi	r20, 0xFA	; 250
    5d12:	54 e4       	ldi	r21, 0x44	; 68
    5d14:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5d18:	dc 01       	movw	r26, r24
    5d1a:	cb 01       	movw	r24, r22
    5d1c:	f8 01       	movw	r30, r16
    5d1e:	80 83       	st	Z, r24
    5d20:	91 83       	std	Z+1, r25	; 0x01
    5d22:	a2 83       	std	Z+2, r26	; 0x02
    5d24:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5d26:	fe 01       	movw	r30, r28
    5d28:	ff 96       	adiw	r30, 0x3f	; 63
    5d2a:	60 81       	ld	r22, Z
    5d2c:	71 81       	ldd	r23, Z+1	; 0x01
    5d2e:	82 81       	ldd	r24, Z+2	; 0x02
    5d30:	93 81       	ldd	r25, Z+3	; 0x03
    5d32:	20 e0       	ldi	r18, 0x00	; 0
    5d34:	30 e0       	ldi	r19, 0x00	; 0
    5d36:	40 e8       	ldi	r20, 0x80	; 128
    5d38:	5f e3       	ldi	r21, 0x3F	; 63
    5d3a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5d3e:	88 23       	and	r24, r24
    5d40:	2c f4       	brge	.+10     	; 0x5d4c <CLCD_voidInit+0x84>
		__ticks = 1;
    5d42:	81 e0       	ldi	r24, 0x01	; 1
    5d44:	90 e0       	ldi	r25, 0x00	; 0
    5d46:	9e af       	std	Y+62, r25	; 0x3e
    5d48:	8d af       	std	Y+61, r24	; 0x3d
    5d4a:	46 c0       	rjmp	.+140    	; 0x5dd8 <CLCD_voidInit+0x110>
	else if (__tmp > 65535)
    5d4c:	fe 01       	movw	r30, r28
    5d4e:	ff 96       	adiw	r30, 0x3f	; 63
    5d50:	60 81       	ld	r22, Z
    5d52:	71 81       	ldd	r23, Z+1	; 0x01
    5d54:	82 81       	ldd	r24, Z+2	; 0x02
    5d56:	93 81       	ldd	r25, Z+3	; 0x03
    5d58:	20 e0       	ldi	r18, 0x00	; 0
    5d5a:	3f ef       	ldi	r19, 0xFF	; 255
    5d5c:	4f e7       	ldi	r20, 0x7F	; 127
    5d5e:	57 e4       	ldi	r21, 0x47	; 71
    5d60:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5d64:	18 16       	cp	r1, r24
    5d66:	64 f5       	brge	.+88     	; 0x5dc0 <CLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d68:	fe 01       	movw	r30, r28
    5d6a:	ed 5b       	subi	r30, 0xBD	; 189
    5d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5d6e:	60 81       	ld	r22, Z
    5d70:	71 81       	ldd	r23, Z+1	; 0x01
    5d72:	82 81       	ldd	r24, Z+2	; 0x02
    5d74:	93 81       	ldd	r25, Z+3	; 0x03
    5d76:	20 e0       	ldi	r18, 0x00	; 0
    5d78:	30 e0       	ldi	r19, 0x00	; 0
    5d7a:	40 e2       	ldi	r20, 0x20	; 32
    5d7c:	51 e4       	ldi	r21, 0x41	; 65
    5d7e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5d82:	dc 01       	movw	r26, r24
    5d84:	cb 01       	movw	r24, r22
    5d86:	bc 01       	movw	r22, r24
    5d88:	cd 01       	movw	r24, r26
    5d8a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d8e:	dc 01       	movw	r26, r24
    5d90:	cb 01       	movw	r24, r22
    5d92:	9e af       	std	Y+62, r25	; 0x3e
    5d94:	8d af       	std	Y+61, r24	; 0x3d
    5d96:	0f c0       	rjmp	.+30     	; 0x5db6 <CLCD_voidInit+0xee>
    5d98:	88 ec       	ldi	r24, 0xC8	; 200
    5d9a:	90 e0       	ldi	r25, 0x00	; 0
    5d9c:	9c af       	std	Y+60, r25	; 0x3c
    5d9e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5da0:	8b ad       	ldd	r24, Y+59	; 0x3b
    5da2:	9c ad       	ldd	r25, Y+60	; 0x3c
    5da4:	01 97       	sbiw	r24, 0x01	; 1
    5da6:	f1 f7       	brne	.-4      	; 0x5da4 <CLCD_voidInit+0xdc>
    5da8:	9c af       	std	Y+60, r25	; 0x3c
    5daa:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5dac:	8d ad       	ldd	r24, Y+61	; 0x3d
    5dae:	9e ad       	ldd	r25, Y+62	; 0x3e
    5db0:	01 97       	sbiw	r24, 0x01	; 1
    5db2:	9e af       	std	Y+62, r25	; 0x3e
    5db4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5db6:	8d ad       	ldd	r24, Y+61	; 0x3d
    5db8:	9e ad       	ldd	r25, Y+62	; 0x3e
    5dba:	00 97       	sbiw	r24, 0x00	; 0
    5dbc:	69 f7       	brne	.-38     	; 0x5d98 <CLCD_voidInit+0xd0>
    5dbe:	16 c0       	rjmp	.+44     	; 0x5dec <CLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5dc0:	fe 01       	movw	r30, r28
    5dc2:	ff 96       	adiw	r30, 0x3f	; 63
    5dc4:	60 81       	ld	r22, Z
    5dc6:	71 81       	ldd	r23, Z+1	; 0x01
    5dc8:	82 81       	ldd	r24, Z+2	; 0x02
    5dca:	93 81       	ldd	r25, Z+3	; 0x03
    5dcc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5dd0:	dc 01       	movw	r26, r24
    5dd2:	cb 01       	movw	r24, r22
    5dd4:	9e af       	std	Y+62, r25	; 0x3e
    5dd6:	8d af       	std	Y+61, r24	; 0x3d
    5dd8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5dda:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ddc:	9a af       	std	Y+58, r25	; 0x3a
    5dde:	89 af       	std	Y+57, r24	; 0x39
    5de0:	89 ad       	ldd	r24, Y+57	; 0x39
    5de2:	9a ad       	ldd	r25, Y+58	; 0x3a
    5de4:	01 97       	sbiw	r24, 0x01	; 1
    5de6:	f1 f7       	brne	.-4      	; 0x5de4 <CLCD_voidInit+0x11c>
    5de8:	9a af       	std	Y+58, r25	; 0x3a
    5dea:	89 af       	std	Y+57, r24	; 0x39

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);

	// All Pins as OutPut pins
	DIO_enumSetPortDirection ( CLCD_DATA_PORT    , DIO_PORT_OUTPUT           );
    5dec:	81 e0       	ldi	r24, 0x01	; 1
    5dee:	6f ef       	ldi	r22, 0xFF	; 255
    5df0:	0e 94 27 2c 	call	0x584e	; 0x584e <DIO_enumSetPortDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
    5df4:	83 e0       	ldi	r24, 0x03	; 3
    5df6:	60 e0       	ldi	r22, 0x00	; 0
    5df8:	41 e0       	ldi	r20, 0x01	; 1
    5dfa:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
    5dfe:	83 e0       	ldi	r24, 0x03	; 3
    5e00:	61 e0       	ldi	r22, 0x01	; 1
    5e02:	41 e0       	ldi	r20, 0x01	; 1
    5e04:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
    5e08:	83 e0       	ldi	r24, 0x03	; 3
    5e0a:	62 e0       	ldi	r22, 0x02	; 2
    5e0c:	41 e0       	ldi	r20, 0x01	; 1
    5e0e:	0e 94 63 27 	call	0x4ec6	; 0x4ec6 <DIO_enumSetPinDirection>

	/* Return cursor to the first position on the first line  */
	CLCD_voidSendCommand(lcd_Home);
    5e12:	82 e0       	ldi	r24, 0x02	; 2
    5e14:	0e 94 81 31 	call	0x6302	; 0x6302 <CLCD_voidSendCommand>
    5e18:	80 e0       	ldi	r24, 0x00	; 0
    5e1a:	90 e0       	ldi	r25, 0x00	; 0
    5e1c:	a0 e8       	ldi	r26, 0x80	; 128
    5e1e:	bf e3       	ldi	r27, 0x3F	; 63
    5e20:	8d ab       	std	Y+53, r24	; 0x35
    5e22:	9e ab       	std	Y+54, r25	; 0x36
    5e24:	af ab       	std	Y+55, r26	; 0x37
    5e26:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5e28:	6d a9       	ldd	r22, Y+53	; 0x35
    5e2a:	7e a9       	ldd	r23, Y+54	; 0x36
    5e2c:	8f a9       	ldd	r24, Y+55	; 0x37
    5e2e:	98 ad       	ldd	r25, Y+56	; 0x38
    5e30:	20 e0       	ldi	r18, 0x00	; 0
    5e32:	30 e0       	ldi	r19, 0x00	; 0
    5e34:	4a ef       	ldi	r20, 0xFA	; 250
    5e36:	54 e4       	ldi	r21, 0x44	; 68
    5e38:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5e3c:	dc 01       	movw	r26, r24
    5e3e:	cb 01       	movw	r24, r22
    5e40:	89 ab       	std	Y+49, r24	; 0x31
    5e42:	9a ab       	std	Y+50, r25	; 0x32
    5e44:	ab ab       	std	Y+51, r26	; 0x33
    5e46:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5e48:	69 a9       	ldd	r22, Y+49	; 0x31
    5e4a:	7a a9       	ldd	r23, Y+50	; 0x32
    5e4c:	8b a9       	ldd	r24, Y+51	; 0x33
    5e4e:	9c a9       	ldd	r25, Y+52	; 0x34
    5e50:	20 e0       	ldi	r18, 0x00	; 0
    5e52:	30 e0       	ldi	r19, 0x00	; 0
    5e54:	40 e8       	ldi	r20, 0x80	; 128
    5e56:	5f e3       	ldi	r21, 0x3F	; 63
    5e58:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5e5c:	88 23       	and	r24, r24
    5e5e:	2c f4       	brge	.+10     	; 0x5e6a <CLCD_voidInit+0x1a2>
		__ticks = 1;
    5e60:	81 e0       	ldi	r24, 0x01	; 1
    5e62:	90 e0       	ldi	r25, 0x00	; 0
    5e64:	98 ab       	std	Y+48, r25	; 0x30
    5e66:	8f a7       	std	Y+47, r24	; 0x2f
    5e68:	3f c0       	rjmp	.+126    	; 0x5ee8 <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
    5e6a:	69 a9       	ldd	r22, Y+49	; 0x31
    5e6c:	7a a9       	ldd	r23, Y+50	; 0x32
    5e6e:	8b a9       	ldd	r24, Y+51	; 0x33
    5e70:	9c a9       	ldd	r25, Y+52	; 0x34
    5e72:	20 e0       	ldi	r18, 0x00	; 0
    5e74:	3f ef       	ldi	r19, 0xFF	; 255
    5e76:	4f e7       	ldi	r20, 0x7F	; 127
    5e78:	57 e4       	ldi	r21, 0x47	; 71
    5e7a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5e7e:	18 16       	cp	r1, r24
    5e80:	4c f5       	brge	.+82     	; 0x5ed4 <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e82:	6d a9       	ldd	r22, Y+53	; 0x35
    5e84:	7e a9       	ldd	r23, Y+54	; 0x36
    5e86:	8f a9       	ldd	r24, Y+55	; 0x37
    5e88:	98 ad       	ldd	r25, Y+56	; 0x38
    5e8a:	20 e0       	ldi	r18, 0x00	; 0
    5e8c:	30 e0       	ldi	r19, 0x00	; 0
    5e8e:	40 e2       	ldi	r20, 0x20	; 32
    5e90:	51 e4       	ldi	r21, 0x41	; 65
    5e92:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5e96:	dc 01       	movw	r26, r24
    5e98:	cb 01       	movw	r24, r22
    5e9a:	bc 01       	movw	r22, r24
    5e9c:	cd 01       	movw	r24, r26
    5e9e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ea2:	dc 01       	movw	r26, r24
    5ea4:	cb 01       	movw	r24, r22
    5ea6:	98 ab       	std	Y+48, r25	; 0x30
    5ea8:	8f a7       	std	Y+47, r24	; 0x2f
    5eaa:	0f c0       	rjmp	.+30     	; 0x5eca <CLCD_voidInit+0x202>
    5eac:	88 ec       	ldi	r24, 0xC8	; 200
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	9e a7       	std	Y+46, r25	; 0x2e
    5eb2:	8d a7       	std	Y+45, r24	; 0x2d
    5eb4:	8d a5       	ldd	r24, Y+45	; 0x2d
    5eb6:	9e a5       	ldd	r25, Y+46	; 0x2e
    5eb8:	01 97       	sbiw	r24, 0x01	; 1
    5eba:	f1 f7       	brne	.-4      	; 0x5eb8 <CLCD_voidInit+0x1f0>
    5ebc:	9e a7       	std	Y+46, r25	; 0x2e
    5ebe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ec0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ec2:	98 a9       	ldd	r25, Y+48	; 0x30
    5ec4:	01 97       	sbiw	r24, 0x01	; 1
    5ec6:	98 ab       	std	Y+48, r25	; 0x30
    5ec8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5eca:	8f a5       	ldd	r24, Y+47	; 0x2f
    5ecc:	98 a9       	ldd	r25, Y+48	; 0x30
    5ece:	00 97       	sbiw	r24, 0x00	; 0
    5ed0:	69 f7       	brne	.-38     	; 0x5eac <CLCD_voidInit+0x1e4>
    5ed2:	14 c0       	rjmp	.+40     	; 0x5efc <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ed4:	69 a9       	ldd	r22, Y+49	; 0x31
    5ed6:	7a a9       	ldd	r23, Y+50	; 0x32
    5ed8:	8b a9       	ldd	r24, Y+51	; 0x33
    5eda:	9c a9       	ldd	r25, Y+52	; 0x34
    5edc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ee0:	dc 01       	movw	r26, r24
    5ee2:	cb 01       	movw	r24, r22
    5ee4:	98 ab       	std	Y+48, r25	; 0x30
    5ee6:	8f a7       	std	Y+47, r24	; 0x2f
    5ee8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5eea:	98 a9       	ldd	r25, Y+48	; 0x30
    5eec:	9c a7       	std	Y+44, r25	; 0x2c
    5eee:	8b a7       	std	Y+43, r24	; 0x2b
    5ef0:	8b a5       	ldd	r24, Y+43	; 0x2b
    5ef2:	9c a5       	ldd	r25, Y+44	; 0x2c
    5ef4:	01 97       	sbiw	r24, 0x01	; 1
    5ef6:	f1 f7       	brne	.-4      	; 0x5ef4 <CLCD_voidInit+0x22c>
    5ef8:	9c a7       	std	Y+44, r25	; 0x2c
    5efa:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*FUNCTION SET Command : 2 lines , 5*8 font size */
	CLCD_voidSendCommand( EIGHT_BITS ); // 8 Bit Mode ==> 0x38
    5efc:	88 e3       	ldi	r24, 0x38	; 56
    5efe:	0e 94 81 31 	call	0x6302	; 0x6302 <CLCD_voidSendCommand>
    5f02:	80 e0       	ldi	r24, 0x00	; 0
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	a0 e8       	ldi	r26, 0x80	; 128
    5f08:	bf e3       	ldi	r27, 0x3F	; 63
    5f0a:	8f a3       	std	Y+39, r24	; 0x27
    5f0c:	98 a7       	std	Y+40, r25	; 0x28
    5f0e:	a9 a7       	std	Y+41, r26	; 0x29
    5f10:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f12:	6f a1       	ldd	r22, Y+39	; 0x27
    5f14:	78 a5       	ldd	r23, Y+40	; 0x28
    5f16:	89 a5       	ldd	r24, Y+41	; 0x29
    5f18:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f1a:	20 e0       	ldi	r18, 0x00	; 0
    5f1c:	30 e0       	ldi	r19, 0x00	; 0
    5f1e:	4a ef       	ldi	r20, 0xFA	; 250
    5f20:	54 e4       	ldi	r21, 0x44	; 68
    5f22:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5f26:	dc 01       	movw	r26, r24
    5f28:	cb 01       	movw	r24, r22
    5f2a:	8b a3       	std	Y+35, r24	; 0x23
    5f2c:	9c a3       	std	Y+36, r25	; 0x24
    5f2e:	ad a3       	std	Y+37, r26	; 0x25
    5f30:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5f32:	6b a1       	ldd	r22, Y+35	; 0x23
    5f34:	7c a1       	ldd	r23, Y+36	; 0x24
    5f36:	8d a1       	ldd	r24, Y+37	; 0x25
    5f38:	9e a1       	ldd	r25, Y+38	; 0x26
    5f3a:	20 e0       	ldi	r18, 0x00	; 0
    5f3c:	30 e0       	ldi	r19, 0x00	; 0
    5f3e:	40 e8       	ldi	r20, 0x80	; 128
    5f40:	5f e3       	ldi	r21, 0x3F	; 63
    5f42:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5f46:	88 23       	and	r24, r24
    5f48:	2c f4       	brge	.+10     	; 0x5f54 <CLCD_voidInit+0x28c>
		__ticks = 1;
    5f4a:	81 e0       	ldi	r24, 0x01	; 1
    5f4c:	90 e0       	ldi	r25, 0x00	; 0
    5f4e:	9a a3       	std	Y+34, r25	; 0x22
    5f50:	89 a3       	std	Y+33, r24	; 0x21
    5f52:	3f c0       	rjmp	.+126    	; 0x5fd2 <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    5f54:	6b a1       	ldd	r22, Y+35	; 0x23
    5f56:	7c a1       	ldd	r23, Y+36	; 0x24
    5f58:	8d a1       	ldd	r24, Y+37	; 0x25
    5f5a:	9e a1       	ldd	r25, Y+38	; 0x26
    5f5c:	20 e0       	ldi	r18, 0x00	; 0
    5f5e:	3f ef       	ldi	r19, 0xFF	; 255
    5f60:	4f e7       	ldi	r20, 0x7F	; 127
    5f62:	57 e4       	ldi	r21, 0x47	; 71
    5f64:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5f68:	18 16       	cp	r1, r24
    5f6a:	4c f5       	brge	.+82     	; 0x5fbe <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f6c:	6f a1       	ldd	r22, Y+39	; 0x27
    5f6e:	78 a5       	ldd	r23, Y+40	; 0x28
    5f70:	89 a5       	ldd	r24, Y+41	; 0x29
    5f72:	9a a5       	ldd	r25, Y+42	; 0x2a
    5f74:	20 e0       	ldi	r18, 0x00	; 0
    5f76:	30 e0       	ldi	r19, 0x00	; 0
    5f78:	40 e2       	ldi	r20, 0x20	; 32
    5f7a:	51 e4       	ldi	r21, 0x41	; 65
    5f7c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5f80:	dc 01       	movw	r26, r24
    5f82:	cb 01       	movw	r24, r22
    5f84:	bc 01       	movw	r22, r24
    5f86:	cd 01       	movw	r24, r26
    5f88:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5f8c:	dc 01       	movw	r26, r24
    5f8e:	cb 01       	movw	r24, r22
    5f90:	9a a3       	std	Y+34, r25	; 0x22
    5f92:	89 a3       	std	Y+33, r24	; 0x21
    5f94:	0f c0       	rjmp	.+30     	; 0x5fb4 <CLCD_voidInit+0x2ec>
    5f96:	88 ec       	ldi	r24, 0xC8	; 200
    5f98:	90 e0       	ldi	r25, 0x00	; 0
    5f9a:	98 a3       	std	Y+32, r25	; 0x20
    5f9c:	8f 8f       	std	Y+31, r24	; 0x1f
    5f9e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5fa0:	98 a1       	ldd	r25, Y+32	; 0x20
    5fa2:	01 97       	sbiw	r24, 0x01	; 1
    5fa4:	f1 f7       	brne	.-4      	; 0x5fa2 <CLCD_voidInit+0x2da>
    5fa6:	98 a3       	std	Y+32, r25	; 0x20
    5fa8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5faa:	89 a1       	ldd	r24, Y+33	; 0x21
    5fac:	9a a1       	ldd	r25, Y+34	; 0x22
    5fae:	01 97       	sbiw	r24, 0x01	; 1
    5fb0:	9a a3       	std	Y+34, r25	; 0x22
    5fb2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fb4:	89 a1       	ldd	r24, Y+33	; 0x21
    5fb6:	9a a1       	ldd	r25, Y+34	; 0x22
    5fb8:	00 97       	sbiw	r24, 0x00	; 0
    5fba:	69 f7       	brne	.-38     	; 0x5f96 <CLCD_voidInit+0x2ce>
    5fbc:	14 c0       	rjmp	.+40     	; 0x5fe6 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fbe:	6b a1       	ldd	r22, Y+35	; 0x23
    5fc0:	7c a1       	ldd	r23, Y+36	; 0x24
    5fc2:	8d a1       	ldd	r24, Y+37	; 0x25
    5fc4:	9e a1       	ldd	r25, Y+38	; 0x26
    5fc6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5fca:	dc 01       	movw	r26, r24
    5fcc:	cb 01       	movw	r24, r22
    5fce:	9a a3       	std	Y+34, r25	; 0x22
    5fd0:	89 a3       	std	Y+33, r24	; 0x21
    5fd2:	89 a1       	ldd	r24, Y+33	; 0x21
    5fd4:	9a a1       	ldd	r25, Y+34	; 0x22
    5fd6:	9e 8f       	std	Y+30, r25	; 0x1e
    5fd8:	8d 8f       	std	Y+29, r24	; 0x1d
    5fda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5fdc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5fde:	01 97       	sbiw	r24, 0x01	; 1
    5fe0:	f1 f7       	brne	.-4      	; 0x5fde <CLCD_voidInit+0x316>
    5fe2:	9e 8f       	std	Y+30, r25	; 0x1e
    5fe4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); // wait more than 39 Ms

	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_voidSendCommand( lcd_DisplayOn_CursorOff );
    5fe6:	8c e0       	ldi	r24, 0x0C	; 12
    5fe8:	0e 94 81 31 	call	0x6302	; 0x6302 <CLCD_voidSendCommand>
    5fec:	80 e0       	ldi	r24, 0x00	; 0
    5fee:	90 e0       	ldi	r25, 0x00	; 0
    5ff0:	a0 e8       	ldi	r26, 0x80	; 128
    5ff2:	bf e3       	ldi	r27, 0x3F	; 63
    5ff4:	89 8f       	std	Y+25, r24	; 0x19
    5ff6:	9a 8f       	std	Y+26, r25	; 0x1a
    5ff8:	ab 8f       	std	Y+27, r26	; 0x1b
    5ffa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5ffc:	69 8d       	ldd	r22, Y+25	; 0x19
    5ffe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6000:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6002:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6004:	20 e0       	ldi	r18, 0x00	; 0
    6006:	30 e0       	ldi	r19, 0x00	; 0
    6008:	4a ef       	ldi	r20, 0xFA	; 250
    600a:	54 e4       	ldi	r21, 0x44	; 68
    600c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6010:	dc 01       	movw	r26, r24
    6012:	cb 01       	movw	r24, r22
    6014:	8d 8b       	std	Y+21, r24	; 0x15
    6016:	9e 8b       	std	Y+22, r25	; 0x16
    6018:	af 8b       	std	Y+23, r26	; 0x17
    601a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    601c:	6d 89       	ldd	r22, Y+21	; 0x15
    601e:	7e 89       	ldd	r23, Y+22	; 0x16
    6020:	8f 89       	ldd	r24, Y+23	; 0x17
    6022:	98 8d       	ldd	r25, Y+24	; 0x18
    6024:	20 e0       	ldi	r18, 0x00	; 0
    6026:	30 e0       	ldi	r19, 0x00	; 0
    6028:	40 e8       	ldi	r20, 0x80	; 128
    602a:	5f e3       	ldi	r21, 0x3F	; 63
    602c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6030:	88 23       	and	r24, r24
    6032:	2c f4       	brge	.+10     	; 0x603e <CLCD_voidInit+0x376>
		__ticks = 1;
    6034:	81 e0       	ldi	r24, 0x01	; 1
    6036:	90 e0       	ldi	r25, 0x00	; 0
    6038:	9c 8b       	std	Y+20, r25	; 0x14
    603a:	8b 8b       	std	Y+19, r24	; 0x13
    603c:	3f c0       	rjmp	.+126    	; 0x60bc <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    603e:	6d 89       	ldd	r22, Y+21	; 0x15
    6040:	7e 89       	ldd	r23, Y+22	; 0x16
    6042:	8f 89       	ldd	r24, Y+23	; 0x17
    6044:	98 8d       	ldd	r25, Y+24	; 0x18
    6046:	20 e0       	ldi	r18, 0x00	; 0
    6048:	3f ef       	ldi	r19, 0xFF	; 255
    604a:	4f e7       	ldi	r20, 0x7F	; 127
    604c:	57 e4       	ldi	r21, 0x47	; 71
    604e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6052:	18 16       	cp	r1, r24
    6054:	4c f5       	brge	.+82     	; 0x60a8 <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6056:	69 8d       	ldd	r22, Y+25	; 0x19
    6058:	7a 8d       	ldd	r23, Y+26	; 0x1a
    605a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    605c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    605e:	20 e0       	ldi	r18, 0x00	; 0
    6060:	30 e0       	ldi	r19, 0x00	; 0
    6062:	40 e2       	ldi	r20, 0x20	; 32
    6064:	51 e4       	ldi	r21, 0x41	; 65
    6066:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    606a:	dc 01       	movw	r26, r24
    606c:	cb 01       	movw	r24, r22
    606e:	bc 01       	movw	r22, r24
    6070:	cd 01       	movw	r24, r26
    6072:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6076:	dc 01       	movw	r26, r24
    6078:	cb 01       	movw	r24, r22
    607a:	9c 8b       	std	Y+20, r25	; 0x14
    607c:	8b 8b       	std	Y+19, r24	; 0x13
    607e:	0f c0       	rjmp	.+30     	; 0x609e <CLCD_voidInit+0x3d6>
    6080:	88 ec       	ldi	r24, 0xC8	; 200
    6082:	90 e0       	ldi	r25, 0x00	; 0
    6084:	9a 8b       	std	Y+18, r25	; 0x12
    6086:	89 8b       	std	Y+17, r24	; 0x11
    6088:	89 89       	ldd	r24, Y+17	; 0x11
    608a:	9a 89       	ldd	r25, Y+18	; 0x12
    608c:	01 97       	sbiw	r24, 0x01	; 1
    608e:	f1 f7       	brne	.-4      	; 0x608c <CLCD_voidInit+0x3c4>
    6090:	9a 8b       	std	Y+18, r25	; 0x12
    6092:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6094:	8b 89       	ldd	r24, Y+19	; 0x13
    6096:	9c 89       	ldd	r25, Y+20	; 0x14
    6098:	01 97       	sbiw	r24, 0x01	; 1
    609a:	9c 8b       	std	Y+20, r25	; 0x14
    609c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    609e:	8b 89       	ldd	r24, Y+19	; 0x13
    60a0:	9c 89       	ldd	r25, Y+20	; 0x14
    60a2:	00 97       	sbiw	r24, 0x00	; 0
    60a4:	69 f7       	brne	.-38     	; 0x6080 <CLCD_voidInit+0x3b8>
    60a6:	14 c0       	rjmp	.+40     	; 0x60d0 <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    60a8:	6d 89       	ldd	r22, Y+21	; 0x15
    60aa:	7e 89       	ldd	r23, Y+22	; 0x16
    60ac:	8f 89       	ldd	r24, Y+23	; 0x17
    60ae:	98 8d       	ldd	r25, Y+24	; 0x18
    60b0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    60b4:	dc 01       	movw	r26, r24
    60b6:	cb 01       	movw	r24, r22
    60b8:	9c 8b       	std	Y+20, r25	; 0x14
    60ba:	8b 8b       	std	Y+19, r24	; 0x13
    60bc:	8b 89       	ldd	r24, Y+19	; 0x13
    60be:	9c 89       	ldd	r25, Y+20	; 0x14
    60c0:	98 8b       	std	Y+16, r25	; 0x10
    60c2:	8f 87       	std	Y+15, r24	; 0x0f
    60c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    60c6:	98 89       	ldd	r25, Y+16	; 0x10
    60c8:	01 97       	sbiw	r24, 0x01	; 1
    60ca:	f1 f7       	brne	.-4      	; 0x60c8 <CLCD_voidInit+0x400>
    60cc:	98 8b       	std	Y+16, r25	; 0x10
    60ce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* DISPLAY CLEAR */
	CLCD_voidClearScreen();
    60d0:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <CLCD_voidClearScreen>

	/* ENTRY MODE  SET*/
	CLCD_voidSendCommand( lcd_EntryMode );
    60d4:	86 e0       	ldi	r24, 0x06	; 6
    60d6:	0e 94 81 31 	call	0x6302	; 0x6302 <CLCD_voidSendCommand>
    60da:	80 e0       	ldi	r24, 0x00	; 0
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	a0 e8       	ldi	r26, 0x80	; 128
    60e0:	bf e3       	ldi	r27, 0x3F	; 63
    60e2:	8b 87       	std	Y+11, r24	; 0x0b
    60e4:	9c 87       	std	Y+12, r25	; 0x0c
    60e6:	ad 87       	std	Y+13, r26	; 0x0d
    60e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    60ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    60ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    60f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    60f2:	20 e0       	ldi	r18, 0x00	; 0
    60f4:	30 e0       	ldi	r19, 0x00	; 0
    60f6:	4a ef       	ldi	r20, 0xFA	; 250
    60f8:	54 e4       	ldi	r21, 0x44	; 68
    60fa:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    60fe:	dc 01       	movw	r26, r24
    6100:	cb 01       	movw	r24, r22
    6102:	8f 83       	std	Y+7, r24	; 0x07
    6104:	98 87       	std	Y+8, r25	; 0x08
    6106:	a9 87       	std	Y+9, r26	; 0x09
    6108:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    610a:	6f 81       	ldd	r22, Y+7	; 0x07
    610c:	78 85       	ldd	r23, Y+8	; 0x08
    610e:	89 85       	ldd	r24, Y+9	; 0x09
    6110:	9a 85       	ldd	r25, Y+10	; 0x0a
    6112:	20 e0       	ldi	r18, 0x00	; 0
    6114:	30 e0       	ldi	r19, 0x00	; 0
    6116:	40 e8       	ldi	r20, 0x80	; 128
    6118:	5f e3       	ldi	r21, 0x3F	; 63
    611a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    611e:	88 23       	and	r24, r24
    6120:	2c f4       	brge	.+10     	; 0x612c <CLCD_voidInit+0x464>
		__ticks = 1;
    6122:	81 e0       	ldi	r24, 0x01	; 1
    6124:	90 e0       	ldi	r25, 0x00	; 0
    6126:	9e 83       	std	Y+6, r25	; 0x06
    6128:	8d 83       	std	Y+5, r24	; 0x05
    612a:	3f c0       	rjmp	.+126    	; 0x61aa <CLCD_voidInit+0x4e2>
	else if (__tmp > 65535)
    612c:	6f 81       	ldd	r22, Y+7	; 0x07
    612e:	78 85       	ldd	r23, Y+8	; 0x08
    6130:	89 85       	ldd	r24, Y+9	; 0x09
    6132:	9a 85       	ldd	r25, Y+10	; 0x0a
    6134:	20 e0       	ldi	r18, 0x00	; 0
    6136:	3f ef       	ldi	r19, 0xFF	; 255
    6138:	4f e7       	ldi	r20, 0x7F	; 127
    613a:	57 e4       	ldi	r21, 0x47	; 71
    613c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6140:	18 16       	cp	r1, r24
    6142:	4c f5       	brge	.+82     	; 0x6196 <CLCD_voidInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6144:	6b 85       	ldd	r22, Y+11	; 0x0b
    6146:	7c 85       	ldd	r23, Y+12	; 0x0c
    6148:	8d 85       	ldd	r24, Y+13	; 0x0d
    614a:	9e 85       	ldd	r25, Y+14	; 0x0e
    614c:	20 e0       	ldi	r18, 0x00	; 0
    614e:	30 e0       	ldi	r19, 0x00	; 0
    6150:	40 e2       	ldi	r20, 0x20	; 32
    6152:	51 e4       	ldi	r21, 0x41	; 65
    6154:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6158:	dc 01       	movw	r26, r24
    615a:	cb 01       	movw	r24, r22
    615c:	bc 01       	movw	r22, r24
    615e:	cd 01       	movw	r24, r26
    6160:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6164:	dc 01       	movw	r26, r24
    6166:	cb 01       	movw	r24, r22
    6168:	9e 83       	std	Y+6, r25	; 0x06
    616a:	8d 83       	std	Y+5, r24	; 0x05
    616c:	0f c0       	rjmp	.+30     	; 0x618c <CLCD_voidInit+0x4c4>
    616e:	88 ec       	ldi	r24, 0xC8	; 200
    6170:	90 e0       	ldi	r25, 0x00	; 0
    6172:	9c 83       	std	Y+4, r25	; 0x04
    6174:	8b 83       	std	Y+3, r24	; 0x03
    6176:	8b 81       	ldd	r24, Y+3	; 0x03
    6178:	9c 81       	ldd	r25, Y+4	; 0x04
    617a:	01 97       	sbiw	r24, 0x01	; 1
    617c:	f1 f7       	brne	.-4      	; 0x617a <CLCD_voidInit+0x4b2>
    617e:	9c 83       	std	Y+4, r25	; 0x04
    6180:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6182:	8d 81       	ldd	r24, Y+5	; 0x05
    6184:	9e 81       	ldd	r25, Y+6	; 0x06
    6186:	01 97       	sbiw	r24, 0x01	; 1
    6188:	9e 83       	std	Y+6, r25	; 0x06
    618a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    618c:	8d 81       	ldd	r24, Y+5	; 0x05
    618e:	9e 81       	ldd	r25, Y+6	; 0x06
    6190:	00 97       	sbiw	r24, 0x00	; 0
    6192:	69 f7       	brne	.-38     	; 0x616e <CLCD_voidInit+0x4a6>
    6194:	14 c0       	rjmp	.+40     	; 0x61be <CLCD_voidInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6196:	6f 81       	ldd	r22, Y+7	; 0x07
    6198:	78 85       	ldd	r23, Y+8	; 0x08
    619a:	89 85       	ldd	r24, Y+9	; 0x09
    619c:	9a 85       	ldd	r25, Y+10	; 0x0a
    619e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    61a2:	dc 01       	movw	r26, r24
    61a4:	cb 01       	movw	r24, r22
    61a6:	9e 83       	std	Y+6, r25	; 0x06
    61a8:	8d 83       	std	Y+5, r24	; 0x05
    61aa:	8d 81       	ldd	r24, Y+5	; 0x05
    61ac:	9e 81       	ldd	r25, Y+6	; 0x06
    61ae:	9a 83       	std	Y+2, r25	; 0x02
    61b0:	89 83       	std	Y+1, r24	; 0x01
    61b2:	89 81       	ldd	r24, Y+1	; 0x01
    61b4:	9a 81       	ldd	r25, Y+2	; 0x02
    61b6:	01 97       	sbiw	r24, 0x01	; 1
    61b8:	f1 f7       	brne	.-4      	; 0x61b6 <CLCD_voidInit+0x4ee>
    61ba:	9a 83       	std	Y+2, r25	; 0x02
    61bc:	89 83       	std	Y+1, r24	; 0x01
	#endif




}
    61be:	ca 5b       	subi	r28, 0xBA	; 186
    61c0:	df 4f       	sbci	r29, 0xFF	; 255
    61c2:	0f b6       	in	r0, 0x3f	; 63
    61c4:	f8 94       	cli
    61c6:	de bf       	out	0x3e, r29	; 62
    61c8:	0f be       	out	0x3f, r0	; 63
    61ca:	cd bf       	out	0x3d, r28	; 61
    61cc:	cf 91       	pop	r28
    61ce:	df 91       	pop	r29
    61d0:	1f 91       	pop	r17
    61d2:	0f 91       	pop	r16
    61d4:	08 95       	ret

000061d6 <CLCD_voidSendData>:
* Breif : This Function send data to the port which is defined in config.h
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void CLCD_voidSendData    ( u8 Copy_u8Data ){
    61d6:	df 93       	push	r29
    61d8:	cf 93       	push	r28
    61da:	cd b7       	in	r28, 0x3d	; 61
    61dc:	de b7       	in	r29, 0x3e	; 62
    61de:	2f 97       	sbiw	r28, 0x0f	; 15
    61e0:	0f b6       	in	r0, 0x3f	; 63
    61e2:	f8 94       	cli
    61e4:	de bf       	out	0x3e, r29	; 62
    61e6:	0f be       	out	0x3f, r0	; 63
    61e8:	cd bf       	out	0x3d, r28	; 61
    61ea:	8f 87       	std	Y+15, r24	; 0x0f

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      8 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#if   CLCD_MODE == 8

	DIO_enumSetPortValue ( CLCD_DATA_PORT    , Copy_u8Data        );
    61ec:	81 e0       	ldi	r24, 0x01	; 1
    61ee:	6f 85       	ldd	r22, Y+15	; 0x0f
    61f0:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <DIO_enumSetPortValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    61f4:	83 e0       	ldi	r24, 0x03	; 3
    61f6:	60 e0       	ldi	r22, 0x00	; 0
    61f8:	41 e0       	ldi	r20, 0x01	; 1
    61fa:	0e 94 72 28 	call	0x50e4	; 0x50e4 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    61fe:	83 e0       	ldi	r24, 0x03	; 3
    6200:	61 e0       	ldi	r22, 0x01	; 1
    6202:	40 e0       	ldi	r20, 0x00	; 0
    6204:	0e 94 72 28 	call	0x50e4	; 0x50e4 <DIO_enumSetPinValue>
	CLCD_voidSendFallingEdge();
    6208:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <CLCD_voidSendFallingEdge>
    620c:	80 e0       	ldi	r24, 0x00	; 0
    620e:	90 e0       	ldi	r25, 0x00	; 0
    6210:	a0 e8       	ldi	r26, 0x80	; 128
    6212:	bf e3       	ldi	r27, 0x3F	; 63
    6214:	8b 87       	std	Y+11, r24	; 0x0b
    6216:	9c 87       	std	Y+12, r25	; 0x0c
    6218:	ad 87       	std	Y+13, r26	; 0x0d
    621a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    621c:	6b 85       	ldd	r22, Y+11	; 0x0b
    621e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6220:	8d 85       	ldd	r24, Y+13	; 0x0d
    6222:	9e 85       	ldd	r25, Y+14	; 0x0e
    6224:	20 e0       	ldi	r18, 0x00	; 0
    6226:	30 e0       	ldi	r19, 0x00	; 0
    6228:	4a ef       	ldi	r20, 0xFA	; 250
    622a:	54 e4       	ldi	r21, 0x44	; 68
    622c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6230:	dc 01       	movw	r26, r24
    6232:	cb 01       	movw	r24, r22
    6234:	8f 83       	std	Y+7, r24	; 0x07
    6236:	98 87       	std	Y+8, r25	; 0x08
    6238:	a9 87       	std	Y+9, r26	; 0x09
    623a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    623c:	6f 81       	ldd	r22, Y+7	; 0x07
    623e:	78 85       	ldd	r23, Y+8	; 0x08
    6240:	89 85       	ldd	r24, Y+9	; 0x09
    6242:	9a 85       	ldd	r25, Y+10	; 0x0a
    6244:	20 e0       	ldi	r18, 0x00	; 0
    6246:	30 e0       	ldi	r19, 0x00	; 0
    6248:	40 e8       	ldi	r20, 0x80	; 128
    624a:	5f e3       	ldi	r21, 0x3F	; 63
    624c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6250:	88 23       	and	r24, r24
    6252:	2c f4       	brge	.+10     	; 0x625e <CLCD_voidSendData+0x88>
		__ticks = 1;
    6254:	81 e0       	ldi	r24, 0x01	; 1
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	9e 83       	std	Y+6, r25	; 0x06
    625a:	8d 83       	std	Y+5, r24	; 0x05
    625c:	3f c0       	rjmp	.+126    	; 0x62dc <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    625e:	6f 81       	ldd	r22, Y+7	; 0x07
    6260:	78 85       	ldd	r23, Y+8	; 0x08
    6262:	89 85       	ldd	r24, Y+9	; 0x09
    6264:	9a 85       	ldd	r25, Y+10	; 0x0a
    6266:	20 e0       	ldi	r18, 0x00	; 0
    6268:	3f ef       	ldi	r19, 0xFF	; 255
    626a:	4f e7       	ldi	r20, 0x7F	; 127
    626c:	57 e4       	ldi	r21, 0x47	; 71
    626e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6272:	18 16       	cp	r1, r24
    6274:	4c f5       	brge	.+82     	; 0x62c8 <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6276:	6b 85       	ldd	r22, Y+11	; 0x0b
    6278:	7c 85       	ldd	r23, Y+12	; 0x0c
    627a:	8d 85       	ldd	r24, Y+13	; 0x0d
    627c:	9e 85       	ldd	r25, Y+14	; 0x0e
    627e:	20 e0       	ldi	r18, 0x00	; 0
    6280:	30 e0       	ldi	r19, 0x00	; 0
    6282:	40 e2       	ldi	r20, 0x20	; 32
    6284:	51 e4       	ldi	r21, 0x41	; 65
    6286:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    628a:	dc 01       	movw	r26, r24
    628c:	cb 01       	movw	r24, r22
    628e:	bc 01       	movw	r22, r24
    6290:	cd 01       	movw	r24, r26
    6292:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6296:	dc 01       	movw	r26, r24
    6298:	cb 01       	movw	r24, r22
    629a:	9e 83       	std	Y+6, r25	; 0x06
    629c:	8d 83       	std	Y+5, r24	; 0x05
    629e:	0f c0       	rjmp	.+30     	; 0x62be <CLCD_voidSendData+0xe8>
    62a0:	88 ec       	ldi	r24, 0xC8	; 200
    62a2:	90 e0       	ldi	r25, 0x00	; 0
    62a4:	9c 83       	std	Y+4, r25	; 0x04
    62a6:	8b 83       	std	Y+3, r24	; 0x03
    62a8:	8b 81       	ldd	r24, Y+3	; 0x03
    62aa:	9c 81       	ldd	r25, Y+4	; 0x04
    62ac:	01 97       	sbiw	r24, 0x01	; 1
    62ae:	f1 f7       	brne	.-4      	; 0x62ac <CLCD_voidSendData+0xd6>
    62b0:	9c 83       	std	Y+4, r25	; 0x04
    62b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    62b4:	8d 81       	ldd	r24, Y+5	; 0x05
    62b6:	9e 81       	ldd	r25, Y+6	; 0x06
    62b8:	01 97       	sbiw	r24, 0x01	; 1
    62ba:	9e 83       	std	Y+6, r25	; 0x06
    62bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    62be:	8d 81       	ldd	r24, Y+5	; 0x05
    62c0:	9e 81       	ldd	r25, Y+6	; 0x06
    62c2:	00 97       	sbiw	r24, 0x00	; 0
    62c4:	69 f7       	brne	.-38     	; 0x62a0 <CLCD_voidSendData+0xca>
    62c6:	14 c0       	rjmp	.+40     	; 0x62f0 <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    62c8:	6f 81       	ldd	r22, Y+7	; 0x07
    62ca:	78 85       	ldd	r23, Y+8	; 0x08
    62cc:	89 85       	ldd	r24, Y+9	; 0x09
    62ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    62d0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    62d4:	dc 01       	movw	r26, r24
    62d6:	cb 01       	movw	r24, r22
    62d8:	9e 83       	std	Y+6, r25	; 0x06
    62da:	8d 83       	std	Y+5, r24	; 0x05
    62dc:	8d 81       	ldd	r24, Y+5	; 0x05
    62de:	9e 81       	ldd	r25, Y+6	; 0x06
    62e0:	9a 83       	std	Y+2, r25	; 0x02
    62e2:	89 83       	std	Y+1, r24	; 0x01
    62e4:	89 81       	ldd	r24, Y+1	; 0x01
    62e6:	9a 81       	ldd	r25, Y+2	; 0x02
    62e8:	01 97       	sbiw	r24, 0x01	; 1
    62ea:	f1 f7       	brne	.-4      	; 0x62e8 <CLCD_voidSendData+0x112>
    62ec:	9a 83       	std	Y+2, r25	; 0x02
    62ee:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);

}
    62f0:	2f 96       	adiw	r28, 0x0f	; 15
    62f2:	0f b6       	in	r0, 0x3f	; 63
    62f4:	f8 94       	cli
    62f6:	de bf       	out	0x3e, r29	; 62
    62f8:	0f be       	out	0x3f, r0	; 63
    62fa:	cd bf       	out	0x3d, r28	; 61
    62fc:	cf 91       	pop	r28
    62fe:	df 91       	pop	r29
    6300:	08 95       	ret

00006302 <CLCD_voidSendCommand>:
* Parameters :
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (CLCD_voidSendData)
*/
void CLCD_voidSendCommand ( u8 Copy_u8Command ){
    6302:	df 93       	push	r29
    6304:	cf 93       	push	r28
    6306:	cd b7       	in	r28, 0x3d	; 61
    6308:	de b7       	in	r29, 0x3e	; 62
    630a:	2f 97       	sbiw	r28, 0x0f	; 15
    630c:	0f b6       	in	r0, 0x3f	; 63
    630e:	f8 94       	cli
    6310:	de bf       	out	0x3e, r29	; 62
    6312:	0f be       	out	0x3f, r0	; 63
    6314:	cd bf       	out	0x3d, r28	; 61
    6316:	8f 87       	std	Y+15, r24	; 0x0f

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      8 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#if   CLCD_MODE == 8

	DIO_enumSetPortValue ( CLCD_DATA_PORT    , Copy_u8Command     );
    6318:	81 e0       	ldi	r24, 0x01	; 1
    631a:	6f 85       	ldd	r22, Y+15	; 0x0f
    631c:	0e 94 74 2c 	call	0x58e8	; 0x58e8 <DIO_enumSetPortValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    6320:	83 e0       	ldi	r24, 0x03	; 3
    6322:	60 e0       	ldi	r22, 0x00	; 0
    6324:	40 e0       	ldi	r20, 0x00	; 0
    6326:	0e 94 72 28 	call	0x50e4	; 0x50e4 <DIO_enumSetPinValue>
	// RW always connect to GND to Write
	DIO_enumSetPinValue          (CLCD_CONTROL_PORT,CLCD_RW , DIO_PIN_LOW    );
    632a:	83 e0       	ldi	r24, 0x03	; 3
    632c:	61 e0       	ldi	r22, 0x01	; 1
    632e:	40 e0       	ldi	r20, 0x00	; 0
    6330:	0e 94 72 28 	call	0x50e4	; 0x50e4 <DIO_enumSetPinValue>
	CLCD_voidSendFallingEdge();
    6334:	0e 94 db 37 	call	0x6fb6	; 0x6fb6 <CLCD_voidSendFallingEdge>
    6338:	80 e0       	ldi	r24, 0x00	; 0
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	a0 e8       	ldi	r26, 0x80	; 128
    633e:	bf e3       	ldi	r27, 0x3F	; 63
    6340:	8b 87       	std	Y+11, r24	; 0x0b
    6342:	9c 87       	std	Y+12, r25	; 0x0c
    6344:	ad 87       	std	Y+13, r26	; 0x0d
    6346:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6348:	6b 85       	ldd	r22, Y+11	; 0x0b
    634a:	7c 85       	ldd	r23, Y+12	; 0x0c
    634c:	8d 85       	ldd	r24, Y+13	; 0x0d
    634e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6350:	20 e0       	ldi	r18, 0x00	; 0
    6352:	30 e0       	ldi	r19, 0x00	; 0
    6354:	4a ef       	ldi	r20, 0xFA	; 250
    6356:	54 e4       	ldi	r21, 0x44	; 68
    6358:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    635c:	dc 01       	movw	r26, r24
    635e:	cb 01       	movw	r24, r22
    6360:	8f 83       	std	Y+7, r24	; 0x07
    6362:	98 87       	std	Y+8, r25	; 0x08
    6364:	a9 87       	std	Y+9, r26	; 0x09
    6366:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6368:	6f 81       	ldd	r22, Y+7	; 0x07
    636a:	78 85       	ldd	r23, Y+8	; 0x08
    636c:	89 85       	ldd	r24, Y+9	; 0x09
    636e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6370:	20 e0       	ldi	r18, 0x00	; 0
    6372:	30 e0       	ldi	r19, 0x00	; 0
    6374:	40 e8       	ldi	r20, 0x80	; 128
    6376:	5f e3       	ldi	r21, 0x3F	; 63
    6378:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    637c:	88 23       	and	r24, r24
    637e:	2c f4       	brge	.+10     	; 0x638a <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    6380:	81 e0       	ldi	r24, 0x01	; 1
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	9e 83       	std	Y+6, r25	; 0x06
    6386:	8d 83       	std	Y+5, r24	; 0x05
    6388:	3f c0       	rjmp	.+126    	; 0x6408 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    638a:	6f 81       	ldd	r22, Y+7	; 0x07
    638c:	78 85       	ldd	r23, Y+8	; 0x08
    638e:	89 85       	ldd	r24, Y+9	; 0x09
    6390:	9a 85       	ldd	r25, Y+10	; 0x0a
    6392:	20 e0       	ldi	r18, 0x00	; 0
    6394:	3f ef       	ldi	r19, 0xFF	; 255
    6396:	4f e7       	ldi	r20, 0x7F	; 127
    6398:	57 e4       	ldi	r21, 0x47	; 71
    639a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    639e:	18 16       	cp	r1, r24
    63a0:	4c f5       	brge	.+82     	; 0x63f4 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    63a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    63a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    63a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    63a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    63aa:	20 e0       	ldi	r18, 0x00	; 0
    63ac:	30 e0       	ldi	r19, 0x00	; 0
    63ae:	40 e2       	ldi	r20, 0x20	; 32
    63b0:	51 e4       	ldi	r21, 0x41	; 65
    63b2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    63b6:	dc 01       	movw	r26, r24
    63b8:	cb 01       	movw	r24, r22
    63ba:	bc 01       	movw	r22, r24
    63bc:	cd 01       	movw	r24, r26
    63be:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    63c2:	dc 01       	movw	r26, r24
    63c4:	cb 01       	movw	r24, r22
    63c6:	9e 83       	std	Y+6, r25	; 0x06
    63c8:	8d 83       	std	Y+5, r24	; 0x05
    63ca:	0f c0       	rjmp	.+30     	; 0x63ea <CLCD_voidSendCommand+0xe8>
    63cc:	88 ec       	ldi	r24, 0xC8	; 200
    63ce:	90 e0       	ldi	r25, 0x00	; 0
    63d0:	9c 83       	std	Y+4, r25	; 0x04
    63d2:	8b 83       	std	Y+3, r24	; 0x03
    63d4:	8b 81       	ldd	r24, Y+3	; 0x03
    63d6:	9c 81       	ldd	r25, Y+4	; 0x04
    63d8:	01 97       	sbiw	r24, 0x01	; 1
    63da:	f1 f7       	brne	.-4      	; 0x63d8 <CLCD_voidSendCommand+0xd6>
    63dc:	9c 83       	std	Y+4, r25	; 0x04
    63de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    63e0:	8d 81       	ldd	r24, Y+5	; 0x05
    63e2:	9e 81       	ldd	r25, Y+6	; 0x06
    63e4:	01 97       	sbiw	r24, 0x01	; 1
    63e6:	9e 83       	std	Y+6, r25	; 0x06
    63e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    63ea:	8d 81       	ldd	r24, Y+5	; 0x05
    63ec:	9e 81       	ldd	r25, Y+6	; 0x06
    63ee:	00 97       	sbiw	r24, 0x00	; 0
    63f0:	69 f7       	brne	.-38     	; 0x63cc <CLCD_voidSendCommand+0xca>
    63f2:	14 c0       	rjmp	.+40     	; 0x641c <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    63f4:	6f 81       	ldd	r22, Y+7	; 0x07
    63f6:	78 85       	ldd	r23, Y+8	; 0x08
    63f8:	89 85       	ldd	r24, Y+9	; 0x09
    63fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    63fc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6400:	dc 01       	movw	r26, r24
    6402:	cb 01       	movw	r24, r22
    6404:	9e 83       	std	Y+6, r25	; 0x06
    6406:	8d 83       	std	Y+5, r24	; 0x05
    6408:	8d 81       	ldd	r24, Y+5	; 0x05
    640a:	9e 81       	ldd	r25, Y+6	; 0x06
    640c:	9a 83       	std	Y+2, r25	; 0x02
    640e:	89 83       	std	Y+1, r24	; 0x01
    6410:	89 81       	ldd	r24, Y+1	; 0x01
    6412:	9a 81       	ldd	r25, Y+2	; 0x02
    6414:	01 97       	sbiw	r24, 0x01	; 1
    6416:	f1 f7       	brne	.-4      	; 0x6414 <CLCD_voidSendCommand+0x112>
    6418:	9a 83       	std	Y+2, r25	; 0x02
    641a:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);

}
    641c:	2f 96       	adiw	r28, 0x0f	; 15
    641e:	0f b6       	in	r0, 0x3f	; 63
    6420:	f8 94       	cli
    6422:	de bf       	out	0x3e, r29	; 62
    6424:	0f be       	out	0x3f, r0	; 63
    6426:	cd bf       	out	0x3d, r28	; 61
    6428:	cf 91       	pop	r28
    642a:	df 91       	pop	r29
    642c:	08 95       	ret

0000642e <CLCD_voidSendString>:
* Breif : This Function send string to the port which is defined in config.h
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){
    642e:	df 93       	push	r29
    6430:	cf 93       	push	r28
    6432:	00 d0       	rcall	.+0      	; 0x6434 <CLCD_voidSendString+0x6>
    6434:	0f 92       	push	r0
    6436:	cd b7       	in	r28, 0x3d	; 61
    6438:	de b7       	in	r29, 0x3e	; 62
    643a:	9b 83       	std	Y+3, r25	; 0x03
    643c:	8a 83       	std	Y+2, r24	; 0x02

	u8 LOC_u8Iterator = 0 ;
    643e:	19 82       	std	Y+1, r1	; 0x01
    6440:	0e c0       	rjmp	.+28     	; 0x645e <CLCD_voidSendString+0x30>

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
    6442:	89 81       	ldd	r24, Y+1	; 0x01
    6444:	28 2f       	mov	r18, r24
    6446:	30 e0       	ldi	r19, 0x00	; 0
    6448:	8a 81       	ldd	r24, Y+2	; 0x02
    644a:	9b 81       	ldd	r25, Y+3	; 0x03
    644c:	fc 01       	movw	r30, r24
    644e:	e2 0f       	add	r30, r18
    6450:	f3 1f       	adc	r31, r19
    6452:	80 81       	ld	r24, Z
    6454:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <CLCD_voidSendData>
		LOC_u8Iterator++ ;
    6458:	89 81       	ldd	r24, Y+1	; 0x01
    645a:	8f 5f       	subi	r24, 0xFF	; 255
    645c:	89 83       	std	Y+1, r24	; 0x01
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    645e:	89 81       	ldd	r24, Y+1	; 0x01
    6460:	28 2f       	mov	r18, r24
    6462:	30 e0       	ldi	r19, 0x00	; 0
    6464:	8a 81       	ldd	r24, Y+2	; 0x02
    6466:	9b 81       	ldd	r25, Y+3	; 0x03
    6468:	fc 01       	movw	r30, r24
    646a:	e2 0f       	add	r30, r18
    646c:	f3 1f       	adc	r31, r19
    646e:	80 81       	ld	r24, Z
    6470:	88 23       	and	r24, r24
    6472:	39 f7       	brne	.-50     	; 0x6442 <CLCD_voidSendString+0x14>
		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;

	}

}
    6474:	0f 90       	pop	r0
    6476:	0f 90       	pop	r0
    6478:	0f 90       	pop	r0
    647a:	cf 91       	pop	r28
    647c:	df 91       	pop	r29
    647e:	08 95       	ret

00006480 <CLCD_voidSendNumber>:
* Breif : This Function send number to the port which is defined in config.h
* Parameters :
            => Copy_u64Number --> number that you want to display
* return : nothing
*/
void CLCD_voidSendNumber   ( u64 Copy_u64Number    ){
    6480:	af 92       	push	r10
    6482:	bf 92       	push	r11
    6484:	cf 92       	push	r12
    6486:	df 92       	push	r13
    6488:	ef 92       	push	r14
    648a:	ff 92       	push	r15
    648c:	0f 93       	push	r16
    648e:	1f 93       	push	r17
    6490:	df 93       	push	r29
    6492:	cf 93       	push	r28
    6494:	cd b7       	in	r28, 0x3d	; 61
    6496:	de b7       	in	r29, 0x3e	; 62
    6498:	c6 56       	subi	r28, 0x66	; 102
    649a:	d0 40       	sbci	r29, 0x00	; 0
    649c:	0f b6       	in	r0, 0x3f	; 63
    649e:	f8 94       	cli
    64a0:	de bf       	out	0x3e, r29	; 62
    64a2:	0f be       	out	0x3f, r0	; 63
    64a4:	cd bf       	out	0x3d, r28	; 61
    64a6:	29 87       	std	Y+9, r18	; 0x09
    64a8:	3a 87       	std	Y+10, r19	; 0x0a
    64aa:	4b 87       	std	Y+11, r20	; 0x0b
    64ac:	5c 87       	std	Y+12, r21	; 0x0c
    64ae:	6d 87       	std	Y+13, r22	; 0x0d
    64b0:	7e 87       	std	Y+14, r23	; 0x0e
    64b2:	8f 87       	std	Y+15, r24	; 0x0f
    64b4:	98 8b       	std	Y+16, r25	; 0x10

	u64 LOC_u64Reversed = 1 ;
    64b6:	81 e0       	ldi	r24, 0x01	; 1
    64b8:	89 83       	std	Y+1, r24	; 0x01
    64ba:	1a 82       	std	Y+2, r1	; 0x02
    64bc:	1b 82       	std	Y+3, r1	; 0x03
    64be:	1c 82       	std	Y+4, r1	; 0x04
    64c0:	1d 82       	std	Y+5, r1	; 0x05
    64c2:	1e 82       	std	Y+6, r1	; 0x06
    64c4:	1f 82       	std	Y+7, r1	; 0x07
    64c6:	18 86       	std	Y+8, r1	; 0x08

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }
    64c8:	89 85       	ldd	r24, Y+9	; 0x09
    64ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    64cc:	89 2b       	or	r24, r25
    64ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    64d0:	89 2b       	or	r24, r25
    64d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    64d4:	89 2b       	or	r24, r25
    64d6:	9d 85       	ldd	r25, Y+13	; 0x0d
    64d8:	89 2b       	or	r24, r25
    64da:	9e 85       	ldd	r25, Y+14	; 0x0e
    64dc:	89 2b       	or	r24, r25
    64de:	9f 85       	ldd	r25, Y+15	; 0x0f
    64e0:	89 2b       	or	r24, r25
    64e2:	98 89       	ldd	r25, Y+16	; 0x10
    64e4:	89 2b       	or	r24, r25
    64e6:	88 23       	and	r24, r24
    64e8:	09 f0       	breq	.+2      	; 0x64ec <CLCD_voidSendNumber+0x6c>
    64ea:	62 c3       	rjmp	.+1732   	; 0x6bb0 <CLCD_voidSendNumber+0x730>
    64ec:	80 e3       	ldi	r24, 0x30	; 48
    64ee:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <CLCD_voidSendData>
    64f2:	ef c3       	rjmp	.+2014   	; 0x6cd2 <CLCD_voidSendNumber+0x852>

	else{

		while( Copy_u64Number != 0 ){

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
    64f4:	29 81       	ldd	r18, Y+1	; 0x01
    64f6:	3a 81       	ldd	r19, Y+2	; 0x02
    64f8:	4b 81       	ldd	r20, Y+3	; 0x03
    64fa:	5c 81       	ldd	r21, Y+4	; 0x04
    64fc:	6d 81       	ldd	r22, Y+5	; 0x05
    64fe:	7e 81       	ldd	r23, Y+6	; 0x06
    6500:	8f 81       	ldd	r24, Y+7	; 0x07
    6502:	98 85       	ldd	r25, Y+8	; 0x08
    6504:	a2 2e       	mov	r10, r18
    6506:	b3 2e       	mov	r11, r19
    6508:	c4 2e       	mov	r12, r20
    650a:	d5 2e       	mov	r13, r21
    650c:	e6 2e       	mov	r14, r22
    650e:	f7 2e       	mov	r15, r23
    6510:	08 2f       	mov	r16, r24
    6512:	19 2f       	mov	r17, r25
    6514:	2a 2d       	mov	r18, r10
    6516:	3b 2d       	mov	r19, r11
    6518:	4c 2d       	mov	r20, r12
    651a:	5d 2d       	mov	r21, r13
    651c:	6e 2d       	mov	r22, r14
    651e:	7f 2d       	mov	r23, r15
    6520:	80 2f       	mov	r24, r16
    6522:	91 2f       	mov	r25, r17
    6524:	01 e0       	ldi	r16, 0x01	; 1
    6526:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    652a:	29 a3       	std	Y+33, r18	; 0x21
    652c:	3a a3       	std	Y+34, r19	; 0x22
    652e:	4b a3       	std	Y+35, r20	; 0x23
    6530:	5c a3       	std	Y+36, r21	; 0x24
    6532:	6d a3       	std	Y+37, r22	; 0x25
    6534:	7e a3       	std	Y+38, r23	; 0x26
    6536:	8f a3       	std	Y+39, r24	; 0x27
    6538:	98 a7       	std	Y+40, r25	; 0x28
    653a:	29 a1       	ldd	r18, Y+33	; 0x21
    653c:	3a a1       	ldd	r19, Y+34	; 0x22
    653e:	4b a1       	ldd	r20, Y+35	; 0x23
    6540:	5c a1       	ldd	r21, Y+36	; 0x24
    6542:	6d a1       	ldd	r22, Y+37	; 0x25
    6544:	7e a1       	ldd	r23, Y+38	; 0x26
    6546:	8f a1       	ldd	r24, Y+39	; 0x27
    6548:	98 a5       	ldd	r25, Y+40	; 0x28
    654a:	02 e0       	ldi	r16, 0x02	; 2
    654c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    6550:	29 a7       	std	Y+41, r18	; 0x29
    6552:	3a a7       	std	Y+42, r19	; 0x2a
    6554:	4b a7       	std	Y+43, r20	; 0x2b
    6556:	5c a7       	std	Y+44, r21	; 0x2c
    6558:	6d a7       	std	Y+45, r22	; 0x2d
    655a:	7e a7       	std	Y+46, r23	; 0x2e
    655c:	8f a7       	std	Y+47, r24	; 0x2f
    655e:	98 ab       	std	Y+48, r25	; 0x30
    6560:	89 a1       	ldd	r24, Y+33	; 0x21
    6562:	99 a5       	ldd	r25, Y+41	; 0x29
    6564:	89 0f       	add	r24, r25
    6566:	89 ab       	std	Y+49, r24	; 0x31
    6568:	81 e0       	ldi	r24, 0x01	; 1
    656a:	89 af       	std	Y+57, r24	; 0x39
    656c:	99 a9       	ldd	r25, Y+49	; 0x31
    656e:	89 a1       	ldd	r24, Y+33	; 0x21
    6570:	98 17       	cp	r25, r24
    6572:	08 f0       	brcs	.+2      	; 0x6576 <CLCD_voidSendNumber+0xf6>
    6574:	19 ae       	std	Y+57, r1	; 0x39
    6576:	9a a1       	ldd	r25, Y+34	; 0x22
    6578:	8a a5       	ldd	r24, Y+42	; 0x2a
    657a:	98 0f       	add	r25, r24
    657c:	9a ab       	std	Y+50, r25	; 0x32
    657e:	91 e0       	ldi	r25, 0x01	; 1
    6580:	9a af       	std	Y+58, r25	; 0x3a
    6582:	8a a9       	ldd	r24, Y+50	; 0x32
    6584:	9a a1       	ldd	r25, Y+34	; 0x22
    6586:	89 17       	cp	r24, r25
    6588:	08 f0       	brcs	.+2      	; 0x658c <CLCD_voidSendNumber+0x10c>
    658a:	1a ae       	std	Y+58, r1	; 0x3a
    658c:	89 ad       	ldd	r24, Y+57	; 0x39
    658e:	9a a9       	ldd	r25, Y+50	; 0x32
    6590:	89 0f       	add	r24, r25
    6592:	8b af       	std	Y+59, r24	; 0x3b
    6594:	81 e0       	ldi	r24, 0x01	; 1
    6596:	8c af       	std	Y+60, r24	; 0x3c
    6598:	9b ad       	ldd	r25, Y+59	; 0x3b
    659a:	8a a9       	ldd	r24, Y+50	; 0x32
    659c:	98 17       	cp	r25, r24
    659e:	08 f0       	brcs	.+2      	; 0x65a2 <CLCD_voidSendNumber+0x122>
    65a0:	1c ae       	std	Y+60, r1	; 0x3c
    65a2:	9a ad       	ldd	r25, Y+58	; 0x3a
    65a4:	8c ad       	ldd	r24, Y+60	; 0x3c
    65a6:	98 2b       	or	r25, r24
    65a8:	9a af       	std	Y+58, r25	; 0x3a
    65aa:	9b ad       	ldd	r25, Y+59	; 0x3b
    65ac:	9a ab       	std	Y+50, r25	; 0x32
    65ae:	8b a1       	ldd	r24, Y+35	; 0x23
    65b0:	9b a5       	ldd	r25, Y+43	; 0x2b
    65b2:	89 0f       	add	r24, r25
    65b4:	8b ab       	std	Y+51, r24	; 0x33
    65b6:	81 e0       	ldi	r24, 0x01	; 1
    65b8:	8d af       	std	Y+61, r24	; 0x3d
    65ba:	9b a9       	ldd	r25, Y+51	; 0x33
    65bc:	8b a1       	ldd	r24, Y+35	; 0x23
    65be:	98 17       	cp	r25, r24
    65c0:	08 f0       	brcs	.+2      	; 0x65c4 <CLCD_voidSendNumber+0x144>
    65c2:	1d ae       	std	Y+61, r1	; 0x3d
    65c4:	9a ad       	ldd	r25, Y+58	; 0x3a
    65c6:	8b a9       	ldd	r24, Y+51	; 0x33
    65c8:	98 0f       	add	r25, r24
    65ca:	9e af       	std	Y+62, r25	; 0x3e
    65cc:	91 e0       	ldi	r25, 0x01	; 1
    65ce:	9f af       	std	Y+63, r25	; 0x3f
    65d0:	8e ad       	ldd	r24, Y+62	; 0x3e
    65d2:	9b a9       	ldd	r25, Y+51	; 0x33
    65d4:	89 17       	cp	r24, r25
    65d6:	08 f0       	brcs	.+2      	; 0x65da <CLCD_voidSendNumber+0x15a>
    65d8:	1f ae       	std	Y+63, r1	; 0x3f
    65da:	8d ad       	ldd	r24, Y+61	; 0x3d
    65dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    65de:	89 2b       	or	r24, r25
    65e0:	8d af       	std	Y+61, r24	; 0x3d
    65e2:	8e ad       	ldd	r24, Y+62	; 0x3e
    65e4:	8b ab       	std	Y+51, r24	; 0x33
    65e6:	9c a1       	ldd	r25, Y+36	; 0x24
    65e8:	8c a5       	ldd	r24, Y+44	; 0x2c
    65ea:	98 0f       	add	r25, r24
    65ec:	9c ab       	std	Y+52, r25	; 0x34
    65ee:	91 e0       	ldi	r25, 0x01	; 1
    65f0:	21 96       	adiw	r28, 0x01	; 1
    65f2:	9f af       	std	Y+63, r25	; 0x3f
    65f4:	21 97       	sbiw	r28, 0x01	; 1
    65f6:	8c a9       	ldd	r24, Y+52	; 0x34
    65f8:	9c a1       	ldd	r25, Y+36	; 0x24
    65fa:	89 17       	cp	r24, r25
    65fc:	18 f0       	brcs	.+6      	; 0x6604 <CLCD_voidSendNumber+0x184>
    65fe:	21 96       	adiw	r28, 0x01	; 1
    6600:	1f ae       	std	Y+63, r1	; 0x3f
    6602:	21 97       	sbiw	r28, 0x01	; 1
    6604:	8d ad       	ldd	r24, Y+61	; 0x3d
    6606:	9c a9       	ldd	r25, Y+52	; 0x34
    6608:	89 0f       	add	r24, r25
    660a:	22 96       	adiw	r28, 0x02	; 2
    660c:	8f af       	std	Y+63, r24	; 0x3f
    660e:	22 97       	sbiw	r28, 0x02	; 2
    6610:	81 e0       	ldi	r24, 0x01	; 1
    6612:	23 96       	adiw	r28, 0x03	; 3
    6614:	8f af       	std	Y+63, r24	; 0x3f
    6616:	23 97       	sbiw	r28, 0x03	; 3
    6618:	22 96       	adiw	r28, 0x02	; 2
    661a:	9f ad       	ldd	r25, Y+63	; 0x3f
    661c:	22 97       	sbiw	r28, 0x02	; 2
    661e:	8c a9       	ldd	r24, Y+52	; 0x34
    6620:	98 17       	cp	r25, r24
    6622:	18 f0       	brcs	.+6      	; 0x662a <CLCD_voidSendNumber+0x1aa>
    6624:	23 96       	adiw	r28, 0x03	; 3
    6626:	1f ae       	std	Y+63, r1	; 0x3f
    6628:	23 97       	sbiw	r28, 0x03	; 3
    662a:	21 96       	adiw	r28, 0x01	; 1
    662c:	9f ad       	ldd	r25, Y+63	; 0x3f
    662e:	21 97       	sbiw	r28, 0x01	; 1
    6630:	23 96       	adiw	r28, 0x03	; 3
    6632:	8f ad       	ldd	r24, Y+63	; 0x3f
    6634:	23 97       	sbiw	r28, 0x03	; 3
    6636:	98 2b       	or	r25, r24
    6638:	21 96       	adiw	r28, 0x01	; 1
    663a:	9f af       	std	Y+63, r25	; 0x3f
    663c:	21 97       	sbiw	r28, 0x01	; 1
    663e:	22 96       	adiw	r28, 0x02	; 2
    6640:	9f ad       	ldd	r25, Y+63	; 0x3f
    6642:	22 97       	sbiw	r28, 0x02	; 2
    6644:	9c ab       	std	Y+52, r25	; 0x34
    6646:	8d a1       	ldd	r24, Y+37	; 0x25
    6648:	9d a5       	ldd	r25, Y+45	; 0x2d
    664a:	89 0f       	add	r24, r25
    664c:	8d ab       	std	Y+53, r24	; 0x35
    664e:	81 e0       	ldi	r24, 0x01	; 1
    6650:	24 96       	adiw	r28, 0x04	; 4
    6652:	8f af       	std	Y+63, r24	; 0x3f
    6654:	24 97       	sbiw	r28, 0x04	; 4
    6656:	9d a9       	ldd	r25, Y+53	; 0x35
    6658:	8d a1       	ldd	r24, Y+37	; 0x25
    665a:	98 17       	cp	r25, r24
    665c:	18 f0       	brcs	.+6      	; 0x6664 <CLCD_voidSendNumber+0x1e4>
    665e:	24 96       	adiw	r28, 0x04	; 4
    6660:	1f ae       	std	Y+63, r1	; 0x3f
    6662:	24 97       	sbiw	r28, 0x04	; 4
    6664:	21 96       	adiw	r28, 0x01	; 1
    6666:	9f ad       	ldd	r25, Y+63	; 0x3f
    6668:	21 97       	sbiw	r28, 0x01	; 1
    666a:	8d a9       	ldd	r24, Y+53	; 0x35
    666c:	98 0f       	add	r25, r24
    666e:	25 96       	adiw	r28, 0x05	; 5
    6670:	9f af       	std	Y+63, r25	; 0x3f
    6672:	25 97       	sbiw	r28, 0x05	; 5
    6674:	91 e0       	ldi	r25, 0x01	; 1
    6676:	26 96       	adiw	r28, 0x06	; 6
    6678:	9f af       	std	Y+63, r25	; 0x3f
    667a:	26 97       	sbiw	r28, 0x06	; 6
    667c:	25 96       	adiw	r28, 0x05	; 5
    667e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6680:	25 97       	sbiw	r28, 0x05	; 5
    6682:	9d a9       	ldd	r25, Y+53	; 0x35
    6684:	89 17       	cp	r24, r25
    6686:	18 f0       	brcs	.+6      	; 0x668e <CLCD_voidSendNumber+0x20e>
    6688:	26 96       	adiw	r28, 0x06	; 6
    668a:	1f ae       	std	Y+63, r1	; 0x3f
    668c:	26 97       	sbiw	r28, 0x06	; 6
    668e:	24 96       	adiw	r28, 0x04	; 4
    6690:	8f ad       	ldd	r24, Y+63	; 0x3f
    6692:	24 97       	sbiw	r28, 0x04	; 4
    6694:	26 96       	adiw	r28, 0x06	; 6
    6696:	9f ad       	ldd	r25, Y+63	; 0x3f
    6698:	26 97       	sbiw	r28, 0x06	; 6
    669a:	89 2b       	or	r24, r25
    669c:	24 96       	adiw	r28, 0x04	; 4
    669e:	8f af       	std	Y+63, r24	; 0x3f
    66a0:	24 97       	sbiw	r28, 0x04	; 4
    66a2:	25 96       	adiw	r28, 0x05	; 5
    66a4:	8f ad       	ldd	r24, Y+63	; 0x3f
    66a6:	25 97       	sbiw	r28, 0x05	; 5
    66a8:	8d ab       	std	Y+53, r24	; 0x35
    66aa:	9e a1       	ldd	r25, Y+38	; 0x26
    66ac:	8e a5       	ldd	r24, Y+46	; 0x2e
    66ae:	98 0f       	add	r25, r24
    66b0:	9e ab       	std	Y+54, r25	; 0x36
    66b2:	91 e0       	ldi	r25, 0x01	; 1
    66b4:	27 96       	adiw	r28, 0x07	; 7
    66b6:	9f af       	std	Y+63, r25	; 0x3f
    66b8:	27 97       	sbiw	r28, 0x07	; 7
    66ba:	8e a9       	ldd	r24, Y+54	; 0x36
    66bc:	9e a1       	ldd	r25, Y+38	; 0x26
    66be:	89 17       	cp	r24, r25
    66c0:	18 f0       	brcs	.+6      	; 0x66c8 <CLCD_voidSendNumber+0x248>
    66c2:	27 96       	adiw	r28, 0x07	; 7
    66c4:	1f ae       	std	Y+63, r1	; 0x3f
    66c6:	27 97       	sbiw	r28, 0x07	; 7
    66c8:	24 96       	adiw	r28, 0x04	; 4
    66ca:	8f ad       	ldd	r24, Y+63	; 0x3f
    66cc:	24 97       	sbiw	r28, 0x04	; 4
    66ce:	9e a9       	ldd	r25, Y+54	; 0x36
    66d0:	89 0f       	add	r24, r25
    66d2:	28 96       	adiw	r28, 0x08	; 8
    66d4:	8f af       	std	Y+63, r24	; 0x3f
    66d6:	28 97       	sbiw	r28, 0x08	; 8
    66d8:	81 e0       	ldi	r24, 0x01	; 1
    66da:	29 96       	adiw	r28, 0x09	; 9
    66dc:	8f af       	std	Y+63, r24	; 0x3f
    66de:	29 97       	sbiw	r28, 0x09	; 9
    66e0:	28 96       	adiw	r28, 0x08	; 8
    66e2:	9f ad       	ldd	r25, Y+63	; 0x3f
    66e4:	28 97       	sbiw	r28, 0x08	; 8
    66e6:	8e a9       	ldd	r24, Y+54	; 0x36
    66e8:	98 17       	cp	r25, r24
    66ea:	18 f0       	brcs	.+6      	; 0x66f2 <CLCD_voidSendNumber+0x272>
    66ec:	29 96       	adiw	r28, 0x09	; 9
    66ee:	1f ae       	std	Y+63, r1	; 0x3f
    66f0:	29 97       	sbiw	r28, 0x09	; 9
    66f2:	27 96       	adiw	r28, 0x07	; 7
    66f4:	9f ad       	ldd	r25, Y+63	; 0x3f
    66f6:	27 97       	sbiw	r28, 0x07	; 7
    66f8:	29 96       	adiw	r28, 0x09	; 9
    66fa:	8f ad       	ldd	r24, Y+63	; 0x3f
    66fc:	29 97       	sbiw	r28, 0x09	; 9
    66fe:	98 2b       	or	r25, r24
    6700:	27 96       	adiw	r28, 0x07	; 7
    6702:	9f af       	std	Y+63, r25	; 0x3f
    6704:	27 97       	sbiw	r28, 0x07	; 7
    6706:	28 96       	adiw	r28, 0x08	; 8
    6708:	9f ad       	ldd	r25, Y+63	; 0x3f
    670a:	28 97       	sbiw	r28, 0x08	; 8
    670c:	9e ab       	std	Y+54, r25	; 0x36
    670e:	8f a1       	ldd	r24, Y+39	; 0x27
    6710:	9f a5       	ldd	r25, Y+47	; 0x2f
    6712:	89 0f       	add	r24, r25
    6714:	8f ab       	std	Y+55, r24	; 0x37
    6716:	81 e0       	ldi	r24, 0x01	; 1
    6718:	2a 96       	adiw	r28, 0x0a	; 10
    671a:	8f af       	std	Y+63, r24	; 0x3f
    671c:	2a 97       	sbiw	r28, 0x0a	; 10
    671e:	9f a9       	ldd	r25, Y+55	; 0x37
    6720:	8f a1       	ldd	r24, Y+39	; 0x27
    6722:	98 17       	cp	r25, r24
    6724:	18 f0       	brcs	.+6      	; 0x672c <CLCD_voidSendNumber+0x2ac>
    6726:	2a 96       	adiw	r28, 0x0a	; 10
    6728:	1f ae       	std	Y+63, r1	; 0x3f
    672a:	2a 97       	sbiw	r28, 0x0a	; 10
    672c:	27 96       	adiw	r28, 0x07	; 7
    672e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6730:	27 97       	sbiw	r28, 0x07	; 7
    6732:	8f a9       	ldd	r24, Y+55	; 0x37
    6734:	98 0f       	add	r25, r24
    6736:	2b 96       	adiw	r28, 0x0b	; 11
    6738:	9f af       	std	Y+63, r25	; 0x3f
    673a:	2b 97       	sbiw	r28, 0x0b	; 11
    673c:	91 e0       	ldi	r25, 0x01	; 1
    673e:	2c 96       	adiw	r28, 0x0c	; 12
    6740:	9f af       	std	Y+63, r25	; 0x3f
    6742:	2c 97       	sbiw	r28, 0x0c	; 12
    6744:	2b 96       	adiw	r28, 0x0b	; 11
    6746:	8f ad       	ldd	r24, Y+63	; 0x3f
    6748:	2b 97       	sbiw	r28, 0x0b	; 11
    674a:	9f a9       	ldd	r25, Y+55	; 0x37
    674c:	89 17       	cp	r24, r25
    674e:	18 f0       	brcs	.+6      	; 0x6756 <CLCD_voidSendNumber+0x2d6>
    6750:	2c 96       	adiw	r28, 0x0c	; 12
    6752:	1f ae       	std	Y+63, r1	; 0x3f
    6754:	2c 97       	sbiw	r28, 0x0c	; 12
    6756:	2a 96       	adiw	r28, 0x0a	; 10
    6758:	8f ad       	ldd	r24, Y+63	; 0x3f
    675a:	2a 97       	sbiw	r28, 0x0a	; 10
    675c:	2c 96       	adiw	r28, 0x0c	; 12
    675e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6760:	2c 97       	sbiw	r28, 0x0c	; 12
    6762:	89 2b       	or	r24, r25
    6764:	2a 96       	adiw	r28, 0x0a	; 10
    6766:	8f af       	std	Y+63, r24	; 0x3f
    6768:	2a 97       	sbiw	r28, 0x0a	; 10
    676a:	2b 96       	adiw	r28, 0x0b	; 11
    676c:	8f ad       	ldd	r24, Y+63	; 0x3f
    676e:	2b 97       	sbiw	r28, 0x0b	; 11
    6770:	8f ab       	std	Y+55, r24	; 0x37
    6772:	98 a5       	ldd	r25, Y+40	; 0x28
    6774:	88 a9       	ldd	r24, Y+48	; 0x30
    6776:	98 0f       	add	r25, r24
    6778:	98 af       	std	Y+56, r25	; 0x38
    677a:	2a 96       	adiw	r28, 0x0a	; 10
    677c:	8f ad       	ldd	r24, Y+63	; 0x3f
    677e:	2a 97       	sbiw	r28, 0x0a	; 10
    6780:	98 ad       	ldd	r25, Y+56	; 0x38
    6782:	89 0f       	add	r24, r25
    6784:	88 af       	std	Y+56, r24	; 0x38
    6786:	89 a9       	ldd	r24, Y+49	; 0x31
    6788:	89 8f       	std	Y+25, r24	; 0x19
    678a:	9a a9       	ldd	r25, Y+50	; 0x32
    678c:	9a 8f       	std	Y+26, r25	; 0x1a
    678e:	8b a9       	ldd	r24, Y+51	; 0x33
    6790:	8b 8f       	std	Y+27, r24	; 0x1b
    6792:	9c a9       	ldd	r25, Y+52	; 0x34
    6794:	9c 8f       	std	Y+28, r25	; 0x1c
    6796:	8d a9       	ldd	r24, Y+53	; 0x35
    6798:	8d 8f       	std	Y+29, r24	; 0x1d
    679a:	9e a9       	ldd	r25, Y+54	; 0x36
    679c:	9e 8f       	std	Y+30, r25	; 0x1e
    679e:	8f a9       	ldd	r24, Y+55	; 0x37
    67a0:	8f 8f       	std	Y+31, r24	; 0x1f
    67a2:	98 ad       	ldd	r25, Y+56	; 0x38
    67a4:	98 a3       	std	Y+32, r25	; 0x20
    67a6:	a9 84       	ldd	r10, Y+9	; 0x09
    67a8:	ba 84       	ldd	r11, Y+10	; 0x0a
    67aa:	cb 84       	ldd	r12, Y+11	; 0x0b
    67ac:	dc 84       	ldd	r13, Y+12	; 0x0c
    67ae:	ed 84       	ldd	r14, Y+13	; 0x0d
    67b0:	fe 84       	ldd	r15, Y+14	; 0x0e
    67b2:	0f 85       	ldd	r16, Y+15	; 0x0f
    67b4:	18 89       	ldd	r17, Y+16	; 0x10
    67b6:	2a 2d       	mov	r18, r10
    67b8:	3b 2d       	mov	r19, r11
    67ba:	4c 2d       	mov	r20, r12
    67bc:	5d 2d       	mov	r21, r13
    67be:	6e 2d       	mov	r22, r14
    67c0:	7f 2d       	mov	r23, r15
    67c2:	80 2f       	mov	r24, r16
    67c4:	91 2f       	mov	r25, r17
    67c6:	0f 2e       	mov	r0, r31
    67c8:	fa e0       	ldi	r31, 0x0A	; 10
    67ca:	af 2e       	mov	r10, r31
    67cc:	f0 2d       	mov	r31, r0
    67ce:	bb 24       	eor	r11, r11
    67d0:	cc 24       	eor	r12, r12
    67d2:	dd 24       	eor	r13, r13
    67d4:	ee 24       	eor	r14, r14
    67d6:	ff 24       	eor	r15, r15
    67d8:	00 e0       	ldi	r16, 0x00	; 0
    67da:	10 e0       	ldi	r17, 0x00	; 0
    67dc:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    67e0:	a2 2e       	mov	r10, r18
    67e2:	b3 2e       	mov	r11, r19
    67e4:	c4 2e       	mov	r12, r20
    67e6:	d5 2e       	mov	r13, r21
    67e8:	e6 2e       	mov	r14, r22
    67ea:	f7 2e       	mov	r15, r23
    67ec:	08 2f       	mov	r16, r24
    67ee:	19 2f       	mov	r17, r25
    67f0:	a9 8a       	std	Y+17, r10	; 0x11
    67f2:	ba 8a       	std	Y+18, r11	; 0x12
    67f4:	cb 8a       	std	Y+19, r12	; 0x13
    67f6:	dc 8a       	std	Y+20, r13	; 0x14
    67f8:	ed 8a       	std	Y+21, r14	; 0x15
    67fa:	fe 8a       	std	Y+22, r15	; 0x16
    67fc:	0f 8b       	std	Y+23, r16	; 0x17
    67fe:	18 8f       	std	Y+24, r17	; 0x18
    6800:	89 8d       	ldd	r24, Y+25	; 0x19
    6802:	99 89       	ldd	r25, Y+17	; 0x11
    6804:	89 0f       	add	r24, r25
    6806:	2d 96       	adiw	r28, 0x0d	; 13
    6808:	8f af       	std	Y+63, r24	; 0x3f
    680a:	2d 97       	sbiw	r28, 0x0d	; 13
    680c:	81 e0       	ldi	r24, 0x01	; 1
    680e:	65 96       	adiw	r28, 0x15	; 21
    6810:	8f af       	std	Y+63, r24	; 0x3f
    6812:	65 97       	sbiw	r28, 0x15	; 21
    6814:	2d 96       	adiw	r28, 0x0d	; 13
    6816:	9f ad       	ldd	r25, Y+63	; 0x3f
    6818:	2d 97       	sbiw	r28, 0x0d	; 13
    681a:	89 8d       	ldd	r24, Y+25	; 0x19
    681c:	98 17       	cp	r25, r24
    681e:	18 f0       	brcs	.+6      	; 0x6826 <CLCD_voidSendNumber+0x3a6>
    6820:	65 96       	adiw	r28, 0x15	; 21
    6822:	1f ae       	std	Y+63, r1	; 0x3f
    6824:	65 97       	sbiw	r28, 0x15	; 21
    6826:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6828:	8a 89       	ldd	r24, Y+18	; 0x12
    682a:	98 0f       	add	r25, r24
    682c:	2e 96       	adiw	r28, 0x0e	; 14
    682e:	9f af       	std	Y+63, r25	; 0x3f
    6830:	2e 97       	sbiw	r28, 0x0e	; 14
    6832:	91 e0       	ldi	r25, 0x01	; 1
    6834:	66 96       	adiw	r28, 0x16	; 22
    6836:	9f af       	std	Y+63, r25	; 0x3f
    6838:	66 97       	sbiw	r28, 0x16	; 22
    683a:	2e 96       	adiw	r28, 0x0e	; 14
    683c:	8f ad       	ldd	r24, Y+63	; 0x3f
    683e:	2e 97       	sbiw	r28, 0x0e	; 14
    6840:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6842:	89 17       	cp	r24, r25
    6844:	18 f0       	brcs	.+6      	; 0x684c <CLCD_voidSendNumber+0x3cc>
    6846:	66 96       	adiw	r28, 0x16	; 22
    6848:	1f ae       	std	Y+63, r1	; 0x3f
    684a:	66 97       	sbiw	r28, 0x16	; 22
    684c:	65 96       	adiw	r28, 0x15	; 21
    684e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6850:	65 97       	sbiw	r28, 0x15	; 21
    6852:	2e 96       	adiw	r28, 0x0e	; 14
    6854:	9f ad       	ldd	r25, Y+63	; 0x3f
    6856:	2e 97       	sbiw	r28, 0x0e	; 14
    6858:	89 0f       	add	r24, r25
    685a:	67 96       	adiw	r28, 0x17	; 23
    685c:	8f af       	std	Y+63, r24	; 0x3f
    685e:	67 97       	sbiw	r28, 0x17	; 23
    6860:	81 e0       	ldi	r24, 0x01	; 1
    6862:	68 96       	adiw	r28, 0x18	; 24
    6864:	8f af       	std	Y+63, r24	; 0x3f
    6866:	68 97       	sbiw	r28, 0x18	; 24
    6868:	67 96       	adiw	r28, 0x17	; 23
    686a:	9f ad       	ldd	r25, Y+63	; 0x3f
    686c:	67 97       	sbiw	r28, 0x17	; 23
    686e:	2e 96       	adiw	r28, 0x0e	; 14
    6870:	8f ad       	ldd	r24, Y+63	; 0x3f
    6872:	2e 97       	sbiw	r28, 0x0e	; 14
    6874:	98 17       	cp	r25, r24
    6876:	18 f0       	brcs	.+6      	; 0x687e <CLCD_voidSendNumber+0x3fe>
    6878:	68 96       	adiw	r28, 0x18	; 24
    687a:	1f ae       	std	Y+63, r1	; 0x3f
    687c:	68 97       	sbiw	r28, 0x18	; 24
    687e:	66 96       	adiw	r28, 0x16	; 22
    6880:	9f ad       	ldd	r25, Y+63	; 0x3f
    6882:	66 97       	sbiw	r28, 0x16	; 22
    6884:	68 96       	adiw	r28, 0x18	; 24
    6886:	8f ad       	ldd	r24, Y+63	; 0x3f
    6888:	68 97       	sbiw	r28, 0x18	; 24
    688a:	98 2b       	or	r25, r24
    688c:	66 96       	adiw	r28, 0x16	; 22
    688e:	9f af       	std	Y+63, r25	; 0x3f
    6890:	66 97       	sbiw	r28, 0x16	; 22
    6892:	67 96       	adiw	r28, 0x17	; 23
    6894:	9f ad       	ldd	r25, Y+63	; 0x3f
    6896:	67 97       	sbiw	r28, 0x17	; 23
    6898:	2e 96       	adiw	r28, 0x0e	; 14
    689a:	9f af       	std	Y+63, r25	; 0x3f
    689c:	2e 97       	sbiw	r28, 0x0e	; 14
    689e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    68a0:	9b 89       	ldd	r25, Y+19	; 0x13
    68a2:	89 0f       	add	r24, r25
    68a4:	2f 96       	adiw	r28, 0x0f	; 15
    68a6:	8f af       	std	Y+63, r24	; 0x3f
    68a8:	2f 97       	sbiw	r28, 0x0f	; 15
    68aa:	81 e0       	ldi	r24, 0x01	; 1
    68ac:	69 96       	adiw	r28, 0x19	; 25
    68ae:	8f af       	std	Y+63, r24	; 0x3f
    68b0:	69 97       	sbiw	r28, 0x19	; 25
    68b2:	2f 96       	adiw	r28, 0x0f	; 15
    68b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    68b6:	2f 97       	sbiw	r28, 0x0f	; 15
    68b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    68ba:	98 17       	cp	r25, r24
    68bc:	18 f0       	brcs	.+6      	; 0x68c4 <CLCD_voidSendNumber+0x444>
    68be:	69 96       	adiw	r28, 0x19	; 25
    68c0:	1f ae       	std	Y+63, r1	; 0x3f
    68c2:	69 97       	sbiw	r28, 0x19	; 25
    68c4:	66 96       	adiw	r28, 0x16	; 22
    68c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    68c8:	66 97       	sbiw	r28, 0x16	; 22
    68ca:	2f 96       	adiw	r28, 0x0f	; 15
    68cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    68ce:	2f 97       	sbiw	r28, 0x0f	; 15
    68d0:	98 0f       	add	r25, r24
    68d2:	6a 96       	adiw	r28, 0x1a	; 26
    68d4:	9f af       	std	Y+63, r25	; 0x3f
    68d6:	6a 97       	sbiw	r28, 0x1a	; 26
    68d8:	91 e0       	ldi	r25, 0x01	; 1
    68da:	6b 96       	adiw	r28, 0x1b	; 27
    68dc:	9f af       	std	Y+63, r25	; 0x3f
    68de:	6b 97       	sbiw	r28, 0x1b	; 27
    68e0:	6a 96       	adiw	r28, 0x1a	; 26
    68e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    68e4:	6a 97       	sbiw	r28, 0x1a	; 26
    68e6:	2f 96       	adiw	r28, 0x0f	; 15
    68e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    68ea:	2f 97       	sbiw	r28, 0x0f	; 15
    68ec:	89 17       	cp	r24, r25
    68ee:	18 f0       	brcs	.+6      	; 0x68f6 <CLCD_voidSendNumber+0x476>
    68f0:	6b 96       	adiw	r28, 0x1b	; 27
    68f2:	1f ae       	std	Y+63, r1	; 0x3f
    68f4:	6b 97       	sbiw	r28, 0x1b	; 27
    68f6:	69 96       	adiw	r28, 0x19	; 25
    68f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    68fa:	69 97       	sbiw	r28, 0x19	; 25
    68fc:	6b 96       	adiw	r28, 0x1b	; 27
    68fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    6900:	6b 97       	sbiw	r28, 0x1b	; 27
    6902:	89 2b       	or	r24, r25
    6904:	69 96       	adiw	r28, 0x19	; 25
    6906:	8f af       	std	Y+63, r24	; 0x3f
    6908:	69 97       	sbiw	r28, 0x19	; 25
    690a:	6a 96       	adiw	r28, 0x1a	; 26
    690c:	8f ad       	ldd	r24, Y+63	; 0x3f
    690e:	6a 97       	sbiw	r28, 0x1a	; 26
    6910:	2f 96       	adiw	r28, 0x0f	; 15
    6912:	8f af       	std	Y+63, r24	; 0x3f
    6914:	2f 97       	sbiw	r28, 0x0f	; 15
    6916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6918:	8c 89       	ldd	r24, Y+20	; 0x14
    691a:	98 0f       	add	r25, r24
    691c:	60 96       	adiw	r28, 0x10	; 16
    691e:	9f af       	std	Y+63, r25	; 0x3f
    6920:	60 97       	sbiw	r28, 0x10	; 16
    6922:	91 e0       	ldi	r25, 0x01	; 1
    6924:	6c 96       	adiw	r28, 0x1c	; 28
    6926:	9f af       	std	Y+63, r25	; 0x3f
    6928:	6c 97       	sbiw	r28, 0x1c	; 28
    692a:	60 96       	adiw	r28, 0x10	; 16
    692c:	8f ad       	ldd	r24, Y+63	; 0x3f
    692e:	60 97       	sbiw	r28, 0x10	; 16
    6930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6932:	89 17       	cp	r24, r25
    6934:	18 f0       	brcs	.+6      	; 0x693c <CLCD_voidSendNumber+0x4bc>
    6936:	6c 96       	adiw	r28, 0x1c	; 28
    6938:	1f ae       	std	Y+63, r1	; 0x3f
    693a:	6c 97       	sbiw	r28, 0x1c	; 28
    693c:	69 96       	adiw	r28, 0x19	; 25
    693e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6940:	69 97       	sbiw	r28, 0x19	; 25
    6942:	60 96       	adiw	r28, 0x10	; 16
    6944:	9f ad       	ldd	r25, Y+63	; 0x3f
    6946:	60 97       	sbiw	r28, 0x10	; 16
    6948:	89 0f       	add	r24, r25
    694a:	6d 96       	adiw	r28, 0x1d	; 29
    694c:	8f af       	std	Y+63, r24	; 0x3f
    694e:	6d 97       	sbiw	r28, 0x1d	; 29
    6950:	81 e0       	ldi	r24, 0x01	; 1
    6952:	6e 96       	adiw	r28, 0x1e	; 30
    6954:	8f af       	std	Y+63, r24	; 0x3f
    6956:	6e 97       	sbiw	r28, 0x1e	; 30
    6958:	6d 96       	adiw	r28, 0x1d	; 29
    695a:	9f ad       	ldd	r25, Y+63	; 0x3f
    695c:	6d 97       	sbiw	r28, 0x1d	; 29
    695e:	60 96       	adiw	r28, 0x10	; 16
    6960:	8f ad       	ldd	r24, Y+63	; 0x3f
    6962:	60 97       	sbiw	r28, 0x10	; 16
    6964:	98 17       	cp	r25, r24
    6966:	18 f0       	brcs	.+6      	; 0x696e <CLCD_voidSendNumber+0x4ee>
    6968:	6e 96       	adiw	r28, 0x1e	; 30
    696a:	1f ae       	std	Y+63, r1	; 0x3f
    696c:	6e 97       	sbiw	r28, 0x1e	; 30
    696e:	6c 96       	adiw	r28, 0x1c	; 28
    6970:	9f ad       	ldd	r25, Y+63	; 0x3f
    6972:	6c 97       	sbiw	r28, 0x1c	; 28
    6974:	6e 96       	adiw	r28, 0x1e	; 30
    6976:	8f ad       	ldd	r24, Y+63	; 0x3f
    6978:	6e 97       	sbiw	r28, 0x1e	; 30
    697a:	98 2b       	or	r25, r24
    697c:	6c 96       	adiw	r28, 0x1c	; 28
    697e:	9f af       	std	Y+63, r25	; 0x3f
    6980:	6c 97       	sbiw	r28, 0x1c	; 28
    6982:	6d 96       	adiw	r28, 0x1d	; 29
    6984:	9f ad       	ldd	r25, Y+63	; 0x3f
    6986:	6d 97       	sbiw	r28, 0x1d	; 29
    6988:	60 96       	adiw	r28, 0x10	; 16
    698a:	9f af       	std	Y+63, r25	; 0x3f
    698c:	60 97       	sbiw	r28, 0x10	; 16
    698e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6990:	9d 89       	ldd	r25, Y+21	; 0x15
    6992:	89 0f       	add	r24, r25
    6994:	61 96       	adiw	r28, 0x11	; 17
    6996:	8f af       	std	Y+63, r24	; 0x3f
    6998:	61 97       	sbiw	r28, 0x11	; 17
    699a:	81 e0       	ldi	r24, 0x01	; 1
    699c:	6f 96       	adiw	r28, 0x1f	; 31
    699e:	8f af       	std	Y+63, r24	; 0x3f
    69a0:	6f 97       	sbiw	r28, 0x1f	; 31
    69a2:	61 96       	adiw	r28, 0x11	; 17
    69a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    69a6:	61 97       	sbiw	r28, 0x11	; 17
    69a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    69aa:	98 17       	cp	r25, r24
    69ac:	18 f0       	brcs	.+6      	; 0x69b4 <CLCD_voidSendNumber+0x534>
    69ae:	6f 96       	adiw	r28, 0x1f	; 31
    69b0:	1f ae       	std	Y+63, r1	; 0x3f
    69b2:	6f 97       	sbiw	r28, 0x1f	; 31
    69b4:	6c 96       	adiw	r28, 0x1c	; 28
    69b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    69b8:	6c 97       	sbiw	r28, 0x1c	; 28
    69ba:	61 96       	adiw	r28, 0x11	; 17
    69bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    69be:	61 97       	sbiw	r28, 0x11	; 17
    69c0:	98 0f       	add	r25, r24
    69c2:	a0 96       	adiw	r28, 0x20	; 32
    69c4:	9f af       	std	Y+63, r25	; 0x3f
    69c6:	a0 97       	sbiw	r28, 0x20	; 32
    69c8:	91 e0       	ldi	r25, 0x01	; 1
    69ca:	a1 96       	adiw	r28, 0x21	; 33
    69cc:	9f af       	std	Y+63, r25	; 0x3f
    69ce:	a1 97       	sbiw	r28, 0x21	; 33
    69d0:	a0 96       	adiw	r28, 0x20	; 32
    69d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    69d4:	a0 97       	sbiw	r28, 0x20	; 32
    69d6:	61 96       	adiw	r28, 0x11	; 17
    69d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    69da:	61 97       	sbiw	r28, 0x11	; 17
    69dc:	89 17       	cp	r24, r25
    69de:	18 f0       	brcs	.+6      	; 0x69e6 <CLCD_voidSendNumber+0x566>
    69e0:	a1 96       	adiw	r28, 0x21	; 33
    69e2:	1f ae       	std	Y+63, r1	; 0x3f
    69e4:	a1 97       	sbiw	r28, 0x21	; 33
    69e6:	6f 96       	adiw	r28, 0x1f	; 31
    69e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    69ea:	6f 97       	sbiw	r28, 0x1f	; 31
    69ec:	a1 96       	adiw	r28, 0x21	; 33
    69ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    69f0:	a1 97       	sbiw	r28, 0x21	; 33
    69f2:	89 2b       	or	r24, r25
    69f4:	6f 96       	adiw	r28, 0x1f	; 31
    69f6:	8f af       	std	Y+63, r24	; 0x3f
    69f8:	6f 97       	sbiw	r28, 0x1f	; 31
    69fa:	a0 96       	adiw	r28, 0x20	; 32
    69fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    69fe:	a0 97       	sbiw	r28, 0x20	; 32
    6a00:	61 96       	adiw	r28, 0x11	; 17
    6a02:	8f af       	std	Y+63, r24	; 0x3f
    6a04:	61 97       	sbiw	r28, 0x11	; 17
    6a06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6a08:	8e 89       	ldd	r24, Y+22	; 0x16
    6a0a:	98 0f       	add	r25, r24
    6a0c:	62 96       	adiw	r28, 0x12	; 18
    6a0e:	9f af       	std	Y+63, r25	; 0x3f
    6a10:	62 97       	sbiw	r28, 0x12	; 18
    6a12:	91 e0       	ldi	r25, 0x01	; 1
    6a14:	a2 96       	adiw	r28, 0x22	; 34
    6a16:	9f af       	std	Y+63, r25	; 0x3f
    6a18:	a2 97       	sbiw	r28, 0x22	; 34
    6a1a:	62 96       	adiw	r28, 0x12	; 18
    6a1c:	8f ad       	ldd	r24, Y+63	; 0x3f
    6a1e:	62 97       	sbiw	r28, 0x12	; 18
    6a20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6a22:	89 17       	cp	r24, r25
    6a24:	18 f0       	brcs	.+6      	; 0x6a2c <CLCD_voidSendNumber+0x5ac>
    6a26:	a2 96       	adiw	r28, 0x22	; 34
    6a28:	1f ae       	std	Y+63, r1	; 0x3f
    6a2a:	a2 97       	sbiw	r28, 0x22	; 34
    6a2c:	6f 96       	adiw	r28, 0x1f	; 31
    6a2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6a30:	6f 97       	sbiw	r28, 0x1f	; 31
    6a32:	62 96       	adiw	r28, 0x12	; 18
    6a34:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a36:	62 97       	sbiw	r28, 0x12	; 18
    6a38:	89 0f       	add	r24, r25
    6a3a:	a3 96       	adiw	r28, 0x23	; 35
    6a3c:	8f af       	std	Y+63, r24	; 0x3f
    6a3e:	a3 97       	sbiw	r28, 0x23	; 35
    6a40:	81 e0       	ldi	r24, 0x01	; 1
    6a42:	a4 96       	adiw	r28, 0x24	; 36
    6a44:	8f af       	std	Y+63, r24	; 0x3f
    6a46:	a4 97       	sbiw	r28, 0x24	; 36
    6a48:	a3 96       	adiw	r28, 0x23	; 35
    6a4a:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a4c:	a3 97       	sbiw	r28, 0x23	; 35
    6a4e:	62 96       	adiw	r28, 0x12	; 18
    6a50:	8f ad       	ldd	r24, Y+63	; 0x3f
    6a52:	62 97       	sbiw	r28, 0x12	; 18
    6a54:	98 17       	cp	r25, r24
    6a56:	18 f0       	brcs	.+6      	; 0x6a5e <CLCD_voidSendNumber+0x5de>
    6a58:	a4 96       	adiw	r28, 0x24	; 36
    6a5a:	1f ae       	std	Y+63, r1	; 0x3f
    6a5c:	a4 97       	sbiw	r28, 0x24	; 36
    6a5e:	a2 96       	adiw	r28, 0x22	; 34
    6a60:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a62:	a2 97       	sbiw	r28, 0x22	; 34
    6a64:	a4 96       	adiw	r28, 0x24	; 36
    6a66:	8f ad       	ldd	r24, Y+63	; 0x3f
    6a68:	a4 97       	sbiw	r28, 0x24	; 36
    6a6a:	98 2b       	or	r25, r24
    6a6c:	a2 96       	adiw	r28, 0x22	; 34
    6a6e:	9f af       	std	Y+63, r25	; 0x3f
    6a70:	a2 97       	sbiw	r28, 0x22	; 34
    6a72:	a3 96       	adiw	r28, 0x23	; 35
    6a74:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a76:	a3 97       	sbiw	r28, 0x23	; 35
    6a78:	62 96       	adiw	r28, 0x12	; 18
    6a7a:	9f af       	std	Y+63, r25	; 0x3f
    6a7c:	62 97       	sbiw	r28, 0x12	; 18
    6a7e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a80:	9f 89       	ldd	r25, Y+23	; 0x17
    6a82:	89 0f       	add	r24, r25
    6a84:	63 96       	adiw	r28, 0x13	; 19
    6a86:	8f af       	std	Y+63, r24	; 0x3f
    6a88:	63 97       	sbiw	r28, 0x13	; 19
    6a8a:	81 e0       	ldi	r24, 0x01	; 1
    6a8c:	a5 96       	adiw	r28, 0x25	; 37
    6a8e:	8f af       	std	Y+63, r24	; 0x3f
    6a90:	a5 97       	sbiw	r28, 0x25	; 37
    6a92:	63 96       	adiw	r28, 0x13	; 19
    6a94:	9f ad       	ldd	r25, Y+63	; 0x3f
    6a96:	63 97       	sbiw	r28, 0x13	; 19
    6a98:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6a9a:	98 17       	cp	r25, r24
    6a9c:	18 f0       	brcs	.+6      	; 0x6aa4 <CLCD_voidSendNumber+0x624>
    6a9e:	a5 96       	adiw	r28, 0x25	; 37
    6aa0:	1f ae       	std	Y+63, r1	; 0x3f
    6aa2:	a5 97       	sbiw	r28, 0x25	; 37
    6aa4:	a2 96       	adiw	r28, 0x22	; 34
    6aa6:	9f ad       	ldd	r25, Y+63	; 0x3f
    6aa8:	a2 97       	sbiw	r28, 0x22	; 34
    6aaa:	63 96       	adiw	r28, 0x13	; 19
    6aac:	8f ad       	ldd	r24, Y+63	; 0x3f
    6aae:	63 97       	sbiw	r28, 0x13	; 19
    6ab0:	98 0f       	add	r25, r24
    6ab2:	a6 96       	adiw	r28, 0x26	; 38
    6ab4:	9f af       	std	Y+63, r25	; 0x3f
    6ab6:	a6 97       	sbiw	r28, 0x26	; 38
    6ab8:	91 e0       	ldi	r25, 0x01	; 1
    6aba:	a7 96       	adiw	r28, 0x27	; 39
    6abc:	9f af       	std	Y+63, r25	; 0x3f
    6abe:	a7 97       	sbiw	r28, 0x27	; 39
    6ac0:	a6 96       	adiw	r28, 0x26	; 38
    6ac2:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ac4:	a6 97       	sbiw	r28, 0x26	; 38
    6ac6:	63 96       	adiw	r28, 0x13	; 19
    6ac8:	9f ad       	ldd	r25, Y+63	; 0x3f
    6aca:	63 97       	sbiw	r28, 0x13	; 19
    6acc:	89 17       	cp	r24, r25
    6ace:	18 f0       	brcs	.+6      	; 0x6ad6 <CLCD_voidSendNumber+0x656>
    6ad0:	a7 96       	adiw	r28, 0x27	; 39
    6ad2:	1f ae       	std	Y+63, r1	; 0x3f
    6ad4:	a7 97       	sbiw	r28, 0x27	; 39
    6ad6:	a5 96       	adiw	r28, 0x25	; 37
    6ad8:	8f ad       	ldd	r24, Y+63	; 0x3f
    6ada:	a5 97       	sbiw	r28, 0x25	; 37
    6adc:	a7 96       	adiw	r28, 0x27	; 39
    6ade:	9f ad       	ldd	r25, Y+63	; 0x3f
    6ae0:	a7 97       	sbiw	r28, 0x27	; 39
    6ae2:	89 2b       	or	r24, r25
    6ae4:	a5 96       	adiw	r28, 0x25	; 37
    6ae6:	8f af       	std	Y+63, r24	; 0x3f
    6ae8:	a5 97       	sbiw	r28, 0x25	; 37
    6aea:	a6 96       	adiw	r28, 0x26	; 38
    6aec:	8f ad       	ldd	r24, Y+63	; 0x3f
    6aee:	a6 97       	sbiw	r28, 0x26	; 38
    6af0:	63 96       	adiw	r28, 0x13	; 19
    6af2:	8f af       	std	Y+63, r24	; 0x3f
    6af4:	63 97       	sbiw	r28, 0x13	; 19
    6af6:	98 a1       	ldd	r25, Y+32	; 0x20
    6af8:	88 8d       	ldd	r24, Y+24	; 0x18
    6afa:	98 0f       	add	r25, r24
    6afc:	64 96       	adiw	r28, 0x14	; 20
    6afe:	9f af       	std	Y+63, r25	; 0x3f
    6b00:	64 97       	sbiw	r28, 0x14	; 20
    6b02:	a5 96       	adiw	r28, 0x25	; 37
    6b04:	8f ad       	ldd	r24, Y+63	; 0x3f
    6b06:	a5 97       	sbiw	r28, 0x25	; 37
    6b08:	64 96       	adiw	r28, 0x14	; 20
    6b0a:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b0c:	64 97       	sbiw	r28, 0x14	; 20
    6b0e:	89 0f       	add	r24, r25
    6b10:	64 96       	adiw	r28, 0x14	; 20
    6b12:	8f af       	std	Y+63, r24	; 0x3f
    6b14:	64 97       	sbiw	r28, 0x14	; 20
    6b16:	2d 96       	adiw	r28, 0x0d	; 13
    6b18:	8f ad       	ldd	r24, Y+63	; 0x3f
    6b1a:	2d 97       	sbiw	r28, 0x0d	; 13
    6b1c:	89 83       	std	Y+1, r24	; 0x01
    6b1e:	2e 96       	adiw	r28, 0x0e	; 14
    6b20:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b22:	2e 97       	sbiw	r28, 0x0e	; 14
    6b24:	9a 83       	std	Y+2, r25	; 0x02
    6b26:	2f 96       	adiw	r28, 0x0f	; 15
    6b28:	8f ad       	ldd	r24, Y+63	; 0x3f
    6b2a:	2f 97       	sbiw	r28, 0x0f	; 15
    6b2c:	8b 83       	std	Y+3, r24	; 0x03
    6b2e:	60 96       	adiw	r28, 0x10	; 16
    6b30:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b32:	60 97       	sbiw	r28, 0x10	; 16
    6b34:	9c 83       	std	Y+4, r25	; 0x04
    6b36:	61 96       	adiw	r28, 0x11	; 17
    6b38:	8f ad       	ldd	r24, Y+63	; 0x3f
    6b3a:	61 97       	sbiw	r28, 0x11	; 17
    6b3c:	8d 83       	std	Y+5, r24	; 0x05
    6b3e:	62 96       	adiw	r28, 0x12	; 18
    6b40:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b42:	62 97       	sbiw	r28, 0x12	; 18
    6b44:	9e 83       	std	Y+6, r25	; 0x06
    6b46:	63 96       	adiw	r28, 0x13	; 19
    6b48:	8f ad       	ldd	r24, Y+63	; 0x3f
    6b4a:	63 97       	sbiw	r28, 0x13	; 19
    6b4c:	8f 83       	std	Y+7, r24	; 0x07
    6b4e:	64 96       	adiw	r28, 0x14	; 20
    6b50:	9f ad       	ldd	r25, Y+63	; 0x3f
    6b52:	64 97       	sbiw	r28, 0x14	; 20
    6b54:	98 87       	std	Y+8, r25	; 0x08
			Copy_u64Number /= 10 ;
    6b56:	a9 84       	ldd	r10, Y+9	; 0x09
    6b58:	ba 84       	ldd	r11, Y+10	; 0x0a
    6b5a:	cb 84       	ldd	r12, Y+11	; 0x0b
    6b5c:	dc 84       	ldd	r13, Y+12	; 0x0c
    6b5e:	ed 84       	ldd	r14, Y+13	; 0x0d
    6b60:	fe 84       	ldd	r15, Y+14	; 0x0e
    6b62:	0f 85       	ldd	r16, Y+15	; 0x0f
    6b64:	18 89       	ldd	r17, Y+16	; 0x10
    6b66:	2a 2d       	mov	r18, r10
    6b68:	3b 2d       	mov	r19, r11
    6b6a:	4c 2d       	mov	r20, r12
    6b6c:	5d 2d       	mov	r21, r13
    6b6e:	6e 2d       	mov	r22, r14
    6b70:	7f 2d       	mov	r23, r15
    6b72:	80 2f       	mov	r24, r16
    6b74:	91 2f       	mov	r25, r17
    6b76:	0f 2e       	mov	r0, r31
    6b78:	fa e0       	ldi	r31, 0x0A	; 10
    6b7a:	af 2e       	mov	r10, r31
    6b7c:	f0 2d       	mov	r31, r0
    6b7e:	bb 24       	eor	r11, r11
    6b80:	cc 24       	eor	r12, r12
    6b82:	dd 24       	eor	r13, r13
    6b84:	ee 24       	eor	r14, r14
    6b86:	ff 24       	eor	r15, r15
    6b88:	00 e0       	ldi	r16, 0x00	; 0
    6b8a:	10 e0       	ldi	r17, 0x00	; 0
    6b8c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    6b90:	a2 2e       	mov	r10, r18
    6b92:	b3 2e       	mov	r11, r19
    6b94:	c4 2e       	mov	r12, r20
    6b96:	d5 2e       	mov	r13, r21
    6b98:	e6 2e       	mov	r14, r22
    6b9a:	f7 2e       	mov	r15, r23
    6b9c:	08 2f       	mov	r16, r24
    6b9e:	19 2f       	mov	r17, r25
    6ba0:	a9 86       	std	Y+9, r10	; 0x09
    6ba2:	ba 86       	std	Y+10, r11	; 0x0a
    6ba4:	cb 86       	std	Y+11, r12	; 0x0b
    6ba6:	dc 86       	std	Y+12, r13	; 0x0c
    6ba8:	ed 86       	std	Y+13, r14	; 0x0d
    6baa:	fe 86       	std	Y+14, r15	; 0x0e
    6bac:	0f 87       	std	Y+15, r16	; 0x0f
    6bae:	18 8b       	std	Y+16, r17	; 0x10

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }

	else{

		while( Copy_u64Number != 0 ){
    6bb0:	89 85       	ldd	r24, Y+9	; 0x09
    6bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bb4:	89 2b       	or	r24, r25
    6bb6:	9b 85       	ldd	r25, Y+11	; 0x0b
    6bb8:	89 2b       	or	r24, r25
    6bba:	9c 85       	ldd	r25, Y+12	; 0x0c
    6bbc:	89 2b       	or	r24, r25
    6bbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    6bc0:	89 2b       	or	r24, r25
    6bc2:	9e 85       	ldd	r25, Y+14	; 0x0e
    6bc4:	89 2b       	or	r24, r25
    6bc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    6bc8:	89 2b       	or	r24, r25
    6bca:	98 89       	ldd	r25, Y+16	; 0x10
    6bcc:	89 2b       	or	r24, r25
    6bce:	88 23       	and	r24, r24
    6bd0:	09 f0       	breq	.+2      	; 0x6bd4 <CLCD_voidSendNumber+0x754>
    6bd2:	90 cc       	rjmp	.-1760   	; 0x64f4 <CLCD_voidSendNumber+0x74>
    6bd4:	5e c0       	rjmp	.+188    	; 0x6c92 <CLCD_voidSendNumber+0x812>
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
    6bd6:	a9 80       	ldd	r10, Y+1	; 0x01
    6bd8:	ba 80       	ldd	r11, Y+2	; 0x02
    6bda:	cb 80       	ldd	r12, Y+3	; 0x03
    6bdc:	dc 80       	ldd	r13, Y+4	; 0x04
    6bde:	ed 80       	ldd	r14, Y+5	; 0x05
    6be0:	fe 80       	ldd	r15, Y+6	; 0x06
    6be2:	0f 81       	ldd	r16, Y+7	; 0x07
    6be4:	18 85       	ldd	r17, Y+8	; 0x08
    6be6:	2a 2d       	mov	r18, r10
    6be8:	3b 2d       	mov	r19, r11
    6bea:	4c 2d       	mov	r20, r12
    6bec:	5d 2d       	mov	r21, r13
    6bee:	6e 2d       	mov	r22, r14
    6bf0:	7f 2d       	mov	r23, r15
    6bf2:	80 2f       	mov	r24, r16
    6bf4:	91 2f       	mov	r25, r17
    6bf6:	0f 2e       	mov	r0, r31
    6bf8:	fa e0       	ldi	r31, 0x0A	; 10
    6bfa:	af 2e       	mov	r10, r31
    6bfc:	f0 2d       	mov	r31, r0
    6bfe:	bb 24       	eor	r11, r11
    6c00:	cc 24       	eor	r12, r12
    6c02:	dd 24       	eor	r13, r13
    6c04:	ee 24       	eor	r14, r14
    6c06:	ff 24       	eor	r15, r15
    6c08:	00 e0       	ldi	r16, 0x00	; 0
    6c0a:	10 e0       	ldi	r17, 0x00	; 0
    6c0c:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    6c10:	a2 2e       	mov	r10, r18
    6c12:	b3 2e       	mov	r11, r19
    6c14:	c4 2e       	mov	r12, r20
    6c16:	d5 2e       	mov	r13, r21
    6c18:	e6 2e       	mov	r14, r22
    6c1a:	f7 2e       	mov	r15, r23
    6c1c:	08 2f       	mov	r16, r24
    6c1e:	19 2f       	mov	r17, r25
    6c20:	2a 2d       	mov	r18, r10
    6c22:	3b 2d       	mov	r19, r11
    6c24:	4c 2d       	mov	r20, r12
    6c26:	5d 2d       	mov	r21, r13
    6c28:	6e 2d       	mov	r22, r14
    6c2a:	7f 2d       	mov	r23, r15
    6c2c:	80 2f       	mov	r24, r16
    6c2e:	91 2f       	mov	r25, r17
    6c30:	82 2f       	mov	r24, r18
    6c32:	80 5d       	subi	r24, 0xD0	; 208
    6c34:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <CLCD_voidSendData>
			LOC_u64Reversed /= 10 ;
    6c38:	a9 80       	ldd	r10, Y+1	; 0x01
    6c3a:	ba 80       	ldd	r11, Y+2	; 0x02
    6c3c:	cb 80       	ldd	r12, Y+3	; 0x03
    6c3e:	dc 80       	ldd	r13, Y+4	; 0x04
    6c40:	ed 80       	ldd	r14, Y+5	; 0x05
    6c42:	fe 80       	ldd	r15, Y+6	; 0x06
    6c44:	0f 81       	ldd	r16, Y+7	; 0x07
    6c46:	18 85       	ldd	r17, Y+8	; 0x08
    6c48:	2a 2d       	mov	r18, r10
    6c4a:	3b 2d       	mov	r19, r11
    6c4c:	4c 2d       	mov	r20, r12
    6c4e:	5d 2d       	mov	r21, r13
    6c50:	6e 2d       	mov	r22, r14
    6c52:	7f 2d       	mov	r23, r15
    6c54:	80 2f       	mov	r24, r16
    6c56:	91 2f       	mov	r25, r17
    6c58:	0f 2e       	mov	r0, r31
    6c5a:	fa e0       	ldi	r31, 0x0A	; 10
    6c5c:	af 2e       	mov	r10, r31
    6c5e:	f0 2d       	mov	r31, r0
    6c60:	bb 24       	eor	r11, r11
    6c62:	cc 24       	eor	r12, r12
    6c64:	dd 24       	eor	r13, r13
    6c66:	ee 24       	eor	r14, r14
    6c68:	ff 24       	eor	r15, r15
    6c6a:	00 e0       	ldi	r16, 0x00	; 0
    6c6c:	10 e0       	ldi	r17, 0x00	; 0
    6c6e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    6c72:	a2 2e       	mov	r10, r18
    6c74:	b3 2e       	mov	r11, r19
    6c76:	c4 2e       	mov	r12, r20
    6c78:	d5 2e       	mov	r13, r21
    6c7a:	e6 2e       	mov	r14, r22
    6c7c:	f7 2e       	mov	r15, r23
    6c7e:	08 2f       	mov	r16, r24
    6c80:	19 2f       	mov	r17, r25
    6c82:	a9 82       	std	Y+1, r10	; 0x01
    6c84:	ba 82       	std	Y+2, r11	; 0x02
    6c86:	cb 82       	std	Y+3, r12	; 0x03
    6c88:	dc 82       	std	Y+4, r13	; 0x04
    6c8a:	ed 82       	std	Y+5, r14	; 0x05
    6c8c:	fe 82       	std	Y+6, r15	; 0x06
    6c8e:	0f 83       	std	Y+7, r16	; 0x07
    6c90:	18 87       	std	Y+8, r17	; 0x08

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    6c92:	89 81       	ldd	r24, Y+1	; 0x01
    6c94:	81 30       	cpi	r24, 0x01	; 1
    6c96:	09 f0       	breq	.+2      	; 0x6c9a <CLCD_voidSendNumber+0x81a>
    6c98:	9e cf       	rjmp	.-196    	; 0x6bd6 <CLCD_voidSendNumber+0x756>
    6c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    6c9c:	88 23       	and	r24, r24
    6c9e:	09 f0       	breq	.+2      	; 0x6ca2 <CLCD_voidSendNumber+0x822>
    6ca0:	9a cf       	rjmp	.-204    	; 0x6bd6 <CLCD_voidSendNumber+0x756>
    6ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    6ca4:	88 23       	and	r24, r24
    6ca6:	09 f0       	breq	.+2      	; 0x6caa <CLCD_voidSendNumber+0x82a>
    6ca8:	96 cf       	rjmp	.-212    	; 0x6bd6 <CLCD_voidSendNumber+0x756>
    6caa:	8c 81       	ldd	r24, Y+4	; 0x04
    6cac:	88 23       	and	r24, r24
    6cae:	09 f0       	breq	.+2      	; 0x6cb2 <CLCD_voidSendNumber+0x832>
    6cb0:	92 cf       	rjmp	.-220    	; 0x6bd6 <CLCD_voidSendNumber+0x756>
    6cb2:	8d 81       	ldd	r24, Y+5	; 0x05
    6cb4:	88 23       	and	r24, r24
    6cb6:	09 f0       	breq	.+2      	; 0x6cba <CLCD_voidSendNumber+0x83a>
    6cb8:	8e cf       	rjmp	.-228    	; 0x6bd6 <CLCD_voidSendNumber+0x756>
    6cba:	8e 81       	ldd	r24, Y+6	; 0x06
    6cbc:	88 23       	and	r24, r24
    6cbe:	09 f0       	breq	.+2      	; 0x6cc2 <CLCD_voidSendNumber+0x842>
    6cc0:	8a cf       	rjmp	.-236    	; 0x6bd6 <CLCD_voidSendNumber+0x756>
    6cc2:	8f 81       	ldd	r24, Y+7	; 0x07
    6cc4:	88 23       	and	r24, r24
    6cc6:	09 f0       	breq	.+2      	; 0x6cca <CLCD_voidSendNumber+0x84a>
    6cc8:	86 cf       	rjmp	.-244    	; 0x6bd6 <CLCD_voidSendNumber+0x756>
    6cca:	88 85       	ldd	r24, Y+8	; 0x08
    6ccc:	88 23       	and	r24, r24
    6cce:	09 f0       	breq	.+2      	; 0x6cd2 <CLCD_voidSendNumber+0x852>
    6cd0:	82 cf       	rjmp	.-252    	; 0x6bd6 <CLCD_voidSendNumber+0x756>

		}

	}

}
    6cd2:	ca 59       	subi	r28, 0x9A	; 154
    6cd4:	df 4f       	sbci	r29, 0xFF	; 255
    6cd6:	0f b6       	in	r0, 0x3f	; 63
    6cd8:	f8 94       	cli
    6cda:	de bf       	out	0x3e, r29	; 62
    6cdc:	0f be       	out	0x3f, r0	; 63
    6cde:	cd bf       	out	0x3d, r28	; 61
    6ce0:	cf 91       	pop	r28
    6ce2:	df 91       	pop	r29
    6ce4:	1f 91       	pop	r17
    6ce6:	0f 91       	pop	r16
    6ce8:	ff 90       	pop	r15
    6cea:	ef 90       	pop	r14
    6cec:	df 90       	pop	r13
    6cee:	cf 90       	pop	r12
    6cf0:	bf 90       	pop	r11
    6cf2:	af 90       	pop	r10
    6cf4:	08 95       	ret

00006cf6 <CLCD_voidSetPosition>:
*Hint :-
   In This function we send a command which =0b1xxxxxxx
   MSB = 1  ===> refers that it is command to set cursor
   xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
    6cf6:	df 93       	push	r29
    6cf8:	cf 93       	push	r28
    6cfa:	cd b7       	in	r28, 0x3d	; 61
    6cfc:	de b7       	in	r29, 0x3e	; 62
    6cfe:	61 97       	sbiw	r28, 0x11	; 17
    6d00:	0f b6       	in	r0, 0x3f	; 63
    6d02:	f8 94       	cli
    6d04:	de bf       	out	0x3e, r29	; 62
    6d06:	0f be       	out	0x3f, r0	; 63
    6d08:	cd bf       	out	0x3d, r28	; 61
    6d0a:	88 8b       	std	Y+16, r24	; 0x10
    6d0c:	69 8b       	std	Y+17, r22	; 0x11

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    6d0e:	88 89       	ldd	r24, Y+16	; 0x10
    6d10:	83 30       	cpi	r24, 0x03	; 3
    6d12:	48 f4       	brcc	.+18     	; 0x6d26 <CLCD_voidSetPosition+0x30>
    6d14:	88 89       	ldd	r24, Y+16	; 0x10
    6d16:	88 23       	and	r24, r24
    6d18:	31 f0       	breq	.+12     	; 0x6d26 <CLCD_voidSetPosition+0x30>
    6d1a:	89 89       	ldd	r24, Y+17	; 0x11
    6d1c:	81 31       	cpi	r24, 0x11	; 17
    6d1e:	18 f4       	brcc	.+6      	; 0x6d26 <CLCD_voidSetPosition+0x30>
    6d20:	89 89       	ldd	r24, Y+17	; 0x11
    6d22:	88 23       	and	r24, r24
    6d24:	19 f4       	brne	.+6      	; 0x6d2c <CLCD_voidSetPosition+0x36>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
    6d26:	80 e8       	ldi	r24, 0x80	; 128
    6d28:	8f 87       	std	Y+15, r24	; 0x0f
    6d2a:	0d c0       	rjmp	.+26     	; 0x6d46 <CLCD_voidSetPosition+0x50>
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    6d2c:	88 89       	ldd	r24, Y+16	; 0x10
    6d2e:	81 30       	cpi	r24, 0x01	; 1
    6d30:	21 f4       	brne	.+8      	; 0x6d3a <CLCD_voidSetPosition+0x44>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    6d32:	89 89       	ldd	r24, Y+17	; 0x11
    6d34:	81 58       	subi	r24, 0x81	; 129
    6d36:	8f 87       	std	Y+15, r24	; 0x0f
    6d38:	06 c0       	rjmp	.+12     	; 0x6d46 <CLCD_voidSetPosition+0x50>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    6d3a:	88 89       	ldd	r24, Y+16	; 0x10
    6d3c:	82 30       	cpi	r24, 0x02	; 2
    6d3e:	19 f4       	brne	.+6      	; 0x6d46 <CLCD_voidSetPosition+0x50>

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    6d40:	89 89       	ldd	r24, Y+17	; 0x11
    6d42:	81 54       	subi	r24, 0x41	; 65
    6d44:	8f 87       	std	Y+15, r24	; 0x0f

	}
	CLCD_voidSendCommand ( LOC_u8data );
    6d46:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d48:	0e 94 81 31 	call	0x6302	; 0x6302 <CLCD_voidSendCommand>
    6d4c:	80 e0       	ldi	r24, 0x00	; 0
    6d4e:	90 e0       	ldi	r25, 0x00	; 0
    6d50:	a0 e8       	ldi	r26, 0x80	; 128
    6d52:	bf e3       	ldi	r27, 0x3F	; 63
    6d54:	8b 87       	std	Y+11, r24	; 0x0b
    6d56:	9c 87       	std	Y+12, r25	; 0x0c
    6d58:	ad 87       	std	Y+13, r26	; 0x0d
    6d5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d60:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d62:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d64:	20 e0       	ldi	r18, 0x00	; 0
    6d66:	30 e0       	ldi	r19, 0x00	; 0
    6d68:	4a ef       	ldi	r20, 0xFA	; 250
    6d6a:	54 e4       	ldi	r21, 0x44	; 68
    6d6c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6d70:	dc 01       	movw	r26, r24
    6d72:	cb 01       	movw	r24, r22
    6d74:	8f 83       	std	Y+7, r24	; 0x07
    6d76:	98 87       	std	Y+8, r25	; 0x08
    6d78:	a9 87       	std	Y+9, r26	; 0x09
    6d7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6d7c:	6f 81       	ldd	r22, Y+7	; 0x07
    6d7e:	78 85       	ldd	r23, Y+8	; 0x08
    6d80:	89 85       	ldd	r24, Y+9	; 0x09
    6d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d84:	20 e0       	ldi	r18, 0x00	; 0
    6d86:	30 e0       	ldi	r19, 0x00	; 0
    6d88:	40 e8       	ldi	r20, 0x80	; 128
    6d8a:	5f e3       	ldi	r21, 0x3F	; 63
    6d8c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6d90:	88 23       	and	r24, r24
    6d92:	2c f4       	brge	.+10     	; 0x6d9e <CLCD_voidSetPosition+0xa8>
		__ticks = 1;
    6d94:	81 e0       	ldi	r24, 0x01	; 1
    6d96:	90 e0       	ldi	r25, 0x00	; 0
    6d98:	9e 83       	std	Y+6, r25	; 0x06
    6d9a:	8d 83       	std	Y+5, r24	; 0x05
    6d9c:	3f c0       	rjmp	.+126    	; 0x6e1c <CLCD_voidSetPosition+0x126>
	else if (__tmp > 65535)
    6d9e:	6f 81       	ldd	r22, Y+7	; 0x07
    6da0:	78 85       	ldd	r23, Y+8	; 0x08
    6da2:	89 85       	ldd	r24, Y+9	; 0x09
    6da4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6da6:	20 e0       	ldi	r18, 0x00	; 0
    6da8:	3f ef       	ldi	r19, 0xFF	; 255
    6daa:	4f e7       	ldi	r20, 0x7F	; 127
    6dac:	57 e4       	ldi	r21, 0x47	; 71
    6dae:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6db2:	18 16       	cp	r1, r24
    6db4:	4c f5       	brge	.+82     	; 0x6e08 <CLCD_voidSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6db6:	6b 85       	ldd	r22, Y+11	; 0x0b
    6db8:	7c 85       	ldd	r23, Y+12	; 0x0c
    6dba:	8d 85       	ldd	r24, Y+13	; 0x0d
    6dbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dbe:	20 e0       	ldi	r18, 0x00	; 0
    6dc0:	30 e0       	ldi	r19, 0x00	; 0
    6dc2:	40 e2       	ldi	r20, 0x20	; 32
    6dc4:	51 e4       	ldi	r21, 0x41	; 65
    6dc6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6dca:	dc 01       	movw	r26, r24
    6dcc:	cb 01       	movw	r24, r22
    6dce:	bc 01       	movw	r22, r24
    6dd0:	cd 01       	movw	r24, r26
    6dd2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6dd6:	dc 01       	movw	r26, r24
    6dd8:	cb 01       	movw	r24, r22
    6dda:	9e 83       	std	Y+6, r25	; 0x06
    6ddc:	8d 83       	std	Y+5, r24	; 0x05
    6dde:	0f c0       	rjmp	.+30     	; 0x6dfe <CLCD_voidSetPosition+0x108>
    6de0:	88 ec       	ldi	r24, 0xC8	; 200
    6de2:	90 e0       	ldi	r25, 0x00	; 0
    6de4:	9c 83       	std	Y+4, r25	; 0x04
    6de6:	8b 83       	std	Y+3, r24	; 0x03
    6de8:	8b 81       	ldd	r24, Y+3	; 0x03
    6dea:	9c 81       	ldd	r25, Y+4	; 0x04
    6dec:	01 97       	sbiw	r24, 0x01	; 1
    6dee:	f1 f7       	brne	.-4      	; 0x6dec <CLCD_voidSetPosition+0xf6>
    6df0:	9c 83       	std	Y+4, r25	; 0x04
    6df2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6df4:	8d 81       	ldd	r24, Y+5	; 0x05
    6df6:	9e 81       	ldd	r25, Y+6	; 0x06
    6df8:	01 97       	sbiw	r24, 0x01	; 1
    6dfa:	9e 83       	std	Y+6, r25	; 0x06
    6dfc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    6e00:	9e 81       	ldd	r25, Y+6	; 0x06
    6e02:	00 97       	sbiw	r24, 0x00	; 0
    6e04:	69 f7       	brne	.-38     	; 0x6de0 <CLCD_voidSetPosition+0xea>
    6e06:	14 c0       	rjmp	.+40     	; 0x6e30 <CLCD_voidSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e08:	6f 81       	ldd	r22, Y+7	; 0x07
    6e0a:	78 85       	ldd	r23, Y+8	; 0x08
    6e0c:	89 85       	ldd	r24, Y+9	; 0x09
    6e0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e10:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6e14:	dc 01       	movw	r26, r24
    6e16:	cb 01       	movw	r24, r22
    6e18:	9e 83       	std	Y+6, r25	; 0x06
    6e1a:	8d 83       	std	Y+5, r24	; 0x05
    6e1c:	8d 81       	ldd	r24, Y+5	; 0x05
    6e1e:	9e 81       	ldd	r25, Y+6	; 0x06
    6e20:	9a 83       	std	Y+2, r25	; 0x02
    6e22:	89 83       	std	Y+1, r24	; 0x01
    6e24:	89 81       	ldd	r24, Y+1	; 0x01
    6e26:	9a 81       	ldd	r25, Y+2	; 0x02
    6e28:	01 97       	sbiw	r24, 0x01	; 1
    6e2a:	f1 f7       	brne	.-4      	; 0x6e28 <CLCD_voidSetPosition+0x132>
    6e2c:	9a 83       	std	Y+2, r25	; 0x02
    6e2e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    6e30:	61 96       	adiw	r28, 0x11	; 17
    6e32:	0f b6       	in	r0, 0x3f	; 63
    6e34:	f8 94       	cli
    6e36:	de bf       	out	0x3e, r29	; 62
    6e38:	0f be       	out	0x3f, r0	; 63
    6e3a:	cd bf       	out	0x3d, r28	; 61
    6e3c:	cf 91       	pop	r28
    6e3e:	df 91       	pop	r29
    6e40:	08 95       	ret

00006e42 <CLCD_voidSendExtraChar>:
			=> Copy_u8Col --> column number (CLCD_COL_1 ... CLCD_COL_16)
* return : nothing
* Hint :-
	Address Counter can refer to CGRAM and DDRAM
*/
void CLCD_voidSendExtraChar( u8 Copy_u8Row , u8 Copy_u8Col ){
    6e42:	df 93       	push	r29
    6e44:	cf 93       	push	r28
    6e46:	00 d0       	rcall	.+0      	; 0x6e48 <CLCD_voidSendExtraChar+0x6>
    6e48:	0f 92       	push	r0
    6e4a:	cd b7       	in	r28, 0x3d	; 61
    6e4c:	de b7       	in	r29, 0x3e	; 62
    6e4e:	8a 83       	std	Y+2, r24	; 0x02
    6e50:	6b 83       	std	Y+3, r22	; 0x03

	u8 LOC_u8Iterator = 0 ;
    6e52:	19 82       	std	Y+1, r1	; 0x01
	/* 1- Go To CGRAM            */
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM
    6e54:	80 e4       	ldi	r24, 0x40	; 64
    6e56:	0e 94 81 31 	call	0x6302	; 0x6302 <CLCD_voidSendCommand>


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    6e5a:	19 82       	std	Y+1, r1	; 0x01
    6e5c:	0c c0       	rjmp	.+24     	; 0x6e76 <CLCD_voidSendExtraChar+0x34>

		CLCD_voidSendData( CLCD_u8ExtraChar[LOC_u8Iterator] );
    6e5e:	89 81       	ldd	r24, Y+1	; 0x01
    6e60:	88 2f       	mov	r24, r24
    6e62:	90 e0       	ldi	r25, 0x00	; 0
    6e64:	fc 01       	movw	r30, r24
    6e66:	e9 57       	subi	r30, 0x79	; 121
    6e68:	fe 4f       	sbci	r31, 0xFE	; 254
    6e6a:	80 81       	ld	r24, Z
    6e6c:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <CLCD_voidSendData>
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    6e70:	89 81       	ldd	r24, Y+1	; 0x01
    6e72:	8f 5f       	subi	r24, 0xFF	; 255
    6e74:	89 83       	std	Y+1, r24	; 0x01
    6e76:	89 81       	ldd	r24, Y+1	; 0x01
    6e78:	80 34       	cpi	r24, 0x40	; 64
    6e7a:	88 f3       	brcs	.-30     	; 0x6e5e <CLCD_voidSendExtraChar+0x1c>

	}


	/* 3- Back (AC) To DDRAM          */
	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);
    6e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    6e7e:	6b 81       	ldd	r22, Y+3	; 0x03
    6e80:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <CLCD_voidSetPosition>


	/* 4- Send Character Address */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < 8 ; LOC_u8Iterator++ ){
    6e84:	19 82       	std	Y+1, r1	; 0x01
    6e86:	06 c0       	rjmp	.+12     	; 0x6e94 <CLCD_voidSendExtraChar+0x52>

		CLCD_voidSendData( LOC_u8Iterator );
    6e88:	89 81       	ldd	r24, Y+1	; 0x01
    6e8a:	0e 94 eb 30 	call	0x61d6	; 0x61d6 <CLCD_voidSendData>
	/* 3- Back (AC) To DDRAM          */
	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);


	/* 4- Send Character Address */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < 8 ; LOC_u8Iterator++ ){
    6e8e:	89 81       	ldd	r24, Y+1	; 0x01
    6e90:	8f 5f       	subi	r24, 0xFF	; 255
    6e92:	89 83       	std	Y+1, r24	; 0x01
    6e94:	89 81       	ldd	r24, Y+1	; 0x01
    6e96:	88 30       	cpi	r24, 0x08	; 8
    6e98:	b8 f3       	brcs	.-18     	; 0x6e88 <CLCD_voidSendExtraChar+0x46>

		CLCD_voidSendData( LOC_u8Iterator );

	}

}
    6e9a:	0f 90       	pop	r0
    6e9c:	0f 90       	pop	r0
    6e9e:	0f 90       	pop	r0
    6ea0:	cf 91       	pop	r28
    6ea2:	df 91       	pop	r29
    6ea4:	08 95       	ret

00006ea6 <CLCD_voidClearScreen>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
    6ea6:	df 93       	push	r29
    6ea8:	cf 93       	push	r28
    6eaa:	cd b7       	in	r28, 0x3d	; 61
    6eac:	de b7       	in	r29, 0x3e	; 62
    6eae:	2e 97       	sbiw	r28, 0x0e	; 14
    6eb0:	0f b6       	in	r0, 0x3f	; 63
    6eb2:	f8 94       	cli
    6eb4:	de bf       	out	0x3e, r29	; 62
    6eb6:	0f be       	out	0x3f, r0	; 63
    6eb8:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(lcd_Clear);
    6eba:	81 e0       	ldi	r24, 0x01	; 1
    6ebc:	0e 94 81 31 	call	0x6302	; 0x6302 <CLCD_voidSendCommand>
    6ec0:	80 e0       	ldi	r24, 0x00	; 0
    6ec2:	90 e0       	ldi	r25, 0x00	; 0
    6ec4:	a0 e2       	ldi	r26, 0x20	; 32
    6ec6:	b1 e4       	ldi	r27, 0x41	; 65
    6ec8:	8b 87       	std	Y+11, r24	; 0x0b
    6eca:	9c 87       	std	Y+12, r25	; 0x0c
    6ecc:	ad 87       	std	Y+13, r26	; 0x0d
    6ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ed8:	20 e0       	ldi	r18, 0x00	; 0
    6eda:	30 e0       	ldi	r19, 0x00	; 0
    6edc:	4a ef       	ldi	r20, 0xFA	; 250
    6ede:	54 e4       	ldi	r21, 0x44	; 68
    6ee0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6ee4:	dc 01       	movw	r26, r24
    6ee6:	cb 01       	movw	r24, r22
    6ee8:	8f 83       	std	Y+7, r24	; 0x07
    6eea:	98 87       	std	Y+8, r25	; 0x08
    6eec:	a9 87       	std	Y+9, r26	; 0x09
    6eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6ef0:	6f 81       	ldd	r22, Y+7	; 0x07
    6ef2:	78 85       	ldd	r23, Y+8	; 0x08
    6ef4:	89 85       	ldd	r24, Y+9	; 0x09
    6ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ef8:	20 e0       	ldi	r18, 0x00	; 0
    6efa:	30 e0       	ldi	r19, 0x00	; 0
    6efc:	40 e8       	ldi	r20, 0x80	; 128
    6efe:	5f e3       	ldi	r21, 0x3F	; 63
    6f00:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6f04:	88 23       	and	r24, r24
    6f06:	2c f4       	brge	.+10     	; 0x6f12 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    6f08:	81 e0       	ldi	r24, 0x01	; 1
    6f0a:	90 e0       	ldi	r25, 0x00	; 0
    6f0c:	9e 83       	std	Y+6, r25	; 0x06
    6f0e:	8d 83       	std	Y+5, r24	; 0x05
    6f10:	3f c0       	rjmp	.+126    	; 0x6f90 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    6f12:	6f 81       	ldd	r22, Y+7	; 0x07
    6f14:	78 85       	ldd	r23, Y+8	; 0x08
    6f16:	89 85       	ldd	r24, Y+9	; 0x09
    6f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f1a:	20 e0       	ldi	r18, 0x00	; 0
    6f1c:	3f ef       	ldi	r19, 0xFF	; 255
    6f1e:	4f e7       	ldi	r20, 0x7F	; 127
    6f20:	57 e4       	ldi	r21, 0x47	; 71
    6f22:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6f26:	18 16       	cp	r1, r24
    6f28:	4c f5       	brge	.+82     	; 0x6f7c <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6f30:	9e 85       	ldd	r25, Y+14	; 0x0e
    6f32:	20 e0       	ldi	r18, 0x00	; 0
    6f34:	30 e0       	ldi	r19, 0x00	; 0
    6f36:	40 e2       	ldi	r20, 0x20	; 32
    6f38:	51 e4       	ldi	r21, 0x41	; 65
    6f3a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6f3e:	dc 01       	movw	r26, r24
    6f40:	cb 01       	movw	r24, r22
    6f42:	bc 01       	movw	r22, r24
    6f44:	cd 01       	movw	r24, r26
    6f46:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6f4a:	dc 01       	movw	r26, r24
    6f4c:	cb 01       	movw	r24, r22
    6f4e:	9e 83       	std	Y+6, r25	; 0x06
    6f50:	8d 83       	std	Y+5, r24	; 0x05
    6f52:	0f c0       	rjmp	.+30     	; 0x6f72 <CLCD_voidClearScreen+0xcc>
    6f54:	88 ec       	ldi	r24, 0xC8	; 200
    6f56:	90 e0       	ldi	r25, 0x00	; 0
    6f58:	9c 83       	std	Y+4, r25	; 0x04
    6f5a:	8b 83       	std	Y+3, r24	; 0x03
    6f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    6f5e:	9c 81       	ldd	r25, Y+4	; 0x04
    6f60:	01 97       	sbiw	r24, 0x01	; 1
    6f62:	f1 f7       	brne	.-4      	; 0x6f60 <CLCD_voidClearScreen+0xba>
    6f64:	9c 83       	std	Y+4, r25	; 0x04
    6f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6f68:	8d 81       	ldd	r24, Y+5	; 0x05
    6f6a:	9e 81       	ldd	r25, Y+6	; 0x06
    6f6c:	01 97       	sbiw	r24, 0x01	; 1
    6f6e:	9e 83       	std	Y+6, r25	; 0x06
    6f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6f72:	8d 81       	ldd	r24, Y+5	; 0x05
    6f74:	9e 81       	ldd	r25, Y+6	; 0x06
    6f76:	00 97       	sbiw	r24, 0x00	; 0
    6f78:	69 f7       	brne	.-38     	; 0x6f54 <CLCD_voidClearScreen+0xae>
    6f7a:	14 c0       	rjmp	.+40     	; 0x6fa4 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    6f7e:	78 85       	ldd	r23, Y+8	; 0x08
    6f80:	89 85       	ldd	r24, Y+9	; 0x09
    6f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    6f84:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6f88:	dc 01       	movw	r26, r24
    6f8a:	cb 01       	movw	r24, r22
    6f8c:	9e 83       	std	Y+6, r25	; 0x06
    6f8e:	8d 83       	std	Y+5, r24	; 0x05
    6f90:	8d 81       	ldd	r24, Y+5	; 0x05
    6f92:	9e 81       	ldd	r25, Y+6	; 0x06
    6f94:	9a 83       	std	Y+2, r25	; 0x02
    6f96:	89 83       	std	Y+1, r24	; 0x01
    6f98:	89 81       	ldd	r24, Y+1	; 0x01
    6f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    6f9c:	01 97       	sbiw	r24, 0x01	; 1
    6f9e:	f1 f7       	brne	.-4      	; 0x6f9c <CLCD_voidClearScreen+0xf6>
    6fa0:	9a 83       	std	Y+2, r25	; 0x02
    6fa2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); //wait more than 1.53 ms
}
    6fa4:	2e 96       	adiw	r28, 0x0e	; 14
    6fa6:	0f b6       	in	r0, 0x3f	; 63
    6fa8:	f8 94       	cli
    6faa:	de bf       	out	0x3e, r29	; 62
    6fac:	0f be       	out	0x3f, r0	; 63
    6fae:	cd bf       	out	0x3d, r28	; 61
    6fb0:	cf 91       	pop	r28
    6fb2:	df 91       	pop	r29
    6fb4:	08 95       	ret

00006fb6 <CLCD_voidSendFallingEdge>:
*
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
    6fb6:	df 93       	push	r29
    6fb8:	cf 93       	push	r28
    6fba:	cd b7       	in	r28, 0x3d	; 61
    6fbc:	de b7       	in	r29, 0x3e	; 62
    6fbe:	6c 97       	sbiw	r28, 0x1c	; 28
    6fc0:	0f b6       	in	r0, 0x3f	; 63
    6fc2:	f8 94       	cli
    6fc4:	de bf       	out	0x3e, r29	; 62
    6fc6:	0f be       	out	0x3f, r0	; 63
    6fc8:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    6fca:	83 e0       	ldi	r24, 0x03	; 3
    6fcc:	62 e0       	ldi	r22, 0x02	; 2
    6fce:	41 e0       	ldi	r20, 0x01	; 1
    6fd0:	0e 94 72 28 	call	0x50e4	; 0x50e4 <DIO_enumSetPinValue>
    6fd4:	80 e0       	ldi	r24, 0x00	; 0
    6fd6:	90 e0       	ldi	r25, 0x00	; 0
    6fd8:	a0 e8       	ldi	r26, 0x80	; 128
    6fda:	bf e3       	ldi	r27, 0x3F	; 63
    6fdc:	89 8f       	std	Y+25, r24	; 0x19
    6fde:	9a 8f       	std	Y+26, r25	; 0x1a
    6fe0:	ab 8f       	std	Y+27, r26	; 0x1b
    6fe2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6fe4:	69 8d       	ldd	r22, Y+25	; 0x19
    6fe6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6fe8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6fea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6fec:	20 e0       	ldi	r18, 0x00	; 0
    6fee:	30 e0       	ldi	r19, 0x00	; 0
    6ff0:	4a ef       	ldi	r20, 0xFA	; 250
    6ff2:	54 e4       	ldi	r21, 0x44	; 68
    6ff4:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6ff8:	dc 01       	movw	r26, r24
    6ffa:	cb 01       	movw	r24, r22
    6ffc:	8d 8b       	std	Y+21, r24	; 0x15
    6ffe:	9e 8b       	std	Y+22, r25	; 0x16
    7000:	af 8b       	std	Y+23, r26	; 0x17
    7002:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    7004:	6d 89       	ldd	r22, Y+21	; 0x15
    7006:	7e 89       	ldd	r23, Y+22	; 0x16
    7008:	8f 89       	ldd	r24, Y+23	; 0x17
    700a:	98 8d       	ldd	r25, Y+24	; 0x18
    700c:	20 e0       	ldi	r18, 0x00	; 0
    700e:	30 e0       	ldi	r19, 0x00	; 0
    7010:	40 e8       	ldi	r20, 0x80	; 128
    7012:	5f e3       	ldi	r21, 0x3F	; 63
    7014:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    7018:	88 23       	and	r24, r24
    701a:	2c f4       	brge	.+10     	; 0x7026 <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    701c:	81 e0       	ldi	r24, 0x01	; 1
    701e:	90 e0       	ldi	r25, 0x00	; 0
    7020:	9c 8b       	std	Y+20, r25	; 0x14
    7022:	8b 8b       	std	Y+19, r24	; 0x13
    7024:	3f c0       	rjmp	.+126    	; 0x70a4 <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    7026:	6d 89       	ldd	r22, Y+21	; 0x15
    7028:	7e 89       	ldd	r23, Y+22	; 0x16
    702a:	8f 89       	ldd	r24, Y+23	; 0x17
    702c:	98 8d       	ldd	r25, Y+24	; 0x18
    702e:	20 e0       	ldi	r18, 0x00	; 0
    7030:	3f ef       	ldi	r19, 0xFF	; 255
    7032:	4f e7       	ldi	r20, 0x7F	; 127
    7034:	57 e4       	ldi	r21, 0x47	; 71
    7036:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    703a:	18 16       	cp	r1, r24
    703c:	4c f5       	brge	.+82     	; 0x7090 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    703e:	69 8d       	ldd	r22, Y+25	; 0x19
    7040:	7a 8d       	ldd	r23, Y+26	; 0x1a
    7042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    7044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    7046:	20 e0       	ldi	r18, 0x00	; 0
    7048:	30 e0       	ldi	r19, 0x00	; 0
    704a:	40 e2       	ldi	r20, 0x20	; 32
    704c:	51 e4       	ldi	r21, 0x41	; 65
    704e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7052:	dc 01       	movw	r26, r24
    7054:	cb 01       	movw	r24, r22
    7056:	bc 01       	movw	r22, r24
    7058:	cd 01       	movw	r24, r26
    705a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    705e:	dc 01       	movw	r26, r24
    7060:	cb 01       	movw	r24, r22
    7062:	9c 8b       	std	Y+20, r25	; 0x14
    7064:	8b 8b       	std	Y+19, r24	; 0x13
    7066:	0f c0       	rjmp	.+30     	; 0x7086 <CLCD_voidSendFallingEdge+0xd0>
    7068:	88 ec       	ldi	r24, 0xC8	; 200
    706a:	90 e0       	ldi	r25, 0x00	; 0
    706c:	9a 8b       	std	Y+18, r25	; 0x12
    706e:	89 8b       	std	Y+17, r24	; 0x11
    7070:	89 89       	ldd	r24, Y+17	; 0x11
    7072:	9a 89       	ldd	r25, Y+18	; 0x12
    7074:	01 97       	sbiw	r24, 0x01	; 1
    7076:	f1 f7       	brne	.-4      	; 0x7074 <CLCD_voidSendFallingEdge+0xbe>
    7078:	9a 8b       	std	Y+18, r25	; 0x12
    707a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    707c:	8b 89       	ldd	r24, Y+19	; 0x13
    707e:	9c 89       	ldd	r25, Y+20	; 0x14
    7080:	01 97       	sbiw	r24, 0x01	; 1
    7082:	9c 8b       	std	Y+20, r25	; 0x14
    7084:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7086:	8b 89       	ldd	r24, Y+19	; 0x13
    7088:	9c 89       	ldd	r25, Y+20	; 0x14
    708a:	00 97       	sbiw	r24, 0x00	; 0
    708c:	69 f7       	brne	.-38     	; 0x7068 <CLCD_voidSendFallingEdge+0xb2>
    708e:	14 c0       	rjmp	.+40     	; 0x70b8 <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7090:	6d 89       	ldd	r22, Y+21	; 0x15
    7092:	7e 89       	ldd	r23, Y+22	; 0x16
    7094:	8f 89       	ldd	r24, Y+23	; 0x17
    7096:	98 8d       	ldd	r25, Y+24	; 0x18
    7098:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    709c:	dc 01       	movw	r26, r24
    709e:	cb 01       	movw	r24, r22
    70a0:	9c 8b       	std	Y+20, r25	; 0x14
    70a2:	8b 8b       	std	Y+19, r24	; 0x13
    70a4:	8b 89       	ldd	r24, Y+19	; 0x13
    70a6:	9c 89       	ldd	r25, Y+20	; 0x14
    70a8:	98 8b       	std	Y+16, r25	; 0x10
    70aa:	8f 87       	std	Y+15, r24	; 0x0f
    70ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    70ae:	98 89       	ldd	r25, Y+16	; 0x10
    70b0:	01 97       	sbiw	r24, 0x01	; 1
    70b2:	f1 f7       	brne	.-4      	; 0x70b0 <CLCD_voidSendFallingEdge+0xfa>
    70b4:	98 8b       	std	Y+16, r25	; 0x10
    70b6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    70b8:	83 e0       	ldi	r24, 0x03	; 3
    70ba:	62 e0       	ldi	r22, 0x02	; 2
    70bc:	40 e0       	ldi	r20, 0x00	; 0
    70be:	0e 94 72 28 	call	0x50e4	; 0x50e4 <DIO_enumSetPinValue>
    70c2:	80 e0       	ldi	r24, 0x00	; 0
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	a0 e8       	ldi	r26, 0x80	; 128
    70c8:	bf e3       	ldi	r27, 0x3F	; 63
    70ca:	8b 87       	std	Y+11, r24	; 0x0b
    70cc:	9c 87       	std	Y+12, r25	; 0x0c
    70ce:	ad 87       	std	Y+13, r26	; 0x0d
    70d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    70d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    70d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    70d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    70d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    70da:	20 e0       	ldi	r18, 0x00	; 0
    70dc:	30 e0       	ldi	r19, 0x00	; 0
    70de:	4a ef       	ldi	r20, 0xFA	; 250
    70e0:	54 e4       	ldi	r21, 0x44	; 68
    70e2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    70e6:	dc 01       	movw	r26, r24
    70e8:	cb 01       	movw	r24, r22
    70ea:	8f 83       	std	Y+7, r24	; 0x07
    70ec:	98 87       	std	Y+8, r25	; 0x08
    70ee:	a9 87       	std	Y+9, r26	; 0x09
    70f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    70f2:	6f 81       	ldd	r22, Y+7	; 0x07
    70f4:	78 85       	ldd	r23, Y+8	; 0x08
    70f6:	89 85       	ldd	r24, Y+9	; 0x09
    70f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    70fa:	20 e0       	ldi	r18, 0x00	; 0
    70fc:	30 e0       	ldi	r19, 0x00	; 0
    70fe:	40 e8       	ldi	r20, 0x80	; 128
    7100:	5f e3       	ldi	r21, 0x3F	; 63
    7102:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    7106:	88 23       	and	r24, r24
    7108:	2c f4       	brge	.+10     	; 0x7114 <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    710a:	81 e0       	ldi	r24, 0x01	; 1
    710c:	90 e0       	ldi	r25, 0x00	; 0
    710e:	9e 83       	std	Y+6, r25	; 0x06
    7110:	8d 83       	std	Y+5, r24	; 0x05
    7112:	3f c0       	rjmp	.+126    	; 0x7192 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    7114:	6f 81       	ldd	r22, Y+7	; 0x07
    7116:	78 85       	ldd	r23, Y+8	; 0x08
    7118:	89 85       	ldd	r24, Y+9	; 0x09
    711a:	9a 85       	ldd	r25, Y+10	; 0x0a
    711c:	20 e0       	ldi	r18, 0x00	; 0
    711e:	3f ef       	ldi	r19, 0xFF	; 255
    7120:	4f e7       	ldi	r20, 0x7F	; 127
    7122:	57 e4       	ldi	r21, 0x47	; 71
    7124:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    7128:	18 16       	cp	r1, r24
    712a:	4c f5       	brge	.+82     	; 0x717e <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    712c:	6b 85       	ldd	r22, Y+11	; 0x0b
    712e:	7c 85       	ldd	r23, Y+12	; 0x0c
    7130:	8d 85       	ldd	r24, Y+13	; 0x0d
    7132:	9e 85       	ldd	r25, Y+14	; 0x0e
    7134:	20 e0       	ldi	r18, 0x00	; 0
    7136:	30 e0       	ldi	r19, 0x00	; 0
    7138:	40 e2       	ldi	r20, 0x20	; 32
    713a:	51 e4       	ldi	r21, 0x41	; 65
    713c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7140:	dc 01       	movw	r26, r24
    7142:	cb 01       	movw	r24, r22
    7144:	bc 01       	movw	r22, r24
    7146:	cd 01       	movw	r24, r26
    7148:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    714c:	dc 01       	movw	r26, r24
    714e:	cb 01       	movw	r24, r22
    7150:	9e 83       	std	Y+6, r25	; 0x06
    7152:	8d 83       	std	Y+5, r24	; 0x05
    7154:	0f c0       	rjmp	.+30     	; 0x7174 <CLCD_voidSendFallingEdge+0x1be>
    7156:	88 ec       	ldi	r24, 0xC8	; 200
    7158:	90 e0       	ldi	r25, 0x00	; 0
    715a:	9c 83       	std	Y+4, r25	; 0x04
    715c:	8b 83       	std	Y+3, r24	; 0x03
    715e:	8b 81       	ldd	r24, Y+3	; 0x03
    7160:	9c 81       	ldd	r25, Y+4	; 0x04
    7162:	01 97       	sbiw	r24, 0x01	; 1
    7164:	f1 f7       	brne	.-4      	; 0x7162 <CLCD_voidSendFallingEdge+0x1ac>
    7166:	9c 83       	std	Y+4, r25	; 0x04
    7168:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    716a:	8d 81       	ldd	r24, Y+5	; 0x05
    716c:	9e 81       	ldd	r25, Y+6	; 0x06
    716e:	01 97       	sbiw	r24, 0x01	; 1
    7170:	9e 83       	std	Y+6, r25	; 0x06
    7172:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7174:	8d 81       	ldd	r24, Y+5	; 0x05
    7176:	9e 81       	ldd	r25, Y+6	; 0x06
    7178:	00 97       	sbiw	r24, 0x00	; 0
    717a:	69 f7       	brne	.-38     	; 0x7156 <CLCD_voidSendFallingEdge+0x1a0>
    717c:	14 c0       	rjmp	.+40     	; 0x71a6 <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    717e:	6f 81       	ldd	r22, Y+7	; 0x07
    7180:	78 85       	ldd	r23, Y+8	; 0x08
    7182:	89 85       	ldd	r24, Y+9	; 0x09
    7184:	9a 85       	ldd	r25, Y+10	; 0x0a
    7186:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    718a:	dc 01       	movw	r26, r24
    718c:	cb 01       	movw	r24, r22
    718e:	9e 83       	std	Y+6, r25	; 0x06
    7190:	8d 83       	std	Y+5, r24	; 0x05
    7192:	8d 81       	ldd	r24, Y+5	; 0x05
    7194:	9e 81       	ldd	r25, Y+6	; 0x06
    7196:	9a 83       	std	Y+2, r25	; 0x02
    7198:	89 83       	std	Y+1, r24	; 0x01
    719a:	89 81       	ldd	r24, Y+1	; 0x01
    719c:	9a 81       	ldd	r25, Y+2	; 0x02
    719e:	01 97       	sbiw	r24, 0x01	; 1
    71a0:	f1 f7       	brne	.-4      	; 0x719e <CLCD_voidSendFallingEdge+0x1e8>
    71a2:	9a 83       	std	Y+2, r25	; 0x02
    71a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    71a6:	6c 96       	adiw	r28, 0x1c	; 28
    71a8:	0f b6       	in	r0, 0x3f	; 63
    71aa:	f8 94       	cli
    71ac:	de bf       	out	0x3e, r29	; 62
    71ae:	0f be       	out	0x3f, r0	; 63
    71b0:	cd bf       	out	0x3d, r28	; 61
    71b2:	cf 91       	pop	r28
    71b4:	df 91       	pop	r29
    71b6:	08 95       	ret

000071b8 <main>:
void LCD1(void * pv);
void LCD2(void * pv);

xSemaphoreHandle LCDSem ;
void main()
{
    71b8:	af 92       	push	r10
    71ba:	bf 92       	push	r11
    71bc:	cf 92       	push	r12
    71be:	df 92       	push	r13
    71c0:	ef 92       	push	r14
    71c2:	ff 92       	push	r15
    71c4:	0f 93       	push	r16
    71c6:	df 93       	push	r29
    71c8:	cf 93       	push	r28
    71ca:	cd b7       	in	r28, 0x3d	; 61
    71cc:	de b7       	in	r29, 0x3e	; 62
	CLCD_voidInit();
    71ce:	0e 94 64 2e 	call	0x5cc8	; 0x5cc8 <CLCD_voidInit>

	xTaskCreate(&LCD1,NULL,250,NULL,0,NULL);
    71d2:	86 e1       	ldi	r24, 0x16	; 22
    71d4:	99 e3       	ldi	r25, 0x39	; 57
    71d6:	60 e0       	ldi	r22, 0x00	; 0
    71d8:	70 e0       	ldi	r23, 0x00	; 0
    71da:	4a ef       	ldi	r20, 0xFA	; 250
    71dc:	50 e0       	ldi	r21, 0x00	; 0
    71de:	20 e0       	ldi	r18, 0x00	; 0
    71e0:	30 e0       	ldi	r19, 0x00	; 0
    71e2:	00 e0       	ldi	r16, 0x00	; 0
    71e4:	ee 24       	eor	r14, r14
    71e6:	ff 24       	eor	r15, r15
    71e8:	cc 24       	eor	r12, r12
    71ea:	dd 24       	eor	r13, r13
    71ec:	aa 24       	eor	r10, r10
    71ee:	bb 24       	eor	r11, r11
    71f0:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <xTaskGenericCreate>
	xTaskCreate(&LCD2,NULL,250,NULL,0,NULL);
    71f4:	8a eb       	ldi	r24, 0xBA	; 186
    71f6:	99 e3       	ldi	r25, 0x39	; 57
    71f8:	60 e0       	ldi	r22, 0x00	; 0
    71fa:	70 e0       	ldi	r23, 0x00	; 0
    71fc:	4a ef       	ldi	r20, 0xFA	; 250
    71fe:	50 e0       	ldi	r21, 0x00	; 0
    7200:	20 e0       	ldi	r18, 0x00	; 0
    7202:	30 e0       	ldi	r19, 0x00	; 0
    7204:	00 e0       	ldi	r16, 0x00	; 0
    7206:	ee 24       	eor	r14, r14
    7208:	ff 24       	eor	r15, r15
    720a:	cc 24       	eor	r12, r12
    720c:	dd 24       	eor	r13, r13
    720e:	aa 24       	eor	r10, r10
    7210:	bb 24       	eor	r11, r11
    7212:	0e 94 f8 1e 	call	0x3df0	; 0x3df0 <xTaskGenericCreate>

	LCDSem = xSemaphoreCreateCounting (1,1);
    7216:	81 e0       	ldi	r24, 0x01	; 1
    7218:	61 e0       	ldi	r22, 0x01	; 1
    721a:	0e 94 01 1b 	call	0x3602	; 0x3602 <xQueueCreateCountingSemaphore>
    721e:	90 93 50 06 	sts	0x0650, r25
    7222:	80 93 4f 06 	sts	0x064F, r24

	vTaskStartScheduler();
    7226:	0e 94 50 22 	call	0x44a0	; 0x44a0 <vTaskStartScheduler>
    722a:	ff cf       	rjmp	.-2      	; 0x722a <main+0x72>

0000722c <LCD1>:

	}
}

void LCD1(void * pv)
{
    722c:	df 93       	push	r29
    722e:	cf 93       	push	r28
    7230:	cd b7       	in	r28, 0x3d	; 61
    7232:	de b7       	in	r29, 0x3e	; 62
    7234:	61 97       	sbiw	r28, 0x11	; 17
    7236:	0f b6       	in	r0, 0x3f	; 63
    7238:	f8 94       	cli
    723a:	de bf       	out	0x3e, r29	; 62
    723c:	0f be       	out	0x3f, r0	; 63
    723e:	cd bf       	out	0x3d, r28	; 61
    7240:	99 8b       	std	Y+17, r25	; 0x11
    7242:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8SemState;
	while(1)
	{
		/* Try to take the semaphore */
		Local_u8SemState = xSemaphoreTake(LCDSem,0);
    7244:	80 91 4f 06 	lds	r24, 0x064F
    7248:	90 91 50 06 	lds	r25, 0x0650
    724c:	60 e0       	ldi	r22, 0x00	; 0
    724e:	70 e0       	ldi	r23, 0x00	; 0
    7250:	40 e0       	ldi	r20, 0x00	; 0
    7252:	50 e0       	ldi	r21, 0x00	; 0
    7254:	20 e0       	ldi	r18, 0x00	; 0
    7256:	0e 94 0b 1c 	call	0x3816	; 0x3816 <xQueueGenericReceive>
    725a:	8f 87       	std	Y+15, r24	; 0x0f
		CLCD_voidClearScreen();
    725c:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <CLCD_voidClearScreen>
		if (Local_u8SemState==pdPASS)
    7260:	8f 85       	ldd	r24, Y+15	; 0x0f
    7262:	81 30       	cpi	r24, 0x01	; 1
    7264:	09 f0       	breq	.+2      	; 0x7268 <LCD1+0x3c>
    7266:	81 c0       	rjmp	.+258    	; 0x736a <LCD1+0x13e>
		{
			/* semaphore is taked , Access LCD */
			CLCD_voidSendString("I AM TASK1!");
    7268:	85 e6       	ldi	r24, 0x65	; 101
    726a:	90 e0       	ldi	r25, 0x00	; 0
    726c:	0e 94 17 32 	call	0x642e	; 0x642e <CLCD_voidSendString>
    7270:	80 e0       	ldi	r24, 0x00	; 0
    7272:	90 e0       	ldi	r25, 0x00	; 0
    7274:	a8 ec       	ldi	r26, 0xC8	; 200
    7276:	b2 e4       	ldi	r27, 0x42	; 66
    7278:	8b 87       	std	Y+11, r24	; 0x0b
    727a:	9c 87       	std	Y+12, r25	; 0x0c
    727c:	ad 87       	std	Y+13, r26	; 0x0d
    727e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7280:	6b 85       	ldd	r22, Y+11	; 0x0b
    7282:	7c 85       	ldd	r23, Y+12	; 0x0c
    7284:	8d 85       	ldd	r24, Y+13	; 0x0d
    7286:	9e 85       	ldd	r25, Y+14	; 0x0e
    7288:	20 e0       	ldi	r18, 0x00	; 0
    728a:	30 e0       	ldi	r19, 0x00	; 0
    728c:	4a ef       	ldi	r20, 0xFA	; 250
    728e:	54 e4       	ldi	r21, 0x44	; 68
    7290:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7294:	dc 01       	movw	r26, r24
    7296:	cb 01       	movw	r24, r22
    7298:	8f 83       	std	Y+7, r24	; 0x07
    729a:	98 87       	std	Y+8, r25	; 0x08
    729c:	a9 87       	std	Y+9, r26	; 0x09
    729e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    72a0:	6f 81       	ldd	r22, Y+7	; 0x07
    72a2:	78 85       	ldd	r23, Y+8	; 0x08
    72a4:	89 85       	ldd	r24, Y+9	; 0x09
    72a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    72a8:	20 e0       	ldi	r18, 0x00	; 0
    72aa:	30 e0       	ldi	r19, 0x00	; 0
    72ac:	40 e8       	ldi	r20, 0x80	; 128
    72ae:	5f e3       	ldi	r21, 0x3F	; 63
    72b0:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    72b4:	88 23       	and	r24, r24
    72b6:	2c f4       	brge	.+10     	; 0x72c2 <LCD1+0x96>
		__ticks = 1;
    72b8:	81 e0       	ldi	r24, 0x01	; 1
    72ba:	90 e0       	ldi	r25, 0x00	; 0
    72bc:	9e 83       	std	Y+6, r25	; 0x06
    72be:	8d 83       	std	Y+5, r24	; 0x05
    72c0:	3f c0       	rjmp	.+126    	; 0x7340 <LCD1+0x114>
	else if (__tmp > 65535)
    72c2:	6f 81       	ldd	r22, Y+7	; 0x07
    72c4:	78 85       	ldd	r23, Y+8	; 0x08
    72c6:	89 85       	ldd	r24, Y+9	; 0x09
    72c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    72ca:	20 e0       	ldi	r18, 0x00	; 0
    72cc:	3f ef       	ldi	r19, 0xFF	; 255
    72ce:	4f e7       	ldi	r20, 0x7F	; 127
    72d0:	57 e4       	ldi	r21, 0x47	; 71
    72d2:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    72d6:	18 16       	cp	r1, r24
    72d8:	4c f5       	brge	.+82     	; 0x732c <LCD1+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72da:	6b 85       	ldd	r22, Y+11	; 0x0b
    72dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    72de:	8d 85       	ldd	r24, Y+13	; 0x0d
    72e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    72e2:	20 e0       	ldi	r18, 0x00	; 0
    72e4:	30 e0       	ldi	r19, 0x00	; 0
    72e6:	40 e2       	ldi	r20, 0x20	; 32
    72e8:	51 e4       	ldi	r21, 0x41	; 65
    72ea:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    72ee:	dc 01       	movw	r26, r24
    72f0:	cb 01       	movw	r24, r22
    72f2:	bc 01       	movw	r22, r24
    72f4:	cd 01       	movw	r24, r26
    72f6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    72fa:	dc 01       	movw	r26, r24
    72fc:	cb 01       	movw	r24, r22
    72fe:	9e 83       	std	Y+6, r25	; 0x06
    7300:	8d 83       	std	Y+5, r24	; 0x05
    7302:	0f c0       	rjmp	.+30     	; 0x7322 <LCD1+0xf6>
    7304:	88 ec       	ldi	r24, 0xC8	; 200
    7306:	90 e0       	ldi	r25, 0x00	; 0
    7308:	9c 83       	std	Y+4, r25	; 0x04
    730a:	8b 83       	std	Y+3, r24	; 0x03
    730c:	8b 81       	ldd	r24, Y+3	; 0x03
    730e:	9c 81       	ldd	r25, Y+4	; 0x04
    7310:	01 97       	sbiw	r24, 0x01	; 1
    7312:	f1 f7       	brne	.-4      	; 0x7310 <LCD1+0xe4>
    7314:	9c 83       	std	Y+4, r25	; 0x04
    7316:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7318:	8d 81       	ldd	r24, Y+5	; 0x05
    731a:	9e 81       	ldd	r25, Y+6	; 0x06
    731c:	01 97       	sbiw	r24, 0x01	; 1
    731e:	9e 83       	std	Y+6, r25	; 0x06
    7320:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7322:	8d 81       	ldd	r24, Y+5	; 0x05
    7324:	9e 81       	ldd	r25, Y+6	; 0x06
    7326:	00 97       	sbiw	r24, 0x00	; 0
    7328:	69 f7       	brne	.-38     	; 0x7304 <LCD1+0xd8>
    732a:	14 c0       	rjmp	.+40     	; 0x7354 <LCD1+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    732c:	6f 81       	ldd	r22, Y+7	; 0x07
    732e:	78 85       	ldd	r23, Y+8	; 0x08
    7330:	89 85       	ldd	r24, Y+9	; 0x09
    7332:	9a 85       	ldd	r25, Y+10	; 0x0a
    7334:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7338:	dc 01       	movw	r26, r24
    733a:	cb 01       	movw	r24, r22
    733c:	9e 83       	std	Y+6, r25	; 0x06
    733e:	8d 83       	std	Y+5, r24	; 0x05
    7340:	8d 81       	ldd	r24, Y+5	; 0x05
    7342:	9e 81       	ldd	r25, Y+6	; 0x06
    7344:	9a 83       	std	Y+2, r25	; 0x02
    7346:	89 83       	std	Y+1, r24	; 0x01
    7348:	89 81       	ldd	r24, Y+1	; 0x01
    734a:	9a 81       	ldd	r25, Y+2	; 0x02
    734c:	01 97       	sbiw	r24, 0x01	; 1
    734e:	f1 f7       	brne	.-4      	; 0x734c <LCD1+0x120>
    7350:	9a 83       	std	Y+2, r25	; 0x02
    7352:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			/* Access is finished ,give the semaphore now */
			xSemaphoreGive(LCDSem);
    7354:	80 91 4f 06 	lds	r24, 0x064F
    7358:	90 91 50 06 	lds	r25, 0x0650
    735c:	60 e0       	ldi	r22, 0x00	; 0
    735e:	70 e0       	ldi	r23, 0x00	; 0
    7360:	40 e0       	ldi	r20, 0x00	; 0
    7362:	50 e0       	ldi	r21, 0x00	; 0
    7364:	20 e0       	ldi	r18, 0x00	; 0
    7366:	0e 94 20 1b 	call	0x3640	; 0x3640 <xQueueGenericSend>
		}
		vTaskDelay(1000);
    736a:	88 ee       	ldi	r24, 0xE8	; 232
    736c:	93 e0       	ldi	r25, 0x03	; 3
    736e:	0e 94 bc 20 	call	0x4178	; 0x4178 <vTaskDelay>
    7372:	68 cf       	rjmp	.-304    	; 0x7244 <LCD1+0x18>

00007374 <LCD2>:
	}
}
void LCD2(void * pv)
{
    7374:	df 93       	push	r29
    7376:	cf 93       	push	r28
    7378:	cd b7       	in	r28, 0x3d	; 61
    737a:	de b7       	in	r29, 0x3e	; 62
    737c:	61 97       	sbiw	r28, 0x11	; 17
    737e:	0f b6       	in	r0, 0x3f	; 63
    7380:	f8 94       	cli
    7382:	de bf       	out	0x3e, r29	; 62
    7384:	0f be       	out	0x3f, r0	; 63
    7386:	cd bf       	out	0x3d, r28	; 61
    7388:	99 8b       	std	Y+17, r25	; 0x11
    738a:	88 8b       	std	Y+16, r24	; 0x10
	u8 Local_u8SemState;
	while(1)
	{
		/* Try to take the semaphore */
		Local_u8SemState = xSemaphoreTake(LCDSem,0);
    738c:	80 91 4f 06 	lds	r24, 0x064F
    7390:	90 91 50 06 	lds	r25, 0x0650
    7394:	60 e0       	ldi	r22, 0x00	; 0
    7396:	70 e0       	ldi	r23, 0x00	; 0
    7398:	40 e0       	ldi	r20, 0x00	; 0
    739a:	50 e0       	ldi	r21, 0x00	; 0
    739c:	20 e0       	ldi	r18, 0x00	; 0
    739e:	0e 94 0b 1c 	call	0x3816	; 0x3816 <xQueueGenericReceive>
    73a2:	8f 87       	std	Y+15, r24	; 0x0f
		CLCD_voidClearScreen();
    73a4:	0e 94 53 37 	call	0x6ea6	; 0x6ea6 <CLCD_voidClearScreen>
		if (Local_u8SemState==pdPASS)
    73a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    73aa:	81 30       	cpi	r24, 0x01	; 1
    73ac:	09 f0       	breq	.+2      	; 0x73b0 <LCD2+0x3c>
    73ae:	81 c0       	rjmp	.+258    	; 0x74b2 <LCD2+0x13e>
		{
			/* semaphore is taked , Access LCD */
			CLCD_voidSendString("I AM TASK2!");
    73b0:	81 e7       	ldi	r24, 0x71	; 113
    73b2:	90 e0       	ldi	r25, 0x00	; 0
    73b4:	0e 94 17 32 	call	0x642e	; 0x642e <CLCD_voidSendString>
    73b8:	80 e0       	ldi	r24, 0x00	; 0
    73ba:	90 e0       	ldi	r25, 0x00	; 0
    73bc:	a8 ec       	ldi	r26, 0xC8	; 200
    73be:	b2 e4       	ldi	r27, 0x42	; 66
    73c0:	8b 87       	std	Y+11, r24	; 0x0b
    73c2:	9c 87       	std	Y+12, r25	; 0x0c
    73c4:	ad 87       	std	Y+13, r26	; 0x0d
    73c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    73c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    73ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    73cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    73ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    73d0:	20 e0       	ldi	r18, 0x00	; 0
    73d2:	30 e0       	ldi	r19, 0x00	; 0
    73d4:	4a ef       	ldi	r20, 0xFA	; 250
    73d6:	54 e4       	ldi	r21, 0x44	; 68
    73d8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    73dc:	dc 01       	movw	r26, r24
    73de:	cb 01       	movw	r24, r22
    73e0:	8f 83       	std	Y+7, r24	; 0x07
    73e2:	98 87       	std	Y+8, r25	; 0x08
    73e4:	a9 87       	std	Y+9, r26	; 0x09
    73e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    73e8:	6f 81       	ldd	r22, Y+7	; 0x07
    73ea:	78 85       	ldd	r23, Y+8	; 0x08
    73ec:	89 85       	ldd	r24, Y+9	; 0x09
    73ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    73f0:	20 e0       	ldi	r18, 0x00	; 0
    73f2:	30 e0       	ldi	r19, 0x00	; 0
    73f4:	40 e8       	ldi	r20, 0x80	; 128
    73f6:	5f e3       	ldi	r21, 0x3F	; 63
    73f8:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    73fc:	88 23       	and	r24, r24
    73fe:	2c f4       	brge	.+10     	; 0x740a <LCD2+0x96>
		__ticks = 1;
    7400:	81 e0       	ldi	r24, 0x01	; 1
    7402:	90 e0       	ldi	r25, 0x00	; 0
    7404:	9e 83       	std	Y+6, r25	; 0x06
    7406:	8d 83       	std	Y+5, r24	; 0x05
    7408:	3f c0       	rjmp	.+126    	; 0x7488 <LCD2+0x114>
	else if (__tmp > 65535)
    740a:	6f 81       	ldd	r22, Y+7	; 0x07
    740c:	78 85       	ldd	r23, Y+8	; 0x08
    740e:	89 85       	ldd	r24, Y+9	; 0x09
    7410:	9a 85       	ldd	r25, Y+10	; 0x0a
    7412:	20 e0       	ldi	r18, 0x00	; 0
    7414:	3f ef       	ldi	r19, 0xFF	; 255
    7416:	4f e7       	ldi	r20, 0x7F	; 127
    7418:	57 e4       	ldi	r21, 0x47	; 71
    741a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    741e:	18 16       	cp	r1, r24
    7420:	4c f5       	brge	.+82     	; 0x7474 <LCD2+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    7422:	6b 85       	ldd	r22, Y+11	; 0x0b
    7424:	7c 85       	ldd	r23, Y+12	; 0x0c
    7426:	8d 85       	ldd	r24, Y+13	; 0x0d
    7428:	9e 85       	ldd	r25, Y+14	; 0x0e
    742a:	20 e0       	ldi	r18, 0x00	; 0
    742c:	30 e0       	ldi	r19, 0x00	; 0
    742e:	40 e2       	ldi	r20, 0x20	; 32
    7430:	51 e4       	ldi	r21, 0x41	; 65
    7432:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    7436:	dc 01       	movw	r26, r24
    7438:	cb 01       	movw	r24, r22
    743a:	bc 01       	movw	r22, r24
    743c:	cd 01       	movw	r24, r26
    743e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7442:	dc 01       	movw	r26, r24
    7444:	cb 01       	movw	r24, r22
    7446:	9e 83       	std	Y+6, r25	; 0x06
    7448:	8d 83       	std	Y+5, r24	; 0x05
    744a:	0f c0       	rjmp	.+30     	; 0x746a <LCD2+0xf6>
    744c:	88 ec       	ldi	r24, 0xC8	; 200
    744e:	90 e0       	ldi	r25, 0x00	; 0
    7450:	9c 83       	std	Y+4, r25	; 0x04
    7452:	8b 83       	std	Y+3, r24	; 0x03
    7454:	8b 81       	ldd	r24, Y+3	; 0x03
    7456:	9c 81       	ldd	r25, Y+4	; 0x04
    7458:	01 97       	sbiw	r24, 0x01	; 1
    745a:	f1 f7       	brne	.-4      	; 0x7458 <LCD2+0xe4>
    745c:	9c 83       	std	Y+4, r25	; 0x04
    745e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    7460:	8d 81       	ldd	r24, Y+5	; 0x05
    7462:	9e 81       	ldd	r25, Y+6	; 0x06
    7464:	01 97       	sbiw	r24, 0x01	; 1
    7466:	9e 83       	std	Y+6, r25	; 0x06
    7468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    746a:	8d 81       	ldd	r24, Y+5	; 0x05
    746c:	9e 81       	ldd	r25, Y+6	; 0x06
    746e:	00 97       	sbiw	r24, 0x00	; 0
    7470:	69 f7       	brne	.-38     	; 0x744c <LCD2+0xd8>
    7472:	14 c0       	rjmp	.+40     	; 0x749c <LCD2+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    7474:	6f 81       	ldd	r22, Y+7	; 0x07
    7476:	78 85       	ldd	r23, Y+8	; 0x08
    7478:	89 85       	ldd	r24, Y+9	; 0x09
    747a:	9a 85       	ldd	r25, Y+10	; 0x0a
    747c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    7480:	dc 01       	movw	r26, r24
    7482:	cb 01       	movw	r24, r22
    7484:	9e 83       	std	Y+6, r25	; 0x06
    7486:	8d 83       	std	Y+5, r24	; 0x05
    7488:	8d 81       	ldd	r24, Y+5	; 0x05
    748a:	9e 81       	ldd	r25, Y+6	; 0x06
    748c:	9a 83       	std	Y+2, r25	; 0x02
    748e:	89 83       	std	Y+1, r24	; 0x01
    7490:	89 81       	ldd	r24, Y+1	; 0x01
    7492:	9a 81       	ldd	r25, Y+2	; 0x02
    7494:	01 97       	sbiw	r24, 0x01	; 1
    7496:	f1 f7       	brne	.-4      	; 0x7494 <LCD2+0x120>
    7498:	9a 83       	std	Y+2, r25	; 0x02
    749a:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(100);
			/* Access is finished ,give the semaphore now */
			xSemaphoreGive(LCDSem);
    749c:	80 91 4f 06 	lds	r24, 0x064F
    74a0:	90 91 50 06 	lds	r25, 0x0650
    74a4:	60 e0       	ldi	r22, 0x00	; 0
    74a6:	70 e0       	ldi	r23, 0x00	; 0
    74a8:	40 e0       	ldi	r20, 0x00	; 0
    74aa:	50 e0       	ldi	r21, 0x00	; 0
    74ac:	20 e0       	ldi	r18, 0x00	; 0
    74ae:	0e 94 20 1b 	call	0x3640	; 0x3640 <xQueueGenericSend>
		}
		vTaskDelay(1000);
    74b2:	88 ee       	ldi	r24, 0xE8	; 232
    74b4:	93 e0       	ldi	r25, 0x03	; 3
    74b6:	0e 94 bc 20 	call	0x4178	; 0x4178 <vTaskDelay>
    74ba:	68 cf       	rjmp	.-304    	; 0x738c <LCD2+0x18>

000074bc <__mulsi3>:
    74bc:	62 9f       	mul	r22, r18
    74be:	d0 01       	movw	r26, r0
    74c0:	73 9f       	mul	r23, r19
    74c2:	f0 01       	movw	r30, r0
    74c4:	82 9f       	mul	r24, r18
    74c6:	e0 0d       	add	r30, r0
    74c8:	f1 1d       	adc	r31, r1
    74ca:	64 9f       	mul	r22, r20
    74cc:	e0 0d       	add	r30, r0
    74ce:	f1 1d       	adc	r31, r1
    74d0:	92 9f       	mul	r25, r18
    74d2:	f0 0d       	add	r31, r0
    74d4:	83 9f       	mul	r24, r19
    74d6:	f0 0d       	add	r31, r0
    74d8:	74 9f       	mul	r23, r20
    74da:	f0 0d       	add	r31, r0
    74dc:	65 9f       	mul	r22, r21
    74de:	f0 0d       	add	r31, r0
    74e0:	99 27       	eor	r25, r25
    74e2:	72 9f       	mul	r23, r18
    74e4:	b0 0d       	add	r27, r0
    74e6:	e1 1d       	adc	r30, r1
    74e8:	f9 1f       	adc	r31, r25
    74ea:	63 9f       	mul	r22, r19
    74ec:	b0 0d       	add	r27, r0
    74ee:	e1 1d       	adc	r30, r1
    74f0:	f9 1f       	adc	r31, r25
    74f2:	bd 01       	movw	r22, r26
    74f4:	cf 01       	movw	r24, r30
    74f6:	11 24       	eor	r1, r1
    74f8:	08 95       	ret

000074fa <__udivmodsi4>:
    74fa:	a1 e2       	ldi	r26, 0x21	; 33
    74fc:	1a 2e       	mov	r1, r26
    74fe:	aa 1b       	sub	r26, r26
    7500:	bb 1b       	sub	r27, r27
    7502:	fd 01       	movw	r30, r26
    7504:	0d c0       	rjmp	.+26     	; 0x7520 <__udivmodsi4_ep>

00007506 <__udivmodsi4_loop>:
    7506:	aa 1f       	adc	r26, r26
    7508:	bb 1f       	adc	r27, r27
    750a:	ee 1f       	adc	r30, r30
    750c:	ff 1f       	adc	r31, r31
    750e:	a2 17       	cp	r26, r18
    7510:	b3 07       	cpc	r27, r19
    7512:	e4 07       	cpc	r30, r20
    7514:	f5 07       	cpc	r31, r21
    7516:	20 f0       	brcs	.+8      	; 0x7520 <__udivmodsi4_ep>
    7518:	a2 1b       	sub	r26, r18
    751a:	b3 0b       	sbc	r27, r19
    751c:	e4 0b       	sbc	r30, r20
    751e:	f5 0b       	sbc	r31, r21

00007520 <__udivmodsi4_ep>:
    7520:	66 1f       	adc	r22, r22
    7522:	77 1f       	adc	r23, r23
    7524:	88 1f       	adc	r24, r24
    7526:	99 1f       	adc	r25, r25
    7528:	1a 94       	dec	r1
    752a:	69 f7       	brne	.-38     	; 0x7506 <__udivmodsi4_loop>
    752c:	60 95       	com	r22
    752e:	70 95       	com	r23
    7530:	80 95       	com	r24
    7532:	90 95       	com	r25
    7534:	9b 01       	movw	r18, r22
    7536:	ac 01       	movw	r20, r24
    7538:	bd 01       	movw	r22, r26
    753a:	cf 01       	movw	r24, r30
    753c:	08 95       	ret

0000753e <__prologue_saves__>:
    753e:	2f 92       	push	r2
    7540:	3f 92       	push	r3
    7542:	4f 92       	push	r4
    7544:	5f 92       	push	r5
    7546:	6f 92       	push	r6
    7548:	7f 92       	push	r7
    754a:	8f 92       	push	r8
    754c:	9f 92       	push	r9
    754e:	af 92       	push	r10
    7550:	bf 92       	push	r11
    7552:	cf 92       	push	r12
    7554:	df 92       	push	r13
    7556:	ef 92       	push	r14
    7558:	ff 92       	push	r15
    755a:	0f 93       	push	r16
    755c:	1f 93       	push	r17
    755e:	cf 93       	push	r28
    7560:	df 93       	push	r29
    7562:	cd b7       	in	r28, 0x3d	; 61
    7564:	de b7       	in	r29, 0x3e	; 62
    7566:	ca 1b       	sub	r28, r26
    7568:	db 0b       	sbc	r29, r27
    756a:	0f b6       	in	r0, 0x3f	; 63
    756c:	f8 94       	cli
    756e:	de bf       	out	0x3e, r29	; 62
    7570:	0f be       	out	0x3f, r0	; 63
    7572:	cd bf       	out	0x3d, r28	; 61
    7574:	09 94       	ijmp

00007576 <__epilogue_restores__>:
    7576:	2a 88       	ldd	r2, Y+18	; 0x12
    7578:	39 88       	ldd	r3, Y+17	; 0x11
    757a:	48 88       	ldd	r4, Y+16	; 0x10
    757c:	5f 84       	ldd	r5, Y+15	; 0x0f
    757e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7580:	7d 84       	ldd	r7, Y+13	; 0x0d
    7582:	8c 84       	ldd	r8, Y+12	; 0x0c
    7584:	9b 84       	ldd	r9, Y+11	; 0x0b
    7586:	aa 84       	ldd	r10, Y+10	; 0x0a
    7588:	b9 84       	ldd	r11, Y+9	; 0x09
    758a:	c8 84       	ldd	r12, Y+8	; 0x08
    758c:	df 80       	ldd	r13, Y+7	; 0x07
    758e:	ee 80       	ldd	r14, Y+6	; 0x06
    7590:	fd 80       	ldd	r15, Y+5	; 0x05
    7592:	0c 81       	ldd	r16, Y+4	; 0x04
    7594:	1b 81       	ldd	r17, Y+3	; 0x03
    7596:	aa 81       	ldd	r26, Y+2	; 0x02
    7598:	b9 81       	ldd	r27, Y+1	; 0x01
    759a:	ce 0f       	add	r28, r30
    759c:	d1 1d       	adc	r29, r1
    759e:	0f b6       	in	r0, 0x3f	; 63
    75a0:	f8 94       	cli
    75a2:	de bf       	out	0x3e, r29	; 62
    75a4:	0f be       	out	0x3f, r0	; 63
    75a6:	cd bf       	out	0x3d, r28	; 61
    75a8:	ed 01       	movw	r28, r26
    75aa:	08 95       	ret

000075ac <memcpy>:
    75ac:	fb 01       	movw	r30, r22
    75ae:	dc 01       	movw	r26, r24
    75b0:	02 c0       	rjmp	.+4      	; 0x75b6 <memcpy+0xa>
    75b2:	01 90       	ld	r0, Z+
    75b4:	0d 92       	st	X+, r0
    75b6:	41 50       	subi	r20, 0x01	; 1
    75b8:	50 40       	sbci	r21, 0x00	; 0
    75ba:	d8 f7       	brcc	.-10     	; 0x75b2 <memcpy+0x6>
    75bc:	08 95       	ret

000075be <memset>:
    75be:	dc 01       	movw	r26, r24
    75c0:	01 c0       	rjmp	.+2      	; 0x75c4 <memset+0x6>
    75c2:	6d 93       	st	X+, r22
    75c4:	41 50       	subi	r20, 0x01	; 1
    75c6:	50 40       	sbci	r21, 0x00	; 0
    75c8:	e0 f7       	brcc	.-8      	; 0x75c2 <memset+0x4>
    75ca:	08 95       	ret

000075cc <strncpy>:
    75cc:	fb 01       	movw	r30, r22
    75ce:	dc 01       	movw	r26, r24
    75d0:	41 50       	subi	r20, 0x01	; 1
    75d2:	50 40       	sbci	r21, 0x00	; 0
    75d4:	48 f0       	brcs	.+18     	; 0x75e8 <strncpy+0x1c>
    75d6:	01 90       	ld	r0, Z+
    75d8:	0d 92       	st	X+, r0
    75da:	00 20       	and	r0, r0
    75dc:	c9 f7       	brne	.-14     	; 0x75d0 <strncpy+0x4>
    75de:	01 c0       	rjmp	.+2      	; 0x75e2 <strncpy+0x16>
    75e0:	1d 92       	st	X+, r1
    75e2:	41 50       	subi	r20, 0x01	; 1
    75e4:	50 40       	sbci	r21, 0x00	; 0
    75e6:	e0 f7       	brcc	.-8      	; 0x75e0 <strncpy+0x14>
    75e8:	08 95       	ret

000075ea <_exit>:
    75ea:	f8 94       	cli

000075ec <__stop_program>:
    75ec:	ff cf       	rjmp	.-2      	; 0x75ec <__stop_program>
