
TheCalculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005d20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017c  00800060  00005d20  00005db4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000124  008001dc  008001dc  00005f30  2**0
                  ALLOC
  3 .stab         00005514  00000000  00000000  00005f30  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000114a  00000000  00000000  0000b444  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000240  00000000  00000000  0000c58e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000297  00000000  00000000  0000c7ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003717  00000000  00000000  0000ca65  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000196b  00000000  00000000  0001017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000018d1  00000000  00000000  00011ae7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000260  00000000  00000000  000133b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003c8  00000000  00000000  00013618  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000024cc  00000000  00000000  000139e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00015eac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	fd e5       	ldi	r31, 0x5D	; 93
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 3d       	cpi	r26, 0xDC	; 220
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	13 e0       	ldi	r17, 0x03	; 3
      78:	ac ed       	ldi	r26, 0xDC	; 220
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 30       	cpi	r26, 0x00	; 0
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 11 2e 	call	0x5c22	; 0x5c22 <main>
      8a:	0c 94 8e 2e 	jmp	0x5d1c	; 0x5d1c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfdi>:
     190:	a0 e0       	ldi	r26, 0x00	; 0
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	ee ec       	ldi	r30, 0xCE	; 206
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <__prologue_saves__>
     19c:	7b 01       	movw	r14, r22
     19e:	8c 01       	movw	r16, r24
     1a0:	20 e0       	ldi	r18, 0x00	; 0
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	40 e8       	ldi	r20, 0x80	; 128
     1a6:	5f e3       	ldi	r21, 0x3F	; 63
     1a8:	0e 94 05 12 	call	0x240a	; 0x240a <__ltsf2>
     1ac:	88 23       	and	r24, r24
     1ae:	4c f4       	brge	.+18     	; 0x1c2 <__fixunssfdi+0x32>
     1b0:	aa 24       	eor	r10, r10
     1b2:	bb 24       	eor	r11, r11
     1b4:	cc 24       	eor	r12, r12
     1b6:	dd 24       	eor	r13, r13
     1b8:	ee 24       	eor	r14, r14
     1ba:	ff 24       	eor	r15, r15
     1bc:	00 e0       	ldi	r16, 0x00	; 0
     1be:	10 e0       	ldi	r17, 0x00	; 0
     1c0:	86 c0       	rjmp	.+268    	; 0x2ce <__fixunssfdi+0x13e>
     1c2:	c8 01       	movw	r24, r16
     1c4:	b7 01       	movw	r22, r14
     1c6:	20 e0       	ldi	r18, 0x00	; 0
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e8       	ldi	r20, 0x80	; 128
     1cc:	5f e4       	ldi	r21, 0x4F	; 79
     1ce:	0e 94 05 12 	call	0x240a	; 0x240a <__ltsf2>
     1d2:	88 23       	and	r24, r24
     1d4:	54 f4       	brge	.+20     	; 0x1ea <__fixunssfdi+0x5a>
     1d6:	c8 01       	movw	r24, r16
     1d8:	b7 01       	movw	r22, r14
     1da:	0e 94 af 13 	call	0x275e	; 0x275e <__fixunssfsi>
     1de:	5b 01       	movw	r10, r22
     1e0:	6c 01       	movw	r12, r24
     1e2:	ee 24       	eor	r14, r14
     1e4:	ff 24       	eor	r15, r15
     1e6:	87 01       	movw	r16, r14
     1e8:	72 c0       	rjmp	.+228    	; 0x2ce <__fixunssfdi+0x13e>
     1ea:	c8 01       	movw	r24, r16
     1ec:	b7 01       	movw	r22, r14
     1ee:	20 e0       	ldi	r18, 0x00	; 0
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e8       	ldi	r20, 0x80	; 128
     1f4:	5f e5       	ldi	r21, 0x5F	; 95
     1f6:	0e 94 05 12 	call	0x240a	; 0x240a <__ltsf2>
     1fa:	87 fd       	sbrc	r24, 7
     1fc:	0f c0       	rjmp	.+30     	; 0x21c <__fixunssfdi+0x8c>
     1fe:	aa 24       	eor	r10, r10
     200:	aa 94       	dec	r10
     202:	bb 24       	eor	r11, r11
     204:	ba 94       	dec	r11
     206:	cc 24       	eor	r12, r12
     208:	ca 94       	dec	r12
     20a:	dd 24       	eor	r13, r13
     20c:	da 94       	dec	r13
     20e:	ee 24       	eor	r14, r14
     210:	ea 94       	dec	r14
     212:	ff 24       	eor	r15, r15
     214:	fa 94       	dec	r15
     216:	0f ef       	ldi	r16, 0xFF	; 255
     218:	1f ef       	ldi	r17, 0xFF	; 255
     21a:	59 c0       	rjmp	.+178    	; 0x2ce <__fixunssfdi+0x13e>
     21c:	c8 01       	movw	r24, r16
     21e:	b7 01       	movw	r22, r14
     220:	20 e0       	ldi	r18, 0x00	; 0
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e8       	ldi	r20, 0x80	; 128
     226:	5f e2       	ldi	r21, 0x2F	; 47
     228:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
     22c:	7b 01       	movw	r14, r22
     22e:	8c 01       	movw	r16, r24
     230:	22 24       	eor	r2, r2
     232:	33 24       	eor	r3, r3
     234:	21 01       	movw	r4, r2
     236:	90 e1       	ldi	r25, 0x10	; 16
     238:	a9 2e       	mov	r10, r25
     23a:	b1 2c       	mov	r11, r1
     23c:	c1 2c       	mov	r12, r1
     23e:	d1 2c       	mov	r13, r1
     240:	c0 e0       	ldi	r28, 0x00	; 0
     242:	d0 e0       	ldi	r29, 0x00	; 0
     244:	61 e0       	ldi	r22, 0x01	; 1
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0a 2c       	mov	r0, r10
     24e:	04 c0       	rjmp	.+8      	; 0x258 <__fixunssfdi+0xc8>
     250:	66 0f       	add	r22, r22
     252:	77 1f       	adc	r23, r23
     254:	88 1f       	adc	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	0a 94       	dec	r0
     25a:	d2 f7       	brpl	.-12     	; 0x250 <__fixunssfdi+0xc0>
     25c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <__floatunsisf>
     260:	3b 01       	movw	r6, r22
     262:	4c 01       	movw	r8, r24
     264:	c8 01       	movw	r24, r16
     266:	b7 01       	movw	r22, r14
     268:	a4 01       	movw	r20, r8
     26a:	93 01       	movw	r18, r6
     26c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__gesf2>
     270:	88 23       	and	r24, r24
     272:	64 f0       	brlt	.+24     	; 0x28c <__fixunssfdi+0xfc>
     274:	2a 28       	or	r2, r10
     276:	3b 28       	or	r3, r11
     278:	4c 28       	or	r4, r12
     27a:	5d 28       	or	r5, r13
     27c:	c8 01       	movw	r24, r16
     27e:	b7 01       	movw	r22, r14
     280:	a4 01       	movw	r20, r8
     282:	93 01       	movw	r18, r6
     284:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
     288:	7b 01       	movw	r14, r22
     28a:	8c 01       	movw	r16, r24
     28c:	d6 94       	lsr	r13
     28e:	c7 94       	ror	r12
     290:	b7 94       	ror	r11
     292:	a7 94       	ror	r10
     294:	21 96       	adiw	r28, 0x01	; 1
     296:	c5 30       	cpi	r28, 0x05	; 5
     298:	d1 05       	cpc	r29, r1
     29a:	a1 f6       	brne	.-88     	; 0x244 <__fixunssfdi+0xb4>
     29c:	c8 01       	movw	r24, r16
     29e:	b7 01       	movw	r22, r14
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	40 e8       	ldi	r20, 0x80	; 128
     2a6:	5f e4       	ldi	r21, 0x4F	; 79
     2a8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
     2ac:	0e 94 af 13 	call	0x275e	; 0x275e <__fixunssfsi>
     2b0:	5b 01       	movw	r10, r22
     2b2:	6c 01       	movw	r12, r24
     2b4:	9b 01       	movw	r18, r22
     2b6:	a6 01       	movw	r20, r12
     2b8:	60 e0       	ldi	r22, 0x00	; 0
     2ba:	70 e0       	ldi	r23, 0x00	; 0
     2bc:	80 e0       	ldi	r24, 0x00	; 0
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	02 2d       	mov	r16, r2
     2c2:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
     2c6:	59 01       	movw	r10, r18
     2c8:	6a 01       	movw	r12, r20
     2ca:	7b 01       	movw	r14, r22
     2cc:	8c 01       	movw	r16, r24
     2ce:	95 01       	movw	r18, r10
     2d0:	a6 01       	movw	r20, r12
     2d2:	b7 01       	movw	r22, r14
     2d4:	c8 01       	movw	r24, r16
     2d6:	cd b7       	in	r28, 0x3d	; 61
     2d8:	de b7       	in	r29, 0x3e	; 62
     2da:	e2 e1       	ldi	r30, 0x12	; 18
     2dc:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <__epilogue_restores__>

000002e0 <__udivdi3>:
     2e0:	ae e5       	ldi	r26, 0x5E	; 94
     2e2:	b0 e0       	ldi	r27, 0x00	; 0
     2e4:	e6 e7       	ldi	r30, 0x76	; 118
     2e6:	f1 e0       	ldi	r31, 0x01	; 1
     2e8:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <__prologue_saves__>
     2ec:	a8 e0       	ldi	r26, 0x08	; 8
     2ee:	4e 01       	movw	r8, r28
     2f0:	08 94       	sec
     2f2:	81 1c       	adc	r8, r1
     2f4:	91 1c       	adc	r9, r1
     2f6:	f4 01       	movw	r30, r8
     2f8:	6a 2e       	mov	r6, r26
     2fa:	11 92       	st	Z+, r1
     2fc:	6a 94       	dec	r6
     2fe:	e9 f7       	brne	.-6      	; 0x2fa <__udivdi3+0x1a>
     300:	29 83       	std	Y+1, r18	; 0x01
     302:	3a 83       	std	Y+2, r19	; 0x02
     304:	4b 83       	std	Y+3, r20	; 0x03
     306:	5c 83       	std	Y+4, r21	; 0x04
     308:	6d 83       	std	Y+5, r22	; 0x05
     30a:	7e 83       	std	Y+6, r23	; 0x06
     30c:	8f 83       	std	Y+7, r24	; 0x07
     30e:	98 87       	std	Y+8, r25	; 0x08
     310:	ce 01       	movw	r24, r28
     312:	09 96       	adiw	r24, 0x09	; 9
     314:	fc 01       	movw	r30, r24
     316:	11 92       	st	Z+, r1
     318:	aa 95       	dec	r26
     31a:	e9 f7       	brne	.-6      	; 0x316 <__udivdi3+0x36>
     31c:	a9 86       	std	Y+9, r10	; 0x09
     31e:	ba 86       	std	Y+10, r11	; 0x0a
     320:	cb 86       	std	Y+11, r12	; 0x0b
     322:	dc 86       	std	Y+12, r13	; 0x0c
     324:	ed 86       	std	Y+13, r14	; 0x0d
     326:	fe 86       	std	Y+14, r15	; 0x0e
     328:	0f 87       	std	Y+15, r16	; 0x0f
     32a:	18 8b       	std	Y+16, r17	; 0x10
     32c:	29 84       	ldd	r2, Y+9	; 0x09
     32e:	3a 84       	ldd	r3, Y+10	; 0x0a
     330:	4b 84       	ldd	r4, Y+11	; 0x0b
     332:	5c 84       	ldd	r5, Y+12	; 0x0c
     334:	ed 84       	ldd	r14, Y+13	; 0x0d
     336:	fe 84       	ldd	r15, Y+14	; 0x0e
     338:	0f 85       	ldd	r16, Y+15	; 0x0f
     33a:	18 89       	ldd	r17, Y+16	; 0x10
     33c:	69 80       	ldd	r6, Y+1	; 0x01
     33e:	7a 80       	ldd	r7, Y+2	; 0x02
     340:	8b 80       	ldd	r8, Y+3	; 0x03
     342:	9c 80       	ldd	r9, Y+4	; 0x04
     344:	6d a6       	std	Y+45, r6	; 0x2d
     346:	7e a6       	std	Y+46, r7	; 0x2e
     348:	8f a6       	std	Y+47, r8	; 0x2f
     34a:	98 aa       	std	Y+48, r9	; 0x30
     34c:	6d 80       	ldd	r6, Y+5	; 0x05
     34e:	7e 80       	ldd	r7, Y+6	; 0x06
     350:	8f 80       	ldd	r8, Y+7	; 0x07
     352:	98 84       	ldd	r9, Y+8	; 0x08
     354:	e1 14       	cp	r14, r1
     356:	f1 04       	cpc	r15, r1
     358:	01 05       	cpc	r16, r1
     35a:	11 05       	cpc	r17, r1
     35c:	09 f0       	breq	.+2      	; 0x360 <__udivdi3+0x80>
     35e:	b3 c3       	rjmp	.+1894   	; 0xac6 <__stack+0x267>
     360:	62 14       	cp	r6, r2
     362:	73 04       	cpc	r7, r3
     364:	84 04       	cpc	r8, r4
     366:	95 04       	cpc	r9, r5
     368:	08 f0       	brcs	.+2      	; 0x36c <__udivdi3+0x8c>
     36a:	3d c1       	rjmp	.+634    	; 0x5e6 <__udivdi3+0x306>
     36c:	00 e0       	ldi	r16, 0x00	; 0
     36e:	20 16       	cp	r2, r16
     370:	00 e0       	ldi	r16, 0x00	; 0
     372:	30 06       	cpc	r3, r16
     374:	01 e0       	ldi	r16, 0x01	; 1
     376:	40 06       	cpc	r4, r16
     378:	00 e0       	ldi	r16, 0x00	; 0
     37a:	50 06       	cpc	r5, r16
     37c:	88 f4       	brcc	.+34     	; 0x3a0 <__udivdi3+0xc0>
     37e:	1f ef       	ldi	r17, 0xFF	; 255
     380:	21 16       	cp	r2, r17
     382:	31 04       	cpc	r3, r1
     384:	41 04       	cpc	r4, r1
     386:	51 04       	cpc	r5, r1
     388:	39 f0       	breq	.+14     	; 0x398 <__udivdi3+0xb8>
     38a:	30 f0       	brcs	.+12     	; 0x398 <__udivdi3+0xb8>
     38c:	48 e0       	ldi	r20, 0x08	; 8
     38e:	e4 2e       	mov	r14, r20
     390:	f1 2c       	mov	r15, r1
     392:	01 2d       	mov	r16, r1
     394:	11 2d       	mov	r17, r1
     396:	18 c0       	rjmp	.+48     	; 0x3c8 <__udivdi3+0xe8>
     398:	ee 24       	eor	r14, r14
     39a:	ff 24       	eor	r15, r15
     39c:	87 01       	movw	r16, r14
     39e:	14 c0       	rjmp	.+40     	; 0x3c8 <__udivdi3+0xe8>
     3a0:	20 e0       	ldi	r18, 0x00	; 0
     3a2:	22 16       	cp	r2, r18
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	32 06       	cpc	r3, r18
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	42 06       	cpc	r4, r18
     3ac:	21 e0       	ldi	r18, 0x01	; 1
     3ae:	52 06       	cpc	r5, r18
     3b0:	30 f0       	brcs	.+12     	; 0x3be <__udivdi3+0xde>
     3b2:	38 e1       	ldi	r19, 0x18	; 24
     3b4:	e3 2e       	mov	r14, r19
     3b6:	f1 2c       	mov	r15, r1
     3b8:	01 2d       	mov	r16, r1
     3ba:	11 2d       	mov	r17, r1
     3bc:	05 c0       	rjmp	.+10     	; 0x3c8 <__udivdi3+0xe8>
     3be:	20 e1       	ldi	r18, 0x10	; 16
     3c0:	e2 2e       	mov	r14, r18
     3c2:	f1 2c       	mov	r15, r1
     3c4:	01 2d       	mov	r16, r1
     3c6:	11 2d       	mov	r17, r1
     3c8:	d2 01       	movw	r26, r4
     3ca:	c1 01       	movw	r24, r2
     3cc:	0e 2c       	mov	r0, r14
     3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <__udivdi3+0xf8>
     3d0:	b6 95       	lsr	r27
     3d2:	a7 95       	ror	r26
     3d4:	97 95       	ror	r25
     3d6:	87 95       	ror	r24
     3d8:	0a 94       	dec	r0
     3da:	d2 f7       	brpl	.-12     	; 0x3d0 <__udivdi3+0xf0>
     3dc:	84 57       	subi	r24, 0x74	; 116
     3de:	9f 4f       	sbci	r25, 0xFF	; 255
     3e0:	dc 01       	movw	r26, r24
     3e2:	2c 91       	ld	r18, X
     3e4:	80 e2       	ldi	r24, 0x20	; 32
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	a0 e0       	ldi	r26, 0x00	; 0
     3ea:	b0 e0       	ldi	r27, 0x00	; 0
     3ec:	8e 19       	sub	r24, r14
     3ee:	9f 09       	sbc	r25, r15
     3f0:	a0 0b       	sbc	r26, r16
     3f2:	b1 0b       	sbc	r27, r17
     3f4:	7c 01       	movw	r14, r24
     3f6:	8d 01       	movw	r16, r26
     3f8:	e2 1a       	sub	r14, r18
     3fa:	f1 08       	sbc	r15, r1
     3fc:	01 09       	sbc	r16, r1
     3fe:	11 09       	sbc	r17, r1
     400:	e1 14       	cp	r14, r1
     402:	f1 04       	cpc	r15, r1
     404:	01 05       	cpc	r16, r1
     406:	11 05       	cpc	r17, r1
     408:	a1 f1       	breq	.+104    	; 0x472 <__udivdi3+0x192>
     40a:	0e 2c       	mov	r0, r14
     40c:	04 c0       	rjmp	.+8      	; 0x416 <__udivdi3+0x136>
     40e:	22 0c       	add	r2, r2
     410:	33 1c       	adc	r3, r3
     412:	44 1c       	adc	r4, r4
     414:	55 1c       	adc	r5, r5
     416:	0a 94       	dec	r0
     418:	d2 f7       	brpl	.-12     	; 0x40e <__udivdi3+0x12e>
     41a:	a4 01       	movw	r20, r8
     41c:	93 01       	movw	r18, r6
     41e:	0e 2c       	mov	r0, r14
     420:	04 c0       	rjmp	.+8      	; 0x42a <__udivdi3+0x14a>
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	44 1f       	adc	r20, r20
     428:	55 1f       	adc	r21, r21
     42a:	0a 94       	dec	r0
     42c:	d2 f7       	brpl	.-12     	; 0x422 <__udivdi3+0x142>
     42e:	80 e2       	ldi	r24, 0x20	; 32
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	8e 19       	sub	r24, r14
     434:	9f 09       	sbc	r25, r15
     436:	6d a4       	ldd	r6, Y+45	; 0x2d
     438:	7e a4       	ldd	r7, Y+46	; 0x2e
     43a:	8f a4       	ldd	r8, Y+47	; 0x2f
     43c:	98 a8       	ldd	r9, Y+48	; 0x30
     43e:	04 c0       	rjmp	.+8      	; 0x448 <__udivdi3+0x168>
     440:	96 94       	lsr	r9
     442:	87 94       	ror	r8
     444:	77 94       	ror	r7
     446:	67 94       	ror	r6
     448:	8a 95       	dec	r24
     44a:	d2 f7       	brpl	.-12     	; 0x440 <__udivdi3+0x160>
     44c:	62 2a       	or	r6, r18
     44e:	73 2a       	or	r7, r19
     450:	84 2a       	or	r8, r20
     452:	95 2a       	or	r9, r21
     454:	ad a4       	ldd	r10, Y+45	; 0x2d
     456:	be a4       	ldd	r11, Y+46	; 0x2e
     458:	cf a4       	ldd	r12, Y+47	; 0x2f
     45a:	d8 a8       	ldd	r13, Y+48	; 0x30
     45c:	04 c0       	rjmp	.+8      	; 0x466 <__udivdi3+0x186>
     45e:	aa 0c       	add	r10, r10
     460:	bb 1c       	adc	r11, r11
     462:	cc 1c       	adc	r12, r12
     464:	dd 1c       	adc	r13, r13
     466:	ea 94       	dec	r14
     468:	d2 f7       	brpl	.-12     	; 0x45e <__udivdi3+0x17e>
     46a:	ad a6       	std	Y+45, r10	; 0x2d
     46c:	be a6       	std	Y+46, r11	; 0x2e
     46e:	cf a6       	std	Y+47, r12	; 0x2f
     470:	d8 aa       	std	Y+48, r13	; 0x30
     472:	62 01       	movw	r12, r4
     474:	ee 24       	eor	r14, r14
     476:	ff 24       	eor	r15, r15
     478:	cd aa       	std	Y+53, r12	; 0x35
     47a:	de aa       	std	Y+54, r13	; 0x36
     47c:	ef aa       	std	Y+55, r14	; 0x37
     47e:	f8 ae       	std	Y+56, r15	; 0x38
     480:	92 01       	movw	r18, r4
     482:	81 01       	movw	r16, r2
     484:	20 70       	andi	r18, 0x00	; 0
     486:	30 70       	andi	r19, 0x00	; 0
     488:	09 af       	std	Y+57, r16	; 0x39
     48a:	1a af       	std	Y+58, r17	; 0x3a
     48c:	2b af       	std	Y+59, r18	; 0x3b
     48e:	3c af       	std	Y+60, r19	; 0x3c
     490:	c4 01       	movw	r24, r8
     492:	b3 01       	movw	r22, r6
     494:	a7 01       	movw	r20, r14
     496:	96 01       	movw	r18, r12
     498:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     49c:	7b 01       	movw	r14, r22
     49e:	8c 01       	movw	r16, r24
     4a0:	c4 01       	movw	r24, r8
     4a2:	b3 01       	movw	r22, r6
     4a4:	2d a9       	ldd	r18, Y+53	; 0x35
     4a6:	3e a9       	ldd	r19, Y+54	; 0x36
     4a8:	4f a9       	ldd	r20, Y+55	; 0x37
     4aa:	58 ad       	ldd	r21, Y+56	; 0x38
     4ac:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     4b0:	c9 01       	movw	r24, r18
     4b2:	da 01       	movw	r26, r20
     4b4:	3c 01       	movw	r6, r24
     4b6:	4d 01       	movw	r8, r26
     4b8:	c4 01       	movw	r24, r8
     4ba:	b3 01       	movw	r22, r6
     4bc:	29 ad       	ldd	r18, Y+57	; 0x39
     4be:	3a ad       	ldd	r19, Y+58	; 0x3a
     4c0:	4b ad       	ldd	r20, Y+59	; 0x3b
     4c2:	5c ad       	ldd	r21, Y+60	; 0x3c
     4c4:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     4c8:	9b 01       	movw	r18, r22
     4ca:	ac 01       	movw	r20, r24
     4cc:	87 01       	movw	r16, r14
     4ce:	ff 24       	eor	r15, r15
     4d0:	ee 24       	eor	r14, r14
     4d2:	ad a4       	ldd	r10, Y+45	; 0x2d
     4d4:	be a4       	ldd	r11, Y+46	; 0x2e
     4d6:	cf a4       	ldd	r12, Y+47	; 0x2f
     4d8:	d8 a8       	ldd	r13, Y+48	; 0x30
     4da:	c6 01       	movw	r24, r12
     4dc:	aa 27       	eor	r26, r26
     4de:	bb 27       	eor	r27, r27
     4e0:	57 01       	movw	r10, r14
     4e2:	68 01       	movw	r12, r16
     4e4:	a8 2a       	or	r10, r24
     4e6:	b9 2a       	or	r11, r25
     4e8:	ca 2a       	or	r12, r26
     4ea:	db 2a       	or	r13, r27
     4ec:	a2 16       	cp	r10, r18
     4ee:	b3 06       	cpc	r11, r19
     4f0:	c4 06       	cpc	r12, r20
     4f2:	d5 06       	cpc	r13, r21
     4f4:	e0 f4       	brcc	.+56     	; 0x52e <__udivdi3+0x24e>
     4f6:	08 94       	sec
     4f8:	61 08       	sbc	r6, r1
     4fa:	71 08       	sbc	r7, r1
     4fc:	81 08       	sbc	r8, r1
     4fe:	91 08       	sbc	r9, r1
     500:	a2 0c       	add	r10, r2
     502:	b3 1c       	adc	r11, r3
     504:	c4 1c       	adc	r12, r4
     506:	d5 1c       	adc	r13, r5
     508:	a2 14       	cp	r10, r2
     50a:	b3 04       	cpc	r11, r3
     50c:	c4 04       	cpc	r12, r4
     50e:	d5 04       	cpc	r13, r5
     510:	70 f0       	brcs	.+28     	; 0x52e <__udivdi3+0x24e>
     512:	a2 16       	cp	r10, r18
     514:	b3 06       	cpc	r11, r19
     516:	c4 06       	cpc	r12, r20
     518:	d5 06       	cpc	r13, r21
     51a:	48 f4       	brcc	.+18     	; 0x52e <__udivdi3+0x24e>
     51c:	08 94       	sec
     51e:	61 08       	sbc	r6, r1
     520:	71 08       	sbc	r7, r1
     522:	81 08       	sbc	r8, r1
     524:	91 08       	sbc	r9, r1
     526:	a2 0c       	add	r10, r2
     528:	b3 1c       	adc	r11, r3
     52a:	c4 1c       	adc	r12, r4
     52c:	d5 1c       	adc	r13, r5
     52e:	a2 1a       	sub	r10, r18
     530:	b3 0a       	sbc	r11, r19
     532:	c4 0a       	sbc	r12, r20
     534:	d5 0a       	sbc	r13, r21
     536:	c6 01       	movw	r24, r12
     538:	b5 01       	movw	r22, r10
     53a:	2d a9       	ldd	r18, Y+53	; 0x35
     53c:	3e a9       	ldd	r19, Y+54	; 0x36
     53e:	4f a9       	ldd	r20, Y+55	; 0x37
     540:	58 ad       	ldd	r21, Y+56	; 0x38
     542:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     546:	7b 01       	movw	r14, r22
     548:	8c 01       	movw	r16, r24
     54a:	c6 01       	movw	r24, r12
     54c:	b5 01       	movw	r22, r10
     54e:	2d a9       	ldd	r18, Y+53	; 0x35
     550:	3e a9       	ldd	r19, Y+54	; 0x36
     552:	4f a9       	ldd	r20, Y+55	; 0x37
     554:	58 ad       	ldd	r21, Y+56	; 0x38
     556:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     55a:	c9 01       	movw	r24, r18
     55c:	da 01       	movw	r26, r20
     55e:	5c 01       	movw	r10, r24
     560:	6d 01       	movw	r12, r26
     562:	c6 01       	movw	r24, r12
     564:	b5 01       	movw	r22, r10
     566:	29 ad       	ldd	r18, Y+57	; 0x39
     568:	3a ad       	ldd	r19, Y+58	; 0x3a
     56a:	4b ad       	ldd	r20, Y+59	; 0x3b
     56c:	5c ad       	ldd	r21, Y+60	; 0x3c
     56e:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     572:	9b 01       	movw	r18, r22
     574:	ac 01       	movw	r20, r24
     576:	87 01       	movw	r16, r14
     578:	ff 24       	eor	r15, r15
     57a:	ee 24       	eor	r14, r14
     57c:	8d a5       	ldd	r24, Y+45	; 0x2d
     57e:	9e a5       	ldd	r25, Y+46	; 0x2e
     580:	af a5       	ldd	r26, Y+47	; 0x2f
     582:	b8 a9       	ldd	r27, Y+48	; 0x30
     584:	a0 70       	andi	r26, 0x00	; 0
     586:	b0 70       	andi	r27, 0x00	; 0
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	e2 16       	cp	r14, r18
     592:	f3 06       	cpc	r15, r19
     594:	04 07       	cpc	r16, r20
     596:	15 07       	cpc	r17, r21
     598:	c0 f4       	brcc	.+48     	; 0x5ca <__udivdi3+0x2ea>
     59a:	08 94       	sec
     59c:	a1 08       	sbc	r10, r1
     59e:	b1 08       	sbc	r11, r1
     5a0:	c1 08       	sbc	r12, r1
     5a2:	d1 08       	sbc	r13, r1
     5a4:	e2 0c       	add	r14, r2
     5a6:	f3 1c       	adc	r15, r3
     5a8:	04 1d       	adc	r16, r4
     5aa:	15 1d       	adc	r17, r5
     5ac:	e2 14       	cp	r14, r2
     5ae:	f3 04       	cpc	r15, r3
     5b0:	04 05       	cpc	r16, r4
     5b2:	15 05       	cpc	r17, r5
     5b4:	50 f0       	brcs	.+20     	; 0x5ca <__udivdi3+0x2ea>
     5b6:	e2 16       	cp	r14, r18
     5b8:	f3 06       	cpc	r15, r19
     5ba:	04 07       	cpc	r16, r20
     5bc:	15 07       	cpc	r17, r21
     5be:	28 f4       	brcc	.+10     	; 0x5ca <__udivdi3+0x2ea>
     5c0:	08 94       	sec
     5c2:	a1 08       	sbc	r10, r1
     5c4:	b1 08       	sbc	r11, r1
     5c6:	c1 08       	sbc	r12, r1
     5c8:	d1 08       	sbc	r13, r1
     5ca:	d3 01       	movw	r26, r6
     5cc:	99 27       	eor	r25, r25
     5ce:	88 27       	eor	r24, r24
     5d0:	86 01       	movw	r16, r12
     5d2:	75 01       	movw	r14, r10
     5d4:	e8 2a       	or	r14, r24
     5d6:	f9 2a       	or	r15, r25
     5d8:	0a 2b       	or	r16, r26
     5da:	1b 2b       	or	r17, r27
     5dc:	e9 aa       	std	Y+49, r14	; 0x31
     5de:	fa aa       	std	Y+50, r15	; 0x32
     5e0:	0b ab       	std	Y+51, r16	; 0x33
     5e2:	1c ab       	std	Y+52, r17	; 0x34
     5e4:	cf c4       	rjmp	.+2462   	; 0xf84 <__stack+0x725>
     5e6:	21 14       	cp	r2, r1
     5e8:	31 04       	cpc	r3, r1
     5ea:	41 04       	cpc	r4, r1
     5ec:	51 04       	cpc	r5, r1
     5ee:	71 f4       	brne	.+28     	; 0x60c <__udivdi3+0x32c>
     5f0:	61 e0       	ldi	r22, 0x01	; 1
     5f2:	70 e0       	ldi	r23, 0x00	; 0
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	20 e0       	ldi	r18, 0x00	; 0
     5fa:	30 e0       	ldi	r19, 0x00	; 0
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     604:	c9 01       	movw	r24, r18
     606:	da 01       	movw	r26, r20
     608:	1c 01       	movw	r2, r24
     60a:	2d 01       	movw	r4, r26
     60c:	00 e0       	ldi	r16, 0x00	; 0
     60e:	20 16       	cp	r2, r16
     610:	00 e0       	ldi	r16, 0x00	; 0
     612:	30 06       	cpc	r3, r16
     614:	01 e0       	ldi	r16, 0x01	; 1
     616:	40 06       	cpc	r4, r16
     618:	00 e0       	ldi	r16, 0x00	; 0
     61a:	50 06       	cpc	r5, r16
     61c:	88 f4       	brcc	.+34     	; 0x640 <__udivdi3+0x360>
     61e:	1f ef       	ldi	r17, 0xFF	; 255
     620:	21 16       	cp	r2, r17
     622:	31 04       	cpc	r3, r1
     624:	41 04       	cpc	r4, r1
     626:	51 04       	cpc	r5, r1
     628:	31 f0       	breq	.+12     	; 0x636 <__udivdi3+0x356>
     62a:	28 f0       	brcs	.+10     	; 0x636 <__udivdi3+0x356>
     62c:	48 e0       	ldi	r20, 0x08	; 8
     62e:	50 e0       	ldi	r21, 0x00	; 0
     630:	60 e0       	ldi	r22, 0x00	; 0
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	17 c0       	rjmp	.+46     	; 0x664 <__udivdi3+0x384>
     636:	40 e0       	ldi	r20, 0x00	; 0
     638:	50 e0       	ldi	r21, 0x00	; 0
     63a:	60 e0       	ldi	r22, 0x00	; 0
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	12 c0       	rjmp	.+36     	; 0x664 <__udivdi3+0x384>
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	22 16       	cp	r2, r18
     644:	20 e0       	ldi	r18, 0x00	; 0
     646:	32 06       	cpc	r3, r18
     648:	20 e0       	ldi	r18, 0x00	; 0
     64a:	42 06       	cpc	r4, r18
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	52 06       	cpc	r5, r18
     650:	28 f0       	brcs	.+10     	; 0x65c <__udivdi3+0x37c>
     652:	48 e1       	ldi	r20, 0x18	; 24
     654:	50 e0       	ldi	r21, 0x00	; 0
     656:	60 e0       	ldi	r22, 0x00	; 0
     658:	70 e0       	ldi	r23, 0x00	; 0
     65a:	04 c0       	rjmp	.+8      	; 0x664 <__udivdi3+0x384>
     65c:	40 e1       	ldi	r20, 0x10	; 16
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	60 e0       	ldi	r22, 0x00	; 0
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	d2 01       	movw	r26, r4
     666:	c1 01       	movw	r24, r2
     668:	04 2e       	mov	r0, r20
     66a:	04 c0       	rjmp	.+8      	; 0x674 <__udivdi3+0x394>
     66c:	b6 95       	lsr	r27
     66e:	a7 95       	ror	r26
     670:	97 95       	ror	r25
     672:	87 95       	ror	r24
     674:	0a 94       	dec	r0
     676:	d2 f7       	brpl	.-12     	; 0x66c <__udivdi3+0x38c>
     678:	84 57       	subi	r24, 0x74	; 116
     67a:	9f 4f       	sbci	r25, 0xFF	; 255
     67c:	dc 01       	movw	r26, r24
     67e:	2c 91       	ld	r18, X
     680:	e0 e2       	ldi	r30, 0x20	; 32
     682:	ee 2e       	mov	r14, r30
     684:	f1 2c       	mov	r15, r1
     686:	01 2d       	mov	r16, r1
     688:	11 2d       	mov	r17, r1
     68a:	d8 01       	movw	r26, r16
     68c:	c7 01       	movw	r24, r14
     68e:	84 1b       	sub	r24, r20
     690:	95 0b       	sbc	r25, r21
     692:	a6 0b       	sbc	r26, r22
     694:	b7 0b       	sbc	r27, r23
     696:	82 1b       	sub	r24, r18
     698:	91 09       	sbc	r25, r1
     69a:	a1 09       	sbc	r26, r1
     69c:	b1 09       	sbc	r27, r1
     69e:	00 97       	sbiw	r24, 0x00	; 0
     6a0:	a1 05       	cpc	r26, r1
     6a2:	b1 05       	cpc	r27, r1
     6a4:	61 f4       	brne	.+24     	; 0x6be <__udivdi3+0x3de>
     6a6:	64 01       	movw	r12, r8
     6a8:	53 01       	movw	r10, r6
     6aa:	a2 18       	sub	r10, r2
     6ac:	b3 08       	sbc	r11, r3
     6ae:	c4 08       	sbc	r12, r4
     6b0:	d5 08       	sbc	r13, r5
     6b2:	31 e0       	ldi	r19, 0x01	; 1
     6b4:	63 2e       	mov	r6, r19
     6b6:	71 2c       	mov	r7, r1
     6b8:	81 2c       	mov	r8, r1
     6ba:	91 2c       	mov	r9, r1
     6bc:	1e c1       	rjmp	.+572    	; 0x8fa <__stack+0x9b>
     6be:	6f 96       	adiw	r28, 0x1f	; 31
     6c0:	8f af       	std	Y+63, r24	; 0x3f
     6c2:	6f 97       	sbiw	r28, 0x1f	; 31
     6c4:	08 2e       	mov	r0, r24
     6c6:	04 c0       	rjmp	.+8      	; 0x6d0 <__udivdi3+0x3f0>
     6c8:	22 0c       	add	r2, r2
     6ca:	33 1c       	adc	r3, r3
     6cc:	44 1c       	adc	r4, r4
     6ce:	55 1c       	adc	r5, r5
     6d0:	0a 94       	dec	r0
     6d2:	d2 f7       	brpl	.-12     	; 0x6c8 <__udivdi3+0x3e8>
     6d4:	ee 2d       	mov	r30, r14
     6d6:	e8 1b       	sub	r30, r24
     6d8:	64 01       	movw	r12, r8
     6da:	53 01       	movw	r10, r6
     6dc:	0e 2e       	mov	r0, r30
     6de:	04 c0       	rjmp	.+8      	; 0x6e8 <__udivdi3+0x408>
     6e0:	d6 94       	lsr	r13
     6e2:	c7 94       	ror	r12
     6e4:	b7 94       	ror	r11
     6e6:	a7 94       	ror	r10
     6e8:	0a 94       	dec	r0
     6ea:	d2 f7       	brpl	.-12     	; 0x6e0 <__udivdi3+0x400>
     6ec:	a4 01       	movw	r20, r8
     6ee:	93 01       	movw	r18, r6
     6f0:	6f 96       	adiw	r28, 0x1f	; 31
     6f2:	0f ac       	ldd	r0, Y+63	; 0x3f
     6f4:	6f 97       	sbiw	r28, 0x1f	; 31
     6f6:	04 c0       	rjmp	.+8      	; 0x700 <__udivdi3+0x420>
     6f8:	22 0f       	add	r18, r18
     6fa:	33 1f       	adc	r19, r19
     6fc:	44 1f       	adc	r20, r20
     6fe:	55 1f       	adc	r21, r21
     700:	0a 94       	dec	r0
     702:	d2 f7       	brpl	.-12     	; 0x6f8 <__udivdi3+0x418>
     704:	6d a4       	ldd	r6, Y+45	; 0x2d
     706:	7e a4       	ldd	r7, Y+46	; 0x2e
     708:	8f a4       	ldd	r8, Y+47	; 0x2f
     70a:	98 a8       	ldd	r9, Y+48	; 0x30
     70c:	0e 2e       	mov	r0, r30
     70e:	04 c0       	rjmp	.+8      	; 0x718 <__udivdi3+0x438>
     710:	96 94       	lsr	r9
     712:	87 94       	ror	r8
     714:	77 94       	ror	r7
     716:	67 94       	ror	r6
     718:	0a 94       	dec	r0
     71a:	d2 f7       	brpl	.-12     	; 0x710 <__udivdi3+0x430>
     71c:	84 01       	movw	r16, r8
     71e:	73 01       	movw	r14, r6
     720:	e2 2a       	or	r14, r18
     722:	f3 2a       	or	r15, r19
     724:	04 2b       	or	r16, r20
     726:	15 2b       	or	r17, r21
     728:	e9 a6       	std	Y+41, r14	; 0x29
     72a:	fa a6       	std	Y+42, r15	; 0x2a
     72c:	0b a7       	std	Y+43, r16	; 0x2b
     72e:	1c a7       	std	Y+44, r17	; 0x2c
     730:	32 01       	movw	r6, r4
     732:	88 24       	eor	r8, r8
     734:	99 24       	eor	r9, r9
     736:	92 01       	movw	r18, r4
     738:	81 01       	movw	r16, r2
     73a:	20 70       	andi	r18, 0x00	; 0
     73c:	30 70       	andi	r19, 0x00	; 0
     73e:	21 96       	adiw	r28, 0x01	; 1
     740:	0c af       	std	Y+60, r16	; 0x3c
     742:	1d af       	std	Y+61, r17	; 0x3d
     744:	2e af       	std	Y+62, r18	; 0x3e
     746:	3f af       	std	Y+63, r19	; 0x3f
     748:	21 97       	sbiw	r28, 0x01	; 1
     74a:	c6 01       	movw	r24, r12
     74c:	b5 01       	movw	r22, r10
     74e:	a4 01       	movw	r20, r8
     750:	93 01       	movw	r18, r6
     752:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     756:	7b 01       	movw	r14, r22
     758:	8c 01       	movw	r16, r24
     75a:	c6 01       	movw	r24, r12
     75c:	b5 01       	movw	r22, r10
     75e:	a4 01       	movw	r20, r8
     760:	93 01       	movw	r18, r6
     762:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     766:	c9 01       	movw	r24, r18
     768:	da 01       	movw	r26, r20
     76a:	25 96       	adiw	r28, 0x05	; 5
     76c:	8c af       	std	Y+60, r24	; 0x3c
     76e:	9d af       	std	Y+61, r25	; 0x3d
     770:	ae af       	std	Y+62, r26	; 0x3e
     772:	bf af       	std	Y+63, r27	; 0x3f
     774:	25 97       	sbiw	r28, 0x05	; 5
     776:	bc 01       	movw	r22, r24
     778:	cd 01       	movw	r24, r26
     77a:	21 96       	adiw	r28, 0x01	; 1
     77c:	2c ad       	ldd	r18, Y+60	; 0x3c
     77e:	3d ad       	ldd	r19, Y+61	; 0x3d
     780:	4e ad       	ldd	r20, Y+62	; 0x3e
     782:	5f ad       	ldd	r21, Y+63	; 0x3f
     784:	21 97       	sbiw	r28, 0x01	; 1
     786:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     78a:	9b 01       	movw	r18, r22
     78c:	ac 01       	movw	r20, r24
     78e:	87 01       	movw	r16, r14
     790:	ff 24       	eor	r15, r15
     792:	ee 24       	eor	r14, r14
     794:	a9 a4       	ldd	r10, Y+41	; 0x29
     796:	ba a4       	ldd	r11, Y+42	; 0x2a
     798:	cb a4       	ldd	r12, Y+43	; 0x2b
     79a:	dc a4       	ldd	r13, Y+44	; 0x2c
     79c:	c6 01       	movw	r24, r12
     79e:	aa 27       	eor	r26, r26
     7a0:	bb 27       	eor	r27, r27
     7a2:	5c 01       	movw	r10, r24
     7a4:	6d 01       	movw	r12, r26
     7a6:	ae 28       	or	r10, r14
     7a8:	bf 28       	or	r11, r15
     7aa:	c0 2a       	or	r12, r16
     7ac:	d1 2a       	or	r13, r17
     7ae:	a2 16       	cp	r10, r18
     7b0:	b3 06       	cpc	r11, r19
     7b2:	c4 06       	cpc	r12, r20
     7b4:	d5 06       	cpc	r13, r21
     7b6:	60 f5       	brcc	.+88     	; 0x810 <__udivdi3+0x530>
     7b8:	25 96       	adiw	r28, 0x05	; 5
     7ba:	6c ad       	ldd	r22, Y+60	; 0x3c
     7bc:	7d ad       	ldd	r23, Y+61	; 0x3d
     7be:	8e ad       	ldd	r24, Y+62	; 0x3e
     7c0:	9f ad       	ldd	r25, Y+63	; 0x3f
     7c2:	25 97       	sbiw	r28, 0x05	; 5
     7c4:	61 50       	subi	r22, 0x01	; 1
     7c6:	70 40       	sbci	r23, 0x00	; 0
     7c8:	80 40       	sbci	r24, 0x00	; 0
     7ca:	90 40       	sbci	r25, 0x00	; 0
     7cc:	25 96       	adiw	r28, 0x05	; 5
     7ce:	6c af       	std	Y+60, r22	; 0x3c
     7d0:	7d af       	std	Y+61, r23	; 0x3d
     7d2:	8e af       	std	Y+62, r24	; 0x3e
     7d4:	9f af       	std	Y+63, r25	; 0x3f
     7d6:	25 97       	sbiw	r28, 0x05	; 5
     7d8:	a2 0c       	add	r10, r2
     7da:	b3 1c       	adc	r11, r3
     7dc:	c4 1c       	adc	r12, r4
     7de:	d5 1c       	adc	r13, r5
     7e0:	a2 14       	cp	r10, r2
     7e2:	b3 04       	cpc	r11, r3
     7e4:	c4 04       	cpc	r12, r4
     7e6:	d5 04       	cpc	r13, r5
     7e8:	98 f0       	brcs	.+38     	; 0x810 <__udivdi3+0x530>
     7ea:	a2 16       	cp	r10, r18
     7ec:	b3 06       	cpc	r11, r19
     7ee:	c4 06       	cpc	r12, r20
     7f0:	d5 06       	cpc	r13, r21
     7f2:	70 f4       	brcc	.+28     	; 0x810 <__udivdi3+0x530>
     7f4:	61 50       	subi	r22, 0x01	; 1
     7f6:	70 40       	sbci	r23, 0x00	; 0
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	90 40       	sbci	r25, 0x00	; 0
     7fc:	25 96       	adiw	r28, 0x05	; 5
     7fe:	6c af       	std	Y+60, r22	; 0x3c
     800:	7d af       	std	Y+61, r23	; 0x3d
     802:	8e af       	std	Y+62, r24	; 0x3e
     804:	9f af       	std	Y+63, r25	; 0x3f
     806:	25 97       	sbiw	r28, 0x05	; 5
     808:	a2 0c       	add	r10, r2
     80a:	b3 1c       	adc	r11, r3
     80c:	c4 1c       	adc	r12, r4
     80e:	d5 1c       	adc	r13, r5
     810:	a2 1a       	sub	r10, r18
     812:	b3 0a       	sbc	r11, r19
     814:	c4 0a       	sbc	r12, r20
     816:	d5 0a       	sbc	r13, r21
     818:	c6 01       	movw	r24, r12
     81a:	b5 01       	movw	r22, r10
     81c:	a4 01       	movw	r20, r8
     81e:	93 01       	movw	r18, r6
     820:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     824:	7b 01       	movw	r14, r22
     826:	8c 01       	movw	r16, r24
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	a4 01       	movw	r20, r8
     82e:	93 01       	movw	r18, r6
     830:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     834:	c9 01       	movw	r24, r18
     836:	da 01       	movw	r26, r20
     838:	3c 01       	movw	r6, r24
     83a:	4d 01       	movw	r8, r26
     83c:	c4 01       	movw	r24, r8
     83e:	b3 01       	movw	r22, r6
     840:	21 96       	adiw	r28, 0x01	; 1
     842:	2c ad       	ldd	r18, Y+60	; 0x3c
     844:	3d ad       	ldd	r19, Y+61	; 0x3d
     846:	4e ad       	ldd	r20, Y+62	; 0x3e
     848:	5f ad       	ldd	r21, Y+63	; 0x3f
     84a:	21 97       	sbiw	r28, 0x01	; 1
     84c:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     850:	9b 01       	movw	r18, r22
     852:	ac 01       	movw	r20, r24
     854:	87 01       	movw	r16, r14
     856:	ff 24       	eor	r15, r15
     858:	ee 24       	eor	r14, r14
     85a:	89 a5       	ldd	r24, Y+41	; 0x29
     85c:	9a a5       	ldd	r25, Y+42	; 0x2a
     85e:	ab a5       	ldd	r26, Y+43	; 0x2b
     860:	bc a5       	ldd	r27, Y+44	; 0x2c
     862:	a0 70       	andi	r26, 0x00	; 0
     864:	b0 70       	andi	r27, 0x00	; 0
     866:	57 01       	movw	r10, r14
     868:	68 01       	movw	r12, r16
     86a:	a8 2a       	or	r10, r24
     86c:	b9 2a       	or	r11, r25
     86e:	ca 2a       	or	r12, r26
     870:	db 2a       	or	r13, r27
     872:	a2 16       	cp	r10, r18
     874:	b3 06       	cpc	r11, r19
     876:	c4 06       	cpc	r12, r20
     878:	d5 06       	cpc	r13, r21
     87a:	e0 f4       	brcc	.+56     	; 0x8b4 <__stack+0x55>
     87c:	08 94       	sec
     87e:	61 08       	sbc	r6, r1
     880:	71 08       	sbc	r7, r1
     882:	81 08       	sbc	r8, r1
     884:	91 08       	sbc	r9, r1
     886:	a2 0c       	add	r10, r2
     888:	b3 1c       	adc	r11, r3
     88a:	c4 1c       	adc	r12, r4
     88c:	d5 1c       	adc	r13, r5
     88e:	a2 14       	cp	r10, r2
     890:	b3 04       	cpc	r11, r3
     892:	c4 04       	cpc	r12, r4
     894:	d5 04       	cpc	r13, r5
     896:	70 f0       	brcs	.+28     	; 0x8b4 <__stack+0x55>
     898:	a2 16       	cp	r10, r18
     89a:	b3 06       	cpc	r11, r19
     89c:	c4 06       	cpc	r12, r20
     89e:	d5 06       	cpc	r13, r21
     8a0:	48 f4       	brcc	.+18     	; 0x8b4 <__stack+0x55>
     8a2:	08 94       	sec
     8a4:	61 08       	sbc	r6, r1
     8a6:	71 08       	sbc	r7, r1
     8a8:	81 08       	sbc	r8, r1
     8aa:	91 08       	sbc	r9, r1
     8ac:	a2 0c       	add	r10, r2
     8ae:	b3 1c       	adc	r11, r3
     8b0:	c4 1c       	adc	r12, r4
     8b2:	d5 1c       	adc	r13, r5
     8b4:	8d a5       	ldd	r24, Y+45	; 0x2d
     8b6:	9e a5       	ldd	r25, Y+46	; 0x2e
     8b8:	af a5       	ldd	r26, Y+47	; 0x2f
     8ba:	b8 a9       	ldd	r27, Y+48	; 0x30
     8bc:	6f 96       	adiw	r28, 0x1f	; 31
     8be:	0f ac       	ldd	r0, Y+63	; 0x3f
     8c0:	6f 97       	sbiw	r28, 0x1f	; 31
     8c2:	04 c0       	rjmp	.+8      	; 0x8cc <__stack+0x6d>
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	aa 1f       	adc	r26, r26
     8ca:	bb 1f       	adc	r27, r27
     8cc:	0a 94       	dec	r0
     8ce:	d2 f7       	brpl	.-12     	; 0x8c4 <__stack+0x65>
     8d0:	8d a7       	std	Y+45, r24	; 0x2d
     8d2:	9e a7       	std	Y+46, r25	; 0x2e
     8d4:	af a7       	std	Y+47, r26	; 0x2f
     8d6:	b8 ab       	std	Y+48, r27	; 0x30
     8d8:	a2 1a       	sub	r10, r18
     8da:	b3 0a       	sbc	r11, r19
     8dc:	c4 0a       	sbc	r12, r20
     8de:	d5 0a       	sbc	r13, r21
     8e0:	25 96       	adiw	r28, 0x05	; 5
     8e2:	ec ac       	ldd	r14, Y+60	; 0x3c
     8e4:	fd ac       	ldd	r15, Y+61	; 0x3d
     8e6:	0e ad       	ldd	r16, Y+62	; 0x3e
     8e8:	1f ad       	ldd	r17, Y+63	; 0x3f
     8ea:	25 97       	sbiw	r28, 0x05	; 5
     8ec:	d7 01       	movw	r26, r14
     8ee:	99 27       	eor	r25, r25
     8f0:	88 27       	eor	r24, r24
     8f2:	68 2a       	or	r6, r24
     8f4:	79 2a       	or	r7, r25
     8f6:	8a 2a       	or	r8, r26
     8f8:	9b 2a       	or	r9, r27
     8fa:	82 01       	movw	r16, r4
     8fc:	22 27       	eor	r18, r18
     8fe:	33 27       	eor	r19, r19
     900:	29 96       	adiw	r28, 0x09	; 9
     902:	0c af       	std	Y+60, r16	; 0x3c
     904:	1d af       	std	Y+61, r17	; 0x3d
     906:	2e af       	std	Y+62, r18	; 0x3e
     908:	3f af       	std	Y+63, r19	; 0x3f
     90a:	29 97       	sbiw	r28, 0x09	; 9
     90c:	a2 01       	movw	r20, r4
     90e:	91 01       	movw	r18, r2
     910:	40 70       	andi	r20, 0x00	; 0
     912:	50 70       	andi	r21, 0x00	; 0
     914:	2d 96       	adiw	r28, 0x0d	; 13
     916:	2c af       	std	Y+60, r18	; 0x3c
     918:	3d af       	std	Y+61, r19	; 0x3d
     91a:	4e af       	std	Y+62, r20	; 0x3e
     91c:	5f af       	std	Y+63, r21	; 0x3f
     91e:	2d 97       	sbiw	r28, 0x0d	; 13
     920:	c6 01       	movw	r24, r12
     922:	b5 01       	movw	r22, r10
     924:	29 96       	adiw	r28, 0x09	; 9
     926:	2c ad       	ldd	r18, Y+60	; 0x3c
     928:	3d ad       	ldd	r19, Y+61	; 0x3d
     92a:	4e ad       	ldd	r20, Y+62	; 0x3e
     92c:	5f ad       	ldd	r21, Y+63	; 0x3f
     92e:	29 97       	sbiw	r28, 0x09	; 9
     930:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     934:	7b 01       	movw	r14, r22
     936:	8c 01       	movw	r16, r24
     938:	c6 01       	movw	r24, r12
     93a:	b5 01       	movw	r22, r10
     93c:	29 96       	adiw	r28, 0x09	; 9
     93e:	2c ad       	ldd	r18, Y+60	; 0x3c
     940:	3d ad       	ldd	r19, Y+61	; 0x3d
     942:	4e ad       	ldd	r20, Y+62	; 0x3e
     944:	5f ad       	ldd	r21, Y+63	; 0x3f
     946:	29 97       	sbiw	r28, 0x09	; 9
     948:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     94c:	c9 01       	movw	r24, r18
     94e:	da 01       	movw	r26, r20
     950:	61 96       	adiw	r28, 0x11	; 17
     952:	8c af       	std	Y+60, r24	; 0x3c
     954:	9d af       	std	Y+61, r25	; 0x3d
     956:	ae af       	std	Y+62, r26	; 0x3e
     958:	bf af       	std	Y+63, r27	; 0x3f
     95a:	61 97       	sbiw	r28, 0x11	; 17
     95c:	bc 01       	movw	r22, r24
     95e:	cd 01       	movw	r24, r26
     960:	2d 96       	adiw	r28, 0x0d	; 13
     962:	2c ad       	ldd	r18, Y+60	; 0x3c
     964:	3d ad       	ldd	r19, Y+61	; 0x3d
     966:	4e ad       	ldd	r20, Y+62	; 0x3e
     968:	5f ad       	ldd	r21, Y+63	; 0x3f
     96a:	2d 97       	sbiw	r28, 0x0d	; 13
     96c:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     970:	9b 01       	movw	r18, r22
     972:	ac 01       	movw	r20, r24
     974:	87 01       	movw	r16, r14
     976:	ff 24       	eor	r15, r15
     978:	ee 24       	eor	r14, r14
     97a:	ad a4       	ldd	r10, Y+45	; 0x2d
     97c:	be a4       	ldd	r11, Y+46	; 0x2e
     97e:	cf a4       	ldd	r12, Y+47	; 0x2f
     980:	d8 a8       	ldd	r13, Y+48	; 0x30
     982:	c6 01       	movw	r24, r12
     984:	aa 27       	eor	r26, r26
     986:	bb 27       	eor	r27, r27
     988:	57 01       	movw	r10, r14
     98a:	68 01       	movw	r12, r16
     98c:	a8 2a       	or	r10, r24
     98e:	b9 2a       	or	r11, r25
     990:	ca 2a       	or	r12, r26
     992:	db 2a       	or	r13, r27
     994:	a2 16       	cp	r10, r18
     996:	b3 06       	cpc	r11, r19
     998:	c4 06       	cpc	r12, r20
     99a:	d5 06       	cpc	r13, r21
     99c:	60 f5       	brcc	.+88     	; 0x9f6 <__stack+0x197>
     99e:	61 96       	adiw	r28, 0x11	; 17
     9a0:	6c ad       	ldd	r22, Y+60	; 0x3c
     9a2:	7d ad       	ldd	r23, Y+61	; 0x3d
     9a4:	8e ad       	ldd	r24, Y+62	; 0x3e
     9a6:	9f ad       	ldd	r25, Y+63	; 0x3f
     9a8:	61 97       	sbiw	r28, 0x11	; 17
     9aa:	61 50       	subi	r22, 0x01	; 1
     9ac:	70 40       	sbci	r23, 0x00	; 0
     9ae:	80 40       	sbci	r24, 0x00	; 0
     9b0:	90 40       	sbci	r25, 0x00	; 0
     9b2:	61 96       	adiw	r28, 0x11	; 17
     9b4:	6c af       	std	Y+60, r22	; 0x3c
     9b6:	7d af       	std	Y+61, r23	; 0x3d
     9b8:	8e af       	std	Y+62, r24	; 0x3e
     9ba:	9f af       	std	Y+63, r25	; 0x3f
     9bc:	61 97       	sbiw	r28, 0x11	; 17
     9be:	a2 0c       	add	r10, r2
     9c0:	b3 1c       	adc	r11, r3
     9c2:	c4 1c       	adc	r12, r4
     9c4:	d5 1c       	adc	r13, r5
     9c6:	a2 14       	cp	r10, r2
     9c8:	b3 04       	cpc	r11, r3
     9ca:	c4 04       	cpc	r12, r4
     9cc:	d5 04       	cpc	r13, r5
     9ce:	98 f0       	brcs	.+38     	; 0x9f6 <__stack+0x197>
     9d0:	a2 16       	cp	r10, r18
     9d2:	b3 06       	cpc	r11, r19
     9d4:	c4 06       	cpc	r12, r20
     9d6:	d5 06       	cpc	r13, r21
     9d8:	70 f4       	brcc	.+28     	; 0x9f6 <__stack+0x197>
     9da:	61 50       	subi	r22, 0x01	; 1
     9dc:	70 40       	sbci	r23, 0x00	; 0
     9de:	80 40       	sbci	r24, 0x00	; 0
     9e0:	90 40       	sbci	r25, 0x00	; 0
     9e2:	61 96       	adiw	r28, 0x11	; 17
     9e4:	6c af       	std	Y+60, r22	; 0x3c
     9e6:	7d af       	std	Y+61, r23	; 0x3d
     9e8:	8e af       	std	Y+62, r24	; 0x3e
     9ea:	9f af       	std	Y+63, r25	; 0x3f
     9ec:	61 97       	sbiw	r28, 0x11	; 17
     9ee:	a2 0c       	add	r10, r2
     9f0:	b3 1c       	adc	r11, r3
     9f2:	c4 1c       	adc	r12, r4
     9f4:	d5 1c       	adc	r13, r5
     9f6:	a2 1a       	sub	r10, r18
     9f8:	b3 0a       	sbc	r11, r19
     9fa:	c4 0a       	sbc	r12, r20
     9fc:	d5 0a       	sbc	r13, r21
     9fe:	c6 01       	movw	r24, r12
     a00:	b5 01       	movw	r22, r10
     a02:	29 96       	adiw	r28, 0x09	; 9
     a04:	2c ad       	ldd	r18, Y+60	; 0x3c
     a06:	3d ad       	ldd	r19, Y+61	; 0x3d
     a08:	4e ad       	ldd	r20, Y+62	; 0x3e
     a0a:	5f ad       	ldd	r21, Y+63	; 0x3f
     a0c:	29 97       	sbiw	r28, 0x09	; 9
     a0e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     a12:	7b 01       	movw	r14, r22
     a14:	8c 01       	movw	r16, r24
     a16:	c6 01       	movw	r24, r12
     a18:	b5 01       	movw	r22, r10
     a1a:	29 96       	adiw	r28, 0x09	; 9
     a1c:	2c ad       	ldd	r18, Y+60	; 0x3c
     a1e:	3d ad       	ldd	r19, Y+61	; 0x3d
     a20:	4e ad       	ldd	r20, Y+62	; 0x3e
     a22:	5f ad       	ldd	r21, Y+63	; 0x3f
     a24:	29 97       	sbiw	r28, 0x09	; 9
     a26:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     a2a:	c9 01       	movw	r24, r18
     a2c:	da 01       	movw	r26, r20
     a2e:	5c 01       	movw	r10, r24
     a30:	6d 01       	movw	r12, r26
     a32:	c6 01       	movw	r24, r12
     a34:	b5 01       	movw	r22, r10
     a36:	2d 96       	adiw	r28, 0x0d	; 13
     a38:	2c ad       	ldd	r18, Y+60	; 0x3c
     a3a:	3d ad       	ldd	r19, Y+61	; 0x3d
     a3c:	4e ad       	ldd	r20, Y+62	; 0x3e
     a3e:	5f ad       	ldd	r21, Y+63	; 0x3f
     a40:	2d 97       	sbiw	r28, 0x0d	; 13
     a42:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     a46:	9b 01       	movw	r18, r22
     a48:	ac 01       	movw	r20, r24
     a4a:	87 01       	movw	r16, r14
     a4c:	ff 24       	eor	r15, r15
     a4e:	ee 24       	eor	r14, r14
     a50:	8d a5       	ldd	r24, Y+45	; 0x2d
     a52:	9e a5       	ldd	r25, Y+46	; 0x2e
     a54:	af a5       	ldd	r26, Y+47	; 0x2f
     a56:	b8 a9       	ldd	r27, Y+48	; 0x30
     a58:	a0 70       	andi	r26, 0x00	; 0
     a5a:	b0 70       	andi	r27, 0x00	; 0
     a5c:	e8 2a       	or	r14, r24
     a5e:	f9 2a       	or	r15, r25
     a60:	0a 2b       	or	r16, r26
     a62:	1b 2b       	or	r17, r27
     a64:	e2 16       	cp	r14, r18
     a66:	f3 06       	cpc	r15, r19
     a68:	04 07       	cpc	r16, r20
     a6a:	15 07       	cpc	r17, r21
     a6c:	c0 f4       	brcc	.+48     	; 0xa9e <__stack+0x23f>
     a6e:	08 94       	sec
     a70:	a1 08       	sbc	r10, r1
     a72:	b1 08       	sbc	r11, r1
     a74:	c1 08       	sbc	r12, r1
     a76:	d1 08       	sbc	r13, r1
     a78:	e2 0c       	add	r14, r2
     a7a:	f3 1c       	adc	r15, r3
     a7c:	04 1d       	adc	r16, r4
     a7e:	15 1d       	adc	r17, r5
     a80:	e2 14       	cp	r14, r2
     a82:	f3 04       	cpc	r15, r3
     a84:	04 05       	cpc	r16, r4
     a86:	15 05       	cpc	r17, r5
     a88:	50 f0       	brcs	.+20     	; 0xa9e <__stack+0x23f>
     a8a:	e2 16       	cp	r14, r18
     a8c:	f3 06       	cpc	r15, r19
     a8e:	04 07       	cpc	r16, r20
     a90:	15 07       	cpc	r17, r21
     a92:	28 f4       	brcc	.+10     	; 0xa9e <__stack+0x23f>
     a94:	08 94       	sec
     a96:	a1 08       	sbc	r10, r1
     a98:	b1 08       	sbc	r11, r1
     a9a:	c1 08       	sbc	r12, r1
     a9c:	d1 08       	sbc	r13, r1
     a9e:	61 96       	adiw	r28, 0x11	; 17
     aa0:	ec ac       	ldd	r14, Y+60	; 0x3c
     aa2:	fd ac       	ldd	r15, Y+61	; 0x3d
     aa4:	0e ad       	ldd	r16, Y+62	; 0x3e
     aa6:	1f ad       	ldd	r17, Y+63	; 0x3f
     aa8:	61 97       	sbiw	r28, 0x11	; 17
     aaa:	d7 01       	movw	r26, r14
     aac:	99 27       	eor	r25, r25
     aae:	88 27       	eor	r24, r24
     ab0:	96 01       	movw	r18, r12
     ab2:	85 01       	movw	r16, r10
     ab4:	08 2b       	or	r16, r24
     ab6:	19 2b       	or	r17, r25
     ab8:	2a 2b       	or	r18, r26
     aba:	3b 2b       	or	r19, r27
     abc:	09 ab       	std	Y+49, r16	; 0x31
     abe:	1a ab       	std	Y+50, r17	; 0x32
     ac0:	2b ab       	std	Y+51, r18	; 0x33
     ac2:	3c ab       	std	Y+52, r19	; 0x34
     ac4:	62 c2       	rjmp	.+1220   	; 0xf8a <__stack+0x72b>
     ac6:	6e 14       	cp	r6, r14
     ac8:	7f 04       	cpc	r7, r15
     aca:	80 06       	cpc	r8, r16
     acc:	91 06       	cpc	r9, r17
     ace:	08 f4       	brcc	.+2      	; 0xad2 <__stack+0x273>
     ad0:	51 c2       	rjmp	.+1186   	; 0xf74 <__stack+0x715>
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	e2 16       	cp	r14, r18
     ad6:	20 e0       	ldi	r18, 0x00	; 0
     ad8:	f2 06       	cpc	r15, r18
     ada:	21 e0       	ldi	r18, 0x01	; 1
     adc:	02 07       	cpc	r16, r18
     ade:	20 e0       	ldi	r18, 0x00	; 0
     ae0:	12 07       	cpc	r17, r18
     ae2:	88 f4       	brcc	.+34     	; 0xb06 <__stack+0x2a7>
     ae4:	3f ef       	ldi	r19, 0xFF	; 255
     ae6:	e3 16       	cp	r14, r19
     ae8:	f1 04       	cpc	r15, r1
     aea:	01 05       	cpc	r16, r1
     aec:	11 05       	cpc	r17, r1
     aee:	31 f0       	breq	.+12     	; 0xafc <__stack+0x29d>
     af0:	28 f0       	brcs	.+10     	; 0xafc <__stack+0x29d>
     af2:	48 e0       	ldi	r20, 0x08	; 8
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	70 e0       	ldi	r23, 0x00	; 0
     afa:	17 c0       	rjmp	.+46     	; 0xb2a <__stack+0x2cb>
     afc:	40 e0       	ldi	r20, 0x00	; 0
     afe:	50 e0       	ldi	r21, 0x00	; 0
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	12 c0       	rjmp	.+36     	; 0xb2a <__stack+0x2cb>
     b06:	40 e0       	ldi	r20, 0x00	; 0
     b08:	e4 16       	cp	r14, r20
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	f4 06       	cpc	r15, r20
     b0e:	40 e0       	ldi	r20, 0x00	; 0
     b10:	04 07       	cpc	r16, r20
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	14 07       	cpc	r17, r20
     b16:	28 f0       	brcs	.+10     	; 0xb22 <__stack+0x2c3>
     b18:	48 e1       	ldi	r20, 0x18	; 24
     b1a:	50 e0       	ldi	r21, 0x00	; 0
     b1c:	60 e0       	ldi	r22, 0x00	; 0
     b1e:	70 e0       	ldi	r23, 0x00	; 0
     b20:	04 c0       	rjmp	.+8      	; 0xb2a <__stack+0x2cb>
     b22:	40 e1       	ldi	r20, 0x10	; 16
     b24:	50 e0       	ldi	r21, 0x00	; 0
     b26:	60 e0       	ldi	r22, 0x00	; 0
     b28:	70 e0       	ldi	r23, 0x00	; 0
     b2a:	d8 01       	movw	r26, r16
     b2c:	c7 01       	movw	r24, r14
     b2e:	04 2e       	mov	r0, r20
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__stack+0x2db>
     b32:	b6 95       	lsr	r27
     b34:	a7 95       	ror	r26
     b36:	97 95       	ror	r25
     b38:	87 95       	ror	r24
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__stack+0x2d3>
     b3e:	84 57       	subi	r24, 0x74	; 116
     b40:	9f 4f       	sbci	r25, 0xFF	; 255
     b42:	dc 01       	movw	r26, r24
     b44:	2c 91       	ld	r18, X
     b46:	30 e2       	ldi	r19, 0x20	; 32
     b48:	a3 2e       	mov	r10, r19
     b4a:	b1 2c       	mov	r11, r1
     b4c:	c1 2c       	mov	r12, r1
     b4e:	d1 2c       	mov	r13, r1
     b50:	d6 01       	movw	r26, r12
     b52:	c5 01       	movw	r24, r10
     b54:	84 1b       	sub	r24, r20
     b56:	95 0b       	sbc	r25, r21
     b58:	a6 0b       	sbc	r26, r22
     b5a:	b7 0b       	sbc	r27, r23
     b5c:	82 1b       	sub	r24, r18
     b5e:	91 09       	sbc	r25, r1
     b60:	a1 09       	sbc	r26, r1
     b62:	b1 09       	sbc	r27, r1
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	a1 05       	cpc	r26, r1
     b68:	b1 05       	cpc	r27, r1
     b6a:	89 f4       	brne	.+34     	; 0xb8e <__stack+0x32f>
     b6c:	e6 14       	cp	r14, r6
     b6e:	f7 04       	cpc	r15, r7
     b70:	08 05       	cpc	r16, r8
     b72:	19 05       	cpc	r17, r9
     b74:	08 f4       	brcc	.+2      	; 0xb78 <__stack+0x319>
     b76:	f2 c1       	rjmp	.+996    	; 0xf5c <__stack+0x6fd>
     b78:	6d a4       	ldd	r6, Y+45	; 0x2d
     b7a:	7e a4       	ldd	r7, Y+46	; 0x2e
     b7c:	8f a4       	ldd	r8, Y+47	; 0x2f
     b7e:	98 a8       	ldd	r9, Y+48	; 0x30
     b80:	62 14       	cp	r6, r2
     b82:	73 04       	cpc	r7, r3
     b84:	84 04       	cpc	r8, r4
     b86:	95 04       	cpc	r9, r5
     b88:	08 f0       	brcs	.+2      	; 0xb8c <__stack+0x32d>
     b8a:	e8 c1       	rjmp	.+976    	; 0xf5c <__stack+0x6fd>
     b8c:	f3 c1       	rjmp	.+998    	; 0xf74 <__stack+0x715>
     b8e:	6e 96       	adiw	r28, 0x1e	; 30
     b90:	8f af       	std	Y+63, r24	; 0x3f
     b92:	6e 97       	sbiw	r28, 0x1e	; 30
     b94:	08 2e       	mov	r0, r24
     b96:	04 c0       	rjmp	.+8      	; 0xba0 <__stack+0x341>
     b98:	ee 0c       	add	r14, r14
     b9a:	ff 1c       	adc	r15, r15
     b9c:	00 1f       	adc	r16, r16
     b9e:	11 1f       	adc	r17, r17
     ba0:	0a 94       	dec	r0
     ba2:	d2 f7       	brpl	.-12     	; 0xb98 <__stack+0x339>
     ba4:	6a 2d       	mov	r22, r10
     ba6:	68 1b       	sub	r22, r24
     ba8:	d2 01       	movw	r26, r4
     baa:	c1 01       	movw	r24, r2
     bac:	06 2e       	mov	r0, r22
     bae:	04 c0       	rjmp	.+8      	; 0xbb8 <__stack+0x359>
     bb0:	b6 95       	lsr	r27
     bb2:	a7 95       	ror	r26
     bb4:	97 95       	ror	r25
     bb6:	87 95       	ror	r24
     bb8:	0a 94       	dec	r0
     bba:	d2 f7       	brpl	.-12     	; 0xbb0 <__stack+0x351>
     bbc:	5c 01       	movw	r10, r24
     bbe:	6d 01       	movw	r12, r26
     bc0:	ae 28       	or	r10, r14
     bc2:	bf 28       	or	r11, r15
     bc4:	c0 2a       	or	r12, r16
     bc6:	d1 2a       	or	r13, r17
     bc8:	ad a2       	std	Y+37, r10	; 0x25
     bca:	be a2       	std	Y+38, r11	; 0x26
     bcc:	cf a2       	std	Y+39, r12	; 0x27
     bce:	d8 a6       	std	Y+40, r13	; 0x28
     bd0:	72 01       	movw	r14, r4
     bd2:	61 01       	movw	r12, r2
     bd4:	6e 96       	adiw	r28, 0x1e	; 30
     bd6:	0f ac       	ldd	r0, Y+63	; 0x3f
     bd8:	6e 97       	sbiw	r28, 0x1e	; 30
     bda:	04 c0       	rjmp	.+8      	; 0xbe4 <__stack+0x385>
     bdc:	cc 0c       	add	r12, r12
     bde:	dd 1c       	adc	r13, r13
     be0:	ee 1c       	adc	r14, r14
     be2:	ff 1c       	adc	r15, r15
     be4:	0a 94       	dec	r0
     be6:	d2 f7       	brpl	.-12     	; 0xbdc <__stack+0x37d>
     be8:	c9 a2       	std	Y+33, r12	; 0x21
     bea:	da a2       	std	Y+34, r13	; 0x22
     bec:	eb a2       	std	Y+35, r14	; 0x23
     bee:	fc a2       	std	Y+36, r15	; 0x24
     bf0:	64 01       	movw	r12, r8
     bf2:	53 01       	movw	r10, r6
     bf4:	06 2e       	mov	r0, r22
     bf6:	04 c0       	rjmp	.+8      	; 0xc00 <__stack+0x3a1>
     bf8:	d6 94       	lsr	r13
     bfa:	c7 94       	ror	r12
     bfc:	b7 94       	ror	r11
     bfe:	a7 94       	ror	r10
     c00:	0a 94       	dec	r0
     c02:	d2 f7       	brpl	.-12     	; 0xbf8 <__stack+0x399>
     c04:	d4 01       	movw	r26, r8
     c06:	c3 01       	movw	r24, r6
     c08:	6e 96       	adiw	r28, 0x1e	; 30
     c0a:	0f ac       	ldd	r0, Y+63	; 0x3f
     c0c:	6e 97       	sbiw	r28, 0x1e	; 30
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <__stack+0x3b9>
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	aa 1f       	adc	r26, r26
     c16:	bb 1f       	adc	r27, r27
     c18:	0a 94       	dec	r0
     c1a:	d2 f7       	brpl	.-12     	; 0xc10 <__stack+0x3b1>
     c1c:	ed a4       	ldd	r14, Y+45	; 0x2d
     c1e:	fe a4       	ldd	r15, Y+46	; 0x2e
     c20:	0f a5       	ldd	r16, Y+47	; 0x2f
     c22:	18 a9       	ldd	r17, Y+48	; 0x30
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__stack+0x3cf>
     c26:	16 95       	lsr	r17
     c28:	07 95       	ror	r16
     c2a:	f7 94       	ror	r15
     c2c:	e7 94       	ror	r14
     c2e:	6a 95       	dec	r22
     c30:	d2 f7       	brpl	.-12     	; 0xc26 <__stack+0x3c7>
     c32:	37 01       	movw	r6, r14
     c34:	48 01       	movw	r8, r16
     c36:	68 2a       	or	r6, r24
     c38:	79 2a       	or	r7, r25
     c3a:	8a 2a       	or	r8, r26
     c3c:	9b 2a       	or	r9, r27
     c3e:	6d 8e       	std	Y+29, r6	; 0x1d
     c40:	7e 8e       	std	Y+30, r7	; 0x1e
     c42:	8f 8e       	std	Y+31, r8	; 0x1f
     c44:	98 a2       	std	Y+32, r9	; 0x20
     c46:	ed a0       	ldd	r14, Y+37	; 0x25
     c48:	fe a0       	ldd	r15, Y+38	; 0x26
     c4a:	0f a1       	ldd	r16, Y+39	; 0x27
     c4c:	18 a5       	ldd	r17, Y+40	; 0x28
     c4e:	38 01       	movw	r6, r16
     c50:	88 24       	eor	r8, r8
     c52:	99 24       	eor	r9, r9
     c54:	98 01       	movw	r18, r16
     c56:	87 01       	movw	r16, r14
     c58:	20 70       	andi	r18, 0x00	; 0
     c5a:	30 70       	andi	r19, 0x00	; 0
     c5c:	65 96       	adiw	r28, 0x15	; 21
     c5e:	0c af       	std	Y+60, r16	; 0x3c
     c60:	1d af       	std	Y+61, r17	; 0x3d
     c62:	2e af       	std	Y+62, r18	; 0x3e
     c64:	3f af       	std	Y+63, r19	; 0x3f
     c66:	65 97       	sbiw	r28, 0x15	; 21
     c68:	c6 01       	movw	r24, r12
     c6a:	b5 01       	movw	r22, r10
     c6c:	a4 01       	movw	r20, r8
     c6e:	93 01       	movw	r18, r6
     c70:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     c74:	7b 01       	movw	r14, r22
     c76:	8c 01       	movw	r16, r24
     c78:	c6 01       	movw	r24, r12
     c7a:	b5 01       	movw	r22, r10
     c7c:	a4 01       	movw	r20, r8
     c7e:	93 01       	movw	r18, r6
     c80:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     c84:	c9 01       	movw	r24, r18
     c86:	da 01       	movw	r26, r20
     c88:	1c 01       	movw	r2, r24
     c8a:	2d 01       	movw	r4, r26
     c8c:	c2 01       	movw	r24, r4
     c8e:	b1 01       	movw	r22, r2
     c90:	65 96       	adiw	r28, 0x15	; 21
     c92:	2c ad       	ldd	r18, Y+60	; 0x3c
     c94:	3d ad       	ldd	r19, Y+61	; 0x3d
     c96:	4e ad       	ldd	r20, Y+62	; 0x3e
     c98:	5f ad       	ldd	r21, Y+63	; 0x3f
     c9a:	65 97       	sbiw	r28, 0x15	; 21
     c9c:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     ca0:	9b 01       	movw	r18, r22
     ca2:	ac 01       	movw	r20, r24
     ca4:	87 01       	movw	r16, r14
     ca6:	ff 24       	eor	r15, r15
     ca8:	ee 24       	eor	r14, r14
     caa:	ad 8c       	ldd	r10, Y+29	; 0x1d
     cac:	be 8c       	ldd	r11, Y+30	; 0x1e
     cae:	cf 8c       	ldd	r12, Y+31	; 0x1f
     cb0:	d8 a0       	ldd	r13, Y+32	; 0x20
     cb2:	c6 01       	movw	r24, r12
     cb4:	aa 27       	eor	r26, r26
     cb6:	bb 27       	eor	r27, r27
     cb8:	57 01       	movw	r10, r14
     cba:	68 01       	movw	r12, r16
     cbc:	a8 2a       	or	r10, r24
     cbe:	b9 2a       	or	r11, r25
     cc0:	ca 2a       	or	r12, r26
     cc2:	db 2a       	or	r13, r27
     cc4:	a2 16       	cp	r10, r18
     cc6:	b3 06       	cpc	r11, r19
     cc8:	c4 06       	cpc	r12, r20
     cca:	d5 06       	cpc	r13, r21
     ccc:	00 f5       	brcc	.+64     	; 0xd0e <__stack+0x4af>
     cce:	08 94       	sec
     cd0:	21 08       	sbc	r2, r1
     cd2:	31 08       	sbc	r3, r1
     cd4:	41 08       	sbc	r4, r1
     cd6:	51 08       	sbc	r5, r1
     cd8:	ed a0       	ldd	r14, Y+37	; 0x25
     cda:	fe a0       	ldd	r15, Y+38	; 0x26
     cdc:	0f a1       	ldd	r16, Y+39	; 0x27
     cde:	18 a5       	ldd	r17, Y+40	; 0x28
     ce0:	ae 0c       	add	r10, r14
     ce2:	bf 1c       	adc	r11, r15
     ce4:	c0 1e       	adc	r12, r16
     ce6:	d1 1e       	adc	r13, r17
     ce8:	ae 14       	cp	r10, r14
     cea:	bf 04       	cpc	r11, r15
     cec:	c0 06       	cpc	r12, r16
     cee:	d1 06       	cpc	r13, r17
     cf0:	70 f0       	brcs	.+28     	; 0xd0e <__stack+0x4af>
     cf2:	a2 16       	cp	r10, r18
     cf4:	b3 06       	cpc	r11, r19
     cf6:	c4 06       	cpc	r12, r20
     cf8:	d5 06       	cpc	r13, r21
     cfa:	48 f4       	brcc	.+18     	; 0xd0e <__stack+0x4af>
     cfc:	08 94       	sec
     cfe:	21 08       	sbc	r2, r1
     d00:	31 08       	sbc	r3, r1
     d02:	41 08       	sbc	r4, r1
     d04:	51 08       	sbc	r5, r1
     d06:	ae 0c       	add	r10, r14
     d08:	bf 1c       	adc	r11, r15
     d0a:	c0 1e       	adc	r12, r16
     d0c:	d1 1e       	adc	r13, r17
     d0e:	a2 1a       	sub	r10, r18
     d10:	b3 0a       	sbc	r11, r19
     d12:	c4 0a       	sbc	r12, r20
     d14:	d5 0a       	sbc	r13, r21
     d16:	c6 01       	movw	r24, r12
     d18:	b5 01       	movw	r22, r10
     d1a:	a4 01       	movw	r20, r8
     d1c:	93 01       	movw	r18, r6
     d1e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     d22:	7b 01       	movw	r14, r22
     d24:	8c 01       	movw	r16, r24
     d26:	c6 01       	movw	r24, r12
     d28:	b5 01       	movw	r22, r10
     d2a:	a4 01       	movw	r20, r8
     d2c:	93 01       	movw	r18, r6
     d2e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
     d32:	c9 01       	movw	r24, r18
     d34:	da 01       	movw	r26, r20
     d36:	3c 01       	movw	r6, r24
     d38:	4d 01       	movw	r8, r26
     d3a:	c4 01       	movw	r24, r8
     d3c:	b3 01       	movw	r22, r6
     d3e:	65 96       	adiw	r28, 0x15	; 21
     d40:	2c ad       	ldd	r18, Y+60	; 0x3c
     d42:	3d ad       	ldd	r19, Y+61	; 0x3d
     d44:	4e ad       	ldd	r20, Y+62	; 0x3e
     d46:	5f ad       	ldd	r21, Y+63	; 0x3f
     d48:	65 97       	sbiw	r28, 0x15	; 21
     d4a:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     d4e:	9b 01       	movw	r18, r22
     d50:	ac 01       	movw	r20, r24
     d52:	87 01       	movw	r16, r14
     d54:	ff 24       	eor	r15, r15
     d56:	ee 24       	eor	r14, r14
     d58:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d5c:	af 8d       	ldd	r26, Y+31	; 0x1f
     d5e:	b8 a1       	ldd	r27, Y+32	; 0x20
     d60:	a0 70       	andi	r26, 0x00	; 0
     d62:	b0 70       	andi	r27, 0x00	; 0
     d64:	57 01       	movw	r10, r14
     d66:	68 01       	movw	r12, r16
     d68:	a8 2a       	or	r10, r24
     d6a:	b9 2a       	or	r11, r25
     d6c:	ca 2a       	or	r12, r26
     d6e:	db 2a       	or	r13, r27
     d70:	a2 16       	cp	r10, r18
     d72:	b3 06       	cpc	r11, r19
     d74:	c4 06       	cpc	r12, r20
     d76:	d5 06       	cpc	r13, r21
     d78:	00 f5       	brcc	.+64     	; 0xdba <__stack+0x55b>
     d7a:	08 94       	sec
     d7c:	61 08       	sbc	r6, r1
     d7e:	71 08       	sbc	r7, r1
     d80:	81 08       	sbc	r8, r1
     d82:	91 08       	sbc	r9, r1
     d84:	6d a1       	ldd	r22, Y+37	; 0x25
     d86:	7e a1       	ldd	r23, Y+38	; 0x26
     d88:	8f a1       	ldd	r24, Y+39	; 0x27
     d8a:	98 a5       	ldd	r25, Y+40	; 0x28
     d8c:	a6 0e       	add	r10, r22
     d8e:	b7 1e       	adc	r11, r23
     d90:	c8 1e       	adc	r12, r24
     d92:	d9 1e       	adc	r13, r25
     d94:	a6 16       	cp	r10, r22
     d96:	b7 06       	cpc	r11, r23
     d98:	c8 06       	cpc	r12, r24
     d9a:	d9 06       	cpc	r13, r25
     d9c:	70 f0       	brcs	.+28     	; 0xdba <__stack+0x55b>
     d9e:	a2 16       	cp	r10, r18
     da0:	b3 06       	cpc	r11, r19
     da2:	c4 06       	cpc	r12, r20
     da4:	d5 06       	cpc	r13, r21
     da6:	48 f4       	brcc	.+18     	; 0xdba <__stack+0x55b>
     da8:	08 94       	sec
     daa:	61 08       	sbc	r6, r1
     dac:	71 08       	sbc	r7, r1
     dae:	81 08       	sbc	r8, r1
     db0:	91 08       	sbc	r9, r1
     db2:	a6 0e       	add	r10, r22
     db4:	b7 1e       	adc	r11, r23
     db6:	c8 1e       	adc	r12, r24
     db8:	d9 1e       	adc	r13, r25
     dba:	d6 01       	movw	r26, r12
     dbc:	c5 01       	movw	r24, r10
     dbe:	82 1b       	sub	r24, r18
     dc0:	93 0b       	sbc	r25, r19
     dc2:	a4 0b       	sbc	r26, r20
     dc4:	b5 0b       	sbc	r27, r21
     dc6:	89 8f       	std	Y+25, r24	; 0x19
     dc8:	9a 8f       	std	Y+26, r25	; 0x1a
     dca:	ab 8f       	std	Y+27, r26	; 0x1b
     dcc:	bc 8f       	std	Y+28, r27	; 0x1c
     dce:	d1 01       	movw	r26, r2
     dd0:	99 27       	eor	r25, r25
     dd2:	88 27       	eor	r24, r24
     dd4:	64 01       	movw	r12, r8
     dd6:	53 01       	movw	r10, r6
     dd8:	a8 2a       	or	r10, r24
     dda:	b9 2a       	or	r11, r25
     ddc:	ca 2a       	or	r12, r26
     dde:	db 2a       	or	r13, r27
     de0:	a9 aa       	std	Y+49, r10	; 0x31
     de2:	ba aa       	std	Y+50, r11	; 0x32
     de4:	cb aa       	std	Y+51, r12	; 0x33
     de6:	dc aa       	std	Y+52, r13	; 0x34
     de8:	86 01       	movw	r16, r12
     dea:	75 01       	movw	r14, r10
     dec:	2f ef       	ldi	r18, 0xFF	; 255
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	40 e0       	ldi	r20, 0x00	; 0
     df2:	50 e0       	ldi	r21, 0x00	; 0
     df4:	e2 22       	and	r14, r18
     df6:	f3 22       	and	r15, r19
     df8:	04 23       	and	r16, r20
     dfa:	15 23       	and	r17, r21
     dfc:	a6 01       	movw	r20, r12
     dfe:	66 27       	eor	r22, r22
     e00:	77 27       	eor	r23, r23
     e02:	6d 96       	adiw	r28, 0x1d	; 29
     e04:	4c af       	std	Y+60, r20	; 0x3c
     e06:	5d af       	std	Y+61, r21	; 0x3d
     e08:	6e af       	std	Y+62, r22	; 0x3e
     e0a:	7f af       	std	Y+63, r23	; 0x3f
     e0c:	6d 97       	sbiw	r28, 0x1d	; 29
     e0e:	a9 a0       	ldd	r10, Y+33	; 0x21
     e10:	ba a0       	ldd	r11, Y+34	; 0x22
     e12:	cb a0       	ldd	r12, Y+35	; 0x23
     e14:	dc a0       	ldd	r13, Y+36	; 0x24
     e16:	6f ef       	ldi	r22, 0xFF	; 255
     e18:	7f ef       	ldi	r23, 0xFF	; 255
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	a6 22       	and	r10, r22
     e20:	b7 22       	and	r11, r23
     e22:	c8 22       	and	r12, r24
     e24:	d9 22       	and	r13, r25
     e26:	89 a1       	ldd	r24, Y+33	; 0x21
     e28:	9a a1       	ldd	r25, Y+34	; 0x22
     e2a:	ab a1       	ldd	r26, Y+35	; 0x23
     e2c:	bc a1       	ldd	r27, Y+36	; 0x24
     e2e:	1d 01       	movw	r2, r26
     e30:	44 24       	eor	r4, r4
     e32:	55 24       	eor	r5, r5
     e34:	c8 01       	movw	r24, r16
     e36:	b7 01       	movw	r22, r14
     e38:	a6 01       	movw	r20, r12
     e3a:	95 01       	movw	r18, r10
     e3c:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     e40:	69 96       	adiw	r28, 0x19	; 25
     e42:	6c af       	std	Y+60, r22	; 0x3c
     e44:	7d af       	std	Y+61, r23	; 0x3d
     e46:	8e af       	std	Y+62, r24	; 0x3e
     e48:	9f af       	std	Y+63, r25	; 0x3f
     e4a:	69 97       	sbiw	r28, 0x19	; 25
     e4c:	c8 01       	movw	r24, r16
     e4e:	b7 01       	movw	r22, r14
     e50:	a2 01       	movw	r20, r4
     e52:	91 01       	movw	r18, r2
     e54:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     e58:	3b 01       	movw	r6, r22
     e5a:	4c 01       	movw	r8, r24
     e5c:	6d 96       	adiw	r28, 0x1d	; 29
     e5e:	6c ad       	ldd	r22, Y+60	; 0x3c
     e60:	7d ad       	ldd	r23, Y+61	; 0x3d
     e62:	8e ad       	ldd	r24, Y+62	; 0x3e
     e64:	9f ad       	ldd	r25, Y+63	; 0x3f
     e66:	6d 97       	sbiw	r28, 0x1d	; 29
     e68:	a6 01       	movw	r20, r12
     e6a:	95 01       	movw	r18, r10
     e6c:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     e70:	7b 01       	movw	r14, r22
     e72:	8c 01       	movw	r16, r24
     e74:	6d 96       	adiw	r28, 0x1d	; 29
     e76:	6c ad       	ldd	r22, Y+60	; 0x3c
     e78:	7d ad       	ldd	r23, Y+61	; 0x3d
     e7a:	8e ad       	ldd	r24, Y+62	; 0x3e
     e7c:	9f ad       	ldd	r25, Y+63	; 0x3f
     e7e:	6d 97       	sbiw	r28, 0x1d	; 29
     e80:	a2 01       	movw	r20, r4
     e82:	91 01       	movw	r18, r2
     e84:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
     e88:	5b 01       	movw	r10, r22
     e8a:	6c 01       	movw	r12, r24
     e8c:	a8 01       	movw	r20, r16
     e8e:	97 01       	movw	r18, r14
     e90:	26 0d       	add	r18, r6
     e92:	37 1d       	adc	r19, r7
     e94:	48 1d       	adc	r20, r8
     e96:	59 1d       	adc	r21, r9
     e98:	69 96       	adiw	r28, 0x19	; 25
     e9a:	6c ac       	ldd	r6, Y+60	; 0x3c
     e9c:	7d ac       	ldd	r7, Y+61	; 0x3d
     e9e:	8e ac       	ldd	r8, Y+62	; 0x3e
     ea0:	9f ac       	ldd	r9, Y+63	; 0x3f
     ea2:	69 97       	sbiw	r28, 0x19	; 25
     ea4:	c4 01       	movw	r24, r8
     ea6:	aa 27       	eor	r26, r26
     ea8:	bb 27       	eor	r27, r27
     eaa:	28 0f       	add	r18, r24
     eac:	39 1f       	adc	r19, r25
     eae:	4a 1f       	adc	r20, r26
     eb0:	5b 1f       	adc	r21, r27
     eb2:	2e 15       	cp	r18, r14
     eb4:	3f 05       	cpc	r19, r15
     eb6:	40 07       	cpc	r20, r16
     eb8:	51 07       	cpc	r21, r17
     eba:	48 f4       	brcc	.+18     	; 0xece <__stack+0x66f>
     ebc:	e1 2c       	mov	r14, r1
     ebe:	f1 2c       	mov	r15, r1
     ec0:	61 e0       	ldi	r22, 0x01	; 1
     ec2:	06 2f       	mov	r16, r22
     ec4:	11 2d       	mov	r17, r1
     ec6:	ae 0c       	add	r10, r14
     ec8:	bf 1c       	adc	r11, r15
     eca:	c0 1e       	adc	r12, r16
     ecc:	d1 1e       	adc	r13, r17
     ece:	ca 01       	movw	r24, r20
     ed0:	aa 27       	eor	r26, r26
     ed2:	bb 27       	eor	r27, r27
     ed4:	bc 01       	movw	r22, r24
     ed6:	cd 01       	movw	r24, r26
     ed8:	6a 0d       	add	r22, r10
     eda:	7b 1d       	adc	r23, r11
     edc:	8c 1d       	adc	r24, r12
     ede:	9d 1d       	adc	r25, r13
     ee0:	69 8c       	ldd	r6, Y+25	; 0x19
     ee2:	7a 8c       	ldd	r7, Y+26	; 0x1a
     ee4:	8b 8c       	ldd	r8, Y+27	; 0x1b
     ee6:	9c 8c       	ldd	r9, Y+28	; 0x1c
     ee8:	66 16       	cp	r6, r22
     eea:	77 06       	cpc	r7, r23
     eec:	88 06       	cpc	r8, r24
     eee:	99 06       	cpc	r9, r25
     ef0:	40 f1       	brcs	.+80     	; 0xf42 <__stack+0x6e3>
     ef2:	66 15       	cp	r22, r6
     ef4:	77 05       	cpc	r23, r7
     ef6:	88 05       	cpc	r24, r8
     ef8:	99 05       	cpc	r25, r9
     efa:	09 f0       	breq	.+2      	; 0xefe <__stack+0x69f>
     efc:	43 c0       	rjmp	.+134    	; 0xf84 <__stack+0x725>
     efe:	d9 01       	movw	r26, r18
     f00:	99 27       	eor	r25, r25
     f02:	88 27       	eor	r24, r24
     f04:	69 96       	adiw	r28, 0x19	; 25
     f06:	2c ad       	ldd	r18, Y+60	; 0x3c
     f08:	3d ad       	ldd	r19, Y+61	; 0x3d
     f0a:	4e ad       	ldd	r20, Y+62	; 0x3e
     f0c:	5f ad       	ldd	r21, Y+63	; 0x3f
     f0e:	69 97       	sbiw	r28, 0x19	; 25
     f10:	40 70       	andi	r20, 0x00	; 0
     f12:	50 70       	andi	r21, 0x00	; 0
     f14:	82 0f       	add	r24, r18
     f16:	93 1f       	adc	r25, r19
     f18:	a4 1f       	adc	r26, r20
     f1a:	b5 1f       	adc	r27, r21
     f1c:	2d a5       	ldd	r18, Y+45	; 0x2d
     f1e:	3e a5       	ldd	r19, Y+46	; 0x2e
     f20:	4f a5       	ldd	r20, Y+47	; 0x2f
     f22:	58 a9       	ldd	r21, Y+48	; 0x30
     f24:	6e 96       	adiw	r28, 0x1e	; 30
     f26:	0f ac       	ldd	r0, Y+63	; 0x3f
     f28:	6e 97       	sbiw	r28, 0x1e	; 30
     f2a:	04 c0       	rjmp	.+8      	; 0xf34 <__stack+0x6d5>
     f2c:	22 0f       	add	r18, r18
     f2e:	33 1f       	adc	r19, r19
     f30:	44 1f       	adc	r20, r20
     f32:	55 1f       	adc	r21, r21
     f34:	0a 94       	dec	r0
     f36:	d2 f7       	brpl	.-12     	; 0xf2c <__stack+0x6cd>
     f38:	28 17       	cp	r18, r24
     f3a:	39 07       	cpc	r19, r25
     f3c:	4a 07       	cpc	r20, r26
     f3e:	5b 07       	cpc	r21, r27
     f40:	08 f5       	brcc	.+66     	; 0xf84 <__stack+0x725>
     f42:	09 a9       	ldd	r16, Y+49	; 0x31
     f44:	1a a9       	ldd	r17, Y+50	; 0x32
     f46:	2b a9       	ldd	r18, Y+51	; 0x33
     f48:	3c a9       	ldd	r19, Y+52	; 0x34
     f4a:	01 50       	subi	r16, 0x01	; 1
     f4c:	10 40       	sbci	r17, 0x00	; 0
     f4e:	20 40       	sbci	r18, 0x00	; 0
     f50:	30 40       	sbci	r19, 0x00	; 0
     f52:	09 ab       	std	Y+49, r16	; 0x31
     f54:	1a ab       	std	Y+50, r17	; 0x32
     f56:	2b ab       	std	Y+51, r18	; 0x33
     f58:	3c ab       	std	Y+52, r19	; 0x34
     f5a:	14 c0       	rjmp	.+40     	; 0xf84 <__stack+0x725>
     f5c:	66 24       	eor	r6, r6
     f5e:	77 24       	eor	r7, r7
     f60:	43 01       	movw	r8, r6
     f62:	21 e0       	ldi	r18, 0x01	; 1
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e0       	ldi	r20, 0x00	; 0
     f68:	50 e0       	ldi	r21, 0x00	; 0
     f6a:	29 ab       	std	Y+49, r18	; 0x31
     f6c:	3a ab       	std	Y+50, r19	; 0x32
     f6e:	4b ab       	std	Y+51, r20	; 0x33
     f70:	5c ab       	std	Y+52, r21	; 0x34
     f72:	0b c0       	rjmp	.+22     	; 0xf8a <__stack+0x72b>
     f74:	66 24       	eor	r6, r6
     f76:	77 24       	eor	r7, r7
     f78:	43 01       	movw	r8, r6
     f7a:	19 aa       	std	Y+49, r1	; 0x31
     f7c:	1a aa       	std	Y+50, r1	; 0x32
     f7e:	1b aa       	std	Y+51, r1	; 0x33
     f80:	1c aa       	std	Y+52, r1	; 0x34
     f82:	03 c0       	rjmp	.+6      	; 0xf8a <__stack+0x72b>
     f84:	66 24       	eor	r6, r6
     f86:	77 24       	eor	r7, r7
     f88:	43 01       	movw	r8, r6
     f8a:	fe 01       	movw	r30, r28
     f8c:	71 96       	adiw	r30, 0x11	; 17
     f8e:	88 e0       	ldi	r24, 0x08	; 8
     f90:	df 01       	movw	r26, r30
     f92:	1d 92       	st	X+, r1
     f94:	8a 95       	dec	r24
     f96:	e9 f7       	brne	.-6      	; 0xf92 <__stack+0x733>
     f98:	a9 a8       	ldd	r10, Y+49	; 0x31
     f9a:	ba a8       	ldd	r11, Y+50	; 0x32
     f9c:	cb a8       	ldd	r12, Y+51	; 0x33
     f9e:	dc a8       	ldd	r13, Y+52	; 0x34
     fa0:	a9 8a       	std	Y+17, r10	; 0x11
     fa2:	ba 8a       	std	Y+18, r11	; 0x12
     fa4:	cb 8a       	std	Y+19, r12	; 0x13
     fa6:	dc 8a       	std	Y+20, r13	; 0x14
     fa8:	6d 8a       	std	Y+21, r6	; 0x15
     faa:	7e 8a       	std	Y+22, r7	; 0x16
     fac:	8f 8a       	std	Y+23, r8	; 0x17
     fae:	98 8e       	std	Y+24, r9	; 0x18
     fb0:	29 a9       	ldd	r18, Y+49	; 0x31
     fb2:	3a 89       	ldd	r19, Y+18	; 0x12
     fb4:	4b 89       	ldd	r20, Y+19	; 0x13
     fb6:	5c 89       	ldd	r21, Y+20	; 0x14
     fb8:	66 2d       	mov	r22, r6
     fba:	7e 89       	ldd	r23, Y+22	; 0x16
     fbc:	8f 89       	ldd	r24, Y+23	; 0x17
     fbe:	98 8d       	ldd	r25, Y+24	; 0x18
     fc0:	c2 5a       	subi	r28, 0xA2	; 162
     fc2:	df 4f       	sbci	r29, 0xFF	; 255
     fc4:	e2 e1       	ldi	r30, 0x12	; 18
     fc6:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <__epilogue_restores__>

00000fca <__umoddi3>:
     fca:	ab e5       	ldi	r26, 0x5B	; 91
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	eb ee       	ldi	r30, 0xEB	; 235
     fd0:	f7 e0       	ldi	r31, 0x07	; 7
     fd2:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <__prologue_saves__>
     fd6:	a8 e0       	ldi	r26, 0x08	; 8
     fd8:	4e 01       	movw	r8, r28
     fda:	08 94       	sec
     fdc:	81 1c       	adc	r8, r1
     fde:	91 1c       	adc	r9, r1
     fe0:	f4 01       	movw	r30, r8
     fe2:	6a 2e       	mov	r6, r26
     fe4:	11 92       	st	Z+, r1
     fe6:	6a 94       	dec	r6
     fe8:	e9 f7       	brne	.-6      	; 0xfe4 <__umoddi3+0x1a>
     fea:	29 83       	std	Y+1, r18	; 0x01
     fec:	3a 83       	std	Y+2, r19	; 0x02
     fee:	4b 83       	std	Y+3, r20	; 0x03
     ff0:	5c 83       	std	Y+4, r21	; 0x04
     ff2:	6d 83       	std	Y+5, r22	; 0x05
     ff4:	7e 83       	std	Y+6, r23	; 0x06
     ff6:	8f 83       	std	Y+7, r24	; 0x07
     ff8:	98 87       	std	Y+8, r25	; 0x08
     ffa:	ce 01       	movw	r24, r28
     ffc:	09 96       	adiw	r24, 0x09	; 9
     ffe:	fc 01       	movw	r30, r24
    1000:	11 92       	st	Z+, r1
    1002:	aa 95       	dec	r26
    1004:	e9 f7       	brne	.-6      	; 0x1000 <__umoddi3+0x36>
    1006:	a9 86       	std	Y+9, r10	; 0x09
    1008:	ba 86       	std	Y+10, r11	; 0x0a
    100a:	cb 86       	std	Y+11, r12	; 0x0b
    100c:	dc 86       	std	Y+12, r13	; 0x0c
    100e:	ed 86       	std	Y+13, r14	; 0x0d
    1010:	fe 86       	std	Y+14, r15	; 0x0e
    1012:	0f 87       	std	Y+15, r16	; 0x0f
    1014:	18 8b       	std	Y+16, r17	; 0x10
    1016:	29 84       	ldd	r2, Y+9	; 0x09
    1018:	3a 84       	ldd	r3, Y+10	; 0x0a
    101a:	4b 84       	ldd	r4, Y+11	; 0x0b
    101c:	5c 84       	ldd	r5, Y+12	; 0x0c
    101e:	ad 84       	ldd	r10, Y+13	; 0x0d
    1020:	be 84       	ldd	r11, Y+14	; 0x0e
    1022:	cf 84       	ldd	r12, Y+15	; 0x0f
    1024:	d8 88       	ldd	r13, Y+16	; 0x10
    1026:	29 81       	ldd	r18, Y+1	; 0x01
    1028:	3a 81       	ldd	r19, Y+2	; 0x02
    102a:	4b 81       	ldd	r20, Y+3	; 0x03
    102c:	5c 81       	ldd	r21, Y+4	; 0x04
    102e:	69 96       	adiw	r28, 0x19	; 25
    1030:	2f af       	std	Y+63, r18	; 0x3f
    1032:	69 97       	sbiw	r28, 0x19	; 25
    1034:	6a 96       	adiw	r28, 0x1a	; 26
    1036:	3f af       	std	Y+63, r19	; 0x3f
    1038:	6a 97       	sbiw	r28, 0x1a	; 26
    103a:	6b 96       	adiw	r28, 0x1b	; 27
    103c:	4f af       	std	Y+63, r20	; 0x3f
    103e:	6b 97       	sbiw	r28, 0x1b	; 27
    1040:	6c 96       	adiw	r28, 0x1c	; 28
    1042:	5f af       	std	Y+63, r21	; 0x3f
    1044:	6c 97       	sbiw	r28, 0x1c	; 28
    1046:	6c 96       	adiw	r28, 0x1c	; 28
    1048:	6c ac       	ldd	r6, Y+60	; 0x3c
    104a:	7d ac       	ldd	r7, Y+61	; 0x3d
    104c:	8e ac       	ldd	r8, Y+62	; 0x3e
    104e:	9f ac       	ldd	r9, Y+63	; 0x3f
    1050:	6c 97       	sbiw	r28, 0x1c	; 28
    1052:	69 aa       	std	Y+49, r6	; 0x31
    1054:	7a aa       	std	Y+50, r7	; 0x32
    1056:	8b aa       	std	Y+51, r8	; 0x33
    1058:	9c aa       	std	Y+52, r9	; 0x34
    105a:	6d 81       	ldd	r22, Y+5	; 0x05
    105c:	7e 81       	ldd	r23, Y+6	; 0x06
    105e:	8f 81       	ldd	r24, Y+7	; 0x07
    1060:	98 85       	ldd	r25, Y+8	; 0x08
    1062:	3b 01       	movw	r6, r22
    1064:	4c 01       	movw	r8, r24
    1066:	6d aa       	std	Y+53, r6	; 0x35
    1068:	7e aa       	std	Y+54, r7	; 0x36
    106a:	8f aa       	std	Y+55, r8	; 0x37
    106c:	98 ae       	std	Y+56, r9	; 0x38
    106e:	a1 14       	cp	r10, r1
    1070:	b1 04       	cpc	r11, r1
    1072:	c1 04       	cpc	r12, r1
    1074:	d1 04       	cpc	r13, r1
    1076:	09 f0       	breq	.+2      	; 0x107a <__umoddi3+0xb0>
    1078:	04 c3       	rjmp	.+1544   	; 0x1682 <__umoddi3+0x6b8>
    107a:	62 14       	cp	r6, r2
    107c:	73 04       	cpc	r7, r3
    107e:	84 04       	cpc	r8, r4
    1080:	95 04       	cpc	r9, r5
    1082:	08 f0       	brcs	.+2      	; 0x1086 <__umoddi3+0xbc>
    1084:	00 c1       	rjmp	.+512    	; 0x1286 <__umoddi3+0x2bc>
    1086:	00 e0       	ldi	r16, 0x00	; 0
    1088:	20 16       	cp	r2, r16
    108a:	00 e0       	ldi	r16, 0x00	; 0
    108c:	30 06       	cpc	r3, r16
    108e:	01 e0       	ldi	r16, 0x01	; 1
    1090:	40 06       	cpc	r4, r16
    1092:	00 e0       	ldi	r16, 0x00	; 0
    1094:	50 06       	cpc	r5, r16
    1096:	88 f4       	brcc	.+34     	; 0x10ba <__umoddi3+0xf0>
    1098:	1f ef       	ldi	r17, 0xFF	; 255
    109a:	21 16       	cp	r2, r17
    109c:	31 04       	cpc	r3, r1
    109e:	41 04       	cpc	r4, r1
    10a0:	51 04       	cpc	r5, r1
    10a2:	39 f0       	breq	.+14     	; 0x10b2 <__umoddi3+0xe8>
    10a4:	30 f0       	brcs	.+12     	; 0x10b2 <__umoddi3+0xe8>
    10a6:	88 e0       	ldi	r24, 0x08	; 8
    10a8:	e8 2e       	mov	r14, r24
    10aa:	f1 2c       	mov	r15, r1
    10ac:	01 2d       	mov	r16, r1
    10ae:	11 2d       	mov	r17, r1
    10b0:	18 c0       	rjmp	.+48     	; 0x10e2 <__umoddi3+0x118>
    10b2:	ee 24       	eor	r14, r14
    10b4:	ff 24       	eor	r15, r15
    10b6:	87 01       	movw	r16, r14
    10b8:	14 c0       	rjmp	.+40     	; 0x10e2 <__umoddi3+0x118>
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	24 16       	cp	r2, r20
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	34 06       	cpc	r3, r20
    10c2:	40 e0       	ldi	r20, 0x00	; 0
    10c4:	44 06       	cpc	r4, r20
    10c6:	41 e0       	ldi	r20, 0x01	; 1
    10c8:	54 06       	cpc	r5, r20
    10ca:	30 f0       	brcs	.+12     	; 0x10d8 <__umoddi3+0x10e>
    10cc:	b8 e1       	ldi	r27, 0x18	; 24
    10ce:	eb 2e       	mov	r14, r27
    10d0:	f1 2c       	mov	r15, r1
    10d2:	01 2d       	mov	r16, r1
    10d4:	11 2d       	mov	r17, r1
    10d6:	05 c0       	rjmp	.+10     	; 0x10e2 <__umoddi3+0x118>
    10d8:	a0 e1       	ldi	r26, 0x10	; 16
    10da:	ea 2e       	mov	r14, r26
    10dc:	f1 2c       	mov	r15, r1
    10de:	01 2d       	mov	r16, r1
    10e0:	11 2d       	mov	r17, r1
    10e2:	d2 01       	movw	r26, r4
    10e4:	c1 01       	movw	r24, r2
    10e6:	0e 2c       	mov	r0, r14
    10e8:	04 c0       	rjmp	.+8      	; 0x10f2 <__umoddi3+0x128>
    10ea:	b6 95       	lsr	r27
    10ec:	a7 95       	ror	r26
    10ee:	97 95       	ror	r25
    10f0:	87 95       	ror	r24
    10f2:	0a 94       	dec	r0
    10f4:	d2 f7       	brpl	.-12     	; 0x10ea <__umoddi3+0x120>
    10f6:	84 57       	subi	r24, 0x74	; 116
    10f8:	9f 4f       	sbci	r25, 0xFF	; 255
    10fa:	dc 01       	movw	r26, r24
    10fc:	2c 91       	ld	r18, X
    10fe:	80 e2       	ldi	r24, 0x20	; 32
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	a0 e0       	ldi	r26, 0x00	; 0
    1104:	b0 e0       	ldi	r27, 0x00	; 0
    1106:	8e 19       	sub	r24, r14
    1108:	9f 09       	sbc	r25, r15
    110a:	a0 0b       	sbc	r26, r16
    110c:	b1 0b       	sbc	r27, r17
    110e:	5c 01       	movw	r10, r24
    1110:	6d 01       	movw	r12, r26
    1112:	a2 1a       	sub	r10, r18
    1114:	b1 08       	sbc	r11, r1
    1116:	c1 08       	sbc	r12, r1
    1118:	d1 08       	sbc	r13, r1
    111a:	a9 ae       	std	Y+57, r10	; 0x39
    111c:	ba ae       	std	Y+58, r11	; 0x3a
    111e:	cb ae       	std	Y+59, r12	; 0x3b
    1120:	dc ae       	std	Y+60, r13	; 0x3c
    1122:	a1 14       	cp	r10, r1
    1124:	b1 04       	cpc	r11, r1
    1126:	c1 04       	cpc	r12, r1
    1128:	d1 04       	cpc	r13, r1
    112a:	09 f4       	brne	.+2      	; 0x112e <__umoddi3+0x164>
    112c:	3f c0       	rjmp	.+126    	; 0x11ac <__umoddi3+0x1e2>
    112e:	69 ad       	ldd	r22, Y+57	; 0x39
    1130:	06 2e       	mov	r0, r22
    1132:	04 c0       	rjmp	.+8      	; 0x113c <__umoddi3+0x172>
    1134:	22 0c       	add	r2, r2
    1136:	33 1c       	adc	r3, r3
    1138:	44 1c       	adc	r4, r4
    113a:	55 1c       	adc	r5, r5
    113c:	0a 94       	dec	r0
    113e:	d2 f7       	brpl	.-12     	; 0x1134 <__umoddi3+0x16a>
    1140:	a4 01       	movw	r20, r8
    1142:	93 01       	movw	r18, r6
    1144:	06 2e       	mov	r0, r22
    1146:	04 c0       	rjmp	.+8      	; 0x1150 <__umoddi3+0x186>
    1148:	22 0f       	add	r18, r18
    114a:	33 1f       	adc	r19, r19
    114c:	44 1f       	adc	r20, r20
    114e:	55 1f       	adc	r21, r21
    1150:	0a 94       	dec	r0
    1152:	d2 f7       	brpl	.-12     	; 0x1148 <__umoddi3+0x17e>
    1154:	80 e2       	ldi	r24, 0x20	; 32
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	8a 19       	sub	r24, r10
    115a:	9b 09       	sbc	r25, r11
    115c:	6c 96       	adiw	r28, 0x1c	; 28
    115e:	cc ac       	ldd	r12, Y+60	; 0x3c
    1160:	dd ac       	ldd	r13, Y+61	; 0x3d
    1162:	ee ac       	ldd	r14, Y+62	; 0x3e
    1164:	ff ac       	ldd	r15, Y+63	; 0x3f
    1166:	6c 97       	sbiw	r28, 0x1c	; 28
    1168:	04 c0       	rjmp	.+8      	; 0x1172 <__umoddi3+0x1a8>
    116a:	f6 94       	lsr	r15
    116c:	e7 94       	ror	r14
    116e:	d7 94       	ror	r13
    1170:	c7 94       	ror	r12
    1172:	8a 95       	dec	r24
    1174:	d2 f7       	brpl	.-12     	; 0x116a <__umoddi3+0x1a0>
    1176:	87 01       	movw	r16, r14
    1178:	76 01       	movw	r14, r12
    117a:	e2 2a       	or	r14, r18
    117c:	f3 2a       	or	r15, r19
    117e:	04 2b       	or	r16, r20
    1180:	15 2b       	or	r17, r21
    1182:	ed aa       	std	Y+53, r14	; 0x35
    1184:	fe aa       	std	Y+54, r15	; 0x36
    1186:	0f ab       	std	Y+55, r16	; 0x37
    1188:	18 af       	std	Y+56, r17	; 0x38
    118a:	6c 96       	adiw	r28, 0x1c	; 28
    118c:	8c ad       	ldd	r24, Y+60	; 0x3c
    118e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1190:	ae ad       	ldd	r26, Y+62	; 0x3e
    1192:	bf ad       	ldd	r27, Y+63	; 0x3f
    1194:	6c 97       	sbiw	r28, 0x1c	; 28
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <__umoddi3+0x1d6>
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	aa 1f       	adc	r26, r26
    119e:	bb 1f       	adc	r27, r27
    11a0:	6a 95       	dec	r22
    11a2:	d2 f7       	brpl	.-12     	; 0x1198 <__umoddi3+0x1ce>
    11a4:	89 ab       	std	Y+49, r24	; 0x31
    11a6:	9a ab       	std	Y+50, r25	; 0x32
    11a8:	ab ab       	std	Y+51, r26	; 0x33
    11aa:	bc ab       	std	Y+52, r27	; 0x34
    11ac:	32 01       	movw	r6, r4
    11ae:	88 24       	eor	r8, r8
    11b0:	99 24       	eor	r9, r9
    11b2:	b2 01       	movw	r22, r4
    11b4:	a1 01       	movw	r20, r2
    11b6:	60 70       	andi	r22, 0x00	; 0
    11b8:	70 70       	andi	r23, 0x00	; 0
    11ba:	21 96       	adiw	r28, 0x01	; 1
    11bc:	4c af       	std	Y+60, r20	; 0x3c
    11be:	5d af       	std	Y+61, r21	; 0x3d
    11c0:	6e af       	std	Y+62, r22	; 0x3e
    11c2:	7f af       	std	Y+63, r23	; 0x3f
    11c4:	21 97       	sbiw	r28, 0x01	; 1
    11c6:	6d a9       	ldd	r22, Y+53	; 0x35
    11c8:	7e a9       	ldd	r23, Y+54	; 0x36
    11ca:	8f a9       	ldd	r24, Y+55	; 0x37
    11cc:	98 ad       	ldd	r25, Y+56	; 0x38
    11ce:	a4 01       	movw	r20, r8
    11d0:	93 01       	movw	r18, r6
    11d2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    11d6:	7b 01       	movw	r14, r22
    11d8:	8c 01       	movw	r16, r24
    11da:	6d a9       	ldd	r22, Y+53	; 0x35
    11dc:	7e a9       	ldd	r23, Y+54	; 0x36
    11de:	8f a9       	ldd	r24, Y+55	; 0x37
    11e0:	98 ad       	ldd	r25, Y+56	; 0x38
    11e2:	a4 01       	movw	r20, r8
    11e4:	93 01       	movw	r18, r6
    11e6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    11ea:	ca 01       	movw	r24, r20
    11ec:	b9 01       	movw	r22, r18
    11ee:	21 96       	adiw	r28, 0x01	; 1
    11f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    11f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    11f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    11f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    11f8:	21 97       	sbiw	r28, 0x01	; 1
    11fa:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    11fe:	9b 01       	movw	r18, r22
    1200:	ac 01       	movw	r20, r24
    1202:	87 01       	movw	r16, r14
    1204:	ff 24       	eor	r15, r15
    1206:	ee 24       	eor	r14, r14
    1208:	a9 a8       	ldd	r10, Y+49	; 0x31
    120a:	ba a8       	ldd	r11, Y+50	; 0x32
    120c:	cb a8       	ldd	r12, Y+51	; 0x33
    120e:	dc a8       	ldd	r13, Y+52	; 0x34
    1210:	c6 01       	movw	r24, r12
    1212:	aa 27       	eor	r26, r26
    1214:	bb 27       	eor	r27, r27
    1216:	57 01       	movw	r10, r14
    1218:	68 01       	movw	r12, r16
    121a:	a8 2a       	or	r10, r24
    121c:	b9 2a       	or	r11, r25
    121e:	ca 2a       	or	r12, r26
    1220:	db 2a       	or	r13, r27
    1222:	a2 16       	cp	r10, r18
    1224:	b3 06       	cpc	r11, r19
    1226:	c4 06       	cpc	r12, r20
    1228:	d5 06       	cpc	r13, r21
    122a:	90 f4       	brcc	.+36     	; 0x1250 <__umoddi3+0x286>
    122c:	a2 0c       	add	r10, r2
    122e:	b3 1c       	adc	r11, r3
    1230:	c4 1c       	adc	r12, r4
    1232:	d5 1c       	adc	r13, r5
    1234:	a2 14       	cp	r10, r2
    1236:	b3 04       	cpc	r11, r3
    1238:	c4 04       	cpc	r12, r4
    123a:	d5 04       	cpc	r13, r5
    123c:	48 f0       	brcs	.+18     	; 0x1250 <__umoddi3+0x286>
    123e:	a2 16       	cp	r10, r18
    1240:	b3 06       	cpc	r11, r19
    1242:	c4 06       	cpc	r12, r20
    1244:	d5 06       	cpc	r13, r21
    1246:	20 f4       	brcc	.+8      	; 0x1250 <__umoddi3+0x286>
    1248:	a2 0c       	add	r10, r2
    124a:	b3 1c       	adc	r11, r3
    124c:	c4 1c       	adc	r12, r4
    124e:	d5 1c       	adc	r13, r5
    1250:	a2 1a       	sub	r10, r18
    1252:	b3 0a       	sbc	r11, r19
    1254:	c4 0a       	sbc	r12, r20
    1256:	d5 0a       	sbc	r13, r21
    1258:	c6 01       	movw	r24, r12
    125a:	b5 01       	movw	r22, r10
    125c:	a4 01       	movw	r20, r8
    125e:	93 01       	movw	r18, r6
    1260:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    1264:	7b 01       	movw	r14, r22
    1266:	8c 01       	movw	r16, r24
    1268:	c6 01       	movw	r24, r12
    126a:	b5 01       	movw	r22, r10
    126c:	a4 01       	movw	r20, r8
    126e:	93 01       	movw	r18, r6
    1270:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    1274:	ca 01       	movw	r24, r20
    1276:	b9 01       	movw	r22, r18
    1278:	21 96       	adiw	r28, 0x01	; 1
    127a:	2c ad       	ldd	r18, Y+60	; 0x3c
    127c:	3d ad       	ldd	r19, Y+61	; 0x3d
    127e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1280:	5f ad       	ldd	r21, Y+63	; 0x3f
    1282:	21 97       	sbiw	r28, 0x01	; 1
    1284:	ba c1       	rjmp	.+884    	; 0x15fa <__umoddi3+0x630>
    1286:	21 14       	cp	r2, r1
    1288:	31 04       	cpc	r3, r1
    128a:	41 04       	cpc	r4, r1
    128c:	51 04       	cpc	r5, r1
    128e:	71 f4       	brne	.+28     	; 0x12ac <__umoddi3+0x2e2>
    1290:	61 e0       	ldi	r22, 0x01	; 1
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	50 e0       	ldi	r21, 0x00	; 0
    12a0:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    12a4:	c9 01       	movw	r24, r18
    12a6:	da 01       	movw	r26, r20
    12a8:	1c 01       	movw	r2, r24
    12aa:	2d 01       	movw	r4, r26
    12ac:	00 e0       	ldi	r16, 0x00	; 0
    12ae:	20 16       	cp	r2, r16
    12b0:	00 e0       	ldi	r16, 0x00	; 0
    12b2:	30 06       	cpc	r3, r16
    12b4:	01 e0       	ldi	r16, 0x01	; 1
    12b6:	40 06       	cpc	r4, r16
    12b8:	00 e0       	ldi	r16, 0x00	; 0
    12ba:	50 06       	cpc	r5, r16
    12bc:	88 f4       	brcc	.+34     	; 0x12e0 <__umoddi3+0x316>
    12be:	1f ef       	ldi	r17, 0xFF	; 255
    12c0:	21 16       	cp	r2, r17
    12c2:	31 04       	cpc	r3, r1
    12c4:	41 04       	cpc	r4, r1
    12c6:	51 04       	cpc	r5, r1
    12c8:	39 f0       	breq	.+14     	; 0x12d8 <__umoddi3+0x30e>
    12ca:	30 f0       	brcs	.+12     	; 0x12d8 <__umoddi3+0x30e>
    12cc:	68 e0       	ldi	r22, 0x08	; 8
    12ce:	e6 2e       	mov	r14, r22
    12d0:	f1 2c       	mov	r15, r1
    12d2:	01 2d       	mov	r16, r1
    12d4:	11 2d       	mov	r17, r1
    12d6:	18 c0       	rjmp	.+48     	; 0x1308 <__umoddi3+0x33e>
    12d8:	ee 24       	eor	r14, r14
    12da:	ff 24       	eor	r15, r15
    12dc:	87 01       	movw	r16, r14
    12de:	14 c0       	rjmp	.+40     	; 0x1308 <__umoddi3+0x33e>
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	24 16       	cp	r2, r20
    12e4:	40 e0       	ldi	r20, 0x00	; 0
    12e6:	34 06       	cpc	r3, r20
    12e8:	40 e0       	ldi	r20, 0x00	; 0
    12ea:	44 06       	cpc	r4, r20
    12ec:	41 e0       	ldi	r20, 0x01	; 1
    12ee:	54 06       	cpc	r5, r20
    12f0:	30 f0       	brcs	.+12     	; 0x12fe <__umoddi3+0x334>
    12f2:	58 e1       	ldi	r21, 0x18	; 24
    12f4:	e5 2e       	mov	r14, r21
    12f6:	f1 2c       	mov	r15, r1
    12f8:	01 2d       	mov	r16, r1
    12fa:	11 2d       	mov	r17, r1
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <__umoddi3+0x33e>
    12fe:	40 e1       	ldi	r20, 0x10	; 16
    1300:	e4 2e       	mov	r14, r20
    1302:	f1 2c       	mov	r15, r1
    1304:	01 2d       	mov	r16, r1
    1306:	11 2d       	mov	r17, r1
    1308:	d2 01       	movw	r26, r4
    130a:	c1 01       	movw	r24, r2
    130c:	0e 2c       	mov	r0, r14
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__umoddi3+0x34e>
    1310:	b6 95       	lsr	r27
    1312:	a7 95       	ror	r26
    1314:	97 95       	ror	r25
    1316:	87 95       	ror	r24
    1318:	0a 94       	dec	r0
    131a:	d2 f7       	brpl	.-12     	; 0x1310 <__umoddi3+0x346>
    131c:	84 57       	subi	r24, 0x74	; 116
    131e:	9f 4f       	sbci	r25, 0xFF	; 255
    1320:	dc 01       	movw	r26, r24
    1322:	2c 91       	ld	r18, X
    1324:	30 e2       	ldi	r19, 0x20	; 32
    1326:	a3 2e       	mov	r10, r19
    1328:	b1 2c       	mov	r11, r1
    132a:	c1 2c       	mov	r12, r1
    132c:	d1 2c       	mov	r13, r1
    132e:	d6 01       	movw	r26, r12
    1330:	c5 01       	movw	r24, r10
    1332:	8e 19       	sub	r24, r14
    1334:	9f 09       	sbc	r25, r15
    1336:	a0 0b       	sbc	r26, r16
    1338:	b1 0b       	sbc	r27, r17
    133a:	7c 01       	movw	r14, r24
    133c:	8d 01       	movw	r16, r26
    133e:	e2 1a       	sub	r14, r18
    1340:	f1 08       	sbc	r15, r1
    1342:	01 09       	sbc	r16, r1
    1344:	11 09       	sbc	r17, r1
    1346:	e9 ae       	std	Y+57, r14	; 0x39
    1348:	fa ae       	std	Y+58, r15	; 0x3a
    134a:	0b af       	std	Y+59, r16	; 0x3b
    134c:	1c af       	std	Y+60, r17	; 0x3c
    134e:	e1 14       	cp	r14, r1
    1350:	f1 04       	cpc	r15, r1
    1352:	01 05       	cpc	r16, r1
    1354:	11 05       	cpc	r17, r1
    1356:	39 f4       	brne	.+14     	; 0x1366 <__umoddi3+0x39c>
    1358:	64 01       	movw	r12, r8
    135a:	53 01       	movw	r10, r6
    135c:	a2 18       	sub	r10, r2
    135e:	b3 08       	sbc	r11, r3
    1360:	c4 08       	sbc	r12, r4
    1362:	d5 08       	sbc	r13, r5
    1364:	e2 c0       	rjmp	.+452    	; 0x152a <__umoddi3+0x560>
    1366:	f9 ac       	ldd	r15, Y+57	; 0x39
    1368:	68 96       	adiw	r28, 0x18	; 24
    136a:	ff ae       	std	Y+63, r15	; 0x3f
    136c:	68 97       	sbiw	r28, 0x18	; 24
    136e:	0f 2c       	mov	r0, r15
    1370:	04 c0       	rjmp	.+8      	; 0x137a <__umoddi3+0x3b0>
    1372:	22 0c       	add	r2, r2
    1374:	33 1c       	adc	r3, r3
    1376:	44 1c       	adc	r4, r4
    1378:	55 1c       	adc	r5, r5
    137a:	0a 94       	dec	r0
    137c:	d2 f7       	brpl	.-12     	; 0x1372 <__umoddi3+0x3a8>
    137e:	8a 2d       	mov	r24, r10
    1380:	8f 19       	sub	r24, r15
    1382:	64 01       	movw	r12, r8
    1384:	53 01       	movw	r10, r6
    1386:	08 2e       	mov	r0, r24
    1388:	04 c0       	rjmp	.+8      	; 0x1392 <__umoddi3+0x3c8>
    138a:	d6 94       	lsr	r13
    138c:	c7 94       	ror	r12
    138e:	b7 94       	ror	r11
    1390:	a7 94       	ror	r10
    1392:	0a 94       	dec	r0
    1394:	d2 f7       	brpl	.-12     	; 0x138a <__umoddi3+0x3c0>
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	04 c0       	rjmp	.+8      	; 0x13a4 <__umoddi3+0x3da>
    139c:	22 0f       	add	r18, r18
    139e:	33 1f       	adc	r19, r19
    13a0:	44 1f       	adc	r20, r20
    13a2:	55 1f       	adc	r21, r21
    13a4:	fa 94       	dec	r15
    13a6:	d2 f7       	brpl	.-12     	; 0x139c <__umoddi3+0x3d2>
    13a8:	6c 96       	adiw	r28, 0x1c	; 28
    13aa:	6c ac       	ldd	r6, Y+60	; 0x3c
    13ac:	7d ac       	ldd	r7, Y+61	; 0x3d
    13ae:	8e ac       	ldd	r8, Y+62	; 0x3e
    13b0:	9f ac       	ldd	r9, Y+63	; 0x3f
    13b2:	6c 97       	sbiw	r28, 0x1c	; 28
    13b4:	04 c0       	rjmp	.+8      	; 0x13be <__umoddi3+0x3f4>
    13b6:	96 94       	lsr	r9
    13b8:	87 94       	ror	r8
    13ba:	77 94       	ror	r7
    13bc:	67 94       	ror	r6
    13be:	8a 95       	dec	r24
    13c0:	d2 f7       	brpl	.-12     	; 0x13b6 <__umoddi3+0x3ec>
    13c2:	84 01       	movw	r16, r8
    13c4:	73 01       	movw	r14, r6
    13c6:	e2 2a       	or	r14, r18
    13c8:	f3 2a       	or	r15, r19
    13ca:	04 2b       	or	r16, r20
    13cc:	15 2b       	or	r17, r21
    13ce:	ed a6       	std	Y+45, r14	; 0x2d
    13d0:	fe a6       	std	Y+46, r15	; 0x2e
    13d2:	0f a7       	std	Y+47, r16	; 0x2f
    13d4:	18 ab       	std	Y+48, r17	; 0x30
    13d6:	32 01       	movw	r6, r4
    13d8:	88 24       	eor	r8, r8
    13da:	99 24       	eor	r9, r9
    13dc:	b2 01       	movw	r22, r4
    13de:	a1 01       	movw	r20, r2
    13e0:	60 70       	andi	r22, 0x00	; 0
    13e2:	70 70       	andi	r23, 0x00	; 0
    13e4:	25 96       	adiw	r28, 0x05	; 5
    13e6:	4c af       	std	Y+60, r20	; 0x3c
    13e8:	5d af       	std	Y+61, r21	; 0x3d
    13ea:	6e af       	std	Y+62, r22	; 0x3e
    13ec:	7f af       	std	Y+63, r23	; 0x3f
    13ee:	25 97       	sbiw	r28, 0x05	; 5
    13f0:	c6 01       	movw	r24, r12
    13f2:	b5 01       	movw	r22, r10
    13f4:	a4 01       	movw	r20, r8
    13f6:	93 01       	movw	r18, r6
    13f8:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    13fc:	7b 01       	movw	r14, r22
    13fe:	8c 01       	movw	r16, r24
    1400:	c6 01       	movw	r24, r12
    1402:	b5 01       	movw	r22, r10
    1404:	a4 01       	movw	r20, r8
    1406:	93 01       	movw	r18, r6
    1408:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    140c:	ca 01       	movw	r24, r20
    140e:	b9 01       	movw	r22, r18
    1410:	25 96       	adiw	r28, 0x05	; 5
    1412:	2c ad       	ldd	r18, Y+60	; 0x3c
    1414:	3d ad       	ldd	r19, Y+61	; 0x3d
    1416:	4e ad       	ldd	r20, Y+62	; 0x3e
    1418:	5f ad       	ldd	r21, Y+63	; 0x3f
    141a:	25 97       	sbiw	r28, 0x05	; 5
    141c:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    1420:	9b 01       	movw	r18, r22
    1422:	ac 01       	movw	r20, r24
    1424:	87 01       	movw	r16, r14
    1426:	ff 24       	eor	r15, r15
    1428:	ee 24       	eor	r14, r14
    142a:	ad a4       	ldd	r10, Y+45	; 0x2d
    142c:	be a4       	ldd	r11, Y+46	; 0x2e
    142e:	cf a4       	ldd	r12, Y+47	; 0x2f
    1430:	d8 a8       	ldd	r13, Y+48	; 0x30
    1432:	c6 01       	movw	r24, r12
    1434:	aa 27       	eor	r26, r26
    1436:	bb 27       	eor	r27, r27
    1438:	5c 01       	movw	r10, r24
    143a:	6d 01       	movw	r12, r26
    143c:	ae 28       	or	r10, r14
    143e:	bf 28       	or	r11, r15
    1440:	c0 2a       	or	r12, r16
    1442:	d1 2a       	or	r13, r17
    1444:	a2 16       	cp	r10, r18
    1446:	b3 06       	cpc	r11, r19
    1448:	c4 06       	cpc	r12, r20
    144a:	d5 06       	cpc	r13, r21
    144c:	90 f4       	brcc	.+36     	; 0x1472 <__umoddi3+0x4a8>
    144e:	a2 0c       	add	r10, r2
    1450:	b3 1c       	adc	r11, r3
    1452:	c4 1c       	adc	r12, r4
    1454:	d5 1c       	adc	r13, r5
    1456:	a2 14       	cp	r10, r2
    1458:	b3 04       	cpc	r11, r3
    145a:	c4 04       	cpc	r12, r4
    145c:	d5 04       	cpc	r13, r5
    145e:	48 f0       	brcs	.+18     	; 0x1472 <__umoddi3+0x4a8>
    1460:	a2 16       	cp	r10, r18
    1462:	b3 06       	cpc	r11, r19
    1464:	c4 06       	cpc	r12, r20
    1466:	d5 06       	cpc	r13, r21
    1468:	20 f4       	brcc	.+8      	; 0x1472 <__umoddi3+0x4a8>
    146a:	a2 0c       	add	r10, r2
    146c:	b3 1c       	adc	r11, r3
    146e:	c4 1c       	adc	r12, r4
    1470:	d5 1c       	adc	r13, r5
    1472:	a2 1a       	sub	r10, r18
    1474:	b3 0a       	sbc	r11, r19
    1476:	c4 0a       	sbc	r12, r20
    1478:	d5 0a       	sbc	r13, r21
    147a:	c6 01       	movw	r24, r12
    147c:	b5 01       	movw	r22, r10
    147e:	a4 01       	movw	r20, r8
    1480:	93 01       	movw	r18, r6
    1482:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    1486:	7b 01       	movw	r14, r22
    1488:	8c 01       	movw	r16, r24
    148a:	c6 01       	movw	r24, r12
    148c:	b5 01       	movw	r22, r10
    148e:	a4 01       	movw	r20, r8
    1490:	93 01       	movw	r18, r6
    1492:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    1496:	ca 01       	movw	r24, r20
    1498:	b9 01       	movw	r22, r18
    149a:	25 96       	adiw	r28, 0x05	; 5
    149c:	2c ad       	ldd	r18, Y+60	; 0x3c
    149e:	3d ad       	ldd	r19, Y+61	; 0x3d
    14a0:	4e ad       	ldd	r20, Y+62	; 0x3e
    14a2:	5f ad       	ldd	r21, Y+63	; 0x3f
    14a4:	25 97       	sbiw	r28, 0x05	; 5
    14a6:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    14aa:	9b 01       	movw	r18, r22
    14ac:	ac 01       	movw	r20, r24
    14ae:	87 01       	movw	r16, r14
    14b0:	ff 24       	eor	r15, r15
    14b2:	ee 24       	eor	r14, r14
    14b4:	8d a5       	ldd	r24, Y+45	; 0x2d
    14b6:	9e a5       	ldd	r25, Y+46	; 0x2e
    14b8:	af a5       	ldd	r26, Y+47	; 0x2f
    14ba:	b8 a9       	ldd	r27, Y+48	; 0x30
    14bc:	a0 70       	andi	r26, 0x00	; 0
    14be:	b0 70       	andi	r27, 0x00	; 0
    14c0:	57 01       	movw	r10, r14
    14c2:	68 01       	movw	r12, r16
    14c4:	a8 2a       	or	r10, r24
    14c6:	b9 2a       	or	r11, r25
    14c8:	ca 2a       	or	r12, r26
    14ca:	db 2a       	or	r13, r27
    14cc:	a2 16       	cp	r10, r18
    14ce:	b3 06       	cpc	r11, r19
    14d0:	c4 06       	cpc	r12, r20
    14d2:	d5 06       	cpc	r13, r21
    14d4:	90 f4       	brcc	.+36     	; 0x14fa <__umoddi3+0x530>
    14d6:	a2 0c       	add	r10, r2
    14d8:	b3 1c       	adc	r11, r3
    14da:	c4 1c       	adc	r12, r4
    14dc:	d5 1c       	adc	r13, r5
    14de:	a2 14       	cp	r10, r2
    14e0:	b3 04       	cpc	r11, r3
    14e2:	c4 04       	cpc	r12, r4
    14e4:	d5 04       	cpc	r13, r5
    14e6:	48 f0       	brcs	.+18     	; 0x14fa <__umoddi3+0x530>
    14e8:	a2 16       	cp	r10, r18
    14ea:	b3 06       	cpc	r11, r19
    14ec:	c4 06       	cpc	r12, r20
    14ee:	d5 06       	cpc	r13, r21
    14f0:	20 f4       	brcc	.+8      	; 0x14fa <__umoddi3+0x530>
    14f2:	a2 0c       	add	r10, r2
    14f4:	b3 1c       	adc	r11, r3
    14f6:	c4 1c       	adc	r12, r4
    14f8:	d5 1c       	adc	r13, r5
    14fa:	6c 96       	adiw	r28, 0x1c	; 28
    14fc:	ec ac       	ldd	r14, Y+60	; 0x3c
    14fe:	fd ac       	ldd	r15, Y+61	; 0x3d
    1500:	0e ad       	ldd	r16, Y+62	; 0x3e
    1502:	1f ad       	ldd	r17, Y+63	; 0x3f
    1504:	6c 97       	sbiw	r28, 0x1c	; 28
    1506:	68 96       	adiw	r28, 0x18	; 24
    1508:	0f ac       	ldd	r0, Y+63	; 0x3f
    150a:	68 97       	sbiw	r28, 0x18	; 24
    150c:	04 c0       	rjmp	.+8      	; 0x1516 <__umoddi3+0x54c>
    150e:	ee 0c       	add	r14, r14
    1510:	ff 1c       	adc	r15, r15
    1512:	00 1f       	adc	r16, r16
    1514:	11 1f       	adc	r17, r17
    1516:	0a 94       	dec	r0
    1518:	d2 f7       	brpl	.-12     	; 0x150e <__umoddi3+0x544>
    151a:	e9 aa       	std	Y+49, r14	; 0x31
    151c:	fa aa       	std	Y+50, r15	; 0x32
    151e:	0b ab       	std	Y+51, r16	; 0x33
    1520:	1c ab       	std	Y+52, r17	; 0x34
    1522:	a2 1a       	sub	r10, r18
    1524:	b3 0a       	sbc	r11, r19
    1526:	c4 0a       	sbc	r12, r20
    1528:	d5 0a       	sbc	r13, r21
    152a:	32 01       	movw	r6, r4
    152c:	88 24       	eor	r8, r8
    152e:	99 24       	eor	r9, r9
    1530:	b2 01       	movw	r22, r4
    1532:	a1 01       	movw	r20, r2
    1534:	60 70       	andi	r22, 0x00	; 0
    1536:	70 70       	andi	r23, 0x00	; 0
    1538:	29 96       	adiw	r28, 0x09	; 9
    153a:	4c af       	std	Y+60, r20	; 0x3c
    153c:	5d af       	std	Y+61, r21	; 0x3d
    153e:	6e af       	std	Y+62, r22	; 0x3e
    1540:	7f af       	std	Y+63, r23	; 0x3f
    1542:	29 97       	sbiw	r28, 0x09	; 9
    1544:	c6 01       	movw	r24, r12
    1546:	b5 01       	movw	r22, r10
    1548:	a4 01       	movw	r20, r8
    154a:	93 01       	movw	r18, r6
    154c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    1550:	7b 01       	movw	r14, r22
    1552:	8c 01       	movw	r16, r24
    1554:	c6 01       	movw	r24, r12
    1556:	b5 01       	movw	r22, r10
    1558:	a4 01       	movw	r20, r8
    155a:	93 01       	movw	r18, r6
    155c:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    1560:	ca 01       	movw	r24, r20
    1562:	b9 01       	movw	r22, r18
    1564:	29 96       	adiw	r28, 0x09	; 9
    1566:	2c ad       	ldd	r18, Y+60	; 0x3c
    1568:	3d ad       	ldd	r19, Y+61	; 0x3d
    156a:	4e ad       	ldd	r20, Y+62	; 0x3e
    156c:	5f ad       	ldd	r21, Y+63	; 0x3f
    156e:	29 97       	sbiw	r28, 0x09	; 9
    1570:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    1574:	9b 01       	movw	r18, r22
    1576:	ac 01       	movw	r20, r24
    1578:	87 01       	movw	r16, r14
    157a:	ff 24       	eor	r15, r15
    157c:	ee 24       	eor	r14, r14
    157e:	a9 a8       	ldd	r10, Y+49	; 0x31
    1580:	ba a8       	ldd	r11, Y+50	; 0x32
    1582:	cb a8       	ldd	r12, Y+51	; 0x33
    1584:	dc a8       	ldd	r13, Y+52	; 0x34
    1586:	c6 01       	movw	r24, r12
    1588:	aa 27       	eor	r26, r26
    158a:	bb 27       	eor	r27, r27
    158c:	57 01       	movw	r10, r14
    158e:	68 01       	movw	r12, r16
    1590:	a8 2a       	or	r10, r24
    1592:	b9 2a       	or	r11, r25
    1594:	ca 2a       	or	r12, r26
    1596:	db 2a       	or	r13, r27
    1598:	a2 16       	cp	r10, r18
    159a:	b3 06       	cpc	r11, r19
    159c:	c4 06       	cpc	r12, r20
    159e:	d5 06       	cpc	r13, r21
    15a0:	90 f4       	brcc	.+36     	; 0x15c6 <__umoddi3+0x5fc>
    15a2:	a2 0c       	add	r10, r2
    15a4:	b3 1c       	adc	r11, r3
    15a6:	c4 1c       	adc	r12, r4
    15a8:	d5 1c       	adc	r13, r5
    15aa:	a2 14       	cp	r10, r2
    15ac:	b3 04       	cpc	r11, r3
    15ae:	c4 04       	cpc	r12, r4
    15b0:	d5 04       	cpc	r13, r5
    15b2:	48 f0       	brcs	.+18     	; 0x15c6 <__umoddi3+0x5fc>
    15b4:	a2 16       	cp	r10, r18
    15b6:	b3 06       	cpc	r11, r19
    15b8:	c4 06       	cpc	r12, r20
    15ba:	d5 06       	cpc	r13, r21
    15bc:	20 f4       	brcc	.+8      	; 0x15c6 <__umoddi3+0x5fc>
    15be:	a2 0c       	add	r10, r2
    15c0:	b3 1c       	adc	r11, r3
    15c2:	c4 1c       	adc	r12, r4
    15c4:	d5 1c       	adc	r13, r5
    15c6:	a2 1a       	sub	r10, r18
    15c8:	b3 0a       	sbc	r11, r19
    15ca:	c4 0a       	sbc	r12, r20
    15cc:	d5 0a       	sbc	r13, r21
    15ce:	c6 01       	movw	r24, r12
    15d0:	b5 01       	movw	r22, r10
    15d2:	a4 01       	movw	r20, r8
    15d4:	93 01       	movw	r18, r6
    15d6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    15da:	7b 01       	movw	r14, r22
    15dc:	8c 01       	movw	r16, r24
    15de:	c6 01       	movw	r24, r12
    15e0:	b5 01       	movw	r22, r10
    15e2:	a4 01       	movw	r20, r8
    15e4:	93 01       	movw	r18, r6
    15e6:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    15ea:	ca 01       	movw	r24, r20
    15ec:	b9 01       	movw	r22, r18
    15ee:	29 96       	adiw	r28, 0x09	; 9
    15f0:	2c ad       	ldd	r18, Y+60	; 0x3c
    15f2:	3d ad       	ldd	r19, Y+61	; 0x3d
    15f4:	4e ad       	ldd	r20, Y+62	; 0x3e
    15f6:	5f ad       	ldd	r21, Y+63	; 0x3f
    15f8:	29 97       	sbiw	r28, 0x09	; 9
    15fa:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    15fe:	9b 01       	movw	r18, r22
    1600:	ac 01       	movw	r20, r24
    1602:	87 01       	movw	r16, r14
    1604:	ff 24       	eor	r15, r15
    1606:	ee 24       	eor	r14, r14
    1608:	89 a9       	ldd	r24, Y+49	; 0x31
    160a:	9a a9       	ldd	r25, Y+50	; 0x32
    160c:	ab a9       	ldd	r26, Y+51	; 0x33
    160e:	bc a9       	ldd	r27, Y+52	; 0x34
    1610:	a0 70       	andi	r26, 0x00	; 0
    1612:	b0 70       	andi	r27, 0x00	; 0
    1614:	e8 2a       	or	r14, r24
    1616:	f9 2a       	or	r15, r25
    1618:	0a 2b       	or	r16, r26
    161a:	1b 2b       	or	r17, r27
    161c:	e2 16       	cp	r14, r18
    161e:	f3 06       	cpc	r15, r19
    1620:	04 07       	cpc	r16, r20
    1622:	15 07       	cpc	r17, r21
    1624:	90 f4       	brcc	.+36     	; 0x164a <__umoddi3+0x680>
    1626:	e2 0c       	add	r14, r2
    1628:	f3 1c       	adc	r15, r3
    162a:	04 1d       	adc	r16, r4
    162c:	15 1d       	adc	r17, r5
    162e:	e2 14       	cp	r14, r2
    1630:	f3 04       	cpc	r15, r3
    1632:	04 05       	cpc	r16, r4
    1634:	15 05       	cpc	r17, r5
    1636:	48 f0       	brcs	.+18     	; 0x164a <__umoddi3+0x680>
    1638:	e2 16       	cp	r14, r18
    163a:	f3 06       	cpc	r15, r19
    163c:	04 07       	cpc	r16, r20
    163e:	15 07       	cpc	r17, r21
    1640:	20 f4       	brcc	.+8      	; 0x164a <__umoddi3+0x680>
    1642:	e2 0c       	add	r14, r2
    1644:	f3 1c       	adc	r15, r3
    1646:	04 1d       	adc	r16, r4
    1648:	15 1d       	adc	r17, r5
    164a:	e2 1a       	sub	r14, r18
    164c:	f3 0a       	sbc	r15, r19
    164e:	04 0b       	sbc	r16, r20
    1650:	15 0b       	sbc	r17, r21
    1652:	d8 01       	movw	r26, r16
    1654:	c7 01       	movw	r24, r14
    1656:	09 ac       	ldd	r0, Y+57	; 0x39
    1658:	04 c0       	rjmp	.+8      	; 0x1662 <__umoddi3+0x698>
    165a:	b6 95       	lsr	r27
    165c:	a7 95       	ror	r26
    165e:	97 95       	ror	r25
    1660:	87 95       	ror	r24
    1662:	0a 94       	dec	r0
    1664:	d2 f7       	brpl	.-12     	; 0x165a <__umoddi3+0x690>
    1666:	89 8b       	std	Y+17, r24	; 0x11
    1668:	9a 8b       	std	Y+18, r25	; 0x12
    166a:	ab 8b       	std	Y+19, r26	; 0x13
    166c:	bc 8b       	std	Y+20, r27	; 0x14
    166e:	1d 8a       	std	Y+21, r1	; 0x15
    1670:	1e 8a       	std	Y+22, r1	; 0x16
    1672:	1f 8a       	std	Y+23, r1	; 0x17
    1674:	18 8e       	std	Y+24, r1	; 0x18
    1676:	28 2f       	mov	r18, r24
    1678:	3a 89       	ldd	r19, Y+18	; 0x12
    167a:	4b 89       	ldd	r20, Y+19	; 0x13
    167c:	5c 89       	ldd	r21, Y+20	; 0x14
    167e:	6d 89       	ldd	r22, Y+21	; 0x15
    1680:	0c c3       	rjmp	.+1560   	; 0x1c9a <__umoddi3+0xcd0>
    1682:	6a 14       	cp	r6, r10
    1684:	7b 04       	cpc	r7, r11
    1686:	8c 04       	cpc	r8, r12
    1688:	9d 04       	cpc	r9, r13
    168a:	08 f4       	brcc	.+2      	; 0x168e <__umoddi3+0x6c4>
    168c:	09 c3       	rjmp	.+1554   	; 0x1ca0 <__umoddi3+0xcd6>
    168e:	00 e0       	ldi	r16, 0x00	; 0
    1690:	a0 16       	cp	r10, r16
    1692:	00 e0       	ldi	r16, 0x00	; 0
    1694:	b0 06       	cpc	r11, r16
    1696:	01 e0       	ldi	r16, 0x01	; 1
    1698:	c0 06       	cpc	r12, r16
    169a:	00 e0       	ldi	r16, 0x00	; 0
    169c:	d0 06       	cpc	r13, r16
    169e:	88 f4       	brcc	.+34     	; 0x16c2 <__umoddi3+0x6f8>
    16a0:	1f ef       	ldi	r17, 0xFF	; 255
    16a2:	a1 16       	cp	r10, r17
    16a4:	b1 04       	cpc	r11, r1
    16a6:	c1 04       	cpc	r12, r1
    16a8:	d1 04       	cpc	r13, r1
    16aa:	39 f0       	breq	.+14     	; 0x16ba <__umoddi3+0x6f0>
    16ac:	30 f0       	brcs	.+12     	; 0x16ba <__umoddi3+0x6f0>
    16ae:	28 e0       	ldi	r18, 0x08	; 8
    16b0:	e2 2e       	mov	r14, r18
    16b2:	f1 2c       	mov	r15, r1
    16b4:	01 2d       	mov	r16, r1
    16b6:	11 2d       	mov	r17, r1
    16b8:	18 c0       	rjmp	.+48     	; 0x16ea <__umoddi3+0x720>
    16ba:	ee 24       	eor	r14, r14
    16bc:	ff 24       	eor	r15, r15
    16be:	87 01       	movw	r16, r14
    16c0:	14 c0       	rjmp	.+40     	; 0x16ea <__umoddi3+0x720>
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	a4 16       	cp	r10, r20
    16c6:	40 e0       	ldi	r20, 0x00	; 0
    16c8:	b4 06       	cpc	r11, r20
    16ca:	40 e0       	ldi	r20, 0x00	; 0
    16cc:	c4 06       	cpc	r12, r20
    16ce:	41 e0       	ldi	r20, 0x01	; 1
    16d0:	d4 06       	cpc	r13, r20
    16d2:	30 f0       	brcs	.+12     	; 0x16e0 <__umoddi3+0x716>
    16d4:	98 e1       	ldi	r25, 0x18	; 24
    16d6:	e9 2e       	mov	r14, r25
    16d8:	f1 2c       	mov	r15, r1
    16da:	01 2d       	mov	r16, r1
    16dc:	11 2d       	mov	r17, r1
    16de:	05 c0       	rjmp	.+10     	; 0x16ea <__umoddi3+0x720>
    16e0:	80 e1       	ldi	r24, 0x10	; 16
    16e2:	e8 2e       	mov	r14, r24
    16e4:	f1 2c       	mov	r15, r1
    16e6:	01 2d       	mov	r16, r1
    16e8:	11 2d       	mov	r17, r1
    16ea:	d6 01       	movw	r26, r12
    16ec:	c5 01       	movw	r24, r10
    16ee:	0e 2c       	mov	r0, r14
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <__umoddi3+0x730>
    16f2:	b6 95       	lsr	r27
    16f4:	a7 95       	ror	r26
    16f6:	97 95       	ror	r25
    16f8:	87 95       	ror	r24
    16fa:	0a 94       	dec	r0
    16fc:	d2 f7       	brpl	.-12     	; 0x16f2 <__umoddi3+0x728>
    16fe:	84 57       	subi	r24, 0x74	; 116
    1700:	9f 4f       	sbci	r25, 0xFF	; 255
    1702:	dc 01       	movw	r26, r24
    1704:	2c 91       	ld	r18, X
    1706:	80 e2       	ldi	r24, 0x20	; 32
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a0 e0       	ldi	r26, 0x00	; 0
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	8e 19       	sub	r24, r14
    1710:	9f 09       	sbc	r25, r15
    1712:	a0 0b       	sbc	r26, r16
    1714:	b1 0b       	sbc	r27, r17
    1716:	82 1b       	sub	r24, r18
    1718:	91 09       	sbc	r25, r1
    171a:	a1 09       	sbc	r26, r1
    171c:	b1 09       	sbc	r27, r1
    171e:	00 97       	sbiw	r24, 0x00	; 0
    1720:	a1 05       	cpc	r26, r1
    1722:	b1 05       	cpc	r27, r1
    1724:	09 f0       	breq	.+2      	; 0x1728 <__umoddi3+0x75e>
    1726:	4f c0       	rjmp	.+158    	; 0x17c6 <__umoddi3+0x7fc>
    1728:	a6 14       	cp	r10, r6
    172a:	b7 04       	cpc	r11, r7
    172c:	c8 04       	cpc	r12, r8
    172e:	d9 04       	cpc	r13, r9
    1730:	58 f0       	brcs	.+22     	; 0x1748 <__umoddi3+0x77e>
    1732:	6c 96       	adiw	r28, 0x1c	; 28
    1734:	ec ac       	ldd	r14, Y+60	; 0x3c
    1736:	fd ac       	ldd	r15, Y+61	; 0x3d
    1738:	0e ad       	ldd	r16, Y+62	; 0x3e
    173a:	1f ad       	ldd	r17, Y+63	; 0x3f
    173c:	6c 97       	sbiw	r28, 0x1c	; 28
    173e:	e2 14       	cp	r14, r2
    1740:	f3 04       	cpc	r15, r3
    1742:	04 05       	cpc	r16, r4
    1744:	15 05       	cpc	r17, r5
    1746:	68 f1       	brcs	.+90     	; 0x17a2 <__umoddi3+0x7d8>
    1748:	6c 96       	adiw	r28, 0x1c	; 28
    174a:	ec ac       	ldd	r14, Y+60	; 0x3c
    174c:	fd ac       	ldd	r15, Y+61	; 0x3d
    174e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1750:	1f ad       	ldd	r17, Y+63	; 0x3f
    1752:	6c 97       	sbiw	r28, 0x1c	; 28
    1754:	e2 18       	sub	r14, r2
    1756:	f3 08       	sbc	r15, r3
    1758:	04 09       	sbc	r16, r4
    175a:	15 09       	sbc	r17, r5
    175c:	a4 01       	movw	r20, r8
    175e:	93 01       	movw	r18, r6
    1760:	2a 19       	sub	r18, r10
    1762:	3b 09       	sbc	r19, r11
    1764:	4c 09       	sbc	r20, r12
    1766:	5d 09       	sbc	r21, r13
    1768:	aa 24       	eor	r10, r10
    176a:	bb 24       	eor	r11, r11
    176c:	65 01       	movw	r12, r10
    176e:	6c 96       	adiw	r28, 0x1c	; 28
    1770:	6c ad       	ldd	r22, Y+60	; 0x3c
    1772:	7d ad       	ldd	r23, Y+61	; 0x3d
    1774:	8e ad       	ldd	r24, Y+62	; 0x3e
    1776:	9f ad       	ldd	r25, Y+63	; 0x3f
    1778:	6c 97       	sbiw	r28, 0x1c	; 28
    177a:	6e 15       	cp	r22, r14
    177c:	7f 05       	cpc	r23, r15
    177e:	80 07       	cpc	r24, r16
    1780:	91 07       	cpc	r25, r17
    1782:	28 f4       	brcc	.+10     	; 0x178e <__umoddi3+0x7c4>
    1784:	b1 e0       	ldi	r27, 0x01	; 1
    1786:	ab 2e       	mov	r10, r27
    1788:	b1 2c       	mov	r11, r1
    178a:	c1 2c       	mov	r12, r1
    178c:	d1 2c       	mov	r13, r1
    178e:	da 01       	movw	r26, r20
    1790:	c9 01       	movw	r24, r18
    1792:	8a 19       	sub	r24, r10
    1794:	9b 09       	sbc	r25, r11
    1796:	ac 09       	sbc	r26, r12
    1798:	bd 09       	sbc	r27, r13
    179a:	8d ab       	std	Y+53, r24	; 0x35
    179c:	9e ab       	std	Y+54, r25	; 0x36
    179e:	af ab       	std	Y+55, r26	; 0x37
    17a0:	b8 af       	std	Y+56, r27	; 0x38
    17a2:	e9 8a       	std	Y+17, r14	; 0x11
    17a4:	fa 8a       	std	Y+18, r15	; 0x12
    17a6:	0b 8b       	std	Y+19, r16	; 0x13
    17a8:	1c 8b       	std	Y+20, r17	; 0x14
    17aa:	6d a8       	ldd	r6, Y+53	; 0x35
    17ac:	7e a8       	ldd	r7, Y+54	; 0x36
    17ae:	8f a8       	ldd	r8, Y+55	; 0x37
    17b0:	98 ac       	ldd	r9, Y+56	; 0x38
    17b2:	6d 8a       	std	Y+21, r6	; 0x15
    17b4:	7e 8a       	std	Y+22, r7	; 0x16
    17b6:	8f 8a       	std	Y+23, r8	; 0x17
    17b8:	98 8e       	std	Y+24, r9	; 0x18
    17ba:	2e 2d       	mov	r18, r14
    17bc:	3a 89       	ldd	r19, Y+18	; 0x12
    17be:	4b 89       	ldd	r20, Y+19	; 0x13
    17c0:	5c 89       	ldd	r21, Y+20	; 0x14
    17c2:	6d a9       	ldd	r22, Y+53	; 0x35
    17c4:	6a c2       	rjmp	.+1236   	; 0x1c9a <__umoddi3+0xcd0>
    17c6:	67 96       	adiw	r28, 0x17	; 23
    17c8:	8f af       	std	Y+63, r24	; 0x3f
    17ca:	67 97       	sbiw	r28, 0x17	; 23
    17cc:	a6 01       	movw	r20, r12
    17ce:	95 01       	movw	r18, r10
    17d0:	08 2e       	mov	r0, r24
    17d2:	04 c0       	rjmp	.+8      	; 0x17dc <__umoddi3+0x812>
    17d4:	22 0f       	add	r18, r18
    17d6:	33 1f       	adc	r19, r19
    17d8:	44 1f       	adc	r20, r20
    17da:	55 1f       	adc	r21, r21
    17dc:	0a 94       	dec	r0
    17de:	d2 f7       	brpl	.-12     	; 0x17d4 <__umoddi3+0x80a>
    17e0:	a0 e2       	ldi	r26, 0x20	; 32
    17e2:	aa 2e       	mov	r10, r26
    17e4:	a8 1a       	sub	r10, r24
    17e6:	66 96       	adiw	r28, 0x16	; 22
    17e8:	af ae       	std	Y+63, r10	; 0x3f
    17ea:	66 97       	sbiw	r28, 0x16	; 22
    17ec:	d2 01       	movw	r26, r4
    17ee:	c1 01       	movw	r24, r2
    17f0:	04 c0       	rjmp	.+8      	; 0x17fa <__umoddi3+0x830>
    17f2:	b6 95       	lsr	r27
    17f4:	a7 95       	ror	r26
    17f6:	97 95       	ror	r25
    17f8:	87 95       	ror	r24
    17fa:	aa 94       	dec	r10
    17fc:	d2 f7       	brpl	.-12     	; 0x17f2 <__umoddi3+0x828>
    17fe:	6c 01       	movw	r12, r24
    1800:	7d 01       	movw	r14, r26
    1802:	c2 2a       	or	r12, r18
    1804:	d3 2a       	or	r13, r19
    1806:	e4 2a       	or	r14, r20
    1808:	f5 2a       	or	r15, r21
    180a:	c9 a6       	std	Y+41, r12	; 0x29
    180c:	da a6       	std	Y+42, r13	; 0x2a
    180e:	eb a6       	std	Y+43, r14	; 0x2b
    1810:	fc a6       	std	Y+44, r15	; 0x2c
    1812:	82 01       	movw	r16, r4
    1814:	71 01       	movw	r14, r2
    1816:	67 96       	adiw	r28, 0x17	; 23
    1818:	0f ac       	ldd	r0, Y+63	; 0x3f
    181a:	67 97       	sbiw	r28, 0x17	; 23
    181c:	04 c0       	rjmp	.+8      	; 0x1826 <__umoddi3+0x85c>
    181e:	ee 0c       	add	r14, r14
    1820:	ff 1c       	adc	r15, r15
    1822:	00 1f       	adc	r16, r16
    1824:	11 1f       	adc	r17, r17
    1826:	0a 94       	dec	r0
    1828:	d2 f7       	brpl	.-12     	; 0x181e <__umoddi3+0x854>
    182a:	ed a2       	std	Y+37, r14	; 0x25
    182c:	fe a2       	std	Y+38, r15	; 0x26
    182e:	0f a3       	std	Y+39, r16	; 0x27
    1830:	18 a7       	std	Y+40, r17	; 0x28
    1832:	64 01       	movw	r12, r8
    1834:	53 01       	movw	r10, r6
    1836:	66 96       	adiw	r28, 0x16	; 22
    1838:	0f ac       	ldd	r0, Y+63	; 0x3f
    183a:	66 97       	sbiw	r28, 0x16	; 22
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <__umoddi3+0x87c>
    183e:	d6 94       	lsr	r13
    1840:	c7 94       	ror	r12
    1842:	b7 94       	ror	r11
    1844:	a7 94       	ror	r10
    1846:	0a 94       	dec	r0
    1848:	d2 f7       	brpl	.-12     	; 0x183e <__umoddi3+0x874>
    184a:	a4 01       	movw	r20, r8
    184c:	93 01       	movw	r18, r6
    184e:	67 96       	adiw	r28, 0x17	; 23
    1850:	0f ac       	ldd	r0, Y+63	; 0x3f
    1852:	67 97       	sbiw	r28, 0x17	; 23
    1854:	04 c0       	rjmp	.+8      	; 0x185e <__umoddi3+0x894>
    1856:	22 0f       	add	r18, r18
    1858:	33 1f       	adc	r19, r19
    185a:	44 1f       	adc	r20, r20
    185c:	55 1f       	adc	r21, r21
    185e:	0a 94       	dec	r0
    1860:	d2 f7       	brpl	.-12     	; 0x1856 <__umoddi3+0x88c>
    1862:	6c 96       	adiw	r28, 0x1c	; 28
    1864:	8c ad       	ldd	r24, Y+60	; 0x3c
    1866:	9d ad       	ldd	r25, Y+61	; 0x3d
    1868:	ae ad       	ldd	r26, Y+62	; 0x3e
    186a:	bf ad       	ldd	r27, Y+63	; 0x3f
    186c:	6c 97       	sbiw	r28, 0x1c	; 28
    186e:	66 96       	adiw	r28, 0x16	; 22
    1870:	0f ac       	ldd	r0, Y+63	; 0x3f
    1872:	66 97       	sbiw	r28, 0x16	; 22
    1874:	04 c0       	rjmp	.+8      	; 0x187e <__umoddi3+0x8b4>
    1876:	b6 95       	lsr	r27
    1878:	a7 95       	ror	r26
    187a:	97 95       	ror	r25
    187c:	87 95       	ror	r24
    187e:	0a 94       	dec	r0
    1880:	d2 f7       	brpl	.-12     	; 0x1876 <__umoddi3+0x8ac>
    1882:	3c 01       	movw	r6, r24
    1884:	4d 01       	movw	r8, r26
    1886:	62 2a       	or	r6, r18
    1888:	73 2a       	or	r7, r19
    188a:	84 2a       	or	r8, r20
    188c:	95 2a       	or	r9, r21
    188e:	69 a2       	std	Y+33, r6	; 0x21
    1890:	7a a2       	std	Y+34, r7	; 0x22
    1892:	8b a2       	std	Y+35, r8	; 0x23
    1894:	9c a2       	std	Y+36, r9	; 0x24
    1896:	6c 96       	adiw	r28, 0x1c	; 28
    1898:	ec ac       	ldd	r14, Y+60	; 0x3c
    189a:	fd ac       	ldd	r15, Y+61	; 0x3d
    189c:	0e ad       	ldd	r16, Y+62	; 0x3e
    189e:	1f ad       	ldd	r17, Y+63	; 0x3f
    18a0:	6c 97       	sbiw	r28, 0x1c	; 28
    18a2:	67 96       	adiw	r28, 0x17	; 23
    18a4:	0f ac       	ldd	r0, Y+63	; 0x3f
    18a6:	67 97       	sbiw	r28, 0x17	; 23
    18a8:	04 c0       	rjmp	.+8      	; 0x18b2 <__umoddi3+0x8e8>
    18aa:	ee 0c       	add	r14, r14
    18ac:	ff 1c       	adc	r15, r15
    18ae:	00 1f       	adc	r16, r16
    18b0:	11 1f       	adc	r17, r17
    18b2:	0a 94       	dec	r0
    18b4:	d2 f7       	brpl	.-12     	; 0x18aa <__umoddi3+0x8e0>
    18b6:	ed 8e       	std	Y+29, r14	; 0x1d
    18b8:	fe 8e       	std	Y+30, r15	; 0x1e
    18ba:	0f 8f       	std	Y+31, r16	; 0x1f
    18bc:	18 a3       	std	Y+32, r17	; 0x20
    18be:	49 a5       	ldd	r20, Y+41	; 0x29
    18c0:	5a a5       	ldd	r21, Y+42	; 0x2a
    18c2:	6b a5       	ldd	r22, Y+43	; 0x2b
    18c4:	7c a5       	ldd	r23, Y+44	; 0x2c
    18c6:	3b 01       	movw	r6, r22
    18c8:	88 24       	eor	r8, r8
    18ca:	99 24       	eor	r9, r9
    18cc:	60 70       	andi	r22, 0x00	; 0
    18ce:	70 70       	andi	r23, 0x00	; 0
    18d0:	2d 96       	adiw	r28, 0x0d	; 13
    18d2:	4c af       	std	Y+60, r20	; 0x3c
    18d4:	5d af       	std	Y+61, r21	; 0x3d
    18d6:	6e af       	std	Y+62, r22	; 0x3e
    18d8:	7f af       	std	Y+63, r23	; 0x3f
    18da:	2d 97       	sbiw	r28, 0x0d	; 13
    18dc:	c6 01       	movw	r24, r12
    18de:	b5 01       	movw	r22, r10
    18e0:	a4 01       	movw	r20, r8
    18e2:	93 01       	movw	r18, r6
    18e4:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    18e8:	7b 01       	movw	r14, r22
    18ea:	8c 01       	movw	r16, r24
    18ec:	c6 01       	movw	r24, r12
    18ee:	b5 01       	movw	r22, r10
    18f0:	a4 01       	movw	r20, r8
    18f2:	93 01       	movw	r18, r6
    18f4:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    18f8:	c9 01       	movw	r24, r18
    18fa:	da 01       	movw	r26, r20
    18fc:	1c 01       	movw	r2, r24
    18fe:	2d 01       	movw	r4, r26
    1900:	c2 01       	movw	r24, r4
    1902:	b1 01       	movw	r22, r2
    1904:	2d 96       	adiw	r28, 0x0d	; 13
    1906:	2c ad       	ldd	r18, Y+60	; 0x3c
    1908:	3d ad       	ldd	r19, Y+61	; 0x3d
    190a:	4e ad       	ldd	r20, Y+62	; 0x3e
    190c:	5f ad       	ldd	r21, Y+63	; 0x3f
    190e:	2d 97       	sbiw	r28, 0x0d	; 13
    1910:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    1914:	9b 01       	movw	r18, r22
    1916:	ac 01       	movw	r20, r24
    1918:	87 01       	movw	r16, r14
    191a:	ff 24       	eor	r15, r15
    191c:	ee 24       	eor	r14, r14
    191e:	a9 a0       	ldd	r10, Y+33	; 0x21
    1920:	ba a0       	ldd	r11, Y+34	; 0x22
    1922:	cb a0       	ldd	r12, Y+35	; 0x23
    1924:	dc a0       	ldd	r13, Y+36	; 0x24
    1926:	c6 01       	movw	r24, r12
    1928:	aa 27       	eor	r26, r26
    192a:	bb 27       	eor	r27, r27
    192c:	57 01       	movw	r10, r14
    192e:	68 01       	movw	r12, r16
    1930:	a8 2a       	or	r10, r24
    1932:	b9 2a       	or	r11, r25
    1934:	ca 2a       	or	r12, r26
    1936:	db 2a       	or	r13, r27
    1938:	a2 16       	cp	r10, r18
    193a:	b3 06       	cpc	r11, r19
    193c:	c4 06       	cpc	r12, r20
    193e:	d5 06       	cpc	r13, r21
    1940:	00 f5       	brcc	.+64     	; 0x1982 <__umoddi3+0x9b8>
    1942:	08 94       	sec
    1944:	21 08       	sbc	r2, r1
    1946:	31 08       	sbc	r3, r1
    1948:	41 08       	sbc	r4, r1
    194a:	51 08       	sbc	r5, r1
    194c:	e9 a4       	ldd	r14, Y+41	; 0x29
    194e:	fa a4       	ldd	r15, Y+42	; 0x2a
    1950:	0b a5       	ldd	r16, Y+43	; 0x2b
    1952:	1c a5       	ldd	r17, Y+44	; 0x2c
    1954:	ae 0c       	add	r10, r14
    1956:	bf 1c       	adc	r11, r15
    1958:	c0 1e       	adc	r12, r16
    195a:	d1 1e       	adc	r13, r17
    195c:	ae 14       	cp	r10, r14
    195e:	bf 04       	cpc	r11, r15
    1960:	c0 06       	cpc	r12, r16
    1962:	d1 06       	cpc	r13, r17
    1964:	70 f0       	brcs	.+28     	; 0x1982 <__umoddi3+0x9b8>
    1966:	a2 16       	cp	r10, r18
    1968:	b3 06       	cpc	r11, r19
    196a:	c4 06       	cpc	r12, r20
    196c:	d5 06       	cpc	r13, r21
    196e:	48 f4       	brcc	.+18     	; 0x1982 <__umoddi3+0x9b8>
    1970:	08 94       	sec
    1972:	21 08       	sbc	r2, r1
    1974:	31 08       	sbc	r3, r1
    1976:	41 08       	sbc	r4, r1
    1978:	51 08       	sbc	r5, r1
    197a:	ae 0c       	add	r10, r14
    197c:	bf 1c       	adc	r11, r15
    197e:	c0 1e       	adc	r12, r16
    1980:	d1 1e       	adc	r13, r17
    1982:	a2 1a       	sub	r10, r18
    1984:	b3 0a       	sbc	r11, r19
    1986:	c4 0a       	sbc	r12, r20
    1988:	d5 0a       	sbc	r13, r21
    198a:	c6 01       	movw	r24, r12
    198c:	b5 01       	movw	r22, r10
    198e:	a4 01       	movw	r20, r8
    1990:	93 01       	movw	r18, r6
    1992:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    1996:	7b 01       	movw	r14, r22
    1998:	8c 01       	movw	r16, r24
    199a:	c6 01       	movw	r24, r12
    199c:	b5 01       	movw	r22, r10
    199e:	a4 01       	movw	r20, r8
    19a0:	93 01       	movw	r18, r6
    19a2:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <__udivmodsi4>
    19a6:	c9 01       	movw	r24, r18
    19a8:	da 01       	movw	r26, r20
    19aa:	3c 01       	movw	r6, r24
    19ac:	4d 01       	movw	r8, r26
    19ae:	c4 01       	movw	r24, r8
    19b0:	b3 01       	movw	r22, r6
    19b2:	2d 96       	adiw	r28, 0x0d	; 13
    19b4:	2c ad       	ldd	r18, Y+60	; 0x3c
    19b6:	3d ad       	ldd	r19, Y+61	; 0x3d
    19b8:	4e ad       	ldd	r20, Y+62	; 0x3e
    19ba:	5f ad       	ldd	r21, Y+63	; 0x3f
    19bc:	2d 97       	sbiw	r28, 0x0d	; 13
    19be:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    19c2:	9b 01       	movw	r18, r22
    19c4:	ac 01       	movw	r20, r24
    19c6:	87 01       	movw	r16, r14
    19c8:	ff 24       	eor	r15, r15
    19ca:	ee 24       	eor	r14, r14
    19cc:	89 a1       	ldd	r24, Y+33	; 0x21
    19ce:	9a a1       	ldd	r25, Y+34	; 0x22
    19d0:	ab a1       	ldd	r26, Y+35	; 0x23
    19d2:	bc a1       	ldd	r27, Y+36	; 0x24
    19d4:	a0 70       	andi	r26, 0x00	; 0
    19d6:	b0 70       	andi	r27, 0x00	; 0
    19d8:	57 01       	movw	r10, r14
    19da:	68 01       	movw	r12, r16
    19dc:	a8 2a       	or	r10, r24
    19de:	b9 2a       	or	r11, r25
    19e0:	ca 2a       	or	r12, r26
    19e2:	db 2a       	or	r13, r27
    19e4:	a2 16       	cp	r10, r18
    19e6:	b3 06       	cpc	r11, r19
    19e8:	c4 06       	cpc	r12, r20
    19ea:	d5 06       	cpc	r13, r21
    19ec:	00 f5       	brcc	.+64     	; 0x1a2e <__umoddi3+0xa64>
    19ee:	08 94       	sec
    19f0:	61 08       	sbc	r6, r1
    19f2:	71 08       	sbc	r7, r1
    19f4:	81 08       	sbc	r8, r1
    19f6:	91 08       	sbc	r9, r1
    19f8:	69 a5       	ldd	r22, Y+41	; 0x29
    19fa:	7a a5       	ldd	r23, Y+42	; 0x2a
    19fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    19fe:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a00:	a6 0e       	add	r10, r22
    1a02:	b7 1e       	adc	r11, r23
    1a04:	c8 1e       	adc	r12, r24
    1a06:	d9 1e       	adc	r13, r25
    1a08:	a6 16       	cp	r10, r22
    1a0a:	b7 06       	cpc	r11, r23
    1a0c:	c8 06       	cpc	r12, r24
    1a0e:	d9 06       	cpc	r13, r25
    1a10:	70 f0       	brcs	.+28     	; 0x1a2e <__umoddi3+0xa64>
    1a12:	a2 16       	cp	r10, r18
    1a14:	b3 06       	cpc	r11, r19
    1a16:	c4 06       	cpc	r12, r20
    1a18:	d5 06       	cpc	r13, r21
    1a1a:	48 f4       	brcc	.+18     	; 0x1a2e <__umoddi3+0xa64>
    1a1c:	08 94       	sec
    1a1e:	61 08       	sbc	r6, r1
    1a20:	71 08       	sbc	r7, r1
    1a22:	81 08       	sbc	r8, r1
    1a24:	91 08       	sbc	r9, r1
    1a26:	a6 0e       	add	r10, r22
    1a28:	b7 1e       	adc	r11, r23
    1a2a:	c8 1e       	adc	r12, r24
    1a2c:	d9 1e       	adc	r13, r25
    1a2e:	d6 01       	movw	r26, r12
    1a30:	c5 01       	movw	r24, r10
    1a32:	82 1b       	sub	r24, r18
    1a34:	93 0b       	sbc	r25, r19
    1a36:	a4 0b       	sbc	r26, r20
    1a38:	b5 0b       	sbc	r27, r21
    1a3a:	89 8f       	std	Y+25, r24	; 0x19
    1a3c:	9a 8f       	std	Y+26, r25	; 0x1a
    1a3e:	ab 8f       	std	Y+27, r26	; 0x1b
    1a40:	bc 8f       	std	Y+28, r27	; 0x1c
    1a42:	d1 01       	movw	r26, r2
    1a44:	99 27       	eor	r25, r25
    1a46:	88 27       	eor	r24, r24
    1a48:	84 01       	movw	r16, r8
    1a4a:	73 01       	movw	r14, r6
    1a4c:	e8 2a       	or	r14, r24
    1a4e:	f9 2a       	or	r15, r25
    1a50:	0a 2b       	or	r16, r26
    1a52:	1b 2b       	or	r17, r27
    1a54:	4f ef       	ldi	r20, 0xFF	; 255
    1a56:	a4 2e       	mov	r10, r20
    1a58:	4f ef       	ldi	r20, 0xFF	; 255
    1a5a:	b4 2e       	mov	r11, r20
    1a5c:	c1 2c       	mov	r12, r1
    1a5e:	d1 2c       	mov	r13, r1
    1a60:	ae 20       	and	r10, r14
    1a62:	bf 20       	and	r11, r15
    1a64:	c0 22       	and	r12, r16
    1a66:	d1 22       	and	r13, r17
    1a68:	78 01       	movw	r14, r16
    1a6a:	00 27       	eor	r16, r16
    1a6c:	11 27       	eor	r17, r17
    1a6e:	6d a0       	ldd	r6, Y+37	; 0x25
    1a70:	7e a0       	ldd	r7, Y+38	; 0x26
    1a72:	8f a0       	ldd	r8, Y+39	; 0x27
    1a74:	98 a4       	ldd	r9, Y+40	; 0x28
    1a76:	4f ef       	ldi	r20, 0xFF	; 255
    1a78:	5f ef       	ldi	r21, 0xFF	; 255
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	70 e0       	ldi	r23, 0x00	; 0
    1a7e:	64 22       	and	r6, r20
    1a80:	75 22       	and	r7, r21
    1a82:	86 22       	and	r8, r22
    1a84:	97 22       	and	r9, r23
    1a86:	8d a1       	ldd	r24, Y+37	; 0x25
    1a88:	9e a1       	ldd	r25, Y+38	; 0x26
    1a8a:	af a1       	ldd	r26, Y+39	; 0x27
    1a8c:	b8 a5       	ldd	r27, Y+40	; 0x28
    1a8e:	bd 01       	movw	r22, r26
    1a90:	88 27       	eor	r24, r24
    1a92:	99 27       	eor	r25, r25
    1a94:	65 96       	adiw	r28, 0x15	; 21
    1a96:	6c af       	std	Y+60, r22	; 0x3c
    1a98:	7d af       	std	Y+61, r23	; 0x3d
    1a9a:	8e af       	std	Y+62, r24	; 0x3e
    1a9c:	9f af       	std	Y+63, r25	; 0x3f
    1a9e:	65 97       	sbiw	r28, 0x15	; 21
    1aa0:	c6 01       	movw	r24, r12
    1aa2:	b5 01       	movw	r22, r10
    1aa4:	a4 01       	movw	r20, r8
    1aa6:	93 01       	movw	r18, r6
    1aa8:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    1aac:	61 96       	adiw	r28, 0x11	; 17
    1aae:	6c af       	std	Y+60, r22	; 0x3c
    1ab0:	7d af       	std	Y+61, r23	; 0x3d
    1ab2:	8e af       	std	Y+62, r24	; 0x3e
    1ab4:	9f af       	std	Y+63, r25	; 0x3f
    1ab6:	61 97       	sbiw	r28, 0x11	; 17
    1ab8:	c6 01       	movw	r24, r12
    1aba:	b5 01       	movw	r22, r10
    1abc:	65 96       	adiw	r28, 0x15	; 21
    1abe:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ac0:	3d ad       	ldd	r19, Y+61	; 0x3d
    1ac2:	4e ad       	ldd	r20, Y+62	; 0x3e
    1ac4:	5f ad       	ldd	r21, Y+63	; 0x3f
    1ac6:	65 97       	sbiw	r28, 0x15	; 21
    1ac8:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    1acc:	1b 01       	movw	r2, r22
    1ace:	2c 01       	movw	r4, r24
    1ad0:	c8 01       	movw	r24, r16
    1ad2:	b7 01       	movw	r22, r14
    1ad4:	a4 01       	movw	r20, r8
    1ad6:	93 01       	movw	r18, r6
    1ad8:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    1adc:	5b 01       	movw	r10, r22
    1ade:	6c 01       	movw	r12, r24
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	b7 01       	movw	r22, r14
    1ae4:	65 96       	adiw	r28, 0x15	; 21
    1ae6:	2c ad       	ldd	r18, Y+60	; 0x3c
    1ae8:	3d ad       	ldd	r19, Y+61	; 0x3d
    1aea:	4e ad       	ldd	r20, Y+62	; 0x3e
    1aec:	5f ad       	ldd	r21, Y+63	; 0x3f
    1aee:	65 97       	sbiw	r28, 0x15	; 21
    1af0:	0e 94 16 2e 	call	0x5c2c	; 0x5c2c <__mulsi3>
    1af4:	7b 01       	movw	r14, r22
    1af6:	8c 01       	movw	r16, r24
    1af8:	a6 01       	movw	r20, r12
    1afa:	95 01       	movw	r18, r10
    1afc:	22 0d       	add	r18, r2
    1afe:	33 1d       	adc	r19, r3
    1b00:	44 1d       	adc	r20, r4
    1b02:	55 1d       	adc	r21, r5
    1b04:	61 96       	adiw	r28, 0x11	; 17
    1b06:	6c ac       	ldd	r6, Y+60	; 0x3c
    1b08:	7d ac       	ldd	r7, Y+61	; 0x3d
    1b0a:	8e ac       	ldd	r8, Y+62	; 0x3e
    1b0c:	9f ac       	ldd	r9, Y+63	; 0x3f
    1b0e:	61 97       	sbiw	r28, 0x11	; 17
    1b10:	c4 01       	movw	r24, r8
    1b12:	aa 27       	eor	r26, r26
    1b14:	bb 27       	eor	r27, r27
    1b16:	28 0f       	add	r18, r24
    1b18:	39 1f       	adc	r19, r25
    1b1a:	4a 1f       	adc	r20, r26
    1b1c:	5b 1f       	adc	r21, r27
    1b1e:	2a 15       	cp	r18, r10
    1b20:	3b 05       	cpc	r19, r11
    1b22:	4c 05       	cpc	r20, r12
    1b24:	5d 05       	cpc	r21, r13
    1b26:	48 f4       	brcc	.+18     	; 0x1b3a <__umoddi3+0xb70>
    1b28:	81 2c       	mov	r8, r1
    1b2a:	91 2c       	mov	r9, r1
    1b2c:	e1 e0       	ldi	r30, 0x01	; 1
    1b2e:	ae 2e       	mov	r10, r30
    1b30:	b1 2c       	mov	r11, r1
    1b32:	e8 0c       	add	r14, r8
    1b34:	f9 1c       	adc	r15, r9
    1b36:	0a 1d       	adc	r16, r10
    1b38:	1b 1d       	adc	r17, r11
    1b3a:	ca 01       	movw	r24, r20
    1b3c:	aa 27       	eor	r26, r26
    1b3e:	bb 27       	eor	r27, r27
    1b40:	57 01       	movw	r10, r14
    1b42:	68 01       	movw	r12, r16
    1b44:	a8 0e       	add	r10, r24
    1b46:	b9 1e       	adc	r11, r25
    1b48:	ca 1e       	adc	r12, r26
    1b4a:	db 1e       	adc	r13, r27
    1b4c:	a9 01       	movw	r20, r18
    1b4e:	33 27       	eor	r19, r19
    1b50:	22 27       	eor	r18, r18
    1b52:	61 96       	adiw	r28, 0x11	; 17
    1b54:	8c ad       	ldd	r24, Y+60	; 0x3c
    1b56:	9d ad       	ldd	r25, Y+61	; 0x3d
    1b58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b5c:	61 97       	sbiw	r28, 0x11	; 17
    1b5e:	a0 70       	andi	r26, 0x00	; 0
    1b60:	b0 70       	andi	r27, 0x00	; 0
    1b62:	28 0f       	add	r18, r24
    1b64:	39 1f       	adc	r19, r25
    1b66:	4a 1f       	adc	r20, r26
    1b68:	5b 1f       	adc	r21, r27
    1b6a:	e9 8c       	ldd	r14, Y+25	; 0x19
    1b6c:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1b6e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1b70:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1b72:	ea 14       	cp	r14, r10
    1b74:	fb 04       	cpc	r15, r11
    1b76:	0c 05       	cpc	r16, r12
    1b78:	1d 05       	cpc	r17, r13
    1b7a:	70 f0       	brcs	.+28     	; 0x1b98 <__umoddi3+0xbce>
    1b7c:	ae 14       	cp	r10, r14
    1b7e:	bf 04       	cpc	r11, r15
    1b80:	c0 06       	cpc	r12, r16
    1b82:	d1 06       	cpc	r13, r17
    1b84:	69 f5       	brne	.+90     	; 0x1be0 <__umoddi3+0xc16>
    1b86:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b88:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b8c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b8e:	62 17       	cp	r22, r18
    1b90:	73 07       	cpc	r23, r19
    1b92:	84 07       	cpc	r24, r20
    1b94:	95 07       	cpc	r25, r21
    1b96:	20 f5       	brcc	.+72     	; 0x1be0 <__umoddi3+0xc16>
    1b98:	da 01       	movw	r26, r20
    1b9a:	c9 01       	movw	r24, r18
    1b9c:	6d a0       	ldd	r6, Y+37	; 0x25
    1b9e:	7e a0       	ldd	r7, Y+38	; 0x26
    1ba0:	8f a0       	ldd	r8, Y+39	; 0x27
    1ba2:	98 a4       	ldd	r9, Y+40	; 0x28
    1ba4:	86 19       	sub	r24, r6
    1ba6:	97 09       	sbc	r25, r7
    1ba8:	a8 09       	sbc	r26, r8
    1baa:	b9 09       	sbc	r27, r9
    1bac:	e9 a4       	ldd	r14, Y+41	; 0x29
    1bae:	fa a4       	ldd	r15, Y+42	; 0x2a
    1bb0:	0b a5       	ldd	r16, Y+43	; 0x2b
    1bb2:	1c a5       	ldd	r17, Y+44	; 0x2c
    1bb4:	ae 18       	sub	r10, r14
    1bb6:	bf 08       	sbc	r11, r15
    1bb8:	c0 0a       	sbc	r12, r16
    1bba:	d1 0a       	sbc	r13, r17
    1bbc:	ee 24       	eor	r14, r14
    1bbe:	ff 24       	eor	r15, r15
    1bc0:	87 01       	movw	r16, r14
    1bc2:	28 17       	cp	r18, r24
    1bc4:	39 07       	cpc	r19, r25
    1bc6:	4a 07       	cpc	r20, r26
    1bc8:	5b 07       	cpc	r21, r27
    1bca:	28 f4       	brcc	.+10     	; 0x1bd6 <__umoddi3+0xc0c>
    1bcc:	21 e0       	ldi	r18, 0x01	; 1
    1bce:	e2 2e       	mov	r14, r18
    1bd0:	f1 2c       	mov	r15, r1
    1bd2:	01 2d       	mov	r16, r1
    1bd4:	11 2d       	mov	r17, r1
    1bd6:	ae 18       	sub	r10, r14
    1bd8:	bf 08       	sbc	r11, r15
    1bda:	c0 0a       	sbc	r12, r16
    1bdc:	d1 0a       	sbc	r13, r17
    1bde:	02 c0       	rjmp	.+4      	; 0x1be4 <__umoddi3+0xc1a>
    1be0:	da 01       	movw	r26, r20
    1be2:	c9 01       	movw	r24, r18
    1be4:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1be6:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1be8:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1bea:	98 a0       	ldd	r9, Y+32	; 0x20
    1bec:	68 1a       	sub	r6, r24
    1bee:	79 0a       	sbc	r7, r25
    1bf0:	8a 0a       	sbc	r8, r26
    1bf2:	9b 0a       	sbc	r9, r27
    1bf4:	49 8d       	ldd	r20, Y+25	; 0x19
    1bf6:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1bf8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1bfa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1bfc:	4a 19       	sub	r20, r10
    1bfe:	5b 09       	sbc	r21, r11
    1c00:	6c 09       	sbc	r22, r12
    1c02:	7d 09       	sbc	r23, r13
    1c04:	5a 01       	movw	r10, r20
    1c06:	6b 01       	movw	r12, r22
    1c08:	22 24       	eor	r2, r2
    1c0a:	33 24       	eor	r3, r3
    1c0c:	21 01       	movw	r4, r2
    1c0e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1c10:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1c12:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c14:	98 a1       	ldd	r25, Y+32	; 0x20
    1c16:	66 15       	cp	r22, r6
    1c18:	77 05       	cpc	r23, r7
    1c1a:	88 05       	cpc	r24, r8
    1c1c:	99 05       	cpc	r25, r9
    1c1e:	28 f4       	brcc	.+10     	; 0x1c2a <__umoddi3+0xc60>
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	28 2e       	mov	r2, r24
    1c24:	31 2c       	mov	r3, r1
    1c26:	41 2c       	mov	r4, r1
    1c28:	51 2c       	mov	r5, r1
    1c2a:	86 01       	movw	r16, r12
    1c2c:	75 01       	movw	r14, r10
    1c2e:	e2 18       	sub	r14, r2
    1c30:	f3 08       	sbc	r15, r3
    1c32:	04 09       	sbc	r16, r4
    1c34:	15 09       	sbc	r17, r5
    1c36:	a8 01       	movw	r20, r16
    1c38:	97 01       	movw	r18, r14
    1c3a:	66 96       	adiw	r28, 0x16	; 22
    1c3c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c3e:	66 97       	sbiw	r28, 0x16	; 22
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <__umoddi3+0xc80>
    1c42:	22 0f       	add	r18, r18
    1c44:	33 1f       	adc	r19, r19
    1c46:	44 1f       	adc	r20, r20
    1c48:	55 1f       	adc	r21, r21
    1c4a:	0a 94       	dec	r0
    1c4c:	d2 f7       	brpl	.-12     	; 0x1c42 <__umoddi3+0xc78>
    1c4e:	d4 01       	movw	r26, r8
    1c50:	c3 01       	movw	r24, r6
    1c52:	67 96       	adiw	r28, 0x17	; 23
    1c54:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c56:	67 97       	sbiw	r28, 0x17	; 23
    1c58:	04 c0       	rjmp	.+8      	; 0x1c62 <__umoddi3+0xc98>
    1c5a:	b6 95       	lsr	r27
    1c5c:	a7 95       	ror	r26
    1c5e:	97 95       	ror	r25
    1c60:	87 95       	ror	r24
    1c62:	0a 94       	dec	r0
    1c64:	d2 f7       	brpl	.-12     	; 0x1c5a <__umoddi3+0xc90>
    1c66:	28 2b       	or	r18, r24
    1c68:	39 2b       	or	r19, r25
    1c6a:	4a 2b       	or	r20, r26
    1c6c:	5b 2b       	or	r21, r27
    1c6e:	29 8b       	std	Y+17, r18	; 0x11
    1c70:	3a 8b       	std	Y+18, r19	; 0x12
    1c72:	4b 8b       	std	Y+19, r20	; 0x13
    1c74:	5c 8b       	std	Y+20, r21	; 0x14
    1c76:	67 96       	adiw	r28, 0x17	; 23
    1c78:	0f ac       	ldd	r0, Y+63	; 0x3f
    1c7a:	67 97       	sbiw	r28, 0x17	; 23
    1c7c:	04 c0       	rjmp	.+8      	; 0x1c86 <__umoddi3+0xcbc>
    1c7e:	16 95       	lsr	r17
    1c80:	07 95       	ror	r16
    1c82:	f7 94       	ror	r15
    1c84:	e7 94       	ror	r14
    1c86:	0a 94       	dec	r0
    1c88:	d2 f7       	brpl	.-12     	; 0x1c7e <__umoddi3+0xcb4>
    1c8a:	ed 8a       	std	Y+21, r14	; 0x15
    1c8c:	fe 8a       	std	Y+22, r15	; 0x16
    1c8e:	0f 8b       	std	Y+23, r16	; 0x17
    1c90:	18 8f       	std	Y+24, r17	; 0x18
    1c92:	3a 89       	ldd	r19, Y+18	; 0x12
    1c94:	4b 89       	ldd	r20, Y+19	; 0x13
    1c96:	5c 89       	ldd	r21, Y+20	; 0x14
    1c98:	6e 2d       	mov	r22, r14
    1c9a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c9c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c9e:	98 8d       	ldd	r25, Y+24	; 0x18
    1ca0:	c5 5a       	subi	r28, 0xA5	; 165
    1ca2:	df 4f       	sbci	r29, 0xFF	; 255
    1ca4:	e2 e1       	ldi	r30, 0x12	; 18
    1ca6:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <__epilogue_restores__>

00001caa <_fpadd_parts>:
    1caa:	a0 e0       	ldi	r26, 0x00	; 0
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e5       	ldi	r30, 0x5B	; 91
    1cb0:	fe e0       	ldi	r31, 0x0E	; 14
    1cb2:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <__prologue_saves__>
    1cb6:	dc 01       	movw	r26, r24
    1cb8:	2b 01       	movw	r4, r22
    1cba:	fa 01       	movw	r30, r20
    1cbc:	9c 91       	ld	r25, X
    1cbe:	92 30       	cpi	r25, 0x02	; 2
    1cc0:	08 f4       	brcc	.+2      	; 0x1cc4 <_fpadd_parts+0x1a>
    1cc2:	39 c1       	rjmp	.+626    	; 0x1f36 <_fpadd_parts+0x28c>
    1cc4:	eb 01       	movw	r28, r22
    1cc6:	88 81       	ld	r24, Y
    1cc8:	82 30       	cpi	r24, 0x02	; 2
    1cca:	08 f4       	brcc	.+2      	; 0x1cce <_fpadd_parts+0x24>
    1ccc:	33 c1       	rjmp	.+614    	; 0x1f34 <_fpadd_parts+0x28a>
    1cce:	94 30       	cpi	r25, 0x04	; 4
    1cd0:	69 f4       	brne	.+26     	; 0x1cec <_fpadd_parts+0x42>
    1cd2:	84 30       	cpi	r24, 0x04	; 4
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <_fpadd_parts+0x2e>
    1cd6:	2f c1       	rjmp	.+606    	; 0x1f36 <_fpadd_parts+0x28c>
    1cd8:	11 96       	adiw	r26, 0x01	; 1
    1cda:	9c 91       	ld	r25, X
    1cdc:	11 97       	sbiw	r26, 0x01	; 1
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	98 17       	cp	r25, r24
    1ce2:	09 f4       	brne	.+2      	; 0x1ce6 <_fpadd_parts+0x3c>
    1ce4:	28 c1       	rjmp	.+592    	; 0x1f36 <_fpadd_parts+0x28c>
    1ce6:	a4 e8       	ldi	r26, 0x84	; 132
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	25 c1       	rjmp	.+586    	; 0x1f36 <_fpadd_parts+0x28c>
    1cec:	84 30       	cpi	r24, 0x04	; 4
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <_fpadd_parts+0x48>
    1cf0:	21 c1       	rjmp	.+578    	; 0x1f34 <_fpadd_parts+0x28a>
    1cf2:	82 30       	cpi	r24, 0x02	; 2
    1cf4:	a9 f4       	brne	.+42     	; 0x1d20 <_fpadd_parts+0x76>
    1cf6:	92 30       	cpi	r25, 0x02	; 2
    1cf8:	09 f0       	breq	.+2      	; 0x1cfc <_fpadd_parts+0x52>
    1cfa:	1d c1       	rjmp	.+570    	; 0x1f36 <_fpadd_parts+0x28c>
    1cfc:	9a 01       	movw	r18, r20
    1cfe:	ad 01       	movw	r20, r26
    1d00:	88 e0       	ldi	r24, 0x08	; 8
    1d02:	ea 01       	movw	r28, r20
    1d04:	09 90       	ld	r0, Y+
    1d06:	ae 01       	movw	r20, r28
    1d08:	e9 01       	movw	r28, r18
    1d0a:	09 92       	st	Y+, r0
    1d0c:	9e 01       	movw	r18, r28
    1d0e:	81 50       	subi	r24, 0x01	; 1
    1d10:	c1 f7       	brne	.-16     	; 0x1d02 <_fpadd_parts+0x58>
    1d12:	e2 01       	movw	r28, r4
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	11 96       	adiw	r26, 0x01	; 1
    1d18:	9c 91       	ld	r25, X
    1d1a:	89 23       	and	r24, r25
    1d1c:	81 83       	std	Z+1, r24	; 0x01
    1d1e:	08 c1       	rjmp	.+528    	; 0x1f30 <_fpadd_parts+0x286>
    1d20:	92 30       	cpi	r25, 0x02	; 2
    1d22:	09 f4       	brne	.+2      	; 0x1d26 <_fpadd_parts+0x7c>
    1d24:	07 c1       	rjmp	.+526    	; 0x1f34 <_fpadd_parts+0x28a>
    1d26:	12 96       	adiw	r26, 0x02	; 2
    1d28:	2d 90       	ld	r2, X+
    1d2a:	3c 90       	ld	r3, X
    1d2c:	13 97       	sbiw	r26, 0x03	; 3
    1d2e:	eb 01       	movw	r28, r22
    1d30:	8a 81       	ldd	r24, Y+2	; 0x02
    1d32:	9b 81       	ldd	r25, Y+3	; 0x03
    1d34:	14 96       	adiw	r26, 0x04	; 4
    1d36:	ad 90       	ld	r10, X+
    1d38:	bd 90       	ld	r11, X+
    1d3a:	cd 90       	ld	r12, X+
    1d3c:	dc 90       	ld	r13, X
    1d3e:	17 97       	sbiw	r26, 0x07	; 7
    1d40:	ec 80       	ldd	r14, Y+4	; 0x04
    1d42:	fd 80       	ldd	r15, Y+5	; 0x05
    1d44:	0e 81       	ldd	r16, Y+6	; 0x06
    1d46:	1f 81       	ldd	r17, Y+7	; 0x07
    1d48:	91 01       	movw	r18, r2
    1d4a:	28 1b       	sub	r18, r24
    1d4c:	39 0b       	sbc	r19, r25
    1d4e:	b9 01       	movw	r22, r18
    1d50:	37 ff       	sbrs	r19, 7
    1d52:	04 c0       	rjmp	.+8      	; 0x1d5c <_fpadd_parts+0xb2>
    1d54:	66 27       	eor	r22, r22
    1d56:	77 27       	eor	r23, r23
    1d58:	62 1b       	sub	r22, r18
    1d5a:	73 0b       	sbc	r23, r19
    1d5c:	60 32       	cpi	r22, 0x20	; 32
    1d5e:	71 05       	cpc	r23, r1
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <_fpadd_parts+0xba>
    1d62:	61 c0       	rjmp	.+194    	; 0x1e26 <_fpadd_parts+0x17c>
    1d64:	12 16       	cp	r1, r18
    1d66:	13 06       	cpc	r1, r19
    1d68:	6c f5       	brge	.+90     	; 0x1dc4 <_fpadd_parts+0x11a>
    1d6a:	37 01       	movw	r6, r14
    1d6c:	48 01       	movw	r8, r16
    1d6e:	06 2e       	mov	r0, r22
    1d70:	04 c0       	rjmp	.+8      	; 0x1d7a <_fpadd_parts+0xd0>
    1d72:	96 94       	lsr	r9
    1d74:	87 94       	ror	r8
    1d76:	77 94       	ror	r7
    1d78:	67 94       	ror	r6
    1d7a:	0a 94       	dec	r0
    1d7c:	d2 f7       	brpl	.-12     	; 0x1d72 <_fpadd_parts+0xc8>
    1d7e:	21 e0       	ldi	r18, 0x01	; 1
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	04 c0       	rjmp	.+8      	; 0x1d90 <_fpadd_parts+0xe6>
    1d88:	22 0f       	add	r18, r18
    1d8a:	33 1f       	adc	r19, r19
    1d8c:	44 1f       	adc	r20, r20
    1d8e:	55 1f       	adc	r21, r21
    1d90:	6a 95       	dec	r22
    1d92:	d2 f7       	brpl	.-12     	; 0x1d88 <_fpadd_parts+0xde>
    1d94:	21 50       	subi	r18, 0x01	; 1
    1d96:	30 40       	sbci	r19, 0x00	; 0
    1d98:	40 40       	sbci	r20, 0x00	; 0
    1d9a:	50 40       	sbci	r21, 0x00	; 0
    1d9c:	2e 21       	and	r18, r14
    1d9e:	3f 21       	and	r19, r15
    1da0:	40 23       	and	r20, r16
    1da2:	51 23       	and	r21, r17
    1da4:	21 15       	cp	r18, r1
    1da6:	31 05       	cpc	r19, r1
    1da8:	41 05       	cpc	r20, r1
    1daa:	51 05       	cpc	r21, r1
    1dac:	21 f0       	breq	.+8      	; 0x1db6 <_fpadd_parts+0x10c>
    1dae:	21 e0       	ldi	r18, 0x01	; 1
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e0       	ldi	r20, 0x00	; 0
    1db4:	50 e0       	ldi	r21, 0x00	; 0
    1db6:	79 01       	movw	r14, r18
    1db8:	8a 01       	movw	r16, r20
    1dba:	e6 28       	or	r14, r6
    1dbc:	f7 28       	or	r15, r7
    1dbe:	08 29       	or	r16, r8
    1dc0:	19 29       	or	r17, r9
    1dc2:	3c c0       	rjmp	.+120    	; 0x1e3c <_fpadd_parts+0x192>
    1dc4:	23 2b       	or	r18, r19
    1dc6:	d1 f1       	breq	.+116    	; 0x1e3c <_fpadd_parts+0x192>
    1dc8:	26 0e       	add	r2, r22
    1dca:	37 1e       	adc	r3, r23
    1dcc:	35 01       	movw	r6, r10
    1dce:	46 01       	movw	r8, r12
    1dd0:	06 2e       	mov	r0, r22
    1dd2:	04 c0       	rjmp	.+8      	; 0x1ddc <_fpadd_parts+0x132>
    1dd4:	96 94       	lsr	r9
    1dd6:	87 94       	ror	r8
    1dd8:	77 94       	ror	r7
    1dda:	67 94       	ror	r6
    1ddc:	0a 94       	dec	r0
    1dde:	d2 f7       	brpl	.-12     	; 0x1dd4 <_fpadd_parts+0x12a>
    1de0:	21 e0       	ldi	r18, 0x01	; 1
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	40 e0       	ldi	r20, 0x00	; 0
    1de6:	50 e0       	ldi	r21, 0x00	; 0
    1de8:	04 c0       	rjmp	.+8      	; 0x1df2 <_fpadd_parts+0x148>
    1dea:	22 0f       	add	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	44 1f       	adc	r20, r20
    1df0:	55 1f       	adc	r21, r21
    1df2:	6a 95       	dec	r22
    1df4:	d2 f7       	brpl	.-12     	; 0x1dea <_fpadd_parts+0x140>
    1df6:	21 50       	subi	r18, 0x01	; 1
    1df8:	30 40       	sbci	r19, 0x00	; 0
    1dfa:	40 40       	sbci	r20, 0x00	; 0
    1dfc:	50 40       	sbci	r21, 0x00	; 0
    1dfe:	2a 21       	and	r18, r10
    1e00:	3b 21       	and	r19, r11
    1e02:	4c 21       	and	r20, r12
    1e04:	5d 21       	and	r21, r13
    1e06:	21 15       	cp	r18, r1
    1e08:	31 05       	cpc	r19, r1
    1e0a:	41 05       	cpc	r20, r1
    1e0c:	51 05       	cpc	r21, r1
    1e0e:	21 f0       	breq	.+8      	; 0x1e18 <_fpadd_parts+0x16e>
    1e10:	21 e0       	ldi	r18, 0x01	; 1
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e0       	ldi	r20, 0x00	; 0
    1e16:	50 e0       	ldi	r21, 0x00	; 0
    1e18:	59 01       	movw	r10, r18
    1e1a:	6a 01       	movw	r12, r20
    1e1c:	a6 28       	or	r10, r6
    1e1e:	b7 28       	or	r11, r7
    1e20:	c8 28       	or	r12, r8
    1e22:	d9 28       	or	r13, r9
    1e24:	0b c0       	rjmp	.+22     	; 0x1e3c <_fpadd_parts+0x192>
    1e26:	82 15       	cp	r24, r2
    1e28:	93 05       	cpc	r25, r3
    1e2a:	2c f0       	brlt	.+10     	; 0x1e36 <_fpadd_parts+0x18c>
    1e2c:	1c 01       	movw	r2, r24
    1e2e:	aa 24       	eor	r10, r10
    1e30:	bb 24       	eor	r11, r11
    1e32:	65 01       	movw	r12, r10
    1e34:	03 c0       	rjmp	.+6      	; 0x1e3c <_fpadd_parts+0x192>
    1e36:	ee 24       	eor	r14, r14
    1e38:	ff 24       	eor	r15, r15
    1e3a:	87 01       	movw	r16, r14
    1e3c:	11 96       	adiw	r26, 0x01	; 1
    1e3e:	9c 91       	ld	r25, X
    1e40:	d2 01       	movw	r26, r4
    1e42:	11 96       	adiw	r26, 0x01	; 1
    1e44:	8c 91       	ld	r24, X
    1e46:	98 17       	cp	r25, r24
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <_fpadd_parts+0x1a2>
    1e4a:	45 c0       	rjmp	.+138    	; 0x1ed6 <_fpadd_parts+0x22c>
    1e4c:	99 23       	and	r25, r25
    1e4e:	39 f0       	breq	.+14     	; 0x1e5e <_fpadd_parts+0x1b4>
    1e50:	a8 01       	movw	r20, r16
    1e52:	97 01       	movw	r18, r14
    1e54:	2a 19       	sub	r18, r10
    1e56:	3b 09       	sbc	r19, r11
    1e58:	4c 09       	sbc	r20, r12
    1e5a:	5d 09       	sbc	r21, r13
    1e5c:	06 c0       	rjmp	.+12     	; 0x1e6a <_fpadd_parts+0x1c0>
    1e5e:	a6 01       	movw	r20, r12
    1e60:	95 01       	movw	r18, r10
    1e62:	2e 19       	sub	r18, r14
    1e64:	3f 09       	sbc	r19, r15
    1e66:	40 0b       	sbc	r20, r16
    1e68:	51 0b       	sbc	r21, r17
    1e6a:	57 fd       	sbrc	r21, 7
    1e6c:	08 c0       	rjmp	.+16     	; 0x1e7e <_fpadd_parts+0x1d4>
    1e6e:	11 82       	std	Z+1, r1	; 0x01
    1e70:	33 82       	std	Z+3, r3	; 0x03
    1e72:	22 82       	std	Z+2, r2	; 0x02
    1e74:	24 83       	std	Z+4, r18	; 0x04
    1e76:	35 83       	std	Z+5, r19	; 0x05
    1e78:	46 83       	std	Z+6, r20	; 0x06
    1e7a:	57 83       	std	Z+7, r21	; 0x07
    1e7c:	1d c0       	rjmp	.+58     	; 0x1eb8 <_fpadd_parts+0x20e>
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	81 83       	std	Z+1, r24	; 0x01
    1e82:	33 82       	std	Z+3, r3	; 0x03
    1e84:	22 82       	std	Z+2, r2	; 0x02
    1e86:	88 27       	eor	r24, r24
    1e88:	99 27       	eor	r25, r25
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	82 1b       	sub	r24, r18
    1e8e:	93 0b       	sbc	r25, r19
    1e90:	a4 0b       	sbc	r26, r20
    1e92:	b5 0b       	sbc	r27, r21
    1e94:	84 83       	std	Z+4, r24	; 0x04
    1e96:	95 83       	std	Z+5, r25	; 0x05
    1e98:	a6 83       	std	Z+6, r26	; 0x06
    1e9a:	b7 83       	std	Z+7, r27	; 0x07
    1e9c:	0d c0       	rjmp	.+26     	; 0x1eb8 <_fpadd_parts+0x20e>
    1e9e:	22 0f       	add	r18, r18
    1ea0:	33 1f       	adc	r19, r19
    1ea2:	44 1f       	adc	r20, r20
    1ea4:	55 1f       	adc	r21, r21
    1ea6:	24 83       	std	Z+4, r18	; 0x04
    1ea8:	35 83       	std	Z+5, r19	; 0x05
    1eaa:	46 83       	std	Z+6, r20	; 0x06
    1eac:	57 83       	std	Z+7, r21	; 0x07
    1eae:	82 81       	ldd	r24, Z+2	; 0x02
    1eb0:	93 81       	ldd	r25, Z+3	; 0x03
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	93 83       	std	Z+3, r25	; 0x03
    1eb6:	82 83       	std	Z+2, r24	; 0x02
    1eb8:	24 81       	ldd	r18, Z+4	; 0x04
    1eba:	35 81       	ldd	r19, Z+5	; 0x05
    1ebc:	46 81       	ldd	r20, Z+6	; 0x06
    1ebe:	57 81       	ldd	r21, Z+7	; 0x07
    1ec0:	da 01       	movw	r26, r20
    1ec2:	c9 01       	movw	r24, r18
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	a1 09       	sbc	r26, r1
    1ec8:	b1 09       	sbc	r27, r1
    1eca:	8f 5f       	subi	r24, 0xFF	; 255
    1ecc:	9f 4f       	sbci	r25, 0xFF	; 255
    1ece:	af 4f       	sbci	r26, 0xFF	; 255
    1ed0:	bf 43       	sbci	r27, 0x3F	; 63
    1ed2:	28 f3       	brcs	.-54     	; 0x1e9e <_fpadd_parts+0x1f4>
    1ed4:	0b c0       	rjmp	.+22     	; 0x1eec <_fpadd_parts+0x242>
    1ed6:	91 83       	std	Z+1, r25	; 0x01
    1ed8:	33 82       	std	Z+3, r3	; 0x03
    1eda:	22 82       	std	Z+2, r2	; 0x02
    1edc:	ea 0c       	add	r14, r10
    1ede:	fb 1c       	adc	r15, r11
    1ee0:	0c 1d       	adc	r16, r12
    1ee2:	1d 1d       	adc	r17, r13
    1ee4:	e4 82       	std	Z+4, r14	; 0x04
    1ee6:	f5 82       	std	Z+5, r15	; 0x05
    1ee8:	06 83       	std	Z+6, r16	; 0x06
    1eea:	17 83       	std	Z+7, r17	; 0x07
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	80 83       	st	Z, r24
    1ef0:	24 81       	ldd	r18, Z+4	; 0x04
    1ef2:	35 81       	ldd	r19, Z+5	; 0x05
    1ef4:	46 81       	ldd	r20, Z+6	; 0x06
    1ef6:	57 81       	ldd	r21, Z+7	; 0x07
    1ef8:	57 ff       	sbrs	r21, 7
    1efa:	1a c0       	rjmp	.+52     	; 0x1f30 <_fpadd_parts+0x286>
    1efc:	c9 01       	movw	r24, r18
    1efe:	aa 27       	eor	r26, r26
    1f00:	97 fd       	sbrc	r25, 7
    1f02:	a0 95       	com	r26
    1f04:	ba 2f       	mov	r27, r26
    1f06:	81 70       	andi	r24, 0x01	; 1
    1f08:	90 70       	andi	r25, 0x00	; 0
    1f0a:	a0 70       	andi	r26, 0x00	; 0
    1f0c:	b0 70       	andi	r27, 0x00	; 0
    1f0e:	56 95       	lsr	r21
    1f10:	47 95       	ror	r20
    1f12:	37 95       	ror	r19
    1f14:	27 95       	ror	r18
    1f16:	82 2b       	or	r24, r18
    1f18:	93 2b       	or	r25, r19
    1f1a:	a4 2b       	or	r26, r20
    1f1c:	b5 2b       	or	r27, r21
    1f1e:	84 83       	std	Z+4, r24	; 0x04
    1f20:	95 83       	std	Z+5, r25	; 0x05
    1f22:	a6 83       	std	Z+6, r26	; 0x06
    1f24:	b7 83       	std	Z+7, r27	; 0x07
    1f26:	82 81       	ldd	r24, Z+2	; 0x02
    1f28:	93 81       	ldd	r25, Z+3	; 0x03
    1f2a:	01 96       	adiw	r24, 0x01	; 1
    1f2c:	93 83       	std	Z+3, r25	; 0x03
    1f2e:	82 83       	std	Z+2, r24	; 0x02
    1f30:	df 01       	movw	r26, r30
    1f32:	01 c0       	rjmp	.+2      	; 0x1f36 <_fpadd_parts+0x28c>
    1f34:	d2 01       	movw	r26, r4
    1f36:	cd 01       	movw	r24, r26
    1f38:	cd b7       	in	r28, 0x3d	; 61
    1f3a:	de b7       	in	r29, 0x3e	; 62
    1f3c:	e2 e1       	ldi	r30, 0x12	; 18
    1f3e:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <__epilogue_restores__>

00001f42 <__subsf3>:
    1f42:	a0 e2       	ldi	r26, 0x20	; 32
    1f44:	b0 e0       	ldi	r27, 0x00	; 0
    1f46:	e7 ea       	ldi	r30, 0xA7	; 167
    1f48:	ff e0       	ldi	r31, 0x0F	; 15
    1f4a:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__prologue_saves__+0x18>
    1f4e:	69 83       	std	Y+1, r22	; 0x01
    1f50:	7a 83       	std	Y+2, r23	; 0x02
    1f52:	8b 83       	std	Y+3, r24	; 0x03
    1f54:	9c 83       	std	Y+4, r25	; 0x04
    1f56:	2d 83       	std	Y+5, r18	; 0x05
    1f58:	3e 83       	std	Y+6, r19	; 0x06
    1f5a:	4f 83       	std	Y+7, r20	; 0x07
    1f5c:	58 87       	std	Y+8, r21	; 0x08
    1f5e:	e9 e0       	ldi	r30, 0x09	; 9
    1f60:	ee 2e       	mov	r14, r30
    1f62:	f1 2c       	mov	r15, r1
    1f64:	ec 0e       	add	r14, r28
    1f66:	fd 1e       	adc	r15, r29
    1f68:	ce 01       	movw	r24, r28
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	b7 01       	movw	r22, r14
    1f6e:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    1f72:	8e 01       	movw	r16, r28
    1f74:	0f 5e       	subi	r16, 0xEF	; 239
    1f76:	1f 4f       	sbci	r17, 0xFF	; 255
    1f78:	ce 01       	movw	r24, r28
    1f7a:	05 96       	adiw	r24, 0x05	; 5
    1f7c:	b8 01       	movw	r22, r16
    1f7e:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    1f82:	8a 89       	ldd	r24, Y+18	; 0x12
    1f84:	91 e0       	ldi	r25, 0x01	; 1
    1f86:	89 27       	eor	r24, r25
    1f88:	8a 8b       	std	Y+18, r24	; 0x12
    1f8a:	c7 01       	movw	r24, r14
    1f8c:	b8 01       	movw	r22, r16
    1f8e:	ae 01       	movw	r20, r28
    1f90:	47 5e       	subi	r20, 0xE7	; 231
    1f92:	5f 4f       	sbci	r21, 0xFF	; 255
    1f94:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_fpadd_parts>
    1f98:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__pack_f>
    1f9c:	a0 96       	adiw	r28, 0x20	; 32
    1f9e:	e6 e0       	ldi	r30, 0x06	; 6
    1fa0:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <__epilogue_restores__+0x18>

00001fa4 <__addsf3>:
    1fa4:	a0 e2       	ldi	r26, 0x20	; 32
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e8 ed       	ldi	r30, 0xD8	; 216
    1faa:	ff e0       	ldi	r31, 0x0F	; 15
    1fac:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__prologue_saves__+0x18>
    1fb0:	69 83       	std	Y+1, r22	; 0x01
    1fb2:	7a 83       	std	Y+2, r23	; 0x02
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
    1fb6:	9c 83       	std	Y+4, r25	; 0x04
    1fb8:	2d 83       	std	Y+5, r18	; 0x05
    1fba:	3e 83       	std	Y+6, r19	; 0x06
    1fbc:	4f 83       	std	Y+7, r20	; 0x07
    1fbe:	58 87       	std	Y+8, r21	; 0x08
    1fc0:	f9 e0       	ldi	r31, 0x09	; 9
    1fc2:	ef 2e       	mov	r14, r31
    1fc4:	f1 2c       	mov	r15, r1
    1fc6:	ec 0e       	add	r14, r28
    1fc8:	fd 1e       	adc	r15, r29
    1fca:	ce 01       	movw	r24, r28
    1fcc:	01 96       	adiw	r24, 0x01	; 1
    1fce:	b7 01       	movw	r22, r14
    1fd0:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    1fd4:	8e 01       	movw	r16, r28
    1fd6:	0f 5e       	subi	r16, 0xEF	; 239
    1fd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1fda:	ce 01       	movw	r24, r28
    1fdc:	05 96       	adiw	r24, 0x05	; 5
    1fde:	b8 01       	movw	r22, r16
    1fe0:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    1fe4:	c7 01       	movw	r24, r14
    1fe6:	b8 01       	movw	r22, r16
    1fe8:	ae 01       	movw	r20, r28
    1fea:	47 5e       	subi	r20, 0xE7	; 231
    1fec:	5f 4f       	sbci	r21, 0xFF	; 255
    1fee:	0e 94 55 0e 	call	0x1caa	; 0x1caa <_fpadd_parts>
    1ff2:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__pack_f>
    1ff6:	a0 96       	adiw	r28, 0x20	; 32
    1ff8:	e6 e0       	ldi	r30, 0x06	; 6
    1ffa:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <__epilogue_restores__+0x18>

00001ffe <__mulsf3>:
    1ffe:	a0 e2       	ldi	r26, 0x20	; 32
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	e5 e0       	ldi	r30, 0x05	; 5
    2004:	f0 e1       	ldi	r31, 0x10	; 16
    2006:	0c 94 57 2e 	jmp	0x5cae	; 0x5cae <__prologue_saves__>
    200a:	69 83       	std	Y+1, r22	; 0x01
    200c:	7a 83       	std	Y+2, r23	; 0x02
    200e:	8b 83       	std	Y+3, r24	; 0x03
    2010:	9c 83       	std	Y+4, r25	; 0x04
    2012:	2d 83       	std	Y+5, r18	; 0x05
    2014:	3e 83       	std	Y+6, r19	; 0x06
    2016:	4f 83       	std	Y+7, r20	; 0x07
    2018:	58 87       	std	Y+8, r21	; 0x08
    201a:	ce 01       	movw	r24, r28
    201c:	01 96       	adiw	r24, 0x01	; 1
    201e:	be 01       	movw	r22, r28
    2020:	67 5f       	subi	r22, 0xF7	; 247
    2022:	7f 4f       	sbci	r23, 0xFF	; 255
    2024:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    2028:	ce 01       	movw	r24, r28
    202a:	05 96       	adiw	r24, 0x05	; 5
    202c:	be 01       	movw	r22, r28
    202e:	6f 5e       	subi	r22, 0xEF	; 239
    2030:	7f 4f       	sbci	r23, 0xFF	; 255
    2032:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    2036:	99 85       	ldd	r25, Y+9	; 0x09
    2038:	92 30       	cpi	r25, 0x02	; 2
    203a:	88 f0       	brcs	.+34     	; 0x205e <__mulsf3+0x60>
    203c:	89 89       	ldd	r24, Y+17	; 0x11
    203e:	82 30       	cpi	r24, 0x02	; 2
    2040:	c8 f0       	brcs	.+50     	; 0x2074 <__mulsf3+0x76>
    2042:	94 30       	cpi	r25, 0x04	; 4
    2044:	19 f4       	brne	.+6      	; 0x204c <__mulsf3+0x4e>
    2046:	82 30       	cpi	r24, 0x02	; 2
    2048:	51 f4       	brne	.+20     	; 0x205e <__mulsf3+0x60>
    204a:	04 c0       	rjmp	.+8      	; 0x2054 <__mulsf3+0x56>
    204c:	84 30       	cpi	r24, 0x04	; 4
    204e:	29 f4       	brne	.+10     	; 0x205a <__mulsf3+0x5c>
    2050:	92 30       	cpi	r25, 0x02	; 2
    2052:	81 f4       	brne	.+32     	; 0x2074 <__mulsf3+0x76>
    2054:	84 e8       	ldi	r24, 0x84	; 132
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	c6 c0       	rjmp	.+396    	; 0x21e6 <__mulsf3+0x1e8>
    205a:	92 30       	cpi	r25, 0x02	; 2
    205c:	49 f4       	brne	.+18     	; 0x2070 <__mulsf3+0x72>
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	9a 85       	ldd	r25, Y+10	; 0x0a
    2062:	8a 89       	ldd	r24, Y+18	; 0x12
    2064:	98 13       	cpse	r25, r24
    2066:	21 e0       	ldi	r18, 0x01	; 1
    2068:	2a 87       	std	Y+10, r18	; 0x0a
    206a:	ce 01       	movw	r24, r28
    206c:	09 96       	adiw	r24, 0x09	; 9
    206e:	bb c0       	rjmp	.+374    	; 0x21e6 <__mulsf3+0x1e8>
    2070:	82 30       	cpi	r24, 0x02	; 2
    2072:	49 f4       	brne	.+18     	; 0x2086 <__mulsf3+0x88>
    2074:	20 e0       	ldi	r18, 0x00	; 0
    2076:	9a 85       	ldd	r25, Y+10	; 0x0a
    2078:	8a 89       	ldd	r24, Y+18	; 0x12
    207a:	98 13       	cpse	r25, r24
    207c:	21 e0       	ldi	r18, 0x01	; 1
    207e:	2a 8b       	std	Y+18, r18	; 0x12
    2080:	ce 01       	movw	r24, r28
    2082:	41 96       	adiw	r24, 0x11	; 17
    2084:	b0 c0       	rjmp	.+352    	; 0x21e6 <__mulsf3+0x1e8>
    2086:	2d 84       	ldd	r2, Y+13	; 0x0d
    2088:	3e 84       	ldd	r3, Y+14	; 0x0e
    208a:	4f 84       	ldd	r4, Y+15	; 0x0f
    208c:	58 88       	ldd	r5, Y+16	; 0x10
    208e:	6d 88       	ldd	r6, Y+21	; 0x15
    2090:	7e 88       	ldd	r7, Y+22	; 0x16
    2092:	8f 88       	ldd	r8, Y+23	; 0x17
    2094:	98 8c       	ldd	r9, Y+24	; 0x18
    2096:	ee 24       	eor	r14, r14
    2098:	ff 24       	eor	r15, r15
    209a:	87 01       	movw	r16, r14
    209c:	aa 24       	eor	r10, r10
    209e:	bb 24       	eor	r11, r11
    20a0:	65 01       	movw	r12, r10
    20a2:	40 e0       	ldi	r20, 0x00	; 0
    20a4:	50 e0       	ldi	r21, 0x00	; 0
    20a6:	60 e0       	ldi	r22, 0x00	; 0
    20a8:	70 e0       	ldi	r23, 0x00	; 0
    20aa:	e0 e0       	ldi	r30, 0x00	; 0
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	c1 01       	movw	r24, r2
    20b0:	81 70       	andi	r24, 0x01	; 1
    20b2:	90 70       	andi	r25, 0x00	; 0
    20b4:	89 2b       	or	r24, r25
    20b6:	e9 f0       	breq	.+58     	; 0x20f2 <__mulsf3+0xf4>
    20b8:	e6 0c       	add	r14, r6
    20ba:	f7 1c       	adc	r15, r7
    20bc:	08 1d       	adc	r16, r8
    20be:	19 1d       	adc	r17, r9
    20c0:	9a 01       	movw	r18, r20
    20c2:	ab 01       	movw	r20, r22
    20c4:	2a 0d       	add	r18, r10
    20c6:	3b 1d       	adc	r19, r11
    20c8:	4c 1d       	adc	r20, r12
    20ca:	5d 1d       	adc	r21, r13
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	a0 e0       	ldi	r26, 0x00	; 0
    20d2:	b0 e0       	ldi	r27, 0x00	; 0
    20d4:	e6 14       	cp	r14, r6
    20d6:	f7 04       	cpc	r15, r7
    20d8:	08 05       	cpc	r16, r8
    20da:	19 05       	cpc	r17, r9
    20dc:	20 f4       	brcc	.+8      	; 0x20e6 <__mulsf3+0xe8>
    20de:	81 e0       	ldi	r24, 0x01	; 1
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	a0 e0       	ldi	r26, 0x00	; 0
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	ba 01       	movw	r22, r20
    20e8:	a9 01       	movw	r20, r18
    20ea:	48 0f       	add	r20, r24
    20ec:	59 1f       	adc	r21, r25
    20ee:	6a 1f       	adc	r22, r26
    20f0:	7b 1f       	adc	r23, r27
    20f2:	aa 0c       	add	r10, r10
    20f4:	bb 1c       	adc	r11, r11
    20f6:	cc 1c       	adc	r12, r12
    20f8:	dd 1c       	adc	r13, r13
    20fa:	97 fe       	sbrs	r9, 7
    20fc:	08 c0       	rjmp	.+16     	; 0x210e <__mulsf3+0x110>
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	a0 e0       	ldi	r26, 0x00	; 0
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	a8 2a       	or	r10, r24
    2108:	b9 2a       	or	r11, r25
    210a:	ca 2a       	or	r12, r26
    210c:	db 2a       	or	r13, r27
    210e:	31 96       	adiw	r30, 0x01	; 1
    2110:	e0 32       	cpi	r30, 0x20	; 32
    2112:	f1 05       	cpc	r31, r1
    2114:	49 f0       	breq	.+18     	; 0x2128 <__mulsf3+0x12a>
    2116:	66 0c       	add	r6, r6
    2118:	77 1c       	adc	r7, r7
    211a:	88 1c       	adc	r8, r8
    211c:	99 1c       	adc	r9, r9
    211e:	56 94       	lsr	r5
    2120:	47 94       	ror	r4
    2122:	37 94       	ror	r3
    2124:	27 94       	ror	r2
    2126:	c3 cf       	rjmp	.-122    	; 0x20ae <__mulsf3+0xb0>
    2128:	fa 85       	ldd	r31, Y+10	; 0x0a
    212a:	ea 89       	ldd	r30, Y+18	; 0x12
    212c:	2b 89       	ldd	r18, Y+19	; 0x13
    212e:	3c 89       	ldd	r19, Y+20	; 0x14
    2130:	8b 85       	ldd	r24, Y+11	; 0x0b
    2132:	9c 85       	ldd	r25, Y+12	; 0x0c
    2134:	28 0f       	add	r18, r24
    2136:	39 1f       	adc	r19, r25
    2138:	2e 5f       	subi	r18, 0xFE	; 254
    213a:	3f 4f       	sbci	r19, 0xFF	; 255
    213c:	17 c0       	rjmp	.+46     	; 0x216c <__mulsf3+0x16e>
    213e:	ca 01       	movw	r24, r20
    2140:	81 70       	andi	r24, 0x01	; 1
    2142:	90 70       	andi	r25, 0x00	; 0
    2144:	89 2b       	or	r24, r25
    2146:	61 f0       	breq	.+24     	; 0x2160 <__mulsf3+0x162>
    2148:	16 95       	lsr	r17
    214a:	07 95       	ror	r16
    214c:	f7 94       	ror	r15
    214e:	e7 94       	ror	r14
    2150:	80 e0       	ldi	r24, 0x00	; 0
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	a0 e0       	ldi	r26, 0x00	; 0
    2156:	b0 e8       	ldi	r27, 0x80	; 128
    2158:	e8 2a       	or	r14, r24
    215a:	f9 2a       	or	r15, r25
    215c:	0a 2b       	or	r16, r26
    215e:	1b 2b       	or	r17, r27
    2160:	76 95       	lsr	r23
    2162:	67 95       	ror	r22
    2164:	57 95       	ror	r21
    2166:	47 95       	ror	r20
    2168:	2f 5f       	subi	r18, 0xFF	; 255
    216a:	3f 4f       	sbci	r19, 0xFF	; 255
    216c:	77 fd       	sbrc	r23, 7
    216e:	e7 cf       	rjmp	.-50     	; 0x213e <__mulsf3+0x140>
    2170:	0c c0       	rjmp	.+24     	; 0x218a <__mulsf3+0x18c>
    2172:	44 0f       	add	r20, r20
    2174:	55 1f       	adc	r21, r21
    2176:	66 1f       	adc	r22, r22
    2178:	77 1f       	adc	r23, r23
    217a:	17 fd       	sbrc	r17, 7
    217c:	41 60       	ori	r20, 0x01	; 1
    217e:	ee 0c       	add	r14, r14
    2180:	ff 1c       	adc	r15, r15
    2182:	00 1f       	adc	r16, r16
    2184:	11 1f       	adc	r17, r17
    2186:	21 50       	subi	r18, 0x01	; 1
    2188:	30 40       	sbci	r19, 0x00	; 0
    218a:	40 30       	cpi	r20, 0x00	; 0
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	59 07       	cpc	r21, r25
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	69 07       	cpc	r22, r25
    2194:	90 e4       	ldi	r25, 0x40	; 64
    2196:	79 07       	cpc	r23, r25
    2198:	60 f3       	brcs	.-40     	; 0x2172 <__mulsf3+0x174>
    219a:	2b 8f       	std	Y+27, r18	; 0x1b
    219c:	3c 8f       	std	Y+28, r19	; 0x1c
    219e:	db 01       	movw	r26, r22
    21a0:	ca 01       	movw	r24, r20
    21a2:	8f 77       	andi	r24, 0x7F	; 127
    21a4:	90 70       	andi	r25, 0x00	; 0
    21a6:	a0 70       	andi	r26, 0x00	; 0
    21a8:	b0 70       	andi	r27, 0x00	; 0
    21aa:	80 34       	cpi	r24, 0x40	; 64
    21ac:	91 05       	cpc	r25, r1
    21ae:	a1 05       	cpc	r26, r1
    21b0:	b1 05       	cpc	r27, r1
    21b2:	61 f4       	brne	.+24     	; 0x21cc <__mulsf3+0x1ce>
    21b4:	47 fd       	sbrc	r20, 7
    21b6:	0a c0       	rjmp	.+20     	; 0x21cc <__mulsf3+0x1ce>
    21b8:	e1 14       	cp	r14, r1
    21ba:	f1 04       	cpc	r15, r1
    21bc:	01 05       	cpc	r16, r1
    21be:	11 05       	cpc	r17, r1
    21c0:	29 f0       	breq	.+10     	; 0x21cc <__mulsf3+0x1ce>
    21c2:	40 5c       	subi	r20, 0xC0	; 192
    21c4:	5f 4f       	sbci	r21, 0xFF	; 255
    21c6:	6f 4f       	sbci	r22, 0xFF	; 255
    21c8:	7f 4f       	sbci	r23, 0xFF	; 255
    21ca:	40 78       	andi	r20, 0x80	; 128
    21cc:	1a 8e       	std	Y+26, r1	; 0x1a
    21ce:	fe 17       	cp	r31, r30
    21d0:	11 f0       	breq	.+4      	; 0x21d6 <__mulsf3+0x1d8>
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	8a 8f       	std	Y+26, r24	; 0x1a
    21d6:	4d 8f       	std	Y+29, r20	; 0x1d
    21d8:	5e 8f       	std	Y+30, r21	; 0x1e
    21da:	6f 8f       	std	Y+31, r22	; 0x1f
    21dc:	78 a3       	std	Y+32, r23	; 0x20
    21de:	83 e0       	ldi	r24, 0x03	; 3
    21e0:	89 8f       	std	Y+25, r24	; 0x19
    21e2:	ce 01       	movw	r24, r28
    21e4:	49 96       	adiw	r24, 0x19	; 25
    21e6:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__pack_f>
    21ea:	a0 96       	adiw	r28, 0x20	; 32
    21ec:	e2 e1       	ldi	r30, 0x12	; 18
    21ee:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <__epilogue_restores__>

000021f2 <__divsf3>:
    21f2:	a8 e1       	ldi	r26, 0x18	; 24
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	ef ef       	ldi	r30, 0xFF	; 255
    21f8:	f0 e1       	ldi	r31, 0x10	; 16
    21fa:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <__prologue_saves__+0x10>
    21fe:	69 83       	std	Y+1, r22	; 0x01
    2200:	7a 83       	std	Y+2, r23	; 0x02
    2202:	8b 83       	std	Y+3, r24	; 0x03
    2204:	9c 83       	std	Y+4, r25	; 0x04
    2206:	2d 83       	std	Y+5, r18	; 0x05
    2208:	3e 83       	std	Y+6, r19	; 0x06
    220a:	4f 83       	std	Y+7, r20	; 0x07
    220c:	58 87       	std	Y+8, r21	; 0x08
    220e:	b9 e0       	ldi	r27, 0x09	; 9
    2210:	eb 2e       	mov	r14, r27
    2212:	f1 2c       	mov	r15, r1
    2214:	ec 0e       	add	r14, r28
    2216:	fd 1e       	adc	r15, r29
    2218:	ce 01       	movw	r24, r28
    221a:	01 96       	adiw	r24, 0x01	; 1
    221c:	b7 01       	movw	r22, r14
    221e:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    2222:	8e 01       	movw	r16, r28
    2224:	0f 5e       	subi	r16, 0xEF	; 239
    2226:	1f 4f       	sbci	r17, 0xFF	; 255
    2228:	ce 01       	movw	r24, r28
    222a:	05 96       	adiw	r24, 0x05	; 5
    222c:	b8 01       	movw	r22, r16
    222e:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    2232:	29 85       	ldd	r18, Y+9	; 0x09
    2234:	22 30       	cpi	r18, 0x02	; 2
    2236:	08 f4       	brcc	.+2      	; 0x223a <__divsf3+0x48>
    2238:	7e c0       	rjmp	.+252    	; 0x2336 <__divsf3+0x144>
    223a:	39 89       	ldd	r19, Y+17	; 0x11
    223c:	32 30       	cpi	r19, 0x02	; 2
    223e:	10 f4       	brcc	.+4      	; 0x2244 <__divsf3+0x52>
    2240:	b8 01       	movw	r22, r16
    2242:	7c c0       	rjmp	.+248    	; 0x233c <__divsf3+0x14a>
    2244:	8a 85       	ldd	r24, Y+10	; 0x0a
    2246:	9a 89       	ldd	r25, Y+18	; 0x12
    2248:	89 27       	eor	r24, r25
    224a:	8a 87       	std	Y+10, r24	; 0x0a
    224c:	24 30       	cpi	r18, 0x04	; 4
    224e:	11 f0       	breq	.+4      	; 0x2254 <__divsf3+0x62>
    2250:	22 30       	cpi	r18, 0x02	; 2
    2252:	31 f4       	brne	.+12     	; 0x2260 <__divsf3+0x6e>
    2254:	23 17       	cp	r18, r19
    2256:	09 f0       	breq	.+2      	; 0x225a <__divsf3+0x68>
    2258:	6e c0       	rjmp	.+220    	; 0x2336 <__divsf3+0x144>
    225a:	64 e8       	ldi	r22, 0x84	; 132
    225c:	70 e0       	ldi	r23, 0x00	; 0
    225e:	6e c0       	rjmp	.+220    	; 0x233c <__divsf3+0x14a>
    2260:	34 30       	cpi	r19, 0x04	; 4
    2262:	39 f4       	brne	.+14     	; 0x2272 <__divsf3+0x80>
    2264:	1d 86       	std	Y+13, r1	; 0x0d
    2266:	1e 86       	std	Y+14, r1	; 0x0e
    2268:	1f 86       	std	Y+15, r1	; 0x0f
    226a:	18 8a       	std	Y+16, r1	; 0x10
    226c:	1c 86       	std	Y+12, r1	; 0x0c
    226e:	1b 86       	std	Y+11, r1	; 0x0b
    2270:	04 c0       	rjmp	.+8      	; 0x227a <__divsf3+0x88>
    2272:	32 30       	cpi	r19, 0x02	; 2
    2274:	21 f4       	brne	.+8      	; 0x227e <__divsf3+0x8c>
    2276:	84 e0       	ldi	r24, 0x04	; 4
    2278:	89 87       	std	Y+9, r24	; 0x09
    227a:	b7 01       	movw	r22, r14
    227c:	5f c0       	rjmp	.+190    	; 0x233c <__divsf3+0x14a>
    227e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2280:	3c 85       	ldd	r19, Y+12	; 0x0c
    2282:	8b 89       	ldd	r24, Y+19	; 0x13
    2284:	9c 89       	ldd	r25, Y+20	; 0x14
    2286:	28 1b       	sub	r18, r24
    2288:	39 0b       	sbc	r19, r25
    228a:	3c 87       	std	Y+12, r19	; 0x0c
    228c:	2b 87       	std	Y+11, r18	; 0x0b
    228e:	ed 84       	ldd	r14, Y+13	; 0x0d
    2290:	fe 84       	ldd	r15, Y+14	; 0x0e
    2292:	0f 85       	ldd	r16, Y+15	; 0x0f
    2294:	18 89       	ldd	r17, Y+16	; 0x10
    2296:	ad 88       	ldd	r10, Y+21	; 0x15
    2298:	be 88       	ldd	r11, Y+22	; 0x16
    229a:	cf 88       	ldd	r12, Y+23	; 0x17
    229c:	d8 8c       	ldd	r13, Y+24	; 0x18
    229e:	ea 14       	cp	r14, r10
    22a0:	fb 04       	cpc	r15, r11
    22a2:	0c 05       	cpc	r16, r12
    22a4:	1d 05       	cpc	r17, r13
    22a6:	40 f4       	brcc	.+16     	; 0x22b8 <__divsf3+0xc6>
    22a8:	ee 0c       	add	r14, r14
    22aa:	ff 1c       	adc	r15, r15
    22ac:	00 1f       	adc	r16, r16
    22ae:	11 1f       	adc	r17, r17
    22b0:	21 50       	subi	r18, 0x01	; 1
    22b2:	30 40       	sbci	r19, 0x00	; 0
    22b4:	3c 87       	std	Y+12, r19	; 0x0c
    22b6:	2b 87       	std	Y+11, r18	; 0x0b
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e0       	ldi	r20, 0x00	; 0
    22be:	50 e0       	ldi	r21, 0x00	; 0
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	a0 e0       	ldi	r26, 0x00	; 0
    22c6:	b0 e4       	ldi	r27, 0x40	; 64
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	70 e0       	ldi	r23, 0x00	; 0
    22cc:	ea 14       	cp	r14, r10
    22ce:	fb 04       	cpc	r15, r11
    22d0:	0c 05       	cpc	r16, r12
    22d2:	1d 05       	cpc	r17, r13
    22d4:	40 f0       	brcs	.+16     	; 0x22e6 <__divsf3+0xf4>
    22d6:	28 2b       	or	r18, r24
    22d8:	39 2b       	or	r19, r25
    22da:	4a 2b       	or	r20, r26
    22dc:	5b 2b       	or	r21, r27
    22de:	ea 18       	sub	r14, r10
    22e0:	fb 08       	sbc	r15, r11
    22e2:	0c 09       	sbc	r16, r12
    22e4:	1d 09       	sbc	r17, r13
    22e6:	b6 95       	lsr	r27
    22e8:	a7 95       	ror	r26
    22ea:	97 95       	ror	r25
    22ec:	87 95       	ror	r24
    22ee:	ee 0c       	add	r14, r14
    22f0:	ff 1c       	adc	r15, r15
    22f2:	00 1f       	adc	r16, r16
    22f4:	11 1f       	adc	r17, r17
    22f6:	6f 5f       	subi	r22, 0xFF	; 255
    22f8:	7f 4f       	sbci	r23, 0xFF	; 255
    22fa:	6f 31       	cpi	r22, 0x1F	; 31
    22fc:	71 05       	cpc	r23, r1
    22fe:	31 f7       	brne	.-52     	; 0x22cc <__divsf3+0xda>
    2300:	da 01       	movw	r26, r20
    2302:	c9 01       	movw	r24, r18
    2304:	8f 77       	andi	r24, 0x7F	; 127
    2306:	90 70       	andi	r25, 0x00	; 0
    2308:	a0 70       	andi	r26, 0x00	; 0
    230a:	b0 70       	andi	r27, 0x00	; 0
    230c:	80 34       	cpi	r24, 0x40	; 64
    230e:	91 05       	cpc	r25, r1
    2310:	a1 05       	cpc	r26, r1
    2312:	b1 05       	cpc	r27, r1
    2314:	61 f4       	brne	.+24     	; 0x232e <__divsf3+0x13c>
    2316:	27 fd       	sbrc	r18, 7
    2318:	0a c0       	rjmp	.+20     	; 0x232e <__divsf3+0x13c>
    231a:	e1 14       	cp	r14, r1
    231c:	f1 04       	cpc	r15, r1
    231e:	01 05       	cpc	r16, r1
    2320:	11 05       	cpc	r17, r1
    2322:	29 f0       	breq	.+10     	; 0x232e <__divsf3+0x13c>
    2324:	20 5c       	subi	r18, 0xC0	; 192
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	4f 4f       	sbci	r20, 0xFF	; 255
    232a:	5f 4f       	sbci	r21, 0xFF	; 255
    232c:	20 78       	andi	r18, 0x80	; 128
    232e:	2d 87       	std	Y+13, r18	; 0x0d
    2330:	3e 87       	std	Y+14, r19	; 0x0e
    2332:	4f 87       	std	Y+15, r20	; 0x0f
    2334:	58 8b       	std	Y+16, r21	; 0x10
    2336:	be 01       	movw	r22, r28
    2338:	67 5f       	subi	r22, 0xF7	; 247
    233a:	7f 4f       	sbci	r23, 0xFF	; 255
    233c:	cb 01       	movw	r24, r22
    233e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__pack_f>
    2342:	68 96       	adiw	r28, 0x18	; 24
    2344:	ea e0       	ldi	r30, 0x0A	; 10
    2346:	0c 94 7b 2e 	jmp	0x5cf6	; 0x5cf6 <__epilogue_restores__+0x10>

0000234a <__eqsf2>:
    234a:	a8 e1       	ldi	r26, 0x18	; 24
    234c:	b0 e0       	ldi	r27, 0x00	; 0
    234e:	eb ea       	ldi	r30, 0xAB	; 171
    2350:	f1 e1       	ldi	r31, 0x11	; 17
    2352:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__prologue_saves__+0x18>
    2356:	69 83       	std	Y+1, r22	; 0x01
    2358:	7a 83       	std	Y+2, r23	; 0x02
    235a:	8b 83       	std	Y+3, r24	; 0x03
    235c:	9c 83       	std	Y+4, r25	; 0x04
    235e:	2d 83       	std	Y+5, r18	; 0x05
    2360:	3e 83       	std	Y+6, r19	; 0x06
    2362:	4f 83       	std	Y+7, r20	; 0x07
    2364:	58 87       	std	Y+8, r21	; 0x08
    2366:	89 e0       	ldi	r24, 0x09	; 9
    2368:	e8 2e       	mov	r14, r24
    236a:	f1 2c       	mov	r15, r1
    236c:	ec 0e       	add	r14, r28
    236e:	fd 1e       	adc	r15, r29
    2370:	ce 01       	movw	r24, r28
    2372:	01 96       	adiw	r24, 0x01	; 1
    2374:	b7 01       	movw	r22, r14
    2376:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    237a:	8e 01       	movw	r16, r28
    237c:	0f 5e       	subi	r16, 0xEF	; 239
    237e:	1f 4f       	sbci	r17, 0xFF	; 255
    2380:	ce 01       	movw	r24, r28
    2382:	05 96       	adiw	r24, 0x05	; 5
    2384:	b8 01       	movw	r22, r16
    2386:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    238a:	89 85       	ldd	r24, Y+9	; 0x09
    238c:	82 30       	cpi	r24, 0x02	; 2
    238e:	40 f0       	brcs	.+16     	; 0x23a0 <__eqsf2+0x56>
    2390:	89 89       	ldd	r24, Y+17	; 0x11
    2392:	82 30       	cpi	r24, 0x02	; 2
    2394:	28 f0       	brcs	.+10     	; 0x23a0 <__eqsf2+0x56>
    2396:	c7 01       	movw	r24, r14
    2398:	b8 01       	movw	r22, r16
    239a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fpcmp_parts_f>
    239e:	01 c0       	rjmp	.+2      	; 0x23a2 <__eqsf2+0x58>
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	68 96       	adiw	r28, 0x18	; 24
    23a4:	e6 e0       	ldi	r30, 0x06	; 6
    23a6:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <__epilogue_restores__+0x18>

000023aa <__gesf2>:
    23aa:	a8 e1       	ldi	r26, 0x18	; 24
    23ac:	b0 e0       	ldi	r27, 0x00	; 0
    23ae:	eb ed       	ldi	r30, 0xDB	; 219
    23b0:	f1 e1       	ldi	r31, 0x11	; 17
    23b2:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__prologue_saves__+0x18>
    23b6:	69 83       	std	Y+1, r22	; 0x01
    23b8:	7a 83       	std	Y+2, r23	; 0x02
    23ba:	8b 83       	std	Y+3, r24	; 0x03
    23bc:	9c 83       	std	Y+4, r25	; 0x04
    23be:	2d 83       	std	Y+5, r18	; 0x05
    23c0:	3e 83       	std	Y+6, r19	; 0x06
    23c2:	4f 83       	std	Y+7, r20	; 0x07
    23c4:	58 87       	std	Y+8, r21	; 0x08
    23c6:	89 e0       	ldi	r24, 0x09	; 9
    23c8:	e8 2e       	mov	r14, r24
    23ca:	f1 2c       	mov	r15, r1
    23cc:	ec 0e       	add	r14, r28
    23ce:	fd 1e       	adc	r15, r29
    23d0:	ce 01       	movw	r24, r28
    23d2:	01 96       	adiw	r24, 0x01	; 1
    23d4:	b7 01       	movw	r22, r14
    23d6:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    23da:	8e 01       	movw	r16, r28
    23dc:	0f 5e       	subi	r16, 0xEF	; 239
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	ce 01       	movw	r24, r28
    23e2:	05 96       	adiw	r24, 0x05	; 5
    23e4:	b8 01       	movw	r22, r16
    23e6:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    23ea:	89 85       	ldd	r24, Y+9	; 0x09
    23ec:	82 30       	cpi	r24, 0x02	; 2
    23ee:	40 f0       	brcs	.+16     	; 0x2400 <__gesf2+0x56>
    23f0:	89 89       	ldd	r24, Y+17	; 0x11
    23f2:	82 30       	cpi	r24, 0x02	; 2
    23f4:	28 f0       	brcs	.+10     	; 0x2400 <__gesf2+0x56>
    23f6:	c7 01       	movw	r24, r14
    23f8:	b8 01       	movw	r22, r16
    23fa:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fpcmp_parts_f>
    23fe:	01 c0       	rjmp	.+2      	; 0x2402 <__gesf2+0x58>
    2400:	8f ef       	ldi	r24, 0xFF	; 255
    2402:	68 96       	adiw	r28, 0x18	; 24
    2404:	e6 e0       	ldi	r30, 0x06	; 6
    2406:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <__epilogue_restores__+0x18>

0000240a <__ltsf2>:
    240a:	a8 e1       	ldi	r26, 0x18	; 24
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	eb e0       	ldi	r30, 0x0B	; 11
    2410:	f2 e1       	ldi	r31, 0x12	; 18
    2412:	0c 94 63 2e 	jmp	0x5cc6	; 0x5cc6 <__prologue_saves__+0x18>
    2416:	69 83       	std	Y+1, r22	; 0x01
    2418:	7a 83       	std	Y+2, r23	; 0x02
    241a:	8b 83       	std	Y+3, r24	; 0x03
    241c:	9c 83       	std	Y+4, r25	; 0x04
    241e:	2d 83       	std	Y+5, r18	; 0x05
    2420:	3e 83       	std	Y+6, r19	; 0x06
    2422:	4f 83       	std	Y+7, r20	; 0x07
    2424:	58 87       	std	Y+8, r21	; 0x08
    2426:	89 e0       	ldi	r24, 0x09	; 9
    2428:	e8 2e       	mov	r14, r24
    242a:	f1 2c       	mov	r15, r1
    242c:	ec 0e       	add	r14, r28
    242e:	fd 1e       	adc	r15, r29
    2430:	ce 01       	movw	r24, r28
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	b7 01       	movw	r22, r14
    2436:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    243a:	8e 01       	movw	r16, r28
    243c:	0f 5e       	subi	r16, 0xEF	; 239
    243e:	1f 4f       	sbci	r17, 0xFF	; 255
    2440:	ce 01       	movw	r24, r28
    2442:	05 96       	adiw	r24, 0x05	; 5
    2444:	b8 01       	movw	r22, r16
    2446:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    244a:	89 85       	ldd	r24, Y+9	; 0x09
    244c:	82 30       	cpi	r24, 0x02	; 2
    244e:	40 f0       	brcs	.+16     	; 0x2460 <__ltsf2+0x56>
    2450:	89 89       	ldd	r24, Y+17	; 0x11
    2452:	82 30       	cpi	r24, 0x02	; 2
    2454:	28 f0       	brcs	.+10     	; 0x2460 <__ltsf2+0x56>
    2456:	c7 01       	movw	r24, r14
    2458:	b8 01       	movw	r22, r16
    245a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fpcmp_parts_f>
    245e:	01 c0       	rjmp	.+2      	; 0x2462 <__ltsf2+0x58>
    2460:	81 e0       	ldi	r24, 0x01	; 1
    2462:	68 96       	adiw	r28, 0x18	; 24
    2464:	e6 e0       	ldi	r30, 0x06	; 6
    2466:	0c 94 7f 2e 	jmp	0x5cfe	; 0x5cfe <__epilogue_restores__+0x18>

0000246a <__floatsisf>:
    246a:	a8 e0       	ldi	r26, 0x08	; 8
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	eb e3       	ldi	r30, 0x3B	; 59
    2470:	f2 e1       	ldi	r31, 0x12	; 18
    2472:	0c 94 60 2e 	jmp	0x5cc0	; 0x5cc0 <__prologue_saves__+0x12>
    2476:	9b 01       	movw	r18, r22
    2478:	ac 01       	movw	r20, r24
    247a:	83 e0       	ldi	r24, 0x03	; 3
    247c:	89 83       	std	Y+1, r24	; 0x01
    247e:	da 01       	movw	r26, r20
    2480:	c9 01       	movw	r24, r18
    2482:	88 27       	eor	r24, r24
    2484:	b7 fd       	sbrc	r27, 7
    2486:	83 95       	inc	r24
    2488:	99 27       	eor	r25, r25
    248a:	aa 27       	eor	r26, r26
    248c:	bb 27       	eor	r27, r27
    248e:	b8 2e       	mov	r11, r24
    2490:	21 15       	cp	r18, r1
    2492:	31 05       	cpc	r19, r1
    2494:	41 05       	cpc	r20, r1
    2496:	51 05       	cpc	r21, r1
    2498:	19 f4       	brne	.+6      	; 0x24a0 <__floatsisf+0x36>
    249a:	82 e0       	ldi	r24, 0x02	; 2
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	3a c0       	rjmp	.+116    	; 0x2514 <__floatsisf+0xaa>
    24a0:	88 23       	and	r24, r24
    24a2:	a9 f0       	breq	.+42     	; 0x24ce <__floatsisf+0x64>
    24a4:	20 30       	cpi	r18, 0x00	; 0
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	38 07       	cpc	r19, r24
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	48 07       	cpc	r20, r24
    24ae:	80 e8       	ldi	r24, 0x80	; 128
    24b0:	58 07       	cpc	r21, r24
    24b2:	29 f4       	brne	.+10     	; 0x24be <__floatsisf+0x54>
    24b4:	60 e0       	ldi	r22, 0x00	; 0
    24b6:	70 e0       	ldi	r23, 0x00	; 0
    24b8:	80 e0       	ldi	r24, 0x00	; 0
    24ba:	9f ec       	ldi	r25, 0xCF	; 207
    24bc:	30 c0       	rjmp	.+96     	; 0x251e <__floatsisf+0xb4>
    24be:	ee 24       	eor	r14, r14
    24c0:	ff 24       	eor	r15, r15
    24c2:	87 01       	movw	r16, r14
    24c4:	e2 1a       	sub	r14, r18
    24c6:	f3 0a       	sbc	r15, r19
    24c8:	04 0b       	sbc	r16, r20
    24ca:	15 0b       	sbc	r17, r21
    24cc:	02 c0       	rjmp	.+4      	; 0x24d2 <__floatsisf+0x68>
    24ce:	79 01       	movw	r14, r18
    24d0:	8a 01       	movw	r16, r20
    24d2:	8e e1       	ldi	r24, 0x1E	; 30
    24d4:	c8 2e       	mov	r12, r24
    24d6:	d1 2c       	mov	r13, r1
    24d8:	dc 82       	std	Y+4, r13	; 0x04
    24da:	cb 82       	std	Y+3, r12	; 0x03
    24dc:	ed 82       	std	Y+5, r14	; 0x05
    24de:	fe 82       	std	Y+6, r15	; 0x06
    24e0:	0f 83       	std	Y+7, r16	; 0x07
    24e2:	18 87       	std	Y+8, r17	; 0x08
    24e4:	c8 01       	movw	r24, r16
    24e6:	b7 01       	movw	r22, r14
    24e8:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__clzsi2>
    24ec:	01 97       	sbiw	r24, 0x01	; 1
    24ee:	18 16       	cp	r1, r24
    24f0:	19 06       	cpc	r1, r25
    24f2:	84 f4       	brge	.+32     	; 0x2514 <__floatsisf+0xaa>
    24f4:	08 2e       	mov	r0, r24
    24f6:	04 c0       	rjmp	.+8      	; 0x2500 <__floatsisf+0x96>
    24f8:	ee 0c       	add	r14, r14
    24fa:	ff 1c       	adc	r15, r15
    24fc:	00 1f       	adc	r16, r16
    24fe:	11 1f       	adc	r17, r17
    2500:	0a 94       	dec	r0
    2502:	d2 f7       	brpl	.-12     	; 0x24f8 <__floatsisf+0x8e>
    2504:	ed 82       	std	Y+5, r14	; 0x05
    2506:	fe 82       	std	Y+6, r15	; 0x06
    2508:	0f 83       	std	Y+7, r16	; 0x07
    250a:	18 87       	std	Y+8, r17	; 0x08
    250c:	c8 1a       	sub	r12, r24
    250e:	d9 0a       	sbc	r13, r25
    2510:	dc 82       	std	Y+4, r13	; 0x04
    2512:	cb 82       	std	Y+3, r12	; 0x03
    2514:	ba 82       	std	Y+2, r11	; 0x02
    2516:	ce 01       	movw	r24, r28
    2518:	01 96       	adiw	r24, 0x01	; 1
    251a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__pack_f>
    251e:	28 96       	adiw	r28, 0x08	; 8
    2520:	e9 e0       	ldi	r30, 0x09	; 9
    2522:	0c 94 7c 2e 	jmp	0x5cf8	; 0x5cf8 <__epilogue_restores__+0x12>

00002526 <__fixsfsi>:
    2526:	ac e0       	ldi	r26, 0x0C	; 12
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e9 e9       	ldi	r30, 0x99	; 153
    252c:	f2 e1       	ldi	r31, 0x12	; 18
    252e:	0c 94 67 2e 	jmp	0x5cce	; 0x5cce <__prologue_saves__+0x20>
    2532:	69 83       	std	Y+1, r22	; 0x01
    2534:	7a 83       	std	Y+2, r23	; 0x02
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	9c 83       	std	Y+4, r25	; 0x04
    253a:	ce 01       	movw	r24, r28
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	be 01       	movw	r22, r28
    2540:	6b 5f       	subi	r22, 0xFB	; 251
    2542:	7f 4f       	sbci	r23, 0xFF	; 255
    2544:	0e 94 b0 14 	call	0x2960	; 0x2960 <__unpack_f>
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	61 f1       	breq	.+88     	; 0x25a6 <__fixsfsi+0x80>
    254e:	82 30       	cpi	r24, 0x02	; 2
    2550:	50 f1       	brcs	.+84     	; 0x25a6 <__fixsfsi+0x80>
    2552:	84 30       	cpi	r24, 0x04	; 4
    2554:	21 f4       	brne	.+8      	; 0x255e <__fixsfsi+0x38>
    2556:	8e 81       	ldd	r24, Y+6	; 0x06
    2558:	88 23       	and	r24, r24
    255a:	51 f1       	breq	.+84     	; 0x25b0 <__fixsfsi+0x8a>
    255c:	2e c0       	rjmp	.+92     	; 0x25ba <__fixsfsi+0x94>
    255e:	2f 81       	ldd	r18, Y+7	; 0x07
    2560:	38 85       	ldd	r19, Y+8	; 0x08
    2562:	37 fd       	sbrc	r19, 7
    2564:	20 c0       	rjmp	.+64     	; 0x25a6 <__fixsfsi+0x80>
    2566:	6e 81       	ldd	r22, Y+6	; 0x06
    2568:	2f 31       	cpi	r18, 0x1F	; 31
    256a:	31 05       	cpc	r19, r1
    256c:	1c f0       	brlt	.+6      	; 0x2574 <__fixsfsi+0x4e>
    256e:	66 23       	and	r22, r22
    2570:	f9 f0       	breq	.+62     	; 0x25b0 <__fixsfsi+0x8a>
    2572:	23 c0       	rjmp	.+70     	; 0x25ba <__fixsfsi+0x94>
    2574:	8e e1       	ldi	r24, 0x1E	; 30
    2576:	90 e0       	ldi	r25, 0x00	; 0
    2578:	82 1b       	sub	r24, r18
    257a:	93 0b       	sbc	r25, r19
    257c:	29 85       	ldd	r18, Y+9	; 0x09
    257e:	3a 85       	ldd	r19, Y+10	; 0x0a
    2580:	4b 85       	ldd	r20, Y+11	; 0x0b
    2582:	5c 85       	ldd	r21, Y+12	; 0x0c
    2584:	04 c0       	rjmp	.+8      	; 0x258e <__fixsfsi+0x68>
    2586:	56 95       	lsr	r21
    2588:	47 95       	ror	r20
    258a:	37 95       	ror	r19
    258c:	27 95       	ror	r18
    258e:	8a 95       	dec	r24
    2590:	d2 f7       	brpl	.-12     	; 0x2586 <__fixsfsi+0x60>
    2592:	66 23       	and	r22, r22
    2594:	b1 f0       	breq	.+44     	; 0x25c2 <__fixsfsi+0x9c>
    2596:	50 95       	com	r21
    2598:	40 95       	com	r20
    259a:	30 95       	com	r19
    259c:	21 95       	neg	r18
    259e:	3f 4f       	sbci	r19, 0xFF	; 255
    25a0:	4f 4f       	sbci	r20, 0xFF	; 255
    25a2:	5f 4f       	sbci	r21, 0xFF	; 255
    25a4:	0e c0       	rjmp	.+28     	; 0x25c2 <__fixsfsi+0x9c>
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	40 e0       	ldi	r20, 0x00	; 0
    25ac:	50 e0       	ldi	r21, 0x00	; 0
    25ae:	09 c0       	rjmp	.+18     	; 0x25c2 <__fixsfsi+0x9c>
    25b0:	2f ef       	ldi	r18, 0xFF	; 255
    25b2:	3f ef       	ldi	r19, 0xFF	; 255
    25b4:	4f ef       	ldi	r20, 0xFF	; 255
    25b6:	5f e7       	ldi	r21, 0x7F	; 127
    25b8:	04 c0       	rjmp	.+8      	; 0x25c2 <__fixsfsi+0x9c>
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	50 e8       	ldi	r21, 0x80	; 128
    25c2:	b9 01       	movw	r22, r18
    25c4:	ca 01       	movw	r24, r20
    25c6:	2c 96       	adiw	r28, 0x0c	; 12
    25c8:	e2 e0       	ldi	r30, 0x02	; 2
    25ca:	0c 94 83 2e 	jmp	0x5d06	; 0x5d06 <__epilogue_restores__+0x20>

000025ce <__floatunsisf>:
    25ce:	a8 e0       	ldi	r26, 0x08	; 8
    25d0:	b0 e0       	ldi	r27, 0x00	; 0
    25d2:	ed ee       	ldi	r30, 0xED	; 237
    25d4:	f2 e1       	ldi	r31, 0x12	; 18
    25d6:	0c 94 5f 2e 	jmp	0x5cbe	; 0x5cbe <__prologue_saves__+0x10>
    25da:	7b 01       	movw	r14, r22
    25dc:	8c 01       	movw	r16, r24
    25de:	61 15       	cp	r22, r1
    25e0:	71 05       	cpc	r23, r1
    25e2:	81 05       	cpc	r24, r1
    25e4:	91 05       	cpc	r25, r1
    25e6:	19 f4       	brne	.+6      	; 0x25ee <__floatunsisf+0x20>
    25e8:	82 e0       	ldi	r24, 0x02	; 2
    25ea:	89 83       	std	Y+1, r24	; 0x01
    25ec:	60 c0       	rjmp	.+192    	; 0x26ae <__floatunsisf+0xe0>
    25ee:	83 e0       	ldi	r24, 0x03	; 3
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	8e e1       	ldi	r24, 0x1E	; 30
    25f4:	c8 2e       	mov	r12, r24
    25f6:	d1 2c       	mov	r13, r1
    25f8:	dc 82       	std	Y+4, r13	; 0x04
    25fa:	cb 82       	std	Y+3, r12	; 0x03
    25fc:	ed 82       	std	Y+5, r14	; 0x05
    25fe:	fe 82       	std	Y+6, r15	; 0x06
    2600:	0f 83       	std	Y+7, r16	; 0x07
    2602:	18 87       	std	Y+8, r17	; 0x08
    2604:	c8 01       	movw	r24, r16
    2606:	b7 01       	movw	r22, r14
    2608:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__clzsi2>
    260c:	fc 01       	movw	r30, r24
    260e:	31 97       	sbiw	r30, 0x01	; 1
    2610:	f7 ff       	sbrs	r31, 7
    2612:	3b c0       	rjmp	.+118    	; 0x268a <__floatunsisf+0xbc>
    2614:	22 27       	eor	r18, r18
    2616:	33 27       	eor	r19, r19
    2618:	2e 1b       	sub	r18, r30
    261a:	3f 0b       	sbc	r19, r31
    261c:	57 01       	movw	r10, r14
    261e:	68 01       	movw	r12, r16
    2620:	02 2e       	mov	r0, r18
    2622:	04 c0       	rjmp	.+8      	; 0x262c <__floatunsisf+0x5e>
    2624:	d6 94       	lsr	r13
    2626:	c7 94       	ror	r12
    2628:	b7 94       	ror	r11
    262a:	a7 94       	ror	r10
    262c:	0a 94       	dec	r0
    262e:	d2 f7       	brpl	.-12     	; 0x2624 <__floatunsisf+0x56>
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	60 e0       	ldi	r22, 0x00	; 0
    2636:	70 e0       	ldi	r23, 0x00	; 0
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	90 e0       	ldi	r25, 0x00	; 0
    263c:	a0 e0       	ldi	r26, 0x00	; 0
    263e:	b0 e0       	ldi	r27, 0x00	; 0
    2640:	04 c0       	rjmp	.+8      	; 0x264a <__floatunsisf+0x7c>
    2642:	88 0f       	add	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	aa 1f       	adc	r26, r26
    2648:	bb 1f       	adc	r27, r27
    264a:	2a 95       	dec	r18
    264c:	d2 f7       	brpl	.-12     	; 0x2642 <__floatunsisf+0x74>
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	a1 09       	sbc	r26, r1
    2652:	b1 09       	sbc	r27, r1
    2654:	8e 21       	and	r24, r14
    2656:	9f 21       	and	r25, r15
    2658:	a0 23       	and	r26, r16
    265a:	b1 23       	and	r27, r17
    265c:	00 97       	sbiw	r24, 0x00	; 0
    265e:	a1 05       	cpc	r26, r1
    2660:	b1 05       	cpc	r27, r1
    2662:	21 f0       	breq	.+8      	; 0x266c <__floatunsisf+0x9e>
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	50 e0       	ldi	r21, 0x00	; 0
    2668:	60 e0       	ldi	r22, 0x00	; 0
    266a:	70 e0       	ldi	r23, 0x00	; 0
    266c:	4a 29       	or	r20, r10
    266e:	5b 29       	or	r21, r11
    2670:	6c 29       	or	r22, r12
    2672:	7d 29       	or	r23, r13
    2674:	4d 83       	std	Y+5, r20	; 0x05
    2676:	5e 83       	std	Y+6, r21	; 0x06
    2678:	6f 83       	std	Y+7, r22	; 0x07
    267a:	78 87       	std	Y+8, r23	; 0x08
    267c:	8e e1       	ldi	r24, 0x1E	; 30
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	8e 1b       	sub	r24, r30
    2682:	9f 0b       	sbc	r25, r31
    2684:	9c 83       	std	Y+4, r25	; 0x04
    2686:	8b 83       	std	Y+3, r24	; 0x03
    2688:	12 c0       	rjmp	.+36     	; 0x26ae <__floatunsisf+0xe0>
    268a:	30 97       	sbiw	r30, 0x00	; 0
    268c:	81 f0       	breq	.+32     	; 0x26ae <__floatunsisf+0xe0>
    268e:	0e 2e       	mov	r0, r30
    2690:	04 c0       	rjmp	.+8      	; 0x269a <__floatunsisf+0xcc>
    2692:	ee 0c       	add	r14, r14
    2694:	ff 1c       	adc	r15, r15
    2696:	00 1f       	adc	r16, r16
    2698:	11 1f       	adc	r17, r17
    269a:	0a 94       	dec	r0
    269c:	d2 f7       	brpl	.-12     	; 0x2692 <__floatunsisf+0xc4>
    269e:	ed 82       	std	Y+5, r14	; 0x05
    26a0:	fe 82       	std	Y+6, r15	; 0x06
    26a2:	0f 83       	std	Y+7, r16	; 0x07
    26a4:	18 87       	std	Y+8, r17	; 0x08
    26a6:	ce 1a       	sub	r12, r30
    26a8:	df 0a       	sbc	r13, r31
    26aa:	dc 82       	std	Y+4, r13	; 0x04
    26ac:	cb 82       	std	Y+3, r12	; 0x03
    26ae:	1a 82       	std	Y+2, r1	; 0x02
    26b0:	ce 01       	movw	r24, r28
    26b2:	01 96       	adiw	r24, 0x01	; 1
    26b4:	0e 94 db 13 	call	0x27b6	; 0x27b6 <__pack_f>
    26b8:	28 96       	adiw	r28, 0x08	; 8
    26ba:	ea e0       	ldi	r30, 0x0A	; 10
    26bc:	0c 94 7b 2e 	jmp	0x5cf6	; 0x5cf6 <__epilogue_restores__+0x10>

000026c0 <__clzsi2>:
    26c0:	ef 92       	push	r14
    26c2:	ff 92       	push	r15
    26c4:	0f 93       	push	r16
    26c6:	1f 93       	push	r17
    26c8:	7b 01       	movw	r14, r22
    26ca:	8c 01       	movw	r16, r24
    26cc:	80 e0       	ldi	r24, 0x00	; 0
    26ce:	e8 16       	cp	r14, r24
    26d0:	80 e0       	ldi	r24, 0x00	; 0
    26d2:	f8 06       	cpc	r15, r24
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	08 07       	cpc	r16, r24
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	18 07       	cpc	r17, r24
    26dc:	88 f4       	brcc	.+34     	; 0x2700 <__clzsi2+0x40>
    26de:	8f ef       	ldi	r24, 0xFF	; 255
    26e0:	e8 16       	cp	r14, r24
    26e2:	f1 04       	cpc	r15, r1
    26e4:	01 05       	cpc	r16, r1
    26e6:	11 05       	cpc	r17, r1
    26e8:	31 f0       	breq	.+12     	; 0x26f6 <__clzsi2+0x36>
    26ea:	28 f0       	brcs	.+10     	; 0x26f6 <__clzsi2+0x36>
    26ec:	88 e0       	ldi	r24, 0x08	; 8
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a0 e0       	ldi	r26, 0x00	; 0
    26f2:	b0 e0       	ldi	r27, 0x00	; 0
    26f4:	17 c0       	rjmp	.+46     	; 0x2724 <__clzsi2+0x64>
    26f6:	80 e0       	ldi	r24, 0x00	; 0
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	a0 e0       	ldi	r26, 0x00	; 0
    26fc:	b0 e0       	ldi	r27, 0x00	; 0
    26fe:	12 c0       	rjmp	.+36     	; 0x2724 <__clzsi2+0x64>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	e8 16       	cp	r14, r24
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	f8 06       	cpc	r15, r24
    2708:	80 e0       	ldi	r24, 0x00	; 0
    270a:	08 07       	cpc	r16, r24
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	18 07       	cpc	r17, r24
    2710:	28 f0       	brcs	.+10     	; 0x271c <__clzsi2+0x5c>
    2712:	88 e1       	ldi	r24, 0x18	; 24
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a0 e0       	ldi	r26, 0x00	; 0
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	04 c0       	rjmp	.+8      	; 0x2724 <__clzsi2+0x64>
    271c:	80 e1       	ldi	r24, 0x10	; 16
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a0 e0       	ldi	r26, 0x00	; 0
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	20 e2       	ldi	r18, 0x20	; 32
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	28 1b       	sub	r18, r24
    272e:	39 0b       	sbc	r19, r25
    2730:	4a 0b       	sbc	r20, r26
    2732:	5b 0b       	sbc	r21, r27
    2734:	04 c0       	rjmp	.+8      	; 0x273e <__clzsi2+0x7e>
    2736:	16 95       	lsr	r17
    2738:	07 95       	ror	r16
    273a:	f7 94       	ror	r15
    273c:	e7 94       	ror	r14
    273e:	8a 95       	dec	r24
    2740:	d2 f7       	brpl	.-12     	; 0x2736 <__clzsi2+0x76>
    2742:	f7 01       	movw	r30, r14
    2744:	e4 57       	subi	r30, 0x74	; 116
    2746:	ff 4f       	sbci	r31, 0xFF	; 255
    2748:	80 81       	ld	r24, Z
    274a:	28 1b       	sub	r18, r24
    274c:	31 09       	sbc	r19, r1
    274e:	41 09       	sbc	r20, r1
    2750:	51 09       	sbc	r21, r1
    2752:	c9 01       	movw	r24, r18
    2754:	1f 91       	pop	r17
    2756:	0f 91       	pop	r16
    2758:	ff 90       	pop	r15
    275a:	ef 90       	pop	r14
    275c:	08 95       	ret

0000275e <__fixunssfsi>:
    275e:	ef 92       	push	r14
    2760:	ff 92       	push	r15
    2762:	0f 93       	push	r16
    2764:	1f 93       	push	r17
    2766:	7b 01       	movw	r14, r22
    2768:	8c 01       	movw	r16, r24
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	40 e0       	ldi	r20, 0x00	; 0
    2770:	5f e4       	ldi	r21, 0x4F	; 79
    2772:	0e 94 d5 11 	call	0x23aa	; 0x23aa <__gesf2>
    2776:	88 23       	and	r24, r24
    2778:	8c f0       	brlt	.+34     	; 0x279c <__fixunssfsi+0x3e>
    277a:	c8 01       	movw	r24, r16
    277c:	b7 01       	movw	r22, r14
    277e:	20 e0       	ldi	r18, 0x00	; 0
    2780:	30 e0       	ldi	r19, 0x00	; 0
    2782:	40 e0       	ldi	r20, 0x00	; 0
    2784:	5f e4       	ldi	r21, 0x4F	; 79
    2786:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    278a:	0e 94 93 12 	call	0x2526	; 0x2526 <__fixsfsi>
    278e:	9b 01       	movw	r18, r22
    2790:	ac 01       	movw	r20, r24
    2792:	20 50       	subi	r18, 0x00	; 0
    2794:	30 40       	sbci	r19, 0x00	; 0
    2796:	40 40       	sbci	r20, 0x00	; 0
    2798:	50 48       	sbci	r21, 0x80	; 128
    279a:	06 c0       	rjmp	.+12     	; 0x27a8 <__fixunssfsi+0x4a>
    279c:	c8 01       	movw	r24, r16
    279e:	b7 01       	movw	r22, r14
    27a0:	0e 94 93 12 	call	0x2526	; 0x2526 <__fixsfsi>
    27a4:	9b 01       	movw	r18, r22
    27a6:	ac 01       	movw	r20, r24
    27a8:	b9 01       	movw	r22, r18
    27aa:	ca 01       	movw	r24, r20
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	08 95       	ret

000027b6 <__pack_f>:
    27b6:	df 92       	push	r13
    27b8:	ef 92       	push	r14
    27ba:	ff 92       	push	r15
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	fc 01       	movw	r30, r24
    27c2:	e4 80       	ldd	r14, Z+4	; 0x04
    27c4:	f5 80       	ldd	r15, Z+5	; 0x05
    27c6:	06 81       	ldd	r16, Z+6	; 0x06
    27c8:	17 81       	ldd	r17, Z+7	; 0x07
    27ca:	d1 80       	ldd	r13, Z+1	; 0x01
    27cc:	80 81       	ld	r24, Z
    27ce:	82 30       	cpi	r24, 0x02	; 2
    27d0:	48 f4       	brcc	.+18     	; 0x27e4 <__pack_f+0x2e>
    27d2:	80 e0       	ldi	r24, 0x00	; 0
    27d4:	90 e0       	ldi	r25, 0x00	; 0
    27d6:	a0 e1       	ldi	r26, 0x10	; 16
    27d8:	b0 e0       	ldi	r27, 0x00	; 0
    27da:	e8 2a       	or	r14, r24
    27dc:	f9 2a       	or	r15, r25
    27de:	0a 2b       	or	r16, r26
    27e0:	1b 2b       	or	r17, r27
    27e2:	a5 c0       	rjmp	.+330    	; 0x292e <__pack_f+0x178>
    27e4:	84 30       	cpi	r24, 0x04	; 4
    27e6:	09 f4       	brne	.+2      	; 0x27ea <__pack_f+0x34>
    27e8:	9f c0       	rjmp	.+318    	; 0x2928 <__pack_f+0x172>
    27ea:	82 30       	cpi	r24, 0x02	; 2
    27ec:	21 f4       	brne	.+8      	; 0x27f6 <__pack_f+0x40>
    27ee:	ee 24       	eor	r14, r14
    27f0:	ff 24       	eor	r15, r15
    27f2:	87 01       	movw	r16, r14
    27f4:	05 c0       	rjmp	.+10     	; 0x2800 <__pack_f+0x4a>
    27f6:	e1 14       	cp	r14, r1
    27f8:	f1 04       	cpc	r15, r1
    27fa:	01 05       	cpc	r16, r1
    27fc:	11 05       	cpc	r17, r1
    27fe:	19 f4       	brne	.+6      	; 0x2806 <__pack_f+0x50>
    2800:	e0 e0       	ldi	r30, 0x00	; 0
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	96 c0       	rjmp	.+300    	; 0x2932 <__pack_f+0x17c>
    2806:	62 81       	ldd	r22, Z+2	; 0x02
    2808:	73 81       	ldd	r23, Z+3	; 0x03
    280a:	9f ef       	ldi	r25, 0xFF	; 255
    280c:	62 38       	cpi	r22, 0x82	; 130
    280e:	79 07       	cpc	r23, r25
    2810:	0c f0       	brlt	.+2      	; 0x2814 <__pack_f+0x5e>
    2812:	5b c0       	rjmp	.+182    	; 0x28ca <__pack_f+0x114>
    2814:	22 e8       	ldi	r18, 0x82	; 130
    2816:	3f ef       	ldi	r19, 0xFF	; 255
    2818:	26 1b       	sub	r18, r22
    281a:	37 0b       	sbc	r19, r23
    281c:	2a 31       	cpi	r18, 0x1A	; 26
    281e:	31 05       	cpc	r19, r1
    2820:	2c f0       	brlt	.+10     	; 0x282c <__pack_f+0x76>
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	50 e0       	ldi	r21, 0x00	; 0
    282a:	2a c0       	rjmp	.+84     	; 0x2880 <__pack_f+0xca>
    282c:	b8 01       	movw	r22, r16
    282e:	a7 01       	movw	r20, r14
    2830:	02 2e       	mov	r0, r18
    2832:	04 c0       	rjmp	.+8      	; 0x283c <__pack_f+0x86>
    2834:	76 95       	lsr	r23
    2836:	67 95       	ror	r22
    2838:	57 95       	ror	r21
    283a:	47 95       	ror	r20
    283c:	0a 94       	dec	r0
    283e:	d2 f7       	brpl	.-12     	; 0x2834 <__pack_f+0x7e>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 e0       	ldi	r26, 0x00	; 0
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	04 c0       	rjmp	.+8      	; 0x2852 <__pack_f+0x9c>
    284a:	88 0f       	add	r24, r24
    284c:	99 1f       	adc	r25, r25
    284e:	aa 1f       	adc	r26, r26
    2850:	bb 1f       	adc	r27, r27
    2852:	2a 95       	dec	r18
    2854:	d2 f7       	brpl	.-12     	; 0x284a <__pack_f+0x94>
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	a1 09       	sbc	r26, r1
    285a:	b1 09       	sbc	r27, r1
    285c:	8e 21       	and	r24, r14
    285e:	9f 21       	and	r25, r15
    2860:	a0 23       	and	r26, r16
    2862:	b1 23       	and	r27, r17
    2864:	00 97       	sbiw	r24, 0x00	; 0
    2866:	a1 05       	cpc	r26, r1
    2868:	b1 05       	cpc	r27, r1
    286a:	21 f0       	breq	.+8      	; 0x2874 <__pack_f+0xbe>
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	a0 e0       	ldi	r26, 0x00	; 0
    2872:	b0 e0       	ldi	r27, 0x00	; 0
    2874:	9a 01       	movw	r18, r20
    2876:	ab 01       	movw	r20, r22
    2878:	28 2b       	or	r18, r24
    287a:	39 2b       	or	r19, r25
    287c:	4a 2b       	or	r20, r26
    287e:	5b 2b       	or	r21, r27
    2880:	da 01       	movw	r26, r20
    2882:	c9 01       	movw	r24, r18
    2884:	8f 77       	andi	r24, 0x7F	; 127
    2886:	90 70       	andi	r25, 0x00	; 0
    2888:	a0 70       	andi	r26, 0x00	; 0
    288a:	b0 70       	andi	r27, 0x00	; 0
    288c:	80 34       	cpi	r24, 0x40	; 64
    288e:	91 05       	cpc	r25, r1
    2890:	a1 05       	cpc	r26, r1
    2892:	b1 05       	cpc	r27, r1
    2894:	39 f4       	brne	.+14     	; 0x28a4 <__pack_f+0xee>
    2896:	27 ff       	sbrs	r18, 7
    2898:	09 c0       	rjmp	.+18     	; 0x28ac <__pack_f+0xf6>
    289a:	20 5c       	subi	r18, 0xC0	; 192
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
    289e:	4f 4f       	sbci	r20, 0xFF	; 255
    28a0:	5f 4f       	sbci	r21, 0xFF	; 255
    28a2:	04 c0       	rjmp	.+8      	; 0x28ac <__pack_f+0xf6>
    28a4:	21 5c       	subi	r18, 0xC1	; 193
    28a6:	3f 4f       	sbci	r19, 0xFF	; 255
    28a8:	4f 4f       	sbci	r20, 0xFF	; 255
    28aa:	5f 4f       	sbci	r21, 0xFF	; 255
    28ac:	e0 e0       	ldi	r30, 0x00	; 0
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	20 30       	cpi	r18, 0x00	; 0
    28b2:	a0 e0       	ldi	r26, 0x00	; 0
    28b4:	3a 07       	cpc	r19, r26
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	4a 07       	cpc	r20, r26
    28ba:	a0 e4       	ldi	r26, 0x40	; 64
    28bc:	5a 07       	cpc	r21, r26
    28be:	10 f0       	brcs	.+4      	; 0x28c4 <__pack_f+0x10e>
    28c0:	e1 e0       	ldi	r30, 0x01	; 1
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	79 01       	movw	r14, r18
    28c6:	8a 01       	movw	r16, r20
    28c8:	27 c0       	rjmp	.+78     	; 0x2918 <__pack_f+0x162>
    28ca:	60 38       	cpi	r22, 0x80	; 128
    28cc:	71 05       	cpc	r23, r1
    28ce:	64 f5       	brge	.+88     	; 0x2928 <__pack_f+0x172>
    28d0:	fb 01       	movw	r30, r22
    28d2:	e1 58       	subi	r30, 0x81	; 129
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	d8 01       	movw	r26, r16
    28d8:	c7 01       	movw	r24, r14
    28da:	8f 77       	andi	r24, 0x7F	; 127
    28dc:	90 70       	andi	r25, 0x00	; 0
    28de:	a0 70       	andi	r26, 0x00	; 0
    28e0:	b0 70       	andi	r27, 0x00	; 0
    28e2:	80 34       	cpi	r24, 0x40	; 64
    28e4:	91 05       	cpc	r25, r1
    28e6:	a1 05       	cpc	r26, r1
    28e8:	b1 05       	cpc	r27, r1
    28ea:	39 f4       	brne	.+14     	; 0x28fa <__pack_f+0x144>
    28ec:	e7 fe       	sbrs	r14, 7
    28ee:	0d c0       	rjmp	.+26     	; 0x290a <__pack_f+0x154>
    28f0:	80 e4       	ldi	r24, 0x40	; 64
    28f2:	90 e0       	ldi	r25, 0x00	; 0
    28f4:	a0 e0       	ldi	r26, 0x00	; 0
    28f6:	b0 e0       	ldi	r27, 0x00	; 0
    28f8:	04 c0       	rjmp	.+8      	; 0x2902 <__pack_f+0x14c>
    28fa:	8f e3       	ldi	r24, 0x3F	; 63
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	a0 e0       	ldi	r26, 0x00	; 0
    2900:	b0 e0       	ldi	r27, 0x00	; 0
    2902:	e8 0e       	add	r14, r24
    2904:	f9 1e       	adc	r15, r25
    2906:	0a 1f       	adc	r16, r26
    2908:	1b 1f       	adc	r17, r27
    290a:	17 ff       	sbrs	r17, 7
    290c:	05 c0       	rjmp	.+10     	; 0x2918 <__pack_f+0x162>
    290e:	16 95       	lsr	r17
    2910:	07 95       	ror	r16
    2912:	f7 94       	ror	r15
    2914:	e7 94       	ror	r14
    2916:	31 96       	adiw	r30, 0x01	; 1
    2918:	87 e0       	ldi	r24, 0x07	; 7
    291a:	16 95       	lsr	r17
    291c:	07 95       	ror	r16
    291e:	f7 94       	ror	r15
    2920:	e7 94       	ror	r14
    2922:	8a 95       	dec	r24
    2924:	d1 f7       	brne	.-12     	; 0x291a <__pack_f+0x164>
    2926:	05 c0       	rjmp	.+10     	; 0x2932 <__pack_f+0x17c>
    2928:	ee 24       	eor	r14, r14
    292a:	ff 24       	eor	r15, r15
    292c:	87 01       	movw	r16, r14
    292e:	ef ef       	ldi	r30, 0xFF	; 255
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	6e 2f       	mov	r22, r30
    2934:	67 95       	ror	r22
    2936:	66 27       	eor	r22, r22
    2938:	67 95       	ror	r22
    293a:	90 2f       	mov	r25, r16
    293c:	9f 77       	andi	r25, 0x7F	; 127
    293e:	d7 94       	ror	r13
    2940:	dd 24       	eor	r13, r13
    2942:	d7 94       	ror	r13
    2944:	8e 2f       	mov	r24, r30
    2946:	86 95       	lsr	r24
    2948:	49 2f       	mov	r20, r25
    294a:	46 2b       	or	r20, r22
    294c:	58 2f       	mov	r21, r24
    294e:	5d 29       	or	r21, r13
    2950:	b7 01       	movw	r22, r14
    2952:	ca 01       	movw	r24, r20
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	df 90       	pop	r13
    295e:	08 95       	ret

00002960 <__unpack_f>:
    2960:	fc 01       	movw	r30, r24
    2962:	db 01       	movw	r26, r22
    2964:	40 81       	ld	r20, Z
    2966:	51 81       	ldd	r21, Z+1	; 0x01
    2968:	22 81       	ldd	r18, Z+2	; 0x02
    296a:	62 2f       	mov	r22, r18
    296c:	6f 77       	andi	r22, 0x7F	; 127
    296e:	70 e0       	ldi	r23, 0x00	; 0
    2970:	22 1f       	adc	r18, r18
    2972:	22 27       	eor	r18, r18
    2974:	22 1f       	adc	r18, r18
    2976:	93 81       	ldd	r25, Z+3	; 0x03
    2978:	89 2f       	mov	r24, r25
    297a:	88 0f       	add	r24, r24
    297c:	82 2b       	or	r24, r18
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	99 1f       	adc	r25, r25
    2984:	99 27       	eor	r25, r25
    2986:	99 1f       	adc	r25, r25
    2988:	11 96       	adiw	r26, 0x01	; 1
    298a:	9c 93       	st	X, r25
    298c:	11 97       	sbiw	r26, 0x01	; 1
    298e:	21 15       	cp	r18, r1
    2990:	31 05       	cpc	r19, r1
    2992:	a9 f5       	brne	.+106    	; 0x29fe <__unpack_f+0x9e>
    2994:	41 15       	cp	r20, r1
    2996:	51 05       	cpc	r21, r1
    2998:	61 05       	cpc	r22, r1
    299a:	71 05       	cpc	r23, r1
    299c:	11 f4       	brne	.+4      	; 0x29a2 <__unpack_f+0x42>
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	37 c0       	rjmp	.+110    	; 0x2a10 <__unpack_f+0xb0>
    29a2:	82 e8       	ldi	r24, 0x82	; 130
    29a4:	9f ef       	ldi	r25, 0xFF	; 255
    29a6:	13 96       	adiw	r26, 0x03	; 3
    29a8:	9c 93       	st	X, r25
    29aa:	8e 93       	st	-X, r24
    29ac:	12 97       	sbiw	r26, 0x02	; 2
    29ae:	9a 01       	movw	r18, r20
    29b0:	ab 01       	movw	r20, r22
    29b2:	67 e0       	ldi	r22, 0x07	; 7
    29b4:	22 0f       	add	r18, r18
    29b6:	33 1f       	adc	r19, r19
    29b8:	44 1f       	adc	r20, r20
    29ba:	55 1f       	adc	r21, r21
    29bc:	6a 95       	dec	r22
    29be:	d1 f7       	brne	.-12     	; 0x29b4 <__unpack_f+0x54>
    29c0:	83 e0       	ldi	r24, 0x03	; 3
    29c2:	8c 93       	st	X, r24
    29c4:	0d c0       	rjmp	.+26     	; 0x29e0 <__unpack_f+0x80>
    29c6:	22 0f       	add	r18, r18
    29c8:	33 1f       	adc	r19, r19
    29ca:	44 1f       	adc	r20, r20
    29cc:	55 1f       	adc	r21, r21
    29ce:	12 96       	adiw	r26, 0x02	; 2
    29d0:	8d 91       	ld	r24, X+
    29d2:	9c 91       	ld	r25, X
    29d4:	13 97       	sbiw	r26, 0x03	; 3
    29d6:	01 97       	sbiw	r24, 0x01	; 1
    29d8:	13 96       	adiw	r26, 0x03	; 3
    29da:	9c 93       	st	X, r25
    29dc:	8e 93       	st	-X, r24
    29de:	12 97       	sbiw	r26, 0x02	; 2
    29e0:	20 30       	cpi	r18, 0x00	; 0
    29e2:	80 e0       	ldi	r24, 0x00	; 0
    29e4:	38 07       	cpc	r19, r24
    29e6:	80 e0       	ldi	r24, 0x00	; 0
    29e8:	48 07       	cpc	r20, r24
    29ea:	80 e4       	ldi	r24, 0x40	; 64
    29ec:	58 07       	cpc	r21, r24
    29ee:	58 f3       	brcs	.-42     	; 0x29c6 <__unpack_f+0x66>
    29f0:	14 96       	adiw	r26, 0x04	; 4
    29f2:	2d 93       	st	X+, r18
    29f4:	3d 93       	st	X+, r19
    29f6:	4d 93       	st	X+, r20
    29f8:	5c 93       	st	X, r21
    29fa:	17 97       	sbiw	r26, 0x07	; 7
    29fc:	08 95       	ret
    29fe:	2f 3f       	cpi	r18, 0xFF	; 255
    2a00:	31 05       	cpc	r19, r1
    2a02:	79 f4       	brne	.+30     	; 0x2a22 <__unpack_f+0xc2>
    2a04:	41 15       	cp	r20, r1
    2a06:	51 05       	cpc	r21, r1
    2a08:	61 05       	cpc	r22, r1
    2a0a:	71 05       	cpc	r23, r1
    2a0c:	19 f4       	brne	.+6      	; 0x2a14 <__unpack_f+0xb4>
    2a0e:	84 e0       	ldi	r24, 0x04	; 4
    2a10:	8c 93       	st	X, r24
    2a12:	08 95       	ret
    2a14:	64 ff       	sbrs	r22, 4
    2a16:	03 c0       	rjmp	.+6      	; 0x2a1e <__unpack_f+0xbe>
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	8c 93       	st	X, r24
    2a1c:	12 c0       	rjmp	.+36     	; 0x2a42 <__unpack_f+0xe2>
    2a1e:	1c 92       	st	X, r1
    2a20:	10 c0       	rjmp	.+32     	; 0x2a42 <__unpack_f+0xe2>
    2a22:	2f 57       	subi	r18, 0x7F	; 127
    2a24:	30 40       	sbci	r19, 0x00	; 0
    2a26:	13 96       	adiw	r26, 0x03	; 3
    2a28:	3c 93       	st	X, r19
    2a2a:	2e 93       	st	-X, r18
    2a2c:	12 97       	sbiw	r26, 0x02	; 2
    2a2e:	83 e0       	ldi	r24, 0x03	; 3
    2a30:	8c 93       	st	X, r24
    2a32:	87 e0       	ldi	r24, 0x07	; 7
    2a34:	44 0f       	add	r20, r20
    2a36:	55 1f       	adc	r21, r21
    2a38:	66 1f       	adc	r22, r22
    2a3a:	77 1f       	adc	r23, r23
    2a3c:	8a 95       	dec	r24
    2a3e:	d1 f7       	brne	.-12     	; 0x2a34 <__unpack_f+0xd4>
    2a40:	70 64       	ori	r23, 0x40	; 64
    2a42:	14 96       	adiw	r26, 0x04	; 4
    2a44:	4d 93       	st	X+, r20
    2a46:	5d 93       	st	X+, r21
    2a48:	6d 93       	st	X+, r22
    2a4a:	7c 93       	st	X, r23
    2a4c:	17 97       	sbiw	r26, 0x07	; 7
    2a4e:	08 95       	ret

00002a50 <__fpcmp_parts_f>:
    2a50:	1f 93       	push	r17
    2a52:	dc 01       	movw	r26, r24
    2a54:	fb 01       	movw	r30, r22
    2a56:	9c 91       	ld	r25, X
    2a58:	92 30       	cpi	r25, 0x02	; 2
    2a5a:	08 f4       	brcc	.+2      	; 0x2a5e <__fpcmp_parts_f+0xe>
    2a5c:	47 c0       	rjmp	.+142    	; 0x2aec <__fpcmp_parts_f+0x9c>
    2a5e:	80 81       	ld	r24, Z
    2a60:	82 30       	cpi	r24, 0x02	; 2
    2a62:	08 f4       	brcc	.+2      	; 0x2a66 <__fpcmp_parts_f+0x16>
    2a64:	43 c0       	rjmp	.+134    	; 0x2aec <__fpcmp_parts_f+0x9c>
    2a66:	94 30       	cpi	r25, 0x04	; 4
    2a68:	51 f4       	brne	.+20     	; 0x2a7e <__fpcmp_parts_f+0x2e>
    2a6a:	11 96       	adiw	r26, 0x01	; 1
    2a6c:	1c 91       	ld	r17, X
    2a6e:	84 30       	cpi	r24, 0x04	; 4
    2a70:	99 f5       	brne	.+102    	; 0x2ad8 <__fpcmp_parts_f+0x88>
    2a72:	81 81       	ldd	r24, Z+1	; 0x01
    2a74:	68 2f       	mov	r22, r24
    2a76:	70 e0       	ldi	r23, 0x00	; 0
    2a78:	61 1b       	sub	r22, r17
    2a7a:	71 09       	sbc	r23, r1
    2a7c:	3f c0       	rjmp	.+126    	; 0x2afc <__fpcmp_parts_f+0xac>
    2a7e:	84 30       	cpi	r24, 0x04	; 4
    2a80:	21 f0       	breq	.+8      	; 0x2a8a <__fpcmp_parts_f+0x3a>
    2a82:	92 30       	cpi	r25, 0x02	; 2
    2a84:	31 f4       	brne	.+12     	; 0x2a92 <__fpcmp_parts_f+0x42>
    2a86:	82 30       	cpi	r24, 0x02	; 2
    2a88:	b9 f1       	breq	.+110    	; 0x2af8 <__fpcmp_parts_f+0xa8>
    2a8a:	81 81       	ldd	r24, Z+1	; 0x01
    2a8c:	88 23       	and	r24, r24
    2a8e:	89 f1       	breq	.+98     	; 0x2af2 <__fpcmp_parts_f+0xa2>
    2a90:	2d c0       	rjmp	.+90     	; 0x2aec <__fpcmp_parts_f+0x9c>
    2a92:	11 96       	adiw	r26, 0x01	; 1
    2a94:	1c 91       	ld	r17, X
    2a96:	11 97       	sbiw	r26, 0x01	; 1
    2a98:	82 30       	cpi	r24, 0x02	; 2
    2a9a:	f1 f0       	breq	.+60     	; 0x2ad8 <__fpcmp_parts_f+0x88>
    2a9c:	81 81       	ldd	r24, Z+1	; 0x01
    2a9e:	18 17       	cp	r17, r24
    2aa0:	d9 f4       	brne	.+54     	; 0x2ad8 <__fpcmp_parts_f+0x88>
    2aa2:	12 96       	adiw	r26, 0x02	; 2
    2aa4:	2d 91       	ld	r18, X+
    2aa6:	3c 91       	ld	r19, X
    2aa8:	13 97       	sbiw	r26, 0x03	; 3
    2aaa:	82 81       	ldd	r24, Z+2	; 0x02
    2aac:	93 81       	ldd	r25, Z+3	; 0x03
    2aae:	82 17       	cp	r24, r18
    2ab0:	93 07       	cpc	r25, r19
    2ab2:	94 f0       	brlt	.+36     	; 0x2ad8 <__fpcmp_parts_f+0x88>
    2ab4:	28 17       	cp	r18, r24
    2ab6:	39 07       	cpc	r19, r25
    2ab8:	bc f0       	brlt	.+46     	; 0x2ae8 <__fpcmp_parts_f+0x98>
    2aba:	14 96       	adiw	r26, 0x04	; 4
    2abc:	8d 91       	ld	r24, X+
    2abe:	9d 91       	ld	r25, X+
    2ac0:	0d 90       	ld	r0, X+
    2ac2:	bc 91       	ld	r27, X
    2ac4:	a0 2d       	mov	r26, r0
    2ac6:	24 81       	ldd	r18, Z+4	; 0x04
    2ac8:	35 81       	ldd	r19, Z+5	; 0x05
    2aca:	46 81       	ldd	r20, Z+6	; 0x06
    2acc:	57 81       	ldd	r21, Z+7	; 0x07
    2ace:	28 17       	cp	r18, r24
    2ad0:	39 07       	cpc	r19, r25
    2ad2:	4a 07       	cpc	r20, r26
    2ad4:	5b 07       	cpc	r21, r27
    2ad6:	18 f4       	brcc	.+6      	; 0x2ade <__fpcmp_parts_f+0x8e>
    2ad8:	11 23       	and	r17, r17
    2ada:	41 f0       	breq	.+16     	; 0x2aec <__fpcmp_parts_f+0x9c>
    2adc:	0a c0       	rjmp	.+20     	; 0x2af2 <__fpcmp_parts_f+0xa2>
    2ade:	82 17       	cp	r24, r18
    2ae0:	93 07       	cpc	r25, r19
    2ae2:	a4 07       	cpc	r26, r20
    2ae4:	b5 07       	cpc	r27, r21
    2ae6:	40 f4       	brcc	.+16     	; 0x2af8 <__fpcmp_parts_f+0xa8>
    2ae8:	11 23       	and	r17, r17
    2aea:	19 f0       	breq	.+6      	; 0x2af2 <__fpcmp_parts_f+0xa2>
    2aec:	61 e0       	ldi	r22, 0x01	; 1
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	05 c0       	rjmp	.+10     	; 0x2afc <__fpcmp_parts_f+0xac>
    2af2:	6f ef       	ldi	r22, 0xFF	; 255
    2af4:	7f ef       	ldi	r23, 0xFF	; 255
    2af6:	02 c0       	rjmp	.+4      	; 0x2afc <__fpcmp_parts_f+0xac>
    2af8:	60 e0       	ldi	r22, 0x00	; 0
    2afa:	70 e0       	ldi	r23, 0x00	; 0
    2afc:	cb 01       	movw	r24, r22
    2afe:	1f 91       	pop	r17
    2b00:	08 95       	ret

00002b02 <DIO_enumSetPinDirection>:
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2b02:	84 30       	cpi	r24, 0x04	; 4
    2b04:	90 f4       	brcc	.+36     	; 0x2b2a <DIO_enumSetPinDirection+0x28>
    2b06:	68 30       	cpi	r22, 0x08	; 8
    2b08:	80 f4       	brcc	.+32     	; 0x2b2a <DIO_enumSetPinDirection+0x28>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    2b0a:	41 30       	cpi	r20, 0x01	; 1
    2b0c:	81 f0       	breq	.+32     	; 0x2b2e <DIO_enumSetPinDirection+0x2c>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    2b0e:	44 23       	and	r20, r20
    2b10:	61 f4       	brne	.+24     	; 0x2b2a <DIO_enumSetPinDirection+0x28>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    2b12:	81 30       	cpi	r24, 0x01	; 1
    2b14:	d9 f1       	breq	.+118    	; 0x2b8c <DIO_enumSetPinDirection+0x8a>
    2b16:	81 30       	cpi	r24, 0x01	; 1
    2b18:	00 f1       	brcs	.+64     	; 0x2b5a <DIO_enumSetPinDirection+0x58>
    2b1a:	82 30       	cpi	r24, 0x02	; 2
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <DIO_enumSetPinDirection+0x1e>
    2b1e:	50 c0       	rjmp	.+160    	; 0x2bc0 <DIO_enumSetPinDirection+0xbe>
    2b20:	83 30       	cpi	r24, 0x03	; 3
    2b22:	09 f4       	brne	.+2      	; 0x2b26 <DIO_enumSetPinDirection+0x24>
    2b24:	40 c0       	rjmp	.+128    	; 0x2ba6 <DIO_enumSetPinDirection+0xa4>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
    2b28:	08 95       	ret
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    2b2e:	81 30       	cpi	r24, 0x01	; 1
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <DIO_enumSetPinDirection+0x32>
    2b32:	53 c0       	rjmp	.+166    	; 0x2bda <DIO_enumSetPinDirection+0xd8>
    2b34:	81 30       	cpi	r24, 0x01	; 1
    2b36:	f0 f0       	brcs	.+60     	; 0x2b74 <DIO_enumSetPinDirection+0x72>
    2b38:	82 30       	cpi	r24, 0x02	; 2
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <DIO_enumSetPinDirection+0x3c>
    2b3c:	5a c0       	rjmp	.+180    	; 0x2bf2 <DIO_enumSetPinDirection+0xf0>
    2b3e:	83 30       	cpi	r24, 0x03	; 3
    2b40:	91 f7       	brne	.-28     	; 0x2b26 <DIO_enumSetPinDirection+0x24>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    2b42:	21 b3       	in	r18, 0x11	; 17
    2b44:	81 e0       	ldi	r24, 0x01	; 1
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	02 c0       	rjmp	.+4      	; 0x2b4e <DIO_enumSetPinDirection+0x4c>
    2b4a:	88 0f       	add	r24, r24
    2b4c:	99 1f       	adc	r25, r25
    2b4e:	6a 95       	dec	r22
    2b50:	e2 f7       	brpl	.-8      	; 0x2b4a <DIO_enumSetPinDirection+0x48>
    2b52:	28 2b       	or	r18, r24
    2b54:	21 bb       	out	0x11, r18	; 17
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	08 95       	ret
		else if ( Copy_u8Direction == DIO_PIN_INPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    2b5a:	2a b3       	in	r18, 0x1a	; 26
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	90 e0       	ldi	r25, 0x00	; 0
    2b60:	02 c0       	rjmp	.+4      	; 0x2b66 <DIO_enumSetPinDirection+0x64>
    2b62:	88 0f       	add	r24, r24
    2b64:	99 1f       	adc	r25, r25
    2b66:	6a 95       	dec	r22
    2b68:	e2 f7       	brpl	.-8      	; 0x2b62 <DIO_enumSetPinDirection+0x60>
    2b6a:	80 95       	com	r24
    2b6c:	82 23       	and	r24, r18
    2b6e:	8a bb       	out	0x1a, r24	; 26
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	08 95       	ret
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    2b74:	2a b3       	in	r18, 0x1a	; 26
    2b76:	81 e0       	ldi	r24, 0x01	; 1
    2b78:	90 e0       	ldi	r25, 0x00	; 0
    2b7a:	02 c0       	rjmp	.+4      	; 0x2b80 <DIO_enumSetPinDirection+0x7e>
    2b7c:	88 0f       	add	r24, r24
    2b7e:	99 1f       	adc	r25, r25
    2b80:	6a 95       	dec	r22
    2b82:	e2 f7       	brpl	.-8      	; 0x2b7c <DIO_enumSetPinDirection+0x7a>
    2b84:	28 2b       	or	r18, r24
    2b86:	2a bb       	out	0x1a, r18	; 26
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    2b8c:	27 b3       	in	r18, 0x17	; 23
    2b8e:	81 e0       	ldi	r24, 0x01	; 1
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	02 c0       	rjmp	.+4      	; 0x2b98 <DIO_enumSetPinDirection+0x96>
    2b94:	88 0f       	add	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	6a 95       	dec	r22
    2b9a:	e2 f7       	brpl	.-8      	; 0x2b94 <DIO_enumSetPinDirection+0x92>
    2b9c:	80 95       	com	r24
    2b9e:	82 23       	and	r24, r18
    2ba0:	87 bb       	out	0x17, r24	; 23
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	08 95       	ret
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    2ba6:	21 b3       	in	r18, 0x11	; 17
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	02 c0       	rjmp	.+4      	; 0x2bb2 <DIO_enumSetPinDirection+0xb0>
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	6a 95       	dec	r22
    2bb4:	e2 f7       	brpl	.-8      	; 0x2bae <DIO_enumSetPinDirection+0xac>
    2bb6:	80 95       	com	r24
    2bb8:	82 23       	and	r24, r18
    2bba:	81 bb       	out	0x11, r24	; 17
    2bbc:	81 e0       	ldi	r24, 0x01	; 1
    2bbe:	08 95       	ret
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    2bc0:	24 b3       	in	r18, 0x14	; 20
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	90 e0       	ldi	r25, 0x00	; 0
    2bc6:	02 c0       	rjmp	.+4      	; 0x2bcc <DIO_enumSetPinDirection+0xca>
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	6a 95       	dec	r22
    2bce:	e2 f7       	brpl	.-8      	; 0x2bc8 <DIO_enumSetPinDirection+0xc6>
    2bd0:	80 95       	com	r24
    2bd2:	82 23       	and	r24, r18
    2bd4:	84 bb       	out	0x14, r24	; 20
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    2bda:	27 b3       	in	r18, 0x17	; 23
    2bdc:	81 e0       	ldi	r24, 0x01	; 1
    2bde:	90 e0       	ldi	r25, 0x00	; 0
    2be0:	02 c0       	rjmp	.+4      	; 0x2be6 <DIO_enumSetPinDirection+0xe4>
    2be2:	88 0f       	add	r24, r24
    2be4:	99 1f       	adc	r25, r25
    2be6:	6a 95       	dec	r22
    2be8:	e2 f7       	brpl	.-8      	; 0x2be2 <DIO_enumSetPinDirection+0xe0>
    2bea:	28 2b       	or	r18, r24
    2bec:	27 bb       	out	0x17, r18	; 23
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	08 95       	ret
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    2bf2:	24 b3       	in	r18, 0x14	; 20
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <DIO_enumSetPinDirection+0xfc>
    2bfa:	88 0f       	add	r24, r24
    2bfc:	99 1f       	adc	r25, r25
    2bfe:	6a 95       	dec	r22
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <DIO_enumSetPinDirection+0xf8>
    2c02:	28 2b       	or	r18, r24
    2c04:	24 bb       	out	0x14, r18	; 20
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	08 95       	ret

00002c0a <DIO_enumSetPinValue>:
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2c0a:	84 30       	cpi	r24, 0x04	; 4
    2c0c:	90 f4       	brcc	.+36     	; 0x2c32 <DIO_enumSetPinValue+0x28>
    2c0e:	68 30       	cpi	r22, 0x08	; 8
    2c10:	80 f4       	brcc	.+32     	; 0x2c32 <DIO_enumSetPinValue+0x28>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    2c12:	41 30       	cpi	r20, 0x01	; 1
    2c14:	81 f0       	breq	.+32     	; 0x2c36 <DIO_enumSetPinValue+0x2c>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    2c16:	44 23       	and	r20, r20
    2c18:	61 f4       	brne	.+24     	; 0x2c32 <DIO_enumSetPinValue+0x28>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    2c1a:	81 30       	cpi	r24, 0x01	; 1
    2c1c:	d9 f1       	breq	.+118    	; 0x2c94 <DIO_enumSetPinValue+0x8a>
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	00 f1       	brcs	.+64     	; 0x2c62 <DIO_enumSetPinValue+0x58>
    2c22:	82 30       	cpi	r24, 0x02	; 2
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <DIO_enumSetPinValue+0x1e>
    2c26:	50 c0       	rjmp	.+160    	; 0x2cc8 <DIO_enumSetPinValue+0xbe>
    2c28:	83 30       	cpi	r24, 0x03	; 3
    2c2a:	09 f4       	brne	.+2      	; 0x2c2e <DIO_enumSetPinValue+0x24>
    2c2c:	40 c0       	rjmp	.+128    	; 0x2cae <DIO_enumSetPinValue+0xa4>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    2c2e:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState ;

}
    2c30:	08 95       	ret
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    2c36:	81 30       	cpi	r24, 0x01	; 1
    2c38:	09 f4       	brne	.+2      	; 0x2c3c <DIO_enumSetPinValue+0x32>
    2c3a:	53 c0       	rjmp	.+166    	; 0x2ce2 <DIO_enumSetPinValue+0xd8>
    2c3c:	81 30       	cpi	r24, 0x01	; 1
    2c3e:	f0 f0       	brcs	.+60     	; 0x2c7c <DIO_enumSetPinValue+0x72>
    2c40:	82 30       	cpi	r24, 0x02	; 2
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <DIO_enumSetPinValue+0x3c>
    2c44:	5a c0       	rjmp	.+180    	; 0x2cfa <DIO_enumSetPinValue+0xf0>
    2c46:	83 30       	cpi	r24, 0x03	; 3
    2c48:	91 f7       	brne	.-28     	; 0x2c2e <DIO_enumSetPinValue+0x24>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    2c4a:	22 b3       	in	r18, 0x12	; 18
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	02 c0       	rjmp	.+4      	; 0x2c56 <DIO_enumSetPinValue+0x4c>
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	6a 95       	dec	r22
    2c58:	e2 f7       	brpl	.-8      	; 0x2c52 <DIO_enumSetPinValue+0x48>
    2c5a:	28 2b       	or	r18, r24
    2c5c:	22 bb       	out	0x12, r18	; 18
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	08 95       	ret
		else if (Copy_u8Value == DIO_PIN_LOW)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    2c62:	2b b3       	in	r18, 0x1b	; 27
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	90 e0       	ldi	r25, 0x00	; 0
    2c68:	02 c0       	rjmp	.+4      	; 0x2c6e <DIO_enumSetPinValue+0x64>
    2c6a:	88 0f       	add	r24, r24
    2c6c:	99 1f       	adc	r25, r25
    2c6e:	6a 95       	dec	r22
    2c70:	e2 f7       	brpl	.-8      	; 0x2c6a <DIO_enumSetPinValue+0x60>
    2c72:	80 95       	com	r24
    2c74:	82 23       	and	r24, r18
    2c76:	8b bb       	out	0x1b, r24	; 27
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	08 95       	ret
		if (Copy_u8Value == DIO_PIN_HIGH)
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    2c7c:	2b b3       	in	r18, 0x1b	; 27
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <DIO_enumSetPinValue+0x7e>
    2c84:	88 0f       	add	r24, r24
    2c86:	99 1f       	adc	r25, r25
    2c88:	6a 95       	dec	r22
    2c8a:	e2 f7       	brpl	.-8      	; 0x2c84 <DIO_enumSetPinValue+0x7a>
    2c8c:	28 2b       	or	r18, r24
    2c8e:	2b bb       	out	0x1b, r18	; 27
    2c90:	81 e0       	ldi	r24, 0x01	; 1
    2c92:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    2c94:	28 b3       	in	r18, 0x18	; 24
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	90 e0       	ldi	r25, 0x00	; 0
    2c9a:	02 c0       	rjmp	.+4      	; 0x2ca0 <DIO_enumSetPinValue+0x96>
    2c9c:	88 0f       	add	r24, r24
    2c9e:	99 1f       	adc	r25, r25
    2ca0:	6a 95       	dec	r22
    2ca2:	e2 f7       	brpl	.-8      	; 0x2c9c <DIO_enumSetPinValue+0x92>
    2ca4:	80 95       	com	r24
    2ca6:	82 23       	and	r24, r18
    2ca8:	88 bb       	out	0x18, r24	; 24
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	08 95       	ret
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    2cae:	22 b3       	in	r18, 0x12	; 18
    2cb0:	81 e0       	ldi	r24, 0x01	; 1
    2cb2:	90 e0       	ldi	r25, 0x00	; 0
    2cb4:	02 c0       	rjmp	.+4      	; 0x2cba <DIO_enumSetPinValue+0xb0>
    2cb6:	88 0f       	add	r24, r24
    2cb8:	99 1f       	adc	r25, r25
    2cba:	6a 95       	dec	r22
    2cbc:	e2 f7       	brpl	.-8      	; 0x2cb6 <DIO_enumSetPinValue+0xac>
    2cbe:	80 95       	com	r24
    2cc0:	82 23       	and	r24, r18
    2cc2:	82 bb       	out	0x12, r24	; 18
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	08 95       	ret
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    2cc8:	25 b3       	in	r18, 0x15	; 21
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	02 c0       	rjmp	.+4      	; 0x2cd4 <DIO_enumSetPinValue+0xca>
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	6a 95       	dec	r22
    2cd6:	e2 f7       	brpl	.-8      	; 0x2cd0 <DIO_enumSetPinValue+0xc6>
    2cd8:	80 95       	com	r24
    2cda:	82 23       	and	r24, r18
    2cdc:	85 bb       	out	0x15, r24	; 21
    2cde:	81 e0       	ldi	r24, 0x01	; 1
    2ce0:	08 95       	ret
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    2ce2:	28 b3       	in	r18, 0x18	; 24
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	90 e0       	ldi	r25, 0x00	; 0
    2ce8:	02 c0       	rjmp	.+4      	; 0x2cee <DIO_enumSetPinValue+0xe4>
    2cea:	88 0f       	add	r24, r24
    2cec:	99 1f       	adc	r25, r25
    2cee:	6a 95       	dec	r22
    2cf0:	e2 f7       	brpl	.-8      	; 0x2cea <DIO_enumSetPinValue+0xe0>
    2cf2:	28 2b       	or	r18, r24
    2cf4:	28 bb       	out	0x18, r18	; 24
    2cf6:	81 e0       	ldi	r24, 0x01	; 1
    2cf8:	08 95       	ret
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    2cfa:	25 b3       	in	r18, 0x15	; 21
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	02 c0       	rjmp	.+4      	; 0x2d06 <DIO_enumSetPinValue+0xfc>
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	6a 95       	dec	r22
    2d08:	e2 f7       	brpl	.-8      	; 0x2d02 <DIO_enumSetPinValue+0xf8>
    2d0a:	28 2b       	or	r18, r24
    2d0c:	25 bb       	out	0x15, r18	; 21
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	08 95       	ret

00002d12 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    2d12:	fa 01       	movw	r30, r20

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2d14:	84 30       	cpi	r24, 0x04	; 4
    2d16:	60 f4       	brcc	.+24     	; 0x2d30 <DIO_enumGetPinValue+0x1e>
    2d18:	68 30       	cpi	r22, 0x08	; 8
    2d1a:	50 f4       	brcc	.+20     	; 0x2d30 <DIO_enumGetPinValue+0x1e>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2d1c:	81 30       	cpi	r24, 0x01	; 1
    2d1e:	f1 f0       	breq	.+60     	; 0x2d5c <DIO_enumGetPinValue+0x4a>
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	40 f0       	brcs	.+16     	; 0x2d34 <DIO_enumGetPinValue+0x22>
    2d24:	82 30       	cpi	r24, 0x02	; 2
    2d26:	81 f1       	breq	.+96     	; 0x2d88 <DIO_enumGetPinValue+0x76>
    2d28:	83 30       	cpi	r24, 0x03	; 3
    2d2a:	61 f1       	breq	.+88     	; 0x2d84 <DIO_enumGetPinValue+0x72>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    2d2c:	81 e0       	ldi	r24, 0x01	; 1
    2d2e:	08 95       	ret
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    2d30:	80 e0       	ldi	r24, 0x00	; 0
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState;
}
    2d32:	08 95       	ret
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    2d34:	29 b3       	in	r18, 0x19	; 25
    2d36:	81 e0       	ldi	r24, 0x01	; 1
    2d38:	90 e0       	ldi	r25, 0x00	; 0
    2d3a:	06 2e       	mov	r0, r22
    2d3c:	02 c0       	rjmp	.+4      	; 0x2d42 <DIO_enumGetPinValue+0x30>
    2d3e:	88 0f       	add	r24, r24
    2d40:	99 1f       	adc	r25, r25
    2d42:	0a 94       	dec	r0
    2d44:	e2 f7       	brpl	.-8      	; 0x2d3e <DIO_enumGetPinValue+0x2c>
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	82 23       	and	r24, r18
    2d4a:	93 23       	and	r25, r19
    2d4c:	02 c0       	rjmp	.+4      	; 0x2d52 <DIO_enumGetPinValue+0x40>
    2d4e:	95 95       	asr	r25
    2d50:	87 95       	ror	r24
    2d52:	6a 95       	dec	r22
    2d54:	e2 f7       	brpl	.-8      	; 0x2d4e <DIO_enumGetPinValue+0x3c>
    2d56:	80 83       	st	Z, r24
    2d58:	81 e0       	ldi	r24, 0x01	; 1
    2d5a:	08 95       	ret
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    2d5c:	26 b3       	in	r18, 0x16	; 22
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	06 2e       	mov	r0, r22
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <DIO_enumGetPinValue+0x58>
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	0a 94       	dec	r0
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <DIO_enumGetPinValue+0x54>
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	82 23       	and	r24, r18
    2d72:	93 23       	and	r25, r19
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <DIO_enumGetPinValue+0x68>
    2d76:	95 95       	asr	r25
    2d78:	87 95       	ror	r24
    2d7a:	6a 95       	dec	r22
    2d7c:	e2 f7       	brpl	.-8      	; 0x2d76 <DIO_enumGetPinValue+0x64>
    2d7e:	80 83       	st	Z, r24
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	08 95       	ret
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    2d84:	20 b3       	in	r18, 0x10	; 16
    2d86:	eb cf       	rjmp	.-42     	; 0x2d5e <DIO_enumGetPinValue+0x4c>
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    2d88:	23 b3       	in	r18, 0x13	; 19
    2d8a:	e9 cf       	rjmp	.-46     	; 0x2d5e <DIO_enumGetPinValue+0x4c>

00002d8c <DIO_enumTogglePinValue>:
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PIN <= DIO_PIN7)
    2d8c:	68 30       	cpi	r22, 0x08	; 8
    2d8e:	50 f4       	brcc	.+20     	; 0x2da4 <DIO_enumTogglePinValue+0x18>
	{
		switch (Copy_u8PORT)
    2d90:	81 30       	cpi	r24, 0x01	; 1
    2d92:	b1 f0       	breq	.+44     	; 0x2dc0 <DIO_enumTogglePinValue+0x34>
    2d94:	81 30       	cpi	r24, 0x01	; 1
    2d96:	40 f0       	brcs	.+16     	; 0x2da8 <DIO_enumTogglePinValue+0x1c>
    2d98:	82 30       	cpi	r24, 0x02	; 2
    2d9a:	51 f1       	breq	.+84     	; 0x2df0 <DIO_enumTogglePinValue+0x64>
    2d9c:	83 30       	cpi	r24, 0x03	; 3
    2d9e:	e1 f0       	breq	.+56     	; 0x2dd8 <DIO_enumTogglePinValue+0x4c>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	08 95       	ret
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PIN <= DIO_PIN7)
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	08 95       	ret
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    2da8:	2b b3       	in	r18, 0x1b	; 27
    2daa:	81 e0       	ldi	r24, 0x01	; 1
    2dac:	90 e0       	ldi	r25, 0x00	; 0
    2dae:	02 c0       	rjmp	.+4      	; 0x2db4 <DIO_enumTogglePinValue+0x28>
    2db0:	88 0f       	add	r24, r24
    2db2:	99 1f       	adc	r25, r25
    2db4:	6a 95       	dec	r22
    2db6:	e2 f7       	brpl	.-8      	; 0x2db0 <DIO_enumTogglePinValue+0x24>
    2db8:	28 27       	eor	r18, r24
    2dba:	2b bb       	out	0x1b, r18	; 27
    2dbc:	81 e0       	ldi	r24, 0x01	; 1
    2dbe:	08 95       	ret
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    2dc0:	28 b3       	in	r18, 0x18	; 24
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	90 e0       	ldi	r25, 0x00	; 0
    2dc6:	02 c0       	rjmp	.+4      	; 0x2dcc <DIO_enumTogglePinValue+0x40>
    2dc8:	88 0f       	add	r24, r24
    2dca:	99 1f       	adc	r25, r25
    2dcc:	6a 95       	dec	r22
    2dce:	e2 f7       	brpl	.-8      	; 0x2dc8 <DIO_enumTogglePinValue+0x3c>
    2dd0:	28 27       	eor	r18, r24
    2dd2:	28 bb       	out	0x18, r18	; 24
    2dd4:	81 e0       	ldi	r24, 0x01	; 1
    2dd6:	08 95       	ret
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    2dd8:	22 b3       	in	r18, 0x12	; 18
    2dda:	81 e0       	ldi	r24, 0x01	; 1
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <DIO_enumTogglePinValue+0x58>
    2de0:	88 0f       	add	r24, r24
    2de2:	99 1f       	adc	r25, r25
    2de4:	6a 95       	dec	r22
    2de6:	e2 f7       	brpl	.-8      	; 0x2de0 <DIO_enumTogglePinValue+0x54>
    2de8:	28 27       	eor	r18, r24
    2dea:	22 bb       	out	0x12, r18	; 18
    2dec:	81 e0       	ldi	r24, 0x01	; 1
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
	}

	return LOC_enumState;
}
    2dee:	08 95       	ret
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    2df0:	25 b3       	in	r18, 0x15	; 21
    2df2:	81 e0       	ldi	r24, 0x01	; 1
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <DIO_enumTogglePinValue+0x70>
    2df8:	88 0f       	add	r24, r24
    2dfa:	99 1f       	adc	r25, r25
    2dfc:	6a 95       	dec	r22
    2dfe:	e2 f7       	brpl	.-8      	; 0x2df8 <DIO_enumTogglePinValue+0x6c>
    2e00:	28 27       	eor	r18, r24
    2e02:	25 bb       	out	0x15, r18	; 21
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	08 95       	ret

00002e08 <DIO_enumConnectPullup>:
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2e08:	84 30       	cpi	r24, 0x04	; 4
    2e0a:	60 f4       	brcc	.+24     	; 0x2e24 <DIO_enumConnectPullup+0x1c>
    2e0c:	68 30       	cpi	r22, 0x08	; 8
    2e0e:	50 f4       	brcc	.+20     	; 0x2e24 <DIO_enumConnectPullup+0x1c>
	{
		switch(Copy_u8PORT)
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	d1 f0       	breq	.+52     	; 0x2e48 <DIO_enumConnectPullup+0x40>
    2e14:	81 30       	cpi	r24, 0x01	; 1
    2e16:	40 f0       	brcs	.+16     	; 0x2e28 <DIO_enumConnectPullup+0x20>
    2e18:	82 30       	cpi	r24, 0x02	; 2
    2e1a:	b1 f1       	breq	.+108    	; 0x2e88 <DIO_enumConnectPullup+0x80>
    2e1c:	83 30       	cpi	r24, 0x03	; 3
    2e1e:	21 f1       	breq	.+72     	; 0x2e68 <DIO_enumConnectPullup+0x60>
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
				CLR_BIT(DDRA_Register,Copy_u8PIN);
				SET_BIT(PORTA_Register,Copy_u8PIN);
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	08 95       	ret
				CLR_BIT(DDRD_Register,Copy_u8PIN);
				SET_BIT(PORTD_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    2e24:	80 e0       	ldi	r24, 0x00	; 0
	}

	return LOC_enumState ;


}
    2e26:	08 95       	ret
	{
		switch(Copy_u8PORT)
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2e28:	41 30       	cpi	r20, 0x01	; 1
    2e2a:	09 f4       	brne	.+2      	; 0x2e2e <DIO_enumConnectPullup+0x26>
    2e2c:	3c c0       	rjmp	.+120    	; 0x2ea6 <DIO_enumConnectPullup+0x9e>
				CLR_BIT(DDRA_Register,Copy_u8PIN);
				SET_BIT(PORTA_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    2e2e:	2b b3       	in	r18, 0x1b	; 27
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <DIO_enumConnectPullup+0x32>
    2e36:	88 0f       	add	r24, r24
    2e38:	99 1f       	adc	r25, r25
    2e3a:	6a 95       	dec	r22
    2e3c:	e2 f7       	brpl	.-8      	; 0x2e36 <DIO_enumConnectPullup+0x2e>
    2e3e:	80 95       	com	r24
    2e40:	82 23       	and	r24, r18
    2e42:	8b bb       	out	0x1b, r24	; 27
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	08 95       	ret
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2e48:	41 30       	cpi	r20, 0x01	; 1
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <DIO_enumConnectPullup+0x46>
    2e4c:	53 c0       	rjmp	.+166    	; 0x2ef4 <DIO_enumConnectPullup+0xec>
				CLR_BIT(DDRB_Register,Copy_u8PIN);
				SET_BIT(PORTB_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    2e4e:	28 b3       	in	r18, 0x18	; 24
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <DIO_enumConnectPullup+0x52>
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	6a 95       	dec	r22
    2e5c:	e2 f7       	brpl	.-8      	; 0x2e56 <DIO_enumConnectPullup+0x4e>
    2e5e:	80 95       	com	r24
    2e60:	82 23       	and	r24, r18
    2e62:	88 bb       	out	0x18, r24	; 24
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	08 95       	ret
				CLR_BIT(PORTC_Register,Copy_u8PIN);
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2e68:	41 30       	cpi	r20, 0x01	; 1
    2e6a:	09 f4       	brne	.+2      	; 0x2e6e <DIO_enumConnectPullup+0x66>
    2e6c:	57 c0       	rjmp	.+174    	; 0x2f1c <DIO_enumConnectPullup+0x114>
				CLR_BIT(DDRD_Register,Copy_u8PIN);
				SET_BIT(PORTD_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    2e6e:	22 b3       	in	r18, 0x12	; 18
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <DIO_enumConnectPullup+0x72>
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	6a 95       	dec	r22
    2e7c:	e2 f7       	brpl	.-8      	; 0x2e76 <DIO_enumConnectPullup+0x6e>
    2e7e:	80 95       	com	r24
    2e80:	82 23       	and	r24, r18
    2e82:	82 bb       	out	0x12, r24	; 18
    2e84:	81 e0       	ldi	r24, 0x01	; 1
    2e86:	08 95       	ret
				CLR_BIT(PORTB_Register,Copy_u8PIN);
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2e88:	41 30       	cpi	r20, 0x01	; 1
    2e8a:	01 f1       	breq	.+64     	; 0x2ecc <DIO_enumConnectPullup+0xc4>
				CLR_BIT(DDRC_Register,Copy_u8PIN);
				SET_BIT(PORTC_Register,Copy_u8PIN);
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    2e8c:	25 b3       	in	r18, 0x15	; 21
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	02 c0       	rjmp	.+4      	; 0x2e98 <DIO_enumConnectPullup+0x90>
    2e94:	88 0f       	add	r24, r24
    2e96:	99 1f       	adc	r25, r25
    2e98:	6a 95       	dec	r22
    2e9a:	e2 f7       	brpl	.-8      	; 0x2e94 <DIO_enumConnectPullup+0x8c>
    2e9c:	80 95       	com	r24
    2e9e:	82 23       	and	r24, r18
    2ea0:	85 bb       	out	0x15, r24	; 21
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	08 95       	ret
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    2ea6:	80 b7       	in	r24, 0x30	; 48
    2ea8:	8b 7f       	andi	r24, 0xFB	; 251
    2eaa:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    2eac:	3a b3       	in	r19, 0x1a	; 26
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	02 c0       	rjmp	.+4      	; 0x2eb8 <DIO_enumConnectPullup+0xb0>
    2eb4:	88 0f       	add	r24, r24
    2eb6:	99 1f       	adc	r25, r25
    2eb8:	6a 95       	dec	r22
    2eba:	e2 f7       	brpl	.-8      	; 0x2eb4 <DIO_enumConnectPullup+0xac>
    2ebc:	28 2f       	mov	r18, r24
    2ebe:	20 95       	com	r18
    2ec0:	23 23       	and	r18, r19
    2ec2:	2a bb       	out	0x1a, r18	; 26
				SET_BIT(PORTA_Register,Copy_u8PIN);
    2ec4:	2b b3       	in	r18, 0x1b	; 27
    2ec6:	82 2b       	or	r24, r18
    2ec8:	8b bb       	out	0x1b, r24	; 27
    2eca:	aa cf       	rjmp	.-172    	; 0x2e20 <DIO_enumConnectPullup+0x18>
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    2ecc:	80 b7       	in	r24, 0x30	; 48
    2ece:	8b 7f       	andi	r24, 0xFB	; 251
    2ed0:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    2ed2:	34 b3       	in	r19, 0x14	; 20
    2ed4:	81 e0       	ldi	r24, 0x01	; 1
    2ed6:	90 e0       	ldi	r25, 0x00	; 0
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <DIO_enumConnectPullup+0xd6>
    2eda:	88 0f       	add	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	6a 95       	dec	r22
    2ee0:	e2 f7       	brpl	.-8      	; 0x2eda <DIO_enumConnectPullup+0xd2>
    2ee2:	28 2f       	mov	r18, r24
    2ee4:	20 95       	com	r18
    2ee6:	23 23       	and	r18, r19
    2ee8:	24 bb       	out	0x14, r18	; 20
				SET_BIT(PORTC_Register,Copy_u8PIN);
    2eea:	25 b3       	in	r18, 0x15	; 21
    2eec:	82 2b       	or	r24, r18
    2eee:	85 bb       	out	0x15, r24	; 21
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	08 95       	ret
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    2ef4:	80 b7       	in	r24, 0x30	; 48
    2ef6:	8b 7f       	andi	r24, 0xFB	; 251
    2ef8:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    2efa:	37 b3       	in	r19, 0x17	; 23
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	90 e0       	ldi	r25, 0x00	; 0
    2f00:	02 c0       	rjmp	.+4      	; 0x2f06 <DIO_enumConnectPullup+0xfe>
    2f02:	88 0f       	add	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	6a 95       	dec	r22
    2f08:	e2 f7       	brpl	.-8      	; 0x2f02 <DIO_enumConnectPullup+0xfa>
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	20 95       	com	r18
    2f0e:	23 23       	and	r18, r19
    2f10:	27 bb       	out	0x17, r18	; 23
				SET_BIT(PORTB_Register,Copy_u8PIN);
    2f12:	28 b3       	in	r18, 0x18	; 24
    2f14:	82 2b       	or	r24, r18
    2f16:	88 bb       	out	0x18, r24	; 24
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	08 95       	ret
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
			{
				CLR_BIT(SFIOR,PUD);
    2f1c:	80 b7       	in	r24, 0x30	; 48
    2f1e:	8b 7f       	andi	r24, 0xFB	; 251
    2f20:	80 bf       	out	0x30, r24	; 48
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    2f22:	31 b3       	in	r19, 0x11	; 17
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <DIO_enumConnectPullup+0x126>
    2f2a:	88 0f       	add	r24, r24
    2f2c:	99 1f       	adc	r25, r25
    2f2e:	6a 95       	dec	r22
    2f30:	e2 f7       	brpl	.-8      	; 0x2f2a <DIO_enumConnectPullup+0x122>
    2f32:	28 2f       	mov	r18, r24
    2f34:	20 95       	com	r18
    2f36:	23 23       	and	r18, r19
    2f38:	21 bb       	out	0x11, r18	; 17
				SET_BIT(PORTD_Register,Copy_u8PIN);
    2f3a:	22 b3       	in	r18, 0x12	; 18
    2f3c:	82 2b       	or	r24, r18
    2f3e:	82 bb       	out	0x12, r24	; 18
    2f40:	81 e0       	ldi	r24, 0x01	; 1
    2f42:	08 95       	ret

00002f44 <DIO_enumSetPortDirection>:
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD) )
    2f44:	84 30       	cpi	r24, 0x04	; 4
    2f46:	40 f4       	brcc	.+16     	; 0x2f58 <DIO_enumSetPortDirection+0x14>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2f48:	81 30       	cpi	r24, 0x01	; 1
    2f4a:	59 f0       	breq	.+22     	; 0x2f62 <DIO_enumSetPortDirection+0x1e>
    2f4c:	81 30       	cpi	r24, 0x01	; 1
    2f4e:	30 f0       	brcs	.+12     	; 0x2f5c <DIO_enumSetPortDirection+0x18>
    2f50:	82 30       	cpi	r24, 0x02	; 2
    2f52:	69 f0       	breq	.+26     	; 0x2f6e <DIO_enumSetPortDirection+0x2a>
    2f54:	83 30       	cpi	r24, 0x03	; 3
    2f56:	41 f0       	breq	.+16     	; 0x2f68 <DIO_enumSetPortDirection+0x24>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    2f58:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    2f5a:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    2f5c:	6a bb       	out	0x1a, r22	; 26
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	08 95       	ret
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    2f62:	67 bb       	out	0x17, r22	; 23
    2f64:	81 e0       	ldi	r24, 0x01	; 1
    2f66:	08 95       	ret
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    2f68:	61 bb       	out	0x11, r22	; 17
    2f6a:	81 e0       	ldi	r24, 0x01	; 1
    2f6c:	08 95       	ret
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    2f6e:	64 bb       	out	0x14, r22	; 20
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	08 95       	ret

00002f74 <DIO_enumSetPortValue>:
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    2f74:	84 30       	cpi	r24, 0x04	; 4
    2f76:	40 f4       	brcc	.+16     	; 0x2f88 <DIO_enumSetPortValue+0x14>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2f78:	81 30       	cpi	r24, 0x01	; 1
    2f7a:	59 f0       	breq	.+22     	; 0x2f92 <DIO_enumSetPortValue+0x1e>
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	30 f0       	brcs	.+12     	; 0x2f8c <DIO_enumSetPortValue+0x18>
    2f80:	82 30       	cpi	r24, 0x02	; 2
    2f82:	69 f0       	breq	.+26     	; 0x2f9e <DIO_enumSetPortValue+0x2a>
    2f84:	83 30       	cpi	r24, 0x03	; 3
    2f86:	41 f0       	breq	.+16     	; 0x2f98 <DIO_enumSetPortValue+0x24>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    2f88:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    2f8a:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    2f8c:	6b bb       	out	0x1b, r22	; 27
    2f8e:	81 e0       	ldi	r24, 0x01	; 1
    2f90:	08 95       	ret
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    2f92:	68 bb       	out	0x18, r22	; 24
    2f94:	81 e0       	ldi	r24, 0x01	; 1
    2f96:	08 95       	ret
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    2f98:	62 bb       	out	0x12, r22	; 18
    2f9a:	81 e0       	ldi	r24, 0x01	; 1
    2f9c:	08 95       	ret
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    2f9e:	65 bb       	out	0x15, r22	; 21
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	08 95       	ret

00002fa4 <DIO_enumTogglePortValue>:
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PORT <= DIO_PORTD)
    2fa4:	84 30       	cpi	r24, 0x04	; 4
    2fa6:	50 f4       	brcc	.+20     	; 0x2fbc <DIO_enumTogglePortValue+0x18>
	{
		switch (Copy_u8PORT)
    2fa8:	81 30       	cpi	r24, 0x01	; 1
    2faa:	79 f0       	breq	.+30     	; 0x2fca <DIO_enumTogglePortValue+0x26>
    2fac:	81 30       	cpi	r24, 0x01	; 1
    2fae:	40 f0       	brcs	.+16     	; 0x2fc0 <DIO_enumTogglePortValue+0x1c>
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	a9 f0       	breq	.+42     	; 0x2fde <DIO_enumTogglePortValue+0x3a>
    2fb4:	83 30       	cpi	r24, 0x03	; 3
    2fb6:	71 f0       	breq	.+28     	; 0x2fd4 <DIO_enumTogglePortValue+0x30>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	08 95       	ret
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if (Copy_u8PORT <= DIO_PORTD)
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	08 95       	ret
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    2fc0:	8b b3       	in	r24, 0x1b	; 27
    2fc2:	80 95       	com	r24
    2fc4:	8b bb       	out	0x1b, r24	; 27
    2fc6:	81 e0       	ldi	r24, 0x01	; 1
    2fc8:	08 95       	ret
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    2fca:	88 b3       	in	r24, 0x18	; 24
    2fcc:	80 95       	com	r24
    2fce:	88 bb       	out	0x18, r24	; 24
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	08 95       	ret
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    2fd4:	82 b3       	in	r24, 0x12	; 18
    2fd6:	80 95       	com	r24
    2fd8:	82 bb       	out	0x12, r24	; 18
    2fda:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		LOC_enumState = DIO_NOK;
	}
	return LOC_enumState ;
}
    2fdc:	08 95       	ret
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    2fde:	85 b3       	in	r24, 0x15	; 21
    2fe0:	80 95       	com	r24
    2fe2:	85 bb       	out	0x15, r24	; 21
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	08 95       	ret

00002fe8 <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    2fe8:	fb 01       	movw	r30, r22

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    2fea:	84 30       	cpi	r24, 0x04	; 4
    2fec:	40 f4       	brcc	.+16     	; 0x2ffe <DIO_enumGetPortValue+0x16>
	{
		switch (Copy_u8PORT)
    2fee:	81 30       	cpi	r24, 0x01	; 1
    2ff0:	61 f0       	breq	.+24     	; 0x300a <DIO_enumGetPortValue+0x22>
    2ff2:	81 30       	cpi	r24, 0x01	; 1
    2ff4:	30 f0       	brcs	.+12     	; 0x3002 <DIO_enumGetPortValue+0x1a>
    2ff6:	82 30       	cpi	r24, 0x02	; 2
    2ff8:	81 f0       	breq	.+32     	; 0x301a <DIO_enumGetPortValue+0x32>
    2ffa:	83 30       	cpi	r24, 0x03	; 3
    2ffc:	51 f0       	breq	.+20     	; 0x3012 <DIO_enumGetPortValue+0x2a>
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
			break ;
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
	{
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;
}
    3000:	08 95       	ret
	if ( (Copy_u8PORT <= DIO_PORTD))
	{
		switch (Copy_u8PORT)
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    3002:	89 b3       	in	r24, 0x19	; 25
    3004:	80 83       	st	Z, r24
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	08 95       	ret
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    300a:	86 b3       	in	r24, 0x16	; 22
    300c:	80 83       	st	Z, r24
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	08 95       	ret
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    3012:	80 b3       	in	r24, 0x10	; 16
    3014:	80 83       	st	Z, r24
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	08 95       	ret
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    301a:	83 b3       	in	r24, 0x13	; 19
    301c:	80 83       	st	Z, r24
    301e:	81 e0       	ldi	r24, 0x01	; 1
    3020:	08 95       	ret

00003022 <DIO_voidWriteHighNibbles>:
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    3022:	84 30       	cpi	r24, 0x04	; 4
    3024:	60 f4       	brcc	.+24     	; 0x303e <DIO_voidWriteHighNibbles+0x1c>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    3026:	62 95       	swap	r22
    3028:	60 7f       	andi	r22, 0xF0	; 240
		switch(Copy_u8PORT)
    302a:	81 30       	cpi	r24, 0x01	; 1
    302c:	91 f0       	breq	.+36     	; 0x3052 <DIO_voidWriteHighNibbles+0x30>
    302e:	81 30       	cpi	r24, 0x01	; 1
    3030:	40 f0       	brcs	.+16     	; 0x3042 <DIO_voidWriteHighNibbles+0x20>
    3032:	82 30       	cpi	r24, 0x02	; 2
    3034:	f1 f0       	breq	.+60     	; 0x3072 <DIO_voidWriteHighNibbles+0x50>
    3036:	83 30       	cpi	r24, 0x03	; 3
    3038:	a1 f0       	breq	.+40     	; 0x3062 <DIO_voidWriteHighNibbles+0x40>
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
			PORTB_Register|=Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
			PORTC_Register|=Copy_u8value;
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	08 95       	ret
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{

	DIO_ErrorStatus LOC_enumState = DIO_OK ;

	if ( (Copy_u8PORT <= DIO_PORTD))
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	08 95       	ret
	{
		Copy_u8value = (Copy_u8value<<4) ;
		switch(Copy_u8PORT)
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    3042:	8b b3       	in	r24, 0x1b	; 27
    3044:	8f 70       	andi	r24, 0x0F	; 15
    3046:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    3048:	8b b3       	in	r24, 0x1b	; 27
    304a:	68 2b       	or	r22, r24
    304c:	6b bb       	out	0x1b, r22	; 27
    304e:	81 e0       	ldi	r24, 0x01	; 1
    3050:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    3052:	88 b3       	in	r24, 0x18	; 24
    3054:	8f 70       	andi	r24, 0x0F	; 15
    3056:	88 bb       	out	0x18, r24	; 24
			PORTB_Register|=Copy_u8value;
    3058:	88 b3       	in	r24, 0x18	; 24
    305a:	68 2b       	or	r22, r24
    305c:	68 bb       	out	0x18, r22	; 24
    305e:	81 e0       	ldi	r24, 0x01	; 1
    3060:	08 95       	ret
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
			PORTC_Register|=Copy_u8value;
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    3062:	82 b3       	in	r24, 0x12	; 18
    3064:	8f 70       	andi	r24, 0x0F	; 15
    3066:	82 bb       	out	0x12, r24	; 18
			PORTD_Register|=Copy_u8value;
    3068:	82 b3       	in	r24, 0x12	; 18
    306a:	68 2b       	or	r22, r24
    306c:	62 bb       	out	0x12, r22	; 18
    306e:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;

}
    3070:	08 95       	ret
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
			PORTB_Register|=Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    3072:	85 b3       	in	r24, 0x15	; 21
    3074:	8f 70       	andi	r24, 0x0F	; 15
    3076:	85 bb       	out	0x15, r24	; 21
			PORTC_Register|=Copy_u8value;
    3078:	85 b3       	in	r24, 0x15	; 21
    307a:	68 2b       	or	r22, r24
    307c:	65 bb       	out	0x15, r22	; 21
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	08 95       	ret

00003082 <DIO_voidWriteLowNibbles>:
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;


	if ( (Copy_u8PORT <= DIO_PORTD))
    3082:	84 30       	cpi	r24, 0x04	; 4
    3084:	58 f4       	brcc	.+22     	; 0x309c <DIO_voidWriteLowNibbles+0x1a>
	{
		Copy_u8value&=0x0f;
    3086:	6f 70       	andi	r22, 0x0F	; 15
		switch(Copy_u8PORT)
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	91 f0       	breq	.+36     	; 0x30b0 <DIO_voidWriteLowNibbles+0x2e>
    308c:	81 30       	cpi	r24, 0x01	; 1
    308e:	40 f0       	brcs	.+16     	; 0x30a0 <DIO_voidWriteLowNibbles+0x1e>
    3090:	82 30       	cpi	r24, 0x02	; 2
    3092:	f1 f0       	breq	.+60     	; 0x30d0 <DIO_voidWriteLowNibbles+0x4e>
    3094:	83 30       	cpi	r24, 0x03	; 3
    3096:	a1 f0       	breq	.+40     	; 0x30c0 <DIO_voidWriteLowNibbles+0x3e>
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
			PORTB_Register |= Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
			PORTC_Register |= Copy_u8value;
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	08 95       	ret
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
	DIO_ErrorStatus LOC_enumState = DIO_OK ;


	if ( (Copy_u8PORT <= DIO_PORTD))
    309c:	80 e0       	ldi	r24, 0x00	; 0
    309e:	08 95       	ret
	{
		Copy_u8value&=0x0f;
		switch(Copy_u8PORT)
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    30a0:	8b b3       	in	r24, 0x1b	; 27
    30a2:	80 7f       	andi	r24, 0xF0	; 240
    30a4:	8b bb       	out	0x1b, r24	; 27
			PORTA_Register |= Copy_u8value;
    30a6:	8b b3       	in	r24, 0x1b	; 27
    30a8:	68 2b       	or	r22, r24
    30aa:	6b bb       	out	0x1b, r22	; 27
    30ac:	81 e0       	ldi	r24, 0x01	; 1
    30ae:	08 95       	ret
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    30b0:	88 b3       	in	r24, 0x18	; 24
    30b2:	80 7f       	andi	r24, 0xF0	; 240
    30b4:	88 bb       	out	0x18, r24	; 24
			PORTB_Register |= Copy_u8value;
    30b6:	88 b3       	in	r24, 0x18	; 24
    30b8:	68 2b       	or	r22, r24
    30ba:	68 bb       	out	0x18, r22	; 24
    30bc:	81 e0       	ldi	r24, 0x01	; 1
    30be:	08 95       	ret
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
			PORTC_Register |= Copy_u8value;
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    30c0:	82 b3       	in	r24, 0x12	; 18
    30c2:	80 7f       	andi	r24, 0xF0	; 240
    30c4:	82 bb       	out	0x12, r24	; 18
			PORTD_Register |= Copy_u8value;
    30c6:	82 b3       	in	r24, 0x12	; 18
    30c8:	68 2b       	or	r22, r24
    30ca:	62 bb       	out	0x12, r22	; 18
    30cc:	81 e0       	ldi	r24, 0x01	; 1
		LOC_enumState = DIO_NOK;
	}

	return LOC_enumState ;

}
    30ce:	08 95       	ret
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
			PORTB_Register |= Copy_u8value;
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    30d0:	85 b3       	in	r24, 0x15	; 21
    30d2:	80 7f       	andi	r24, 0xF0	; 240
    30d4:	85 bb       	out	0x15, r24	; 21
			PORTC_Register |= Copy_u8value;
    30d6:	85 b3       	in	r24, 0x15	; 21
    30d8:	68 2b       	or	r22, r24
    30da:	65 bb       	out	0x15, r22	; 21
    30dc:	81 e0       	ldi	r24, 0x01	; 1
    30de:	08 95       	ret

000030e0 <KPD_u8GetPressed>:
/*
 * Breif : This Function used to get the pressed button of the kpd
 * Parameters : Nothing
 * return : the pressed button
 */
u8   KPD_u8GetPressed( void ){
    30e0:	9f 92       	push	r9
    30e2:	af 92       	push	r10
    30e4:	bf 92       	push	r11
    30e6:	cf 92       	push	r12
    30e8:	df 92       	push	r13
    30ea:	ef 92       	push	r14
    30ec:	ff 92       	push	r15
    30ee:	0f 93       	push	r16
    30f0:	1f 93       	push	r17
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	0f 92       	push	r0
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
    30fc:	99 24       	eor	r9, r9
    30fe:	9a 94       	dec	r9
    3100:	ee 24       	eor	r14, r14
    3102:	ff 24       	eor	r15, r15
    3104:	8e 01       	movw	r16, r28
    3106:	0f 5f       	subi	r16, 0xFF	; 255
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    310a:	48 ec       	ldi	r20, 0xC8	; 200
    310c:	c4 2e       	mov	r12, r20
    310e:	d1 2c       	mov	r13, r1
    3110:	34 e0       	ldi	r19, 0x04	; 4
    3112:	a3 2e       	mov	r10, r19
    3114:	ae 0c       	add	r10, r14
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns
    3116:	80 e0       	ldi	r24, 0x00	; 0
    3118:	6a 2d       	mov	r22, r10
    311a:	40 e0       	ldi	r20, 0x00	; 0
    311c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
    3120:	80 e0       	ldi	r24, 0x00	; 0
    3122:	60 e0       	ldi	r22, 0x00	; 0
    3124:	a8 01       	movw	r20, r16
    3126:	0e 94 89 16 	call	0x2d12	; 0x2d12 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	88 23       	and	r24, r24
    312e:	a9 f1       	breq	.+106    	; 0x319a <KPD_u8GetPressed+0xba>

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
    3130:	80 e0       	ldi	r24, 0x00	; 0
    3132:	61 e0       	ldi	r22, 0x01	; 1
    3134:	a8 01       	movw	r20, r16
    3136:	0e 94 89 16 	call	0x2d12	; 0x2d12 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	88 23       	and	r24, r24
    313e:	09 f4       	brne	.+2      	; 0x3142 <KPD_u8GetPressed+0x62>
    3140:	54 c0       	rjmp	.+168    	; 0x31ea <KPD_u8GetPressed+0x10a>

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
    3142:	80 e0       	ldi	r24, 0x00	; 0
    3144:	62 e0       	ldi	r22, 0x02	; 2
    3146:	a8 01       	movw	r20, r16
    3148:	0e 94 89 16 	call	0x2d12	; 0x2d12 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	88 23       	and	r24, r24
    3150:	09 f4       	brne	.+2      	; 0x3154 <KPD_u8GetPressed+0x74>
    3152:	4e c0       	rjmp	.+156    	; 0x31f0 <KPD_u8GetPressed+0x110>

		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_LOW );   // Low on the columns

		for( LOC_u8Row = 0 +KPD_ROW_INIT ; LOC_u8Row < KPD_ROW_END + 1 ; LOC_u8Row++ ){

			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	63 e0       	ldi	r22, 0x03	; 3
    3158:	a8 01       	movw	r20, r16
    315a:	0e 94 89 16 	call	0x2d12	; 0x2d12 <DIO_enumGetPinValue>
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    315e:	89 81       	ldd	r24, Y+1	; 0x01
    3160:	88 23       	and	r24, r24
    3162:	09 f4       	brne	.+2      	; 0x3166 <KPD_u8GetPressed+0x86>
    3164:	48 c0       	rjmp	.+144    	; 0x31f6 <KPD_u8GetPressed+0x116>
			}

		}

		// return this column’s pin to high
		DIO_enumSetPinValue    ( KPD_PORT , LOC_u8Col , DIO_PIN_HIGH );
    3166:	80 e0       	ldi	r24, 0x00	; 0
    3168:	6a 2d       	mov	r22, r10
    316a:	41 e0       	ldi	r20, 0x01	; 1
    316c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3170:	08 94       	sec
    3172:	e1 1c       	adc	r14, r1
    3174:	f1 1c       	adc	r15, r1
	u8 LOC_u8GetPressed ;
	/* iterators  */
	u8 LOC_u8Row ;
	u8 LOC_u8Col ;

	for( LOC_u8Col = 0 + KPD_COL_INIT ; LOC_u8Col < KPD_COL_END + 1 ; LOC_u8Col++ ){
    3176:	84 e0       	ldi	r24, 0x04	; 4
    3178:	e8 16       	cp	r14, r24
    317a:	f1 04       	cpc	r15, r1
    317c:	49 f6       	brne	.-110    	; 0x3110 <KPD_u8GetPressed+0x30>

	}

	return LOC_u8ReturnData ;

}
    317e:	89 2d       	mov	r24, r9
    3180:	0f 90       	pop	r0
    3182:	cf 91       	pop	r28
    3184:	df 91       	pop	r29
    3186:	1f 91       	pop	r17
    3188:	0f 91       	pop	r16
    318a:	ff 90       	pop	r15
    318c:	ef 90       	pop	r14
    318e:	df 90       	pop	r13
    3190:	cf 90       	pop	r12
    3192:	bf 90       	pop	r11
    3194:	af 90       	pop	r10
    3196:	9f 90       	pop	r9
    3198:	08 95       	ret
			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    319a:	bb 24       	eor	r11, r11
    319c:	20 e0       	ldi	r18, 0x00	; 0
    319e:	30 e0       	ldi	r19, 0x00	; 0
    31a0:	c6 01       	movw	r24, r12
    31a2:	01 97       	sbiw	r24, 0x01	; 1
    31a4:	f1 f7       	brne	.-4      	; 0x31a2 <KPD_u8GetPressed+0xc2>
    31a6:	2f 5f       	subi	r18, 0xFF	; 255
    31a8:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    31aa:	81 e0       	ldi	r24, 0x01	; 1
    31ac:	24 3f       	cpi	r18, 0xF4	; 244
    31ae:	38 07       	cpc	r19, r24
    31b0:	b9 f7       	brne	.-18     	; 0x31a0 <KPD_u8GetPressed+0xc0>
			{

				_delay_ms(50);   // delay for bouncing

				DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );   // to make sure that the button is pressed & check again
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	6b 2d       	mov	r22, r11
    31b6:	a8 01       	movw	r20, r16
    31b8:	0e 94 89 16 	call	0x2d12	; 0x2d12 <DIO_enumGetPinValue>

				if( LOC_u8GetPressed == 0 )
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	88 23       	and	r24, r24
    31c0:	59 f4       	brne	.+22     	; 0x31d8 <KPD_u8GetPressed+0xf8>
					the button will know by the row and the column (ASCII Code)
					==> Hint1 : I already defined The ASCII Codes in 2D array at --> "KPD_config.h"
					==> Hint2 : if there is no pressed buttons , it will retured NOTPRESSED (0xff) and there is not any button has this ASCII (0xff)
					*/

					LOC_u8ReturnData = KPD_u8Buttons[ LOC_u8Row - KPD_ROW_INIT ][ LOC_u8Col - KPD_COL_INIT ];
    31c2:	eb 2d       	mov	r30, r11
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	ee 0f       	add	r30, r30
    31c8:	ff 1f       	adc	r31, r31
    31ca:	ee 0f       	add	r30, r30
    31cc:	ff 1f       	adc	r31, r31
    31ce:	ee 0d       	add	r30, r14
    31d0:	ff 1d       	adc	r31, r15
    31d2:	e4 57       	subi	r30, 0x74	; 116
    31d4:	fe 4f       	sbci	r31, 0xFE	; 254
    31d6:	90 80       	ld	r9, Z

				}

				// stay here if the button is pressed   # we could put delay 200 ms instead of that
				DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed );
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	6b 2d       	mov	r22, r11
    31dc:	a8 01       	movw	r20, r16
    31de:	0e 94 89 16 	call	0x2d12	; 0x2d12 <DIO_enumGetPinValue>
				while( DIO_PIN_LOW == LOC_u8GetPressed ) /*  This cond for safty instead of (LOC_u8GetPressed == DIO_PIN_LOW) if i foget = */
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	88 23       	and	r24, r24
    31e6:	c1 f3       	breq	.-16     	; 0x31d8 <KPD_u8GetPressed+0xf8>
    31e8:	be cf       	rjmp	.-132    	; 0x3166 <KPD_u8GetPressed+0x86>
			DIO_enumGetPinValue( KPD_PORT , LOC_u8Row , &LOC_u8GetPressed ); // retun the row value
			/* 
			if the row is high ....there is no pressed buttons
			if the row is low ....there is pressed button ===>> I will check on this
			 */
			if( LOC_u8GetPressed == 0 )
    31ea:	bb 24       	eor	r11, r11
    31ec:	b3 94       	inc	r11
    31ee:	d6 cf       	rjmp	.-84     	; 0x319c <KPD_u8GetPressed+0xbc>
    31f0:	22 e0       	ldi	r18, 0x02	; 2
    31f2:	b2 2e       	mov	r11, r18
    31f4:	d3 cf       	rjmp	.-90     	; 0x319c <KPD_u8GetPressed+0xbc>
    31f6:	93 e0       	ldi	r25, 0x03	; 3
    31f8:	b9 2e       	mov	r11, r25
    31fa:	d0 cf       	rjmp	.-96     	; 0x319c <KPD_u8GetPressed+0xbc>

000031fc <KPD_Init>:
 */
void KPD_Init(void){

	/*                    connect pull up for the pins of the rows                             */

	DIO_enumConnectPullup        ( KPD_PORT , KPD_R0 , DIO_PIN_HIGH );
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	60 e0       	ldi	r22, 0x00	; 0
    3200:	41 e0       	ldi	r20, 0x01	; 1
    3202:	0e 94 04 17 	call	0x2e08	; 0x2e08 <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R1 , DIO_PIN_HIGH );
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	61 e0       	ldi	r22, 0x01	; 1
    320a:	41 e0       	ldi	r20, 0x01	; 1
    320c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R2 , DIO_PIN_HIGH );
    3210:	80 e0       	ldi	r24, 0x00	; 0
    3212:	62 e0       	ldi	r22, 0x02	; 2
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	0e 94 04 17 	call	0x2e08	; 0x2e08 <DIO_enumConnectPullup>
	DIO_enumConnectPullup        ( KPD_PORT , KPD_R3 , DIO_PIN_HIGH );
    321a:	80 e0       	ldi	r24, 0x00	; 0
    321c:	63 e0       	ldi	r22, 0x03	; 3
    321e:	41 e0       	ldi	r20, 0x01	; 1
    3220:	0e 94 04 17 	call	0x2e08	; 0x2e08 <DIO_enumConnectPullup>


	/*                 connect the pins of the columns as output pins (HIGH)                    */


	DIO_enumSetPinDirection( KPD_PORT , KPD_C0 , DIO_PIN_OUTPUT );
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	64 e0       	ldi	r22, 0x04	; 4
    3228:	41 e0       	ldi	r20, 0x01	; 1
    322a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C1 , DIO_PIN_OUTPUT );
    322e:	80 e0       	ldi	r24, 0x00	; 0
    3230:	65 e0       	ldi	r22, 0x05	; 5
    3232:	41 e0       	ldi	r20, 0x01	; 1
    3234:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C2 , DIO_PIN_OUTPUT );
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	66 e0       	ldi	r22, 0x06	; 6
    323c:	41 e0       	ldi	r20, 0x01	; 1
    323e:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection( KPD_PORT , KPD_C3 , DIO_PIN_OUTPUT );
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	67 e0       	ldi	r22, 0x07	; 7
    3246:	41 e0       	ldi	r20, 0x01	; 1
    3248:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>

	DIO_enumSetPinValue    ( KPD_PORT , KPD_C0 , DIO_PIN_HIGH );
    324c:	80 e0       	ldi	r24, 0x00	; 0
    324e:	64 e0       	ldi	r22, 0x04	; 4
    3250:	41 e0       	ldi	r20, 0x01	; 1
    3252:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C1 , DIO_PIN_HIGH );
    3256:	80 e0       	ldi	r24, 0x00	; 0
    3258:	65 e0       	ldi	r22, 0x05	; 5
    325a:	41 e0       	ldi	r20, 0x01	; 1
    325c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C2 , DIO_PIN_HIGH );
    3260:	80 e0       	ldi	r24, 0x00	; 0
    3262:	66 e0       	ldi	r22, 0x06	; 6
    3264:	41 e0       	ldi	r20, 0x01	; 1
    3266:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue    ( KPD_PORT , KPD_C3 , DIO_PIN_HIGH );
    326a:	80 e0       	ldi	r24, 0x00	; 0
    326c:	67 e0       	ldi	r22, 0x07	; 7
    326e:	41 e0       	ldi	r20, 0x01	; 1
    3270:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>

}
    3274:	08 95       	ret

00003276 <CLCD_voidSendCommand>:
* Parameters :
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (CLCD_voidSendData)
*/
void CLCD_voidSendCommand ( u8 Copy_u8Command ){
    3276:	ef 92       	push	r14
    3278:	ff 92       	push	r15
    327a:	1f 93       	push	r17
    327c:	18 2f       	mov	r17, r24
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	65 e0       	ldi	r22, 0x05	; 5
    3282:	40 e0       	ldi	r20, 0x00	; 0
    3284:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3288:	81 e0       	ldi	r24, 0x01	; 1
    328a:	66 e0       	ldi	r22, 0x06	; 6
    328c:	40 e0       	ldi	r20, 0x00	; 0
    328e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3292:	61 2f       	mov	r22, r17
    3294:	62 95       	swap	r22
    3296:	6f 70       	andi	r22, 0x0F	; 15
    3298:	83 e0       	ldi	r24, 0x03	; 3
    329a:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	67 e0       	ldi	r22, 0x07	; 7
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    32a8:	80 ed       	ldi	r24, 0xD0	; 208
    32aa:	e8 2e       	mov	r14, r24
    32ac:	87 e0       	ldi	r24, 0x07	; 7
    32ae:	f8 2e       	mov	r15, r24
    32b0:	c7 01       	movw	r24, r14
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	f1 f7       	brne	.-4      	; 0x32b2 <CLCD_voidSendCommand+0x3c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	67 e0       	ldi	r22, 0x07	; 7
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    32c0:	c7 01       	movw	r24, r14
    32c2:	01 97       	sbiw	r24, 0x01	; 1
    32c4:	f1 f7       	brne	.-4      	; 0x32c2 <CLCD_voidSendCommand+0x4c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    32c6:	83 e0       	ldi	r24, 0x03	; 3
    32c8:	61 2f       	mov	r22, r17
    32ca:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    32ce:	81 e0       	ldi	r24, 0x01	; 1
    32d0:	67 e0       	ldi	r22, 0x07	; 7
    32d2:	41 e0       	ldi	r20, 0x01	; 1
    32d4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    32d8:	c7 01       	movw	r24, r14
    32da:	01 97       	sbiw	r24, 0x01	; 1
    32dc:	f1 f7       	brne	.-4      	; 0x32da <CLCD_voidSendCommand+0x64>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	67 e0       	ldi	r22, 0x07	; 7
    32e2:	40 e0       	ldi	r20, 0x00	; 0
    32e4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    32e8:	c7 01       	movw	r24, r14
    32ea:	01 97       	sbiw	r24, 0x01	; 1
    32ec:	f1 f7       	brne	.-4      	; 0x32ea <CLCD_voidSendCommand+0x74>
    32ee:	c7 01       	movw	r24, r14
    32f0:	01 97       	sbiw	r24, 0x01	; 1
    32f2:	f1 f7       	brne	.-4      	; 0x32f0 <CLCD_voidSendCommand+0x7a>

	#endif

	_delay_ms(1);

}
    32f4:	1f 91       	pop	r17
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	08 95       	ret

000032fc <CLCD_voidSendData>:
* Breif : This Function send data to the port which is defined in config.h
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void CLCD_voidSendData    ( u8 Copy_u8Data ){
    32fc:	ef 92       	push	r14
    32fe:	ff 92       	push	r15
    3300:	1f 93       	push	r17
    3302:	18 2f       	mov	r17, r24
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3304:	81 e0       	ldi	r24, 0x01	; 1
    3306:	65 e0       	ldi	r22, 0x05	; 5
    3308:	41 e0       	ldi	r20, 0x01	; 1
    330a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    330e:	81 e0       	ldi	r24, 0x01	; 1
    3310:	66 e0       	ldi	r22, 0x06	; 6
    3312:	40 e0       	ldi	r20, 0x00	; 0
    3314:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3318:	61 2f       	mov	r22, r17
    331a:	62 95       	swap	r22
    331c:	6f 70       	andi	r22, 0x0F	; 15
    331e:	83 e0       	ldi	r24, 0x03	; 3
    3320:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	67 e0       	ldi	r22, 0x07	; 7
    3328:	41 e0       	ldi	r20, 0x01	; 1
    332a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    332e:	90 ed       	ldi	r25, 0xD0	; 208
    3330:	e9 2e       	mov	r14, r25
    3332:	97 e0       	ldi	r25, 0x07	; 7
    3334:	f9 2e       	mov	r15, r25
    3336:	c7 01       	movw	r24, r14
    3338:	01 97       	sbiw	r24, 0x01	; 1
    333a:	f1 f7       	brne	.-4      	; 0x3338 <CLCD_voidSendData+0x3c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	67 e0       	ldi	r22, 0x07	; 7
    3340:	40 e0       	ldi	r20, 0x00	; 0
    3342:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3346:	c7 01       	movw	r24, r14
    3348:	01 97       	sbiw	r24, 0x01	; 1
    334a:	f1 f7       	brne	.-4      	; 0x3348 <CLCD_voidSendData+0x4c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    334c:	83 e0       	ldi	r24, 0x03	; 3
    334e:	61 2f       	mov	r22, r17
    3350:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3354:	81 e0       	ldi	r24, 0x01	; 1
    3356:	67 e0       	ldi	r22, 0x07	; 7
    3358:	41 e0       	ldi	r20, 0x01	; 1
    335a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    335e:	c7 01       	movw	r24, r14
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <CLCD_voidSendData+0x64>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3364:	81 e0       	ldi	r24, 0x01	; 1
    3366:	67 e0       	ldi	r22, 0x07	; 7
    3368:	40 e0       	ldi	r20, 0x00	; 0
    336a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    336e:	c7 01       	movw	r24, r14
    3370:	01 97       	sbiw	r24, 0x01	; 1
    3372:	f1 f7       	brne	.-4      	; 0x3370 <CLCD_voidSendData+0x74>
    3374:	c7 01       	movw	r24, r14
    3376:	01 97       	sbiw	r24, 0x01	; 1
    3378:	f1 f7       	brne	.-4      	; 0x3376 <CLCD_voidSendData+0x7a>

	#endif

	_delay_ms(1);

}
    337a:	1f 91       	pop	r17
    337c:	ff 90       	pop	r15
    337e:	ef 90       	pop	r14
    3380:	08 95       	ret

00003382 <CLCD_voidSendString>:
* Breif : This Function send string to the port which is defined in config.h
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){
    3382:	ef 92       	push	r14
    3384:	ff 92       	push	r15
    3386:	0f 93       	push	r16
    3388:	1f 93       	push	r17
    338a:	cf 93       	push	r28
    338c:	df 93       	push	r29
    338e:	7c 01       	movw	r14, r24

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    3390:	fc 01       	movw	r30, r24
    3392:	10 81       	ld	r17, Z
    3394:	11 23       	and	r17, r17
    3396:	09 f4       	brne	.+2      	; 0x339a <CLCD_voidSendString+0x18>
    3398:	42 c0       	rjmp	.+132    	; 0x341e <CLCD_voidSendString+0x9c>
    339a:	00 e0       	ldi	r16, 0x00	; 0
    339c:	c0 ed       	ldi	r28, 0xD0	; 208
    339e:	d7 e0       	ldi	r29, 0x07	; 7
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	65 e0       	ldi	r22, 0x05	; 5
    33a4:	41 e0       	ldi	r20, 0x01	; 1
    33a6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	66 e0       	ldi	r22, 0x06	; 6
    33ae:	40 e0       	ldi	r20, 0x00	; 0
    33b0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    33b4:	61 2f       	mov	r22, r17
    33b6:	62 95       	swap	r22
    33b8:	6f 70       	andi	r22, 0x0F	; 15
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	67 e0       	ldi	r22, 0x07	; 7
    33c4:	41 e0       	ldi	r20, 0x01	; 1
    33c6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    33ca:	ce 01       	movw	r24, r28
    33cc:	01 97       	sbiw	r24, 0x01	; 1
    33ce:	f1 f7       	brne	.-4      	; 0x33cc <CLCD_voidSendString+0x4a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	67 e0       	ldi	r22, 0x07	; 7
    33d4:	40 e0       	ldi	r20, 0x00	; 0
    33d6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    33da:	ce 01       	movw	r24, r28
    33dc:	01 97       	sbiw	r24, 0x01	; 1
    33de:	f1 f7       	brne	.-4      	; 0x33dc <CLCD_voidSendString+0x5a>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    33e0:	83 e0       	ldi	r24, 0x03	; 3
    33e2:	61 2f       	mov	r22, r17
    33e4:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	67 e0       	ldi	r22, 0x07	; 7
    33ec:	41 e0       	ldi	r20, 0x01	; 1
    33ee:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    33f2:	ce 01       	movw	r24, r28
    33f4:	01 97       	sbiw	r24, 0x01	; 1
    33f6:	f1 f7       	brne	.-4      	; 0x33f4 <CLCD_voidSendString+0x72>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	67 e0       	ldi	r22, 0x07	; 7
    33fc:	40 e0       	ldi	r20, 0x00	; 0
    33fe:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3402:	ce 01       	movw	r24, r28
    3404:	01 97       	sbiw	r24, 0x01	; 1
    3406:	f1 f7       	brne	.-4      	; 0x3404 <CLCD_voidSendString+0x82>
    3408:	ce 01       	movw	r24, r28
    340a:	01 97       	sbiw	r24, 0x01	; 1
    340c:	f1 f7       	brne	.-4      	; 0x340a <CLCD_voidSendString+0x88>
	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;
    340e:	0f 5f       	subi	r16, 0xFF	; 255
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    3410:	f7 01       	movw	r30, r14
    3412:	e0 0f       	add	r30, r16
    3414:	f1 1d       	adc	r31, r1
    3416:	10 81       	ld	r17, Z
    3418:	11 23       	and	r17, r17
    341a:	09 f0       	breq	.+2      	; 0x341e <CLCD_voidSendString+0x9c>
    341c:	c1 cf       	rjmp	.-126    	; 0x33a0 <CLCD_voidSendString+0x1e>
		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;

	}

}
    341e:	df 91       	pop	r29
    3420:	cf 91       	pop	r28
    3422:	1f 91       	pop	r17
    3424:	0f 91       	pop	r16
    3426:	ff 90       	pop	r15
    3428:	ef 90       	pop	r14
    342a:	08 95       	ret

0000342c <CLCD_voidClearScreen>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
    342c:	0f 93       	push	r16
    342e:	1f 93       	push	r17
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	65 e0       	ldi	r22, 0x05	; 5
    3434:	40 e0       	ldi	r20, 0x00	; 0
    3436:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	66 e0       	ldi	r22, 0x06	; 6
    343e:	40 e0       	ldi	r20, 0x00	; 0
    3440:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3444:	83 e0       	ldi	r24, 0x03	; 3
    3446:	60 e0       	ldi	r22, 0x00	; 0
    3448:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	67 e0       	ldi	r22, 0x07	; 7
    3450:	41 e0       	ldi	r20, 0x01	; 1
    3452:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3456:	00 ed       	ldi	r16, 0xD0	; 208
    3458:	17 e0       	ldi	r17, 0x07	; 7
    345a:	c8 01       	movw	r24, r16
    345c:	01 97       	sbiw	r24, 0x01	; 1
    345e:	f1 f7       	brne	.-4      	; 0x345c <CLCD_voidClearScreen+0x30>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3460:	81 e0       	ldi	r24, 0x01	; 1
    3462:	67 e0       	ldi	r22, 0x07	; 7
    3464:	40 e0       	ldi	r20, 0x00	; 0
    3466:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    346a:	c8 01       	movw	r24, r16
    346c:	01 97       	sbiw	r24, 0x01	; 1
    346e:	f1 f7       	brne	.-4      	; 0x346c <CLCD_voidClearScreen+0x40>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    3470:	83 e0       	ldi	r24, 0x03	; 3
    3472:	61 e0       	ldi	r22, 0x01	; 1
    3474:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3478:	81 e0       	ldi	r24, 0x01	; 1
    347a:	67 e0       	ldi	r22, 0x07	; 7
    347c:	41 e0       	ldi	r20, 0x01	; 1
    347e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3482:	c8 01       	movw	r24, r16
    3484:	01 97       	sbiw	r24, 0x01	; 1
    3486:	f1 f7       	brne	.-4      	; 0x3484 <CLCD_voidClearScreen+0x58>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3488:	81 e0       	ldi	r24, 0x01	; 1
    348a:	67 e0       	ldi	r22, 0x07	; 7
    348c:	40 e0       	ldi	r20, 0x00	; 0
    348e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3492:	c8 01       	movw	r24, r16
    3494:	01 97       	sbiw	r24, 0x01	; 1
    3496:	f1 f7       	brne	.-4      	; 0x3494 <CLCD_voidClearScreen+0x68>
    3498:	c8 01       	movw	r24, r16
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	f1 f7       	brne	.-4      	; 0x349a <CLCD_voidClearScreen+0x6e>
    349e:	80 e2       	ldi	r24, 0x20	; 32
    34a0:	9e e4       	ldi	r25, 0x4E	; 78
    34a2:	01 97       	sbiw	r24, 0x01	; 1
    34a4:	f1 f7       	brne	.-4      	; 0x34a2 <CLCD_voidClearScreen+0x76>
*/
void CLCD_voidClearScreen(void)
{
	CLCD_voidSendCommand(lcd_Clear);
	_delay_ms(10); //wait more than 1.53 ms
}
    34a6:	1f 91       	pop	r17
    34a8:	0f 91       	pop	r16
    34aa:	08 95       	ret

000034ac <CLCD_voidSetPosition>:
*Hint :-
   In This function we send a command which =0b1xxxxxxx
   MSB = 1  ===> refers that it is command to set cursor
   xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
    34ac:	ff 92       	push	r15
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	98 2f       	mov	r25, r24

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    34b4:	81 50       	subi	r24, 0x01	; 1
    34b6:	82 30       	cpi	r24, 0x02	; 2
    34b8:	08 f4       	brcc	.+2      	; 0x34bc <CLCD_voidSetPosition+0x10>
    34ba:	42 c0       	rjmp	.+132    	; 0x3540 <CLCD_voidSetPosition+0x94>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    34bc:	20 e8       	ldi	r18, 0x80	; 128
    34be:	f2 2e       	mov	r15, r18
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    34c0:	81 e0       	ldi	r24, 0x01	; 1
    34c2:	65 e0       	ldi	r22, 0x05	; 5
    34c4:	40 e0       	ldi	r20, 0x00	; 0
    34c6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	66 e0       	ldi	r22, 0x06	; 6
    34ce:	40 e0       	ldi	r20, 0x00	; 0
    34d0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    34d4:	6f 2d       	mov	r22, r15
    34d6:	62 95       	swap	r22
    34d8:	6f 70       	andi	r22, 0x0F	; 15
    34da:	83 e0       	ldi	r24, 0x03	; 3
    34dc:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	67 e0       	ldi	r22, 0x07	; 7
    34e4:	41 e0       	ldi	r20, 0x01	; 1
    34e6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    34ea:	00 ed       	ldi	r16, 0xD0	; 208
    34ec:	17 e0       	ldi	r17, 0x07	; 7
    34ee:	c8 01       	movw	r24, r16
    34f0:	01 97       	sbiw	r24, 0x01	; 1
    34f2:	f1 f7       	brne	.-4      	; 0x34f0 <CLCD_voidSetPosition+0x44>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	67 e0       	ldi	r22, 0x07	; 7
    34f8:	40 e0       	ldi	r20, 0x00	; 0
    34fa:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    34fe:	c8 01       	movw	r24, r16
    3500:	01 97       	sbiw	r24, 0x01	; 1
    3502:	f1 f7       	brne	.-4      	; 0x3500 <CLCD_voidSetPosition+0x54>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    3504:	83 e0       	ldi	r24, 0x03	; 3
    3506:	6f 2d       	mov	r22, r15
    3508:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    350c:	81 e0       	ldi	r24, 0x01	; 1
    350e:	67 e0       	ldi	r22, 0x07	; 7
    3510:	41 e0       	ldi	r20, 0x01	; 1
    3512:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3516:	c8 01       	movw	r24, r16
    3518:	01 97       	sbiw	r24, 0x01	; 1
    351a:	f1 f7       	brne	.-4      	; 0x3518 <CLCD_voidSetPosition+0x6c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    351c:	81 e0       	ldi	r24, 0x01	; 1
    351e:	67 e0       	ldi	r22, 0x07	; 7
    3520:	40 e0       	ldi	r20, 0x00	; 0
    3522:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3526:	c8 01       	movw	r24, r16
    3528:	01 97       	sbiw	r24, 0x01	; 1
    352a:	f1 f7       	brne	.-4      	; 0x3528 <CLCD_voidSetPosition+0x7c>
    352c:	c8 01       	movw	r24, r16
    352e:	01 97       	sbiw	r24, 0x01	; 1
    3530:	f1 f7       	brne	.-4      	; 0x352e <CLCD_voidSetPosition+0x82>
    3532:	c8 01       	movw	r24, r16
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <CLCD_voidSetPosition+0x88>

	}
	CLCD_voidSendCommand ( LOC_u8data );
	_delay_ms(1);

}
    3538:	1f 91       	pop	r17
    353a:	0f 91       	pop	r16
    353c:	ff 90       	pop	r15
    353e:	08 95       	ret
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    3540:	61 31       	cpi	r22, 0x11	; 17
    3542:	08 f0       	brcs	.+2      	; 0x3546 <CLCD_voidSetPosition+0x9a>
    3544:	bb cf       	rjmp	.-138    	; 0x34bc <CLCD_voidSetPosition+0x10>
    3546:	66 23       	and	r22, r22
    3548:	09 f4       	brne	.+2      	; 0x354c <CLCD_voidSetPosition+0xa0>
    354a:	b8 cf       	rjmp	.-144    	; 0x34bc <CLCD_voidSetPosition+0x10>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    354c:	91 30       	cpi	r25, 0x01	; 1
    354e:	39 f0       	breq	.+14     	; 0x355e <CLCD_voidSetPosition+0xb2>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    3550:	92 30       	cpi	r25, 0x02	; 2
    3552:	09 f0       	breq	.+2      	; 0x3556 <CLCD_voidSetPosition+0xaa>
    3554:	b5 cf       	rjmp	.-150    	; 0x34c0 <CLCD_voidSetPosition+0x14>

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    3556:	3f eb       	ldi	r19, 0xBF	; 191
    3558:	f3 2e       	mov	r15, r19
    355a:	f6 0e       	add	r15, r22
    355c:	b1 cf       	rjmp	.-158    	; 0x34c0 <CLCD_voidSetPosition+0x14>
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    355e:	4f e7       	ldi	r20, 0x7F	; 127
    3560:	f4 2e       	mov	r15, r20
    3562:	f6 0e       	add	r15, r22
    3564:	ad cf       	rjmp	.-166    	; 0x34c0 <CLCD_voidSetPosition+0x14>

00003566 <CLCD_voidInit>:
/*
* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
void CLCD_voidInit        ( void ){
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	30 e0       	ldi	r19, 0x00	; 0
    356e:	48 ec       	ldi	r20, 0xC8	; 200
    3570:	50 e0       	ldi	r21, 0x00	; 0
    3572:	ca 01       	movw	r24, r20
    3574:	01 97       	sbiw	r24, 0x01	; 1
    3576:	f1 f7       	brne	.-4      	; 0x3574 <CLCD_voidInit+0xe>
    3578:	2f 5f       	subi	r18, 0xFF	; 255
    357a:	3f 4f       	sbci	r19, 0xFF	; 255
    357c:	81 e0       	ldi	r24, 0x01	; 1
    357e:	24 3f       	cpi	r18, 0xF4	; 244
    3580:	38 07       	cpc	r19, r24
    3582:	b9 f7       	brne	.-18     	; 0x3572 <CLCD_voidInit+0xc>

	#elif   CLCD_MODE == 4

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN4,DIO_PIN_OUTPUT);
    3584:	83 e0       	ldi	r24, 0x03	; 3
    3586:	64 e0       	ldi	r22, 0x04	; 4
    3588:	41 e0       	ldi	r20, 0x01	; 1
    358a:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN5,DIO_PIN_OUTPUT);
    358e:	83 e0       	ldi	r24, 0x03	; 3
    3590:	65 e0       	ldi	r22, 0x05	; 5
    3592:	41 e0       	ldi	r20, 0x01	; 1
    3594:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN6,DIO_PIN_OUTPUT);
    3598:	83 e0       	ldi	r24, 0x03	; 3
    359a:	66 e0       	ldi	r22, 0x06	; 6
    359c:	41 e0       	ldi	r20, 0x01	; 1
    359e:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection      (CLCD_DATA_PORT,DIO_PIN7,DIO_PIN_OUTPUT);
    35a2:	83 e0       	ldi	r24, 0x03	; 3
    35a4:	67 e0       	ldi	r22, 0x07	; 7
    35a6:	41 e0       	ldi	r20, 0x01	; 1
    35a8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
    35ac:	81 e0       	ldi	r24, 0x01	; 1
    35ae:	65 e0       	ldi	r22, 0x05	; 5
    35b0:	41 e0       	ldi	r20, 0x01	; 1
    35b2:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
    35b6:	81 e0       	ldi	r24, 0x01	; 1
    35b8:	66 e0       	ldi	r22, 0x06	; 6
    35ba:	41 e0       	ldi	r20, 0x01	; 1
    35bc:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	67 e0       	ldi	r22, 0x07	; 7
    35c4:	41 e0       	ldi	r20, 0x01	; 1
    35c6:	0e 94 81 15 	call	0x2b02	; 0x2b02 <DIO_enumSetPinDirection>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	65 e0       	ldi	r22, 0x05	; 5
    35ce:	40 e0       	ldi	r20, 0x00	; 0
    35d0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	66 e0       	ldi	r22, 0x06	; 6
    35d8:	40 e0       	ldi	r20, 0x00	; 0
    35da:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    35de:	83 e0       	ldi	r24, 0x03	; 3
    35e0:	60 e0       	ldi	r22, 0x00	; 0
    35e2:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	67 e0       	ldi	r22, 0x07	; 7
    35ea:	41 e0       	ldi	r20, 0x01	; 1
    35ec:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    35f0:	00 ed       	ldi	r16, 0xD0	; 208
    35f2:	17 e0       	ldi	r17, 0x07	; 7
    35f4:	c8 01       	movw	r24, r16
    35f6:	01 97       	sbiw	r24, 0x01	; 1
    35f8:	f1 f7       	brne	.-4      	; 0x35f6 <CLCD_voidInit+0x90>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    35fa:	81 e0       	ldi	r24, 0x01	; 1
    35fc:	67 e0       	ldi	r22, 0x07	; 7
    35fe:	40 e0       	ldi	r20, 0x00	; 0
    3600:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3604:	c8 01       	movw	r24, r16
    3606:	01 97       	sbiw	r24, 0x01	; 1
    3608:	f1 f7       	brne	.-4      	; 0x3606 <CLCD_voidInit+0xa0>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    360a:	83 e0       	ldi	r24, 0x03	; 3
    360c:	62 e0       	ldi	r22, 0x02	; 2
    360e:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	67 e0       	ldi	r22, 0x07	; 7
    3616:	41 e0       	ldi	r20, 0x01	; 1
    3618:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    361c:	c8 01       	movw	r24, r16
    361e:	01 97       	sbiw	r24, 0x01	; 1
    3620:	f1 f7       	brne	.-4      	; 0x361e <CLCD_voidInit+0xb8>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3622:	81 e0       	ldi	r24, 0x01	; 1
    3624:	67 e0       	ldi	r22, 0x07	; 7
    3626:	40 e0       	ldi	r20, 0x00	; 0
    3628:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    362c:	c8 01       	movw	r24, r16
    362e:	01 97       	sbiw	r24, 0x01	; 1
    3630:	f1 f7       	brne	.-4      	; 0x362e <CLCD_voidInit+0xc8>
    3632:	c8 01       	movw	r24, r16
    3634:	01 97       	sbiw	r24, 0x01	; 1
    3636:	f1 f7       	brne	.-4      	; 0x3634 <CLCD_voidInit+0xce>
    3638:	80 e6       	ldi	r24, 0x60	; 96
    363a:	9a ee       	ldi	r25, 0xEA	; 234
    363c:	01 97       	sbiw	r24, 0x01	; 1
    363e:	f1 f7       	brne	.-4      	; 0x363c <CLCD_voidInit+0xd6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	65 e0       	ldi	r22, 0x05	; 5
    3644:	40 e0       	ldi	r20, 0x00	; 0
    3646:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    364a:	81 e0       	ldi	r24, 0x01	; 1
    364c:	66 e0       	ldi	r22, 0x06	; 6
    364e:	40 e0       	ldi	r20, 0x00	; 0
    3650:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3654:	83 e0       	ldi	r24, 0x03	; 3
    3656:	62 e0       	ldi	r22, 0x02	; 2
    3658:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    365c:	81 e0       	ldi	r24, 0x01	; 1
    365e:	67 e0       	ldi	r22, 0x07	; 7
    3660:	41 e0       	ldi	r20, 0x01	; 1
    3662:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3666:	c8 01       	movw	r24, r16
    3668:	01 97       	sbiw	r24, 0x01	; 1
    366a:	f1 f7       	brne	.-4      	; 0x3668 <CLCD_voidInit+0x102>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    366c:	81 e0       	ldi	r24, 0x01	; 1
    366e:	67 e0       	ldi	r22, 0x07	; 7
    3670:	40 e0       	ldi	r20, 0x00	; 0
    3672:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3676:	c8 01       	movw	r24, r16
    3678:	01 97       	sbiw	r24, 0x01	; 1
    367a:	f1 f7       	brne	.-4      	; 0x3678 <CLCD_voidInit+0x112>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    367c:	83 e0       	ldi	r24, 0x03	; 3
    367e:	68 e2       	ldi	r22, 0x28	; 40
    3680:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3684:	81 e0       	ldi	r24, 0x01	; 1
    3686:	67 e0       	ldi	r22, 0x07	; 7
    3688:	41 e0       	ldi	r20, 0x01	; 1
    368a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    368e:	c8 01       	movw	r24, r16
    3690:	01 97       	sbiw	r24, 0x01	; 1
    3692:	f1 f7       	brne	.-4      	; 0x3690 <CLCD_voidInit+0x12a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3694:	81 e0       	ldi	r24, 0x01	; 1
    3696:	67 e0       	ldi	r22, 0x07	; 7
    3698:	40 e0       	ldi	r20, 0x00	; 0
    369a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    369e:	c8 01       	movw	r24, r16
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	f1 f7       	brne	.-4      	; 0x36a0 <CLCD_voidInit+0x13a>
    36a4:	c8 01       	movw	r24, r16
    36a6:	01 97       	sbiw	r24, 0x01	; 1
    36a8:	f1 f7       	brne	.-4      	; 0x36a6 <CLCD_voidInit+0x140>
    36aa:	c8 01       	movw	r24, r16
    36ac:	01 97       	sbiw	r24, 0x01	; 1
    36ae:	f1 f7       	brne	.-4      	; 0x36ac <CLCD_voidInit+0x146>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    36b0:	81 e0       	ldi	r24, 0x01	; 1
    36b2:	65 e0       	ldi	r22, 0x05	; 5
    36b4:	40 e0       	ldi	r20, 0x00	; 0
    36b6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	66 e0       	ldi	r22, 0x06	; 6
    36be:	40 e0       	ldi	r20, 0x00	; 0
    36c0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    36c4:	83 e0       	ldi	r24, 0x03	; 3
    36c6:	60 e0       	ldi	r22, 0x00	; 0
    36c8:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	67 e0       	ldi	r22, 0x07	; 7
    36d0:	41 e0       	ldi	r20, 0x01	; 1
    36d2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    36d6:	c8 01       	movw	r24, r16
    36d8:	01 97       	sbiw	r24, 0x01	; 1
    36da:	f1 f7       	brne	.-4      	; 0x36d8 <CLCD_voidInit+0x172>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	67 e0       	ldi	r22, 0x07	; 7
    36e0:	40 e0       	ldi	r20, 0x00	; 0
    36e2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    36e6:	c8 01       	movw	r24, r16
    36e8:	01 97       	sbiw	r24, 0x01	; 1
    36ea:	f1 f7       	brne	.-4      	; 0x36e8 <CLCD_voidInit+0x182>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    36ec:	83 e0       	ldi	r24, 0x03	; 3
    36ee:	6c e0       	ldi	r22, 0x0C	; 12
    36f0:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    36f4:	81 e0       	ldi	r24, 0x01	; 1
    36f6:	67 e0       	ldi	r22, 0x07	; 7
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    36fe:	c8 01       	movw	r24, r16
    3700:	01 97       	sbiw	r24, 0x01	; 1
    3702:	f1 f7       	brne	.-4      	; 0x3700 <CLCD_voidInit+0x19a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	67 e0       	ldi	r22, 0x07	; 7
    3708:	40 e0       	ldi	r20, 0x00	; 0
    370a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    370e:	c8 01       	movw	r24, r16
    3710:	01 97       	sbiw	r24, 0x01	; 1
    3712:	f1 f7       	brne	.-4      	; 0x3710 <CLCD_voidInit+0x1aa>
    3714:	c8 01       	movw	r24, r16
    3716:	01 97       	sbiw	r24, 0x01	; 1
    3718:	f1 f7       	brne	.-4      	; 0x3716 <CLCD_voidInit+0x1b0>
    371a:	c8 01       	movw	r24, r16
    371c:	01 97       	sbiw	r24, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <CLCD_voidInit+0x1b6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	65 e0       	ldi	r22, 0x05	; 5
    3724:	40 e0       	ldi	r20, 0x00	; 0
    3726:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    372a:	81 e0       	ldi	r24, 0x01	; 1
    372c:	66 e0       	ldi	r22, 0x06	; 6
    372e:	40 e0       	ldi	r20, 0x00	; 0
    3730:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3734:	83 e0       	ldi	r24, 0x03	; 3
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    373c:	81 e0       	ldi	r24, 0x01	; 1
    373e:	67 e0       	ldi	r22, 0x07	; 7
    3740:	41 e0       	ldi	r20, 0x01	; 1
    3742:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3746:	c8 01       	movw	r24, r16
    3748:	01 97       	sbiw	r24, 0x01	; 1
    374a:	f1 f7       	brne	.-4      	; 0x3748 <CLCD_voidInit+0x1e2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    374c:	81 e0       	ldi	r24, 0x01	; 1
    374e:	67 e0       	ldi	r22, 0x07	; 7
    3750:	40 e0       	ldi	r20, 0x00	; 0
    3752:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3756:	c8 01       	movw	r24, r16
    3758:	01 97       	sbiw	r24, 0x01	; 1
    375a:	f1 f7       	brne	.-4      	; 0x3758 <CLCD_voidInit+0x1f2>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    375c:	83 e0       	ldi	r24, 0x03	; 3
    375e:	61 e0       	ldi	r22, 0x01	; 1
    3760:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	67 e0       	ldi	r22, 0x07	; 7
    3768:	41 e0       	ldi	r20, 0x01	; 1
    376a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    376e:	c8 01       	movw	r24, r16
    3770:	01 97       	sbiw	r24, 0x01	; 1
    3772:	f1 f7       	brne	.-4      	; 0x3770 <CLCD_voidInit+0x20a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	67 e0       	ldi	r22, 0x07	; 7
    3778:	40 e0       	ldi	r20, 0x00	; 0
    377a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    377e:	c8 01       	movw	r24, r16
    3780:	01 97       	sbiw	r24, 0x01	; 1
    3782:	f1 f7       	brne	.-4      	; 0x3780 <CLCD_voidInit+0x21a>
    3784:	c8 01       	movw	r24, r16
    3786:	01 97       	sbiw	r24, 0x01	; 1
    3788:	f1 f7       	brne	.-4      	; 0x3786 <CLCD_voidInit+0x220>
    378a:	80 e2       	ldi	r24, 0x20	; 32
    378c:	9e e4       	ldi	r25, 0x4E	; 78
    378e:	01 97       	sbiw	r24, 0x01	; 1
    3790:	f1 f7       	brne	.-4      	; 0x378e <CLCD_voidInit+0x228>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    3792:	81 e0       	ldi	r24, 0x01	; 1
    3794:	65 e0       	ldi	r22, 0x05	; 5
    3796:	40 e0       	ldi	r20, 0x00	; 0
    3798:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	66 e0       	ldi	r22, 0x06	; 6
    37a0:	40 e0       	ldi	r20, 0x00	; 0
    37a2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    37a6:	83 e0       	ldi	r24, 0x03	; 3
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    37ae:	81 e0       	ldi	r24, 0x01	; 1
    37b0:	67 e0       	ldi	r22, 0x07	; 7
    37b2:	41 e0       	ldi	r20, 0x01	; 1
    37b4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    37b8:	c8 01       	movw	r24, r16
    37ba:	01 97       	sbiw	r24, 0x01	; 1
    37bc:	f1 f7       	brne	.-4      	; 0x37ba <CLCD_voidInit+0x254>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	67 e0       	ldi	r22, 0x07	; 7
    37c2:	40 e0       	ldi	r20, 0x00	; 0
    37c4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    37c8:	c8 01       	movw	r24, r16
    37ca:	01 97       	sbiw	r24, 0x01	; 1
    37cc:	f1 f7       	brne	.-4      	; 0x37ca <CLCD_voidInit+0x264>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    37ce:	83 e0       	ldi	r24, 0x03	; 3
    37d0:	66 e0       	ldi	r22, 0x06	; 6
    37d2:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    37d6:	81 e0       	ldi	r24, 0x01	; 1
    37d8:	67 e0       	ldi	r22, 0x07	; 7
    37da:	41 e0       	ldi	r20, 0x01	; 1
    37dc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    37e0:	c8 01       	movw	r24, r16
    37e2:	01 97       	sbiw	r24, 0x01	; 1
    37e4:	f1 f7       	brne	.-4      	; 0x37e2 <CLCD_voidInit+0x27c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    37e6:	81 e0       	ldi	r24, 0x01	; 1
    37e8:	67 e0       	ldi	r22, 0x07	; 7
    37ea:	40 e0       	ldi	r20, 0x00	; 0
    37ec:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    37f0:	c8 01       	movw	r24, r16
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	f1 f7       	brne	.-4      	; 0x37f2 <CLCD_voidInit+0x28c>
    37f6:	c8 01       	movw	r24, r16
    37f8:	01 97       	sbiw	r24, 0x01	; 1
    37fa:	f1 f7       	brne	.-4      	; 0x37f8 <CLCD_voidInit+0x292>
    37fc:	c8 01       	movw	r24, r16
    37fe:	01 97       	sbiw	r24, 0x01	; 1
    3800:	f1 f7       	brne	.-4      	; 0x37fe <CLCD_voidInit+0x298>
	#endif




}
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	08 95       	ret

00003808 <CLCD_voidSendNumber>:
* Breif : This Function send number to the port which is defined in config.h
* Parameters :
            => Copy_u64Number --> number that you want to display
* return : nothing
*/
void CLCD_voidSendNumber   ( u64 Copy_u64Number    ){
    3808:	2f 92       	push	r2
    380a:	3f 92       	push	r3
    380c:	4f 92       	push	r4
    380e:	5f 92       	push	r5
    3810:	6f 92       	push	r6
    3812:	7f 92       	push	r7
    3814:	8f 92       	push	r8
    3816:	9f 92       	push	r9
    3818:	af 92       	push	r10
    381a:	bf 92       	push	r11
    381c:	cf 92       	push	r12
    381e:	df 92       	push	r13
    3820:	ef 92       	push	r14
    3822:	ff 92       	push	r15
    3824:	0f 93       	push	r16
    3826:	1f 93       	push	r17
    3828:	df 93       	push	r29
    382a:	cf 93       	push	r28
    382c:	cd b7       	in	r28, 0x3d	; 61
    382e:	de b7       	in	r29, 0x3e	; 62
    3830:	2a 97       	sbiw	r28, 0x0a	; 10
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	2b 83       	std	Y+3, r18	; 0x03
    383e:	3c 83       	std	Y+4, r19	; 0x04
    3840:	4d 83       	std	Y+5, r20	; 0x05
    3842:	5e 83       	std	Y+6, r21	; 0x06
    3844:	6f 83       	std	Y+7, r22	; 0x07
    3846:	78 87       	std	Y+8, r23	; 0x08
    3848:	89 87       	std	Y+9, r24	; 0x09
    384a:	9a 87       	std	Y+10, r25	; 0x0a

	u64 LOC_u64Reversed = 1 ;

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }
    384c:	82 2f       	mov	r24, r18
    384e:	83 2b       	or	r24, r19
    3850:	84 2b       	or	r24, r20
    3852:	85 2b       	or	r24, r21
    3854:	86 2b       	or	r24, r22
    3856:	87 2b       	or	r24, r23
    3858:	49 85       	ldd	r20, Y+9	; 0x09
    385a:	84 2b       	or	r24, r20
    385c:	89 2b       	or	r24, r25
    385e:	09 f4       	brne	.+2      	; 0x3862 <CLCD_voidSendNumber+0x5a>
    3860:	86 c1       	rjmp	.+780    	; 0x3b6e <CLCD_voidSendNumber+0x366>
    3862:	99 24       	eor	r9, r9
    3864:	93 94       	inc	r9
    3866:	88 24       	eor	r8, r8
    3868:	55 24       	eor	r5, r5
    386a:	22 24       	eor	r2, r2
    386c:	33 24       	eor	r3, r3
    386e:	44 24       	eor	r4, r4
    3870:	66 24       	eor	r6, r6
    3872:	77 24       	eor	r7, r7

	else{

		while( Copy_u64Number != 0 ){

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
    3874:	29 2d       	mov	r18, r9
    3876:	38 2d       	mov	r19, r8
    3878:	45 2d       	mov	r20, r5
    387a:	52 2d       	mov	r21, r2
    387c:	63 2d       	mov	r22, r3
    387e:	74 2d       	mov	r23, r4
    3880:	c3 01       	movw	r24, r6
    3882:	01 e0       	ldi	r16, 0x01	; 1
    3884:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    3888:	12 2f       	mov	r17, r18
    388a:	f3 2e       	mov	r15, r19
    388c:	e4 2e       	mov	r14, r20
    388e:	d5 2e       	mov	r13, r21
    3890:	c6 2e       	mov	r12, r22
    3892:	b7 2e       	mov	r11, r23
    3894:	a8 2e       	mov	r10, r24
    3896:	79 2e       	mov	r7, r25
    3898:	02 e0       	ldi	r16, 0x02	; 2
    389a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    389e:	82 2e       	mov	r8, r18
    38a0:	81 0e       	add	r8, r17
    38a2:	e1 e0       	ldi	r30, 0x01	; 1
    38a4:	81 16       	cp	r8, r17
    38a6:	08 f0       	brcs	.+2      	; 0x38aa <CLCD_voidSendNumber+0xa2>
    38a8:	e0 e0       	ldi	r30, 0x00	; 0
    38aa:	3f 0d       	add	r19, r15
    38ac:	21 e0       	ldi	r18, 0x01	; 1
    38ae:	3f 15       	cp	r19, r15
    38b0:	08 f0       	brcs	.+2      	; 0x38b4 <CLCD_voidSendNumber+0xac>
    38b2:	20 e0       	ldi	r18, 0x00	; 0
    38b4:	6e 2e       	mov	r6, r30
    38b6:	63 0e       	add	r6, r19
    38b8:	e1 e0       	ldi	r30, 0x01	; 1
    38ba:	63 16       	cp	r6, r19
    38bc:	08 f0       	brcs	.+2      	; 0x38c0 <CLCD_voidSendNumber+0xb8>
    38be:	e0 e0       	ldi	r30, 0x00	; 0
    38c0:	2e 2b       	or	r18, r30
    38c2:	4e 0d       	add	r20, r14
    38c4:	31 e0       	ldi	r19, 0x01	; 1
    38c6:	4e 15       	cp	r20, r14
    38c8:	08 f0       	brcs	.+2      	; 0x38cc <CLCD_voidSendNumber+0xc4>
    38ca:	30 e0       	ldi	r19, 0x00	; 0
    38cc:	52 2e       	mov	r5, r18
    38ce:	54 0e       	add	r5, r20
    38d0:	21 e0       	ldi	r18, 0x01	; 1
    38d2:	54 16       	cp	r5, r20
    38d4:	08 f0       	brcs	.+2      	; 0x38d8 <CLCD_voidSendNumber+0xd0>
    38d6:	20 e0       	ldi	r18, 0x00	; 0
    38d8:	32 2b       	or	r19, r18
    38da:	5d 0d       	add	r21, r13
    38dc:	21 e0       	ldi	r18, 0x01	; 1
    38de:	5d 15       	cp	r21, r13
    38e0:	08 f0       	brcs	.+2      	; 0x38e4 <CLCD_voidSendNumber+0xdc>
    38e2:	20 e0       	ldi	r18, 0x00	; 0
    38e4:	43 2e       	mov	r4, r19
    38e6:	45 0e       	add	r4, r21
    38e8:	31 e0       	ldi	r19, 0x01	; 1
    38ea:	45 16       	cp	r4, r21
    38ec:	08 f0       	brcs	.+2      	; 0x38f0 <CLCD_voidSendNumber+0xe8>
    38ee:	30 e0       	ldi	r19, 0x00	; 0
    38f0:	23 2b       	or	r18, r19
    38f2:	6c 0d       	add	r22, r12
    38f4:	31 e0       	ldi	r19, 0x01	; 1
    38f6:	6c 15       	cp	r22, r12
    38f8:	08 f0       	brcs	.+2      	; 0x38fc <CLCD_voidSendNumber+0xf4>
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	32 2e       	mov	r3, r18
    38fe:	36 0e       	add	r3, r22
    3900:	21 e0       	ldi	r18, 0x01	; 1
    3902:	36 16       	cp	r3, r22
    3904:	08 f0       	brcs	.+2      	; 0x3908 <CLCD_voidSendNumber+0x100>
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	32 2b       	or	r19, r18
    390a:	7b 0d       	add	r23, r11
    390c:	21 e0       	ldi	r18, 0x01	; 1
    390e:	7b 15       	cp	r23, r11
    3910:	08 f0       	brcs	.+2      	; 0x3914 <CLCD_voidSendNumber+0x10c>
    3912:	20 e0       	ldi	r18, 0x00	; 0
    3914:	23 2e       	mov	r2, r19
    3916:	27 0e       	add	r2, r23
    3918:	31 e0       	ldi	r19, 0x01	; 1
    391a:	27 16       	cp	r2, r23
    391c:	08 f0       	brcs	.+2      	; 0x3920 <CLCD_voidSendNumber+0x118>
    391e:	30 e0       	ldi	r19, 0x00	; 0
    3920:	23 2b       	or	r18, r19
    3922:	8a 0d       	add	r24, r10
    3924:	31 e0       	ldi	r19, 0x01	; 1
    3926:	8a 15       	cp	r24, r10
    3928:	08 f0       	brcs	.+2      	; 0x392c <CLCD_voidSendNumber+0x124>
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	28 0f       	add	r18, r24
    392e:	29 83       	std	Y+1, r18	; 0x01
    3930:	21 e0       	ldi	r18, 0x01	; 1
    3932:	a9 81       	ldd	r26, Y+1	; 0x01
    3934:	a8 17       	cp	r26, r24
    3936:	08 f0       	brcs	.+2      	; 0x393a <CLCD_voidSendNumber+0x132>
    3938:	20 e0       	ldi	r18, 0x00	; 0
    393a:	93 2e       	mov	r9, r19
    393c:	92 2a       	or	r9, r18
    393e:	97 0d       	add	r25, r7
    3940:	99 0e       	add	r9, r25
    3942:	2b 81       	ldd	r18, Y+3	; 0x03
    3944:	3c 81       	ldd	r19, Y+4	; 0x04
    3946:	4d 81       	ldd	r20, Y+5	; 0x05
    3948:	5e 81       	ldd	r21, Y+6	; 0x06
    394a:	6f 81       	ldd	r22, Y+7	; 0x07
    394c:	78 85       	ldd	r23, Y+8	; 0x08
    394e:	89 85       	ldd	r24, Y+9	; 0x09
    3950:	9a 85       	ldd	r25, Y+10	; 0x0a
    3952:	aa e0       	ldi	r26, 0x0A	; 10
    3954:	aa 2e       	mov	r10, r26
    3956:	bb 24       	eor	r11, r11
    3958:	cc 24       	eor	r12, r12
    395a:	dd 24       	eor	r13, r13
    395c:	ee 24       	eor	r14, r14
    395e:	ff 24       	eor	r15, r15
    3960:	00 e0       	ldi	r16, 0x00	; 0
    3962:	10 e0       	ldi	r17, 0x00	; 0
    3964:	0e 94 e5 07 	call	0xfca	; 0xfca <__umoddi3>
    3968:	12 2f       	mov	r17, r18
    396a:	18 0d       	add	r17, r8
    396c:	f1 e0       	ldi	r31, 0x01	; 1
    396e:	12 17       	cp	r17, r18
    3970:	08 f0       	brcs	.+2      	; 0x3974 <CLCD_voidSendNumber+0x16c>
    3972:	f0 e0       	ldi	r31, 0x00	; 0
    3974:	23 2f       	mov	r18, r19
    3976:	26 0d       	add	r18, r6
    3978:	e1 e0       	ldi	r30, 0x01	; 1
    397a:	23 17       	cp	r18, r19
    397c:	08 f0       	brcs	.+2      	; 0x3980 <CLCD_voidSendNumber+0x178>
    397e:	e0 e0       	ldi	r30, 0x00	; 0
    3980:	0f 2f       	mov	r16, r31
    3982:	02 0f       	add	r16, r18
    3984:	31 e0       	ldi	r19, 0x01	; 1
    3986:	02 17       	cp	r16, r18
    3988:	08 f0       	brcs	.+2      	; 0x398c <CLCD_voidSendNumber+0x184>
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	e3 2b       	or	r30, r19
    398e:	24 2f       	mov	r18, r20
    3990:	25 0d       	add	r18, r5
    3992:	31 e0       	ldi	r19, 0x01	; 1
    3994:	24 17       	cp	r18, r20
    3996:	08 f0       	brcs	.+2      	; 0x399a <CLCD_voidSendNumber+0x192>
    3998:	30 e0       	ldi	r19, 0x00	; 0
    399a:	fe 2f       	mov	r31, r30
    399c:	f2 0f       	add	r31, r18
    399e:	41 e0       	ldi	r20, 0x01	; 1
    39a0:	f2 17       	cp	r31, r18
    39a2:	08 f0       	brcs	.+2      	; 0x39a6 <CLCD_voidSendNumber+0x19e>
    39a4:	40 e0       	ldi	r20, 0x00	; 0
    39a6:	34 2b       	or	r19, r20
    39a8:	25 2f       	mov	r18, r21
    39aa:	24 0d       	add	r18, r4
    39ac:	41 e0       	ldi	r20, 0x01	; 1
    39ae:	25 17       	cp	r18, r21
    39b0:	08 f0       	brcs	.+2      	; 0x39b4 <CLCD_voidSendNumber+0x1ac>
    39b2:	40 e0       	ldi	r20, 0x00	; 0
    39b4:	e3 2f       	mov	r30, r19
    39b6:	e2 0f       	add	r30, r18
    39b8:	31 e0       	ldi	r19, 0x01	; 1
    39ba:	e2 17       	cp	r30, r18
    39bc:	08 f0       	brcs	.+2      	; 0x39c0 <CLCD_voidSendNumber+0x1b8>
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	43 2b       	or	r20, r19
    39c2:	26 2f       	mov	r18, r22
    39c4:	23 0d       	add	r18, r3
    39c6:	31 e0       	ldi	r19, 0x01	; 1
    39c8:	26 17       	cp	r18, r22
    39ca:	08 f0       	brcs	.+2      	; 0x39ce <CLCD_voidSendNumber+0x1c6>
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	64 2f       	mov	r22, r20
    39d0:	62 0f       	add	r22, r18
    39d2:	41 e0       	ldi	r20, 0x01	; 1
    39d4:	62 17       	cp	r22, r18
    39d6:	08 f0       	brcs	.+2      	; 0x39da <CLCD_voidSendNumber+0x1d2>
    39d8:	40 e0       	ldi	r20, 0x00	; 0
    39da:	34 2b       	or	r19, r20
    39dc:	27 2f       	mov	r18, r23
    39de:	22 0d       	add	r18, r2
    39e0:	41 e0       	ldi	r20, 0x01	; 1
    39e2:	27 17       	cp	r18, r23
    39e4:	08 f0       	brcs	.+2      	; 0x39e8 <CLCD_voidSendNumber+0x1e0>
    39e6:	40 e0       	ldi	r20, 0x00	; 0
    39e8:	53 2f       	mov	r21, r19
    39ea:	52 0f       	add	r21, r18
    39ec:	31 e0       	ldi	r19, 0x01	; 1
    39ee:	52 17       	cp	r21, r18
    39f0:	08 f0       	brcs	.+2      	; 0x39f4 <CLCD_voidSendNumber+0x1ec>
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	43 2b       	or	r20, r19
    39f6:	29 81       	ldd	r18, Y+1	; 0x01
    39f8:	28 0f       	add	r18, r24
    39fa:	31 e0       	ldi	r19, 0x01	; 1
    39fc:	28 17       	cp	r18, r24
    39fe:	08 f0       	brcs	.+2      	; 0x3a02 <CLCD_voidSendNumber+0x1fa>
    3a00:	30 e0       	ldi	r19, 0x00	; 0
    3a02:	42 0f       	add	r20, r18
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	42 17       	cp	r20, r18
    3a08:	08 f0       	brcs	.+2      	; 0x3a0c <CLCD_voidSendNumber+0x204>
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	38 2b       	or	r19, r24
    3a0e:	99 0e       	add	r9, r25
    3a10:	b3 2f       	mov	r27, r19
    3a12:	b9 0d       	add	r27, r9
    3a14:	ba 83       	std	Y+2, r27	; 0x02
    3a16:	48 01       	movw	r8, r16
    3a18:	5f 2e       	mov	r5, r31
    3a1a:	2e 2e       	mov	r2, r30
    3a1c:	36 2e       	mov	r3, r22
    3a1e:	45 2e       	mov	r4, r21
    3a20:	64 2e       	mov	r6, r20
    3a22:	7b 2e       	mov	r7, r27
			Copy_u64Number /= 10 ;
    3a24:	2b 81       	ldd	r18, Y+3	; 0x03
    3a26:	3c 81       	ldd	r19, Y+4	; 0x04
    3a28:	4d 81       	ldd	r20, Y+5	; 0x05
    3a2a:	5e 81       	ldd	r21, Y+6	; 0x06
    3a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a2e:	78 85       	ldd	r23, Y+8	; 0x08
    3a30:	89 85       	ldd	r24, Y+9	; 0x09
    3a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a34:	fa e0       	ldi	r31, 0x0A	; 10
    3a36:	af 2e       	mov	r10, r31
    3a38:	bb 24       	eor	r11, r11
    3a3a:	cc 24       	eor	r12, r12
    3a3c:	dd 24       	eor	r13, r13
    3a3e:	ee 24       	eor	r14, r14
    3a40:	ff 24       	eor	r15, r15
    3a42:	00 e0       	ldi	r16, 0x00	; 0
    3a44:	10 e0       	ldi	r17, 0x00	; 0
    3a46:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__udivdi3>
    3a4a:	2b 83       	std	Y+3, r18	; 0x03
    3a4c:	3c 83       	std	Y+4, r19	; 0x04
    3a4e:	4d 83       	std	Y+5, r20	; 0x05
    3a50:	5e 83       	std	Y+6, r21	; 0x06
    3a52:	6f 83       	std	Y+7, r22	; 0x07
    3a54:	78 87       	std	Y+8, r23	; 0x08
    3a56:	89 87       	std	Y+9, r24	; 0x09
    3a58:	9a 87       	std	Y+10, r25	; 0x0a

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }

	else{

		while( Copy_u64Number != 0 ){
    3a5a:	82 2f       	mov	r24, r18
    3a5c:	83 2b       	or	r24, r19
    3a5e:	84 2b       	or	r24, r20
    3a60:	85 2b       	or	r24, r21
    3a62:	86 2b       	or	r24, r22
    3a64:	87 2b       	or	r24, r23
    3a66:	e9 85       	ldd	r30, Y+9	; 0x09
    3a68:	8e 2b       	or	r24, r30
    3a6a:	89 2b       	or	r24, r25
    3a6c:	09 f0       	breq	.+2      	; 0x3a70 <CLCD_voidSendNumber+0x268>
    3a6e:	02 cf       	rjmp	.-508    	; 0x3874 <CLCD_voidSendNumber+0x6c>

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    3a70:	f1 e0       	ldi	r31, 0x01	; 1
    3a72:	9f 16       	cp	r9, r31
    3a74:	09 f4       	brne	.+2      	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3a76:	cb c0       	rjmp	.+406    	; 0x3c0e <CLCD_voidSendNumber+0x406>

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
    3a78:	29 2d       	mov	r18, r9
    3a7a:	38 2d       	mov	r19, r8
    3a7c:	45 2d       	mov	r20, r5
    3a7e:	52 2d       	mov	r21, r2
    3a80:	63 2d       	mov	r22, r3
    3a82:	74 2d       	mov	r23, r4
    3a84:	c3 01       	movw	r24, r6
    3a86:	ea e0       	ldi	r30, 0x0A	; 10
    3a88:	ae 2e       	mov	r10, r30
    3a8a:	bb 24       	eor	r11, r11
    3a8c:	cc 24       	eor	r12, r12
    3a8e:	dd 24       	eor	r13, r13
    3a90:	ee 24       	eor	r14, r14
    3a92:	ff 24       	eor	r15, r15
    3a94:	00 e0       	ldi	r16, 0x00	; 0
    3a96:	10 e0       	ldi	r17, 0x00	; 0
    3a98:	0e 94 e5 07 	call	0xfca	; 0xfca <__umoddi3>
    3a9c:	12 2f       	mov	r17, r18
    3a9e:	10 5d       	subi	r17, 0xD0	; 208
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	65 e0       	ldi	r22, 0x05	; 5
    3aa4:	41 e0       	ldi	r20, 0x01	; 1
    3aa6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3aaa:	81 e0       	ldi	r24, 0x01	; 1
    3aac:	66 e0       	ldi	r22, 0x06	; 6
    3aae:	40 e0       	ldi	r20, 0x00	; 0
    3ab0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3ab4:	61 2f       	mov	r22, r17
    3ab6:	62 95       	swap	r22
    3ab8:	6f 70       	andi	r22, 0x0F	; 15
    3aba:	83 e0       	ldi	r24, 0x03	; 3
    3abc:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3ac0:	81 e0       	ldi	r24, 0x01	; 1
    3ac2:	67 e0       	ldi	r22, 0x07	; 7
    3ac4:	41 e0       	ldi	r20, 0x01	; 1
    3ac6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3aca:	80 ed       	ldi	r24, 0xD0	; 208
    3acc:	97 e0       	ldi	r25, 0x07	; 7
    3ace:	01 97       	sbiw	r24, 0x01	; 1
    3ad0:	f1 f7       	brne	.-4      	; 0x3ace <CLCD_voidSendNumber+0x2c6>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3ad2:	81 e0       	ldi	r24, 0x01	; 1
    3ad4:	67 e0       	ldi	r22, 0x07	; 7
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
    3ad8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3adc:	80 ed       	ldi	r24, 0xD0	; 208
    3ade:	97 e0       	ldi	r25, 0x07	; 7
    3ae0:	01 97       	sbiw	r24, 0x01	; 1
    3ae2:	f1 f7       	brne	.-4      	; 0x3ae0 <CLCD_voidSendNumber+0x2d8>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3ae4:	83 e0       	ldi	r24, 0x03	; 3
    3ae6:	61 2f       	mov	r22, r17
    3ae8:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	67 e0       	ldi	r22, 0x07	; 7
    3af0:	41 e0       	ldi	r20, 0x01	; 1
    3af2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3af6:	80 ed       	ldi	r24, 0xD0	; 208
    3af8:	97 e0       	ldi	r25, 0x07	; 7
    3afa:	01 97       	sbiw	r24, 0x01	; 1
    3afc:	f1 f7       	brne	.-4      	; 0x3afa <CLCD_voidSendNumber+0x2f2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3afe:	81 e0       	ldi	r24, 0x01	; 1
    3b00:	67 e0       	ldi	r22, 0x07	; 7
    3b02:	40 e0       	ldi	r20, 0x00	; 0
    3b04:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3b08:	80 ed       	ldi	r24, 0xD0	; 208
    3b0a:	97 e0       	ldi	r25, 0x07	; 7
    3b0c:	01 97       	sbiw	r24, 0x01	; 1
    3b0e:	f1 f7       	brne	.-4      	; 0x3b0c <CLCD_voidSendNumber+0x304>
    3b10:	80 ed       	ldi	r24, 0xD0	; 208
    3b12:	97 e0       	ldi	r25, 0x07	; 7
    3b14:	01 97       	sbiw	r24, 0x01	; 1
    3b16:	f1 f7       	brne	.-4      	; 0x3b14 <CLCD_voidSendNumber+0x30c>

		}
		while( LOC_u64Reversed != 1 ){

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
			LOC_u64Reversed /= 10 ;
    3b18:	29 2d       	mov	r18, r9
    3b1a:	38 2d       	mov	r19, r8
    3b1c:	45 2d       	mov	r20, r5
    3b1e:	52 2d       	mov	r21, r2
    3b20:	63 2d       	mov	r22, r3
    3b22:	74 2d       	mov	r23, r4
    3b24:	c3 01       	movw	r24, r6
    3b26:	10 e0       	ldi	r17, 0x00	; 0
    3b28:	0e 94 70 01 	call	0x2e0	; 0x2e0 <__udivdi3>
    3b2c:	92 2e       	mov	r9, r18
    3b2e:	83 2e       	mov	r8, r19
    3b30:	54 2e       	mov	r5, r20
    3b32:	25 2e       	mov	r2, r21
    3b34:	36 2e       	mov	r3, r22
    3b36:	47 2e       	mov	r4, r23
    3b38:	3c 01       	movw	r6, r24

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    3b3a:	41 e0       	ldi	r20, 0x01	; 1
    3b3c:	94 16       	cp	r9, r20
    3b3e:	09 f0       	breq	.+2      	; 0x3b42 <CLCD_voidSendNumber+0x33a>
    3b40:	9b cf       	rjmp	.-202    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3b42:	88 20       	and	r8, r8
    3b44:	09 f0       	breq	.+2      	; 0x3b48 <CLCD_voidSendNumber+0x340>
    3b46:	98 cf       	rjmp	.-208    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3b48:	55 20       	and	r5, r5
    3b4a:	09 f0       	breq	.+2      	; 0x3b4e <CLCD_voidSendNumber+0x346>
    3b4c:	95 cf       	rjmp	.-214    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3b4e:	22 20       	and	r2, r2
    3b50:	09 f0       	breq	.+2      	; 0x3b54 <CLCD_voidSendNumber+0x34c>
    3b52:	92 cf       	rjmp	.-220    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3b54:	33 20       	and	r3, r3
    3b56:	09 f0       	breq	.+2      	; 0x3b5a <CLCD_voidSendNumber+0x352>
    3b58:	8f cf       	rjmp	.-226    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3b5a:	44 20       	and	r4, r4
    3b5c:	09 f0       	breq	.+2      	; 0x3b60 <CLCD_voidSendNumber+0x358>
    3b5e:	8c cf       	rjmp	.-232    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3b60:	66 20       	and	r6, r6
    3b62:	09 f0       	breq	.+2      	; 0x3b66 <CLCD_voidSendNumber+0x35e>
    3b64:	89 cf       	rjmp	.-238    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3b66:	99 23       	and	r25, r25
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <CLCD_voidSendNumber+0x364>
    3b6a:	86 cf       	rjmp	.-244    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3b6c:	37 c0       	rjmp	.+110    	; 0x3bdc <CLCD_voidSendNumber+0x3d4>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3b6e:	81 e0       	ldi	r24, 0x01	; 1
    3b70:	65 e0       	ldi	r22, 0x05	; 5
    3b72:	41 e0       	ldi	r20, 0x01	; 1
    3b74:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	66 e0       	ldi	r22, 0x06	; 6
    3b7c:	40 e0       	ldi	r20, 0x00	; 0
    3b7e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3b82:	83 e0       	ldi	r24, 0x03	; 3
    3b84:	63 e0       	ldi	r22, 0x03	; 3
    3b86:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3b8a:	81 e0       	ldi	r24, 0x01	; 1
    3b8c:	67 e0       	ldi	r22, 0x07	; 7
    3b8e:	41 e0       	ldi	r20, 0x01	; 1
    3b90:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3b94:	00 ed       	ldi	r16, 0xD0	; 208
    3b96:	17 e0       	ldi	r17, 0x07	; 7
    3b98:	c8 01       	movw	r24, r16
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	f1 f7       	brne	.-4      	; 0x3b9a <CLCD_voidSendNumber+0x392>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	67 e0       	ldi	r22, 0x07	; 7
    3ba2:	40 e0       	ldi	r20, 0x00	; 0
    3ba4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3ba8:	c8 01       	movw	r24, r16
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <CLCD_voidSendNumber+0x3a2>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3bae:	83 e0       	ldi	r24, 0x03	; 3
    3bb0:	60 e3       	ldi	r22, 0x30	; 48
    3bb2:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3bb6:	81 e0       	ldi	r24, 0x01	; 1
    3bb8:	67 e0       	ldi	r22, 0x07	; 7
    3bba:	41 e0       	ldi	r20, 0x01	; 1
    3bbc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3bc0:	c8 01       	movw	r24, r16
    3bc2:	01 97       	sbiw	r24, 0x01	; 1
    3bc4:	f1 f7       	brne	.-4      	; 0x3bc2 <CLCD_voidSendNumber+0x3ba>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3bc6:	81 e0       	ldi	r24, 0x01	; 1
    3bc8:	67 e0       	ldi	r22, 0x07	; 7
    3bca:	40 e0       	ldi	r20, 0x00	; 0
    3bcc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3bd0:	c8 01       	movw	r24, r16
    3bd2:	01 97       	sbiw	r24, 0x01	; 1
    3bd4:	f1 f7       	brne	.-4      	; 0x3bd2 <CLCD_voidSendNumber+0x3ca>
    3bd6:	c8 01       	movw	r24, r16
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <CLCD_voidSendNumber+0x3d0>

		}

	}

}
    3bdc:	2a 96       	adiw	r28, 0x0a	; 10
    3bde:	0f b6       	in	r0, 0x3f	; 63
    3be0:	f8 94       	cli
    3be2:	de bf       	out	0x3e, r29	; 62
    3be4:	0f be       	out	0x3f, r0	; 63
    3be6:	cd bf       	out	0x3d, r28	; 61
    3be8:	cf 91       	pop	r28
    3bea:	df 91       	pop	r29
    3bec:	1f 91       	pop	r17
    3bee:	0f 91       	pop	r16
    3bf0:	ff 90       	pop	r15
    3bf2:	ef 90       	pop	r14
    3bf4:	df 90       	pop	r13
    3bf6:	cf 90       	pop	r12
    3bf8:	bf 90       	pop	r11
    3bfa:	af 90       	pop	r10
    3bfc:	9f 90       	pop	r9
    3bfe:	8f 90       	pop	r8
    3c00:	7f 90       	pop	r7
    3c02:	6f 90       	pop	r6
    3c04:	5f 90       	pop	r5
    3c06:	4f 90       	pop	r4
    3c08:	3f 90       	pop	r3
    3c0a:	2f 90       	pop	r2
    3c0c:	08 95       	ret

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    3c0e:	88 20       	and	r8, r8
    3c10:	09 f0       	breq	.+2      	; 0x3c14 <CLCD_voidSendNumber+0x40c>
    3c12:	32 cf       	rjmp	.-412    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3c14:	55 20       	and	r5, r5
    3c16:	09 f0       	breq	.+2      	; 0x3c1a <CLCD_voidSendNumber+0x412>
    3c18:	2f cf       	rjmp	.-418    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3c1a:	22 20       	and	r2, r2
    3c1c:	09 f0       	breq	.+2      	; 0x3c20 <CLCD_voidSendNumber+0x418>
    3c1e:	2c cf       	rjmp	.-424    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3c20:	33 20       	and	r3, r3
    3c22:	09 f0       	breq	.+2      	; 0x3c26 <CLCD_voidSendNumber+0x41e>
    3c24:	29 cf       	rjmp	.-430    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3c26:	44 20       	and	r4, r4
    3c28:	09 f0       	breq	.+2      	; 0x3c2c <CLCD_voidSendNumber+0x424>
    3c2a:	26 cf       	rjmp	.-436    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3c2c:	66 20       	and	r6, r6
    3c2e:	09 f0       	breq	.+2      	; 0x3c32 <CLCD_voidSendNumber+0x42a>
    3c30:	23 cf       	rjmp	.-442    	; 0x3a78 <CLCD_voidSendNumber+0x270>
    3c32:	77 20       	and	r7, r7
    3c34:	99 f2       	breq	.-90     	; 0x3bdc <CLCD_voidSendNumber+0x3d4>
    3c36:	20 cf       	rjmp	.-448    	; 0x3a78 <CLCD_voidSendNumber+0x270>

00003c38 <CLCD_voidSendFloat>:
}

//----------------------------------------------------------------------------------------------------------------------------------------------------
// Converts a floating-point/double number to a ASCII
void CLCD_voidSendFloat(f32 n)
{
    3c38:	cf 92       	push	r12
    3c3a:	df 92       	push	r13
    3c3c:	ef 92       	push	r14
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	cf 93       	push	r28
    3c46:	df 93       	push	r29
    3c48:	7b 01       	movw	r14, r22
    3c4a:	8c 01       	movw	r16, r24
	// Extract integer part
	s16 ipart = (s16)n;
    3c4c:	0e 94 93 12 	call	0x2526	; 0x2526 <__fixsfsi>
    3c50:	eb 01       	movw	r28, r22

	// Extract floating part
	f32 fpart = n - (f32)ipart;
    3c52:	be 01       	movw	r22, r28
    3c54:	88 27       	eor	r24, r24
    3c56:	77 fd       	sbrc	r23, 7
    3c58:	80 95       	com	r24
    3c5a:	98 2f       	mov	r25, r24
    3c5c:	0e 94 35 12 	call	0x246a	; 0x246a <__floatsisf>
    3c60:	9b 01       	movw	r18, r22
    3c62:	ac 01       	movw	r20, r24
    3c64:	c8 01       	movw	r24, r16
    3c66:	b7 01       	movw	r22, r14
    3c68:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    3c6c:	6b 01       	movw	r12, r22
    3c6e:	7c 01       	movw	r14, r24

	//Exception for negative number
	if(fpart<0){fpart*=-1;}
    3c70:	20 e0       	ldi	r18, 0x00	; 0
    3c72:	30 e0       	ldi	r19, 0x00	; 0
    3c74:	40 e0       	ldi	r20, 0x00	; 0
    3c76:	50 e0       	ldi	r21, 0x00	; 0
    3c78:	0e 94 05 12 	call	0x240a	; 0x240a <__ltsf2>
    3c7c:	88 23       	and	r24, r24
    3c7e:	24 f4       	brge	.+8      	; 0x3c88 <CLCD_voidSendFloat+0x50>
    3c80:	f7 fa       	bst	r15, 7
    3c82:	f0 94       	com	r15
    3c84:	f7 f8       	bld	r15, 7
    3c86:	f0 94       	com	r15

	// convert integer part to string
	CLCD_voidSendNumber(ipart);
    3c88:	fe 01       	movw	r30, r28
    3c8a:	ff 0f       	add	r31, r31
    3c8c:	ee 0b       	sbc	r30, r30
    3c8e:	fe 2f       	mov	r31, r30
    3c90:	9e 01       	movw	r18, r28
    3c92:	4e 2f       	mov	r20, r30
    3c94:	5e 2f       	mov	r21, r30
    3c96:	6e 2f       	mov	r22, r30
    3c98:	7e 2f       	mov	r23, r30
    3c9a:	8e 2f       	mov	r24, r30
    3c9c:	9e 2f       	mov	r25, r30
    3c9e:	0e 94 04 1c 	call	0x3808	; 0x3808 <CLCD_voidSendNumber>
    3ca2:	00 e0       	ldi	r16, 0x00	; 0
    3ca4:	1e e2       	ldi	r17, 0x2E	; 46
    3ca6:	c0 ed       	ldi	r28, 0xD0	; 208
    3ca8:	d7 e0       	ldi	r29, 0x07	; 7
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3caa:	81 e0       	ldi	r24, 0x01	; 1
    3cac:	65 e0       	ldi	r22, 0x05	; 5
    3cae:	41 e0       	ldi	r20, 0x01	; 1
    3cb0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3cb4:	81 e0       	ldi	r24, 0x01	; 1
    3cb6:	66 e0       	ldi	r22, 0x06	; 6
    3cb8:	40 e0       	ldi	r20, 0x00	; 0
    3cba:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3cbe:	61 2f       	mov	r22, r17
    3cc0:	62 95       	swap	r22
    3cc2:	6f 70       	andi	r22, 0x0F	; 15
    3cc4:	83 e0       	ldi	r24, 0x03	; 3
    3cc6:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3cca:	81 e0       	ldi	r24, 0x01	; 1
    3ccc:	67 e0       	ldi	r22, 0x07	; 7
    3cce:	41 e0       	ldi	r20, 0x01	; 1
    3cd0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	01 97       	sbiw	r24, 0x01	; 1
    3cd8:	f1 f7       	brne	.-4      	; 0x3cd6 <CLCD_voidSendFloat+0x9e>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	67 e0       	ldi	r22, 0x07	; 7
    3cde:	40 e0       	ldi	r20, 0x00	; 0
    3ce0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3ce4:	ce 01       	movw	r24, r28
    3ce6:	01 97       	sbiw	r24, 0x01	; 1
    3ce8:	f1 f7       	brne	.-4      	; 0x3ce6 <CLCD_voidSendFloat+0xae>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3cea:	83 e0       	ldi	r24, 0x03	; 3
    3cec:	61 2f       	mov	r22, r17
    3cee:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3cf2:	81 e0       	ldi	r24, 0x01	; 1
    3cf4:	67 e0       	ldi	r22, 0x07	; 7
    3cf6:	41 e0       	ldi	r20, 0x01	; 1
    3cf8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3cfc:	ce 01       	movw	r24, r28
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	f1 f7       	brne	.-4      	; 0x3cfe <CLCD_voidSendFloat+0xc6>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3d02:	81 e0       	ldi	r24, 0x01	; 1
    3d04:	67 e0       	ldi	r22, 0x07	; 7
    3d06:	40 e0       	ldi	r20, 0x00	; 0
    3d08:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	01 97       	sbiw	r24, 0x01	; 1
    3d10:	f1 f7       	brne	.-4      	; 0x3d0e <CLCD_voidSendFloat+0xd6>
    3d12:	ce 01       	movw	r24, r28
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	f1 f7       	brne	.-4      	; 0x3d14 <CLCD_voidSendFloat+0xdc>
	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;
    3d18:	0f 5f       	subi	r16, 0xFF	; 255
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    3d1a:	e0 2f       	mov	r30, r16
    3d1c:	f0 e0       	ldi	r31, 0x00	; 0
    3d1e:	e0 5a       	subi	r30, 0xA0	; 160
    3d20:	ff 4f       	sbci	r31, 0xFF	; 255
    3d22:	10 81       	ld	r17, Z
    3d24:	11 23       	and	r17, r17
    3d26:	09 f0       	breq	.+2      	; 0x3d2a <CLCD_voidSendFloat+0xf2>
    3d28:	c0 cf       	rjmp	.-128    	; 0x3caa <CLCD_voidSendFloat+0x72>
	// add dot
	CLCD_voidSendString((u8*)".");
	// Get the value of fraction part upto 4 digits of points after dot
	fpart = fpart * 10000;

	CLCD_voidSendNumber(fpart);
    3d2a:	c7 01       	movw	r24, r14
    3d2c:	b6 01       	movw	r22, r12
    3d2e:	20 e0       	ldi	r18, 0x00	; 0
    3d30:	30 e4       	ldi	r19, 0x40	; 64
    3d32:	4c e1       	ldi	r20, 0x1C	; 28
    3d34:	56 e4       	ldi	r21, 0x46	; 70
    3d36:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    3d3a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfdi>
    3d3e:	0e 94 04 1c 	call	0x3808	; 0x3808 <CLCD_voidSendNumber>

}
    3d42:	df 91       	pop	r29
    3d44:	cf 91       	pop	r28
    3d46:	1f 91       	pop	r17
    3d48:	0f 91       	pop	r16
    3d4a:	ff 90       	pop	r15
    3d4c:	ef 90       	pop	r14
    3d4e:	df 90       	pop	r13
    3d50:	cf 90       	pop	r12
    3d52:	08 95       	ret

00003d54 <CLCD_voidSendExtraChar>:
			=> Copy_u8Col --> column number (CLCD_COL_1 ... CLCD_COL_16)
* return : nothing
* Hint :-
	Address Counter can refer to CGRAM and DDRAM
*/
void CLCD_voidSendExtraChar( u8 Copy_u8Row , u8 Copy_u8Col ){
    3d54:	cf 92       	push	r12
    3d56:	df 92       	push	r13
    3d58:	ef 92       	push	r14
    3d5a:	ff 92       	push	r15
    3d5c:	0f 93       	push	r16
    3d5e:	1f 93       	push	r17
    3d60:	cf 93       	push	r28
    3d62:	df 93       	push	r29
    3d64:	d8 2e       	mov	r13, r24
    3d66:	c6 2e       	mov	r12, r22
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    3d68:	81 e0       	ldi	r24, 0x01	; 1
    3d6a:	65 e0       	ldi	r22, 0x05	; 5
    3d6c:	40 e0       	ldi	r20, 0x00	; 0
    3d6e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3d72:	81 e0       	ldi	r24, 0x01	; 1
    3d74:	66 e0       	ldi	r22, 0x06	; 6
    3d76:	40 e0       	ldi	r20, 0x00	; 0
    3d78:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3d7c:	83 e0       	ldi	r24, 0x03	; 3
    3d7e:	64 e0       	ldi	r22, 0x04	; 4
    3d80:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	67 e0       	ldi	r22, 0x07	; 7
    3d88:	41 e0       	ldi	r20, 0x01	; 1
    3d8a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3d8e:	00 ed       	ldi	r16, 0xD0	; 208
    3d90:	17 e0       	ldi	r17, 0x07	; 7
    3d92:	c8 01       	movw	r24, r16
    3d94:	01 97       	sbiw	r24, 0x01	; 1
    3d96:	f1 f7       	brne	.-4      	; 0x3d94 <CLCD_voidSendExtraChar+0x40>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	67 e0       	ldi	r22, 0x07	; 7
    3d9c:	40 e0       	ldi	r20, 0x00	; 0
    3d9e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3da2:	c8 01       	movw	r24, r16
    3da4:	01 97       	sbiw	r24, 0x01	; 1
    3da6:	f1 f7       	brne	.-4      	; 0x3da4 <CLCD_voidSendExtraChar+0x50>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    3da8:	83 e0       	ldi	r24, 0x03	; 3
    3daa:	60 e4       	ldi	r22, 0x40	; 64
    3dac:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	67 e0       	ldi	r22, 0x07	; 7
    3db4:	41 e0       	ldi	r20, 0x01	; 1
    3db6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3dba:	c8 01       	movw	r24, r16
    3dbc:	01 97       	sbiw	r24, 0x01	; 1
    3dbe:	f1 f7       	brne	.-4      	; 0x3dbc <CLCD_voidSendExtraChar+0x68>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	67 e0       	ldi	r22, 0x07	; 7
    3dc4:	40 e0       	ldi	r20, 0x00	; 0
    3dc6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3dca:	c8 01       	movw	r24, r16
    3dcc:	01 97       	sbiw	r24, 0x01	; 1
    3dce:	f1 f7       	brne	.-4      	; 0x3dcc <CLCD_voidSendExtraChar+0x78>
    3dd0:	c8 01       	movw	r24, r16
    3dd2:	01 97       	sbiw	r24, 0x01	; 1
    3dd4:	f1 f7       	brne	.-4      	; 0x3dd2 <CLCD_voidSendExtraChar+0x7e>
    3dd6:	cc e9       	ldi	r28, 0x9C	; 156
    3dd8:	d1 e0       	ldi	r29, 0x01	; 1
    3dda:	90 ed       	ldi	r25, 0xD0	; 208
    3ddc:	e9 2e       	mov	r14, r25
    3dde:	97 e0       	ldi	r25, 0x07	; 7
    3de0:	f9 2e       	mov	r15, r25

	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){

		CLCD_voidSendData( CLCD_u8ExtraChar[LOC_u8Iterator] );
    3de2:	19 91       	ld	r17, Y+
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3de4:	81 e0       	ldi	r24, 0x01	; 1
    3de6:	65 e0       	ldi	r22, 0x05	; 5
    3de8:	41 e0       	ldi	r20, 0x01	; 1
    3dea:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	66 e0       	ldi	r22, 0x06	; 6
    3df2:	40 e0       	ldi	r20, 0x00	; 0
    3df4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3df8:	61 2f       	mov	r22, r17
    3dfa:	62 95       	swap	r22
    3dfc:	6f 70       	andi	r22, 0x0F	; 15
    3dfe:	83 e0       	ldi	r24, 0x03	; 3
    3e00:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	67 e0       	ldi	r22, 0x07	; 7
    3e08:	41 e0       	ldi	r20, 0x01	; 1
    3e0a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3e0e:	c7 01       	movw	r24, r14
    3e10:	01 97       	sbiw	r24, 0x01	; 1
    3e12:	f1 f7       	brne	.-4      	; 0x3e10 <CLCD_voidSendExtraChar+0xbc>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	67 e0       	ldi	r22, 0x07	; 7
    3e18:	40 e0       	ldi	r20, 0x00	; 0
    3e1a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3e1e:	c7 01       	movw	r24, r14
    3e20:	01 97       	sbiw	r24, 0x01	; 1
    3e22:	f1 f7       	brne	.-4      	; 0x3e20 <CLCD_voidSendExtraChar+0xcc>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3e24:	83 e0       	ldi	r24, 0x03	; 3
    3e26:	61 2f       	mov	r22, r17
    3e28:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3e2c:	81 e0       	ldi	r24, 0x01	; 1
    3e2e:	67 e0       	ldi	r22, 0x07	; 7
    3e30:	41 e0       	ldi	r20, 0x01	; 1
    3e32:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3e36:	c7 01       	movw	r24, r14
    3e38:	01 97       	sbiw	r24, 0x01	; 1
    3e3a:	f1 f7       	brne	.-4      	; 0x3e38 <CLCD_voidSendExtraChar+0xe4>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3e3c:	81 e0       	ldi	r24, 0x01	; 1
    3e3e:	67 e0       	ldi	r22, 0x07	; 7
    3e40:	40 e0       	ldi	r20, 0x00	; 0
    3e42:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3e46:	c7 01       	movw	r24, r14
    3e48:	01 97       	sbiw	r24, 0x01	; 1
    3e4a:	f1 f7       	brne	.-4      	; 0x3e48 <CLCD_voidSendExtraChar+0xf4>
    3e4c:	c7 01       	movw	r24, r14
    3e4e:	01 97       	sbiw	r24, 0x01	; 1
    3e50:	f1 f7       	brne	.-4      	; 0x3e4e <CLCD_voidSendExtraChar+0xfa>
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    3e52:	81 e0       	ldi	r24, 0x01	; 1
    3e54:	cc 3d       	cpi	r28, 0xDC	; 220
    3e56:	d8 07       	cpc	r29, r24
    3e58:	09 f0       	breq	.+2      	; 0x3e5c <CLCD_voidSendExtraChar+0x108>
    3e5a:	c3 cf       	rjmp	.-122    	; 0x3de2 <CLCD_voidSendExtraChar+0x8e>
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    3e5c:	8d 2d       	mov	r24, r13
    3e5e:	81 50       	subi	r24, 0x01	; 1
    3e60:	82 30       	cpi	r24, 0x02	; 2
    3e62:	08 f4       	brcc	.+2      	; 0x3e66 <CLCD_voidSendExtraChar+0x112>
    3e64:	ee c1       	rjmp	.+988    	; 0x4242 <CLCD_voidSendExtraChar+0x4ee>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    3e66:	10 e8       	ldi	r17, 0x80	; 128
    3e68:	f1 2e       	mov	r15, r17
    3e6a:	18 e0       	ldi	r17, 0x08	; 8
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	65 e0       	ldi	r22, 0x05	; 5
    3e70:	40 e0       	ldi	r20, 0x00	; 0
    3e72:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3e76:	81 e0       	ldi	r24, 0x01	; 1
    3e78:	66 e0       	ldi	r22, 0x06	; 6
    3e7a:	40 e0       	ldi	r20, 0x00	; 0
    3e7c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
    3e80:	83 e0       	ldi	r24, 0x03	; 3
    3e82:	61 2f       	mov	r22, r17
    3e84:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3e88:	81 e0       	ldi	r24, 0x01	; 1
    3e8a:	67 e0       	ldi	r22, 0x07	; 7
    3e8c:	41 e0       	ldi	r20, 0x01	; 1
    3e8e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3e92:	00 ed       	ldi	r16, 0xD0	; 208
    3e94:	17 e0       	ldi	r17, 0x07	; 7
    3e96:	c8 01       	movw	r24, r16
    3e98:	01 97       	sbiw	r24, 0x01	; 1
    3e9a:	f1 f7       	brne	.-4      	; 0x3e98 <CLCD_voidSendExtraChar+0x144>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	67 e0       	ldi	r22, 0x07	; 7
    3ea0:	40 e0       	ldi	r20, 0x00	; 0
    3ea2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3ea6:	c8 01       	movw	r24, r16
    3ea8:	01 97       	sbiw	r24, 0x01	; 1
    3eaa:	f1 f7       	brne	.-4      	; 0x3ea8 <CLCD_voidSendExtraChar+0x154>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command>>4);             // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Command);                // send the least 4 bits of data to high nibbles
    3eac:	83 e0       	ldi	r24, 0x03	; 3
    3eae:	6f 2d       	mov	r22, r15
    3eb0:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3eb4:	81 e0       	ldi	r24, 0x01	; 1
    3eb6:	67 e0       	ldi	r22, 0x07	; 7
    3eb8:	41 e0       	ldi	r20, 0x01	; 1
    3eba:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3ebe:	c8 01       	movw	r24, r16
    3ec0:	01 97       	sbiw	r24, 0x01	; 1
    3ec2:	f1 f7       	brne	.-4      	; 0x3ec0 <CLCD_voidSendExtraChar+0x16c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3ec4:	81 e0       	ldi	r24, 0x01	; 1
    3ec6:	67 e0       	ldi	r22, 0x07	; 7
    3ec8:	40 e0       	ldi	r20, 0x00	; 0
    3eca:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3ece:	c8 01       	movw	r24, r16
    3ed0:	01 97       	sbiw	r24, 0x01	; 1
    3ed2:	f1 f7       	brne	.-4      	; 0x3ed0 <CLCD_voidSendExtraChar+0x17c>
    3ed4:	c8 01       	movw	r24, r16
    3ed6:	01 97       	sbiw	r24, 0x01	; 1
    3ed8:	f1 f7       	brne	.-4      	; 0x3ed6 <CLCD_voidSendExtraChar+0x182>
    3eda:	c8 01       	movw	r24, r16
    3edc:	01 97       	sbiw	r24, 0x01	; 1
    3ede:	f1 f7       	brne	.-4      	; 0x3edc <CLCD_voidSendExtraChar+0x188>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	65 e0       	ldi	r22, 0x05	; 5
    3ee4:	41 e0       	ldi	r20, 0x01	; 1
    3ee6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	66 e0       	ldi	r22, 0x06	; 6
    3eee:	40 e0       	ldi	r20, 0x00	; 0
    3ef0:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3ef4:	83 e0       	ldi	r24, 0x03	; 3
    3ef6:	60 e0       	ldi	r22, 0x00	; 0
    3ef8:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3efc:	81 e0       	ldi	r24, 0x01	; 1
    3efe:	67 e0       	ldi	r22, 0x07	; 7
    3f00:	41 e0       	ldi	r20, 0x01	; 1
    3f02:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3f06:	c8 01       	movw	r24, r16
    3f08:	01 97       	sbiw	r24, 0x01	; 1
    3f0a:	f1 f7       	brne	.-4      	; 0x3f08 <CLCD_voidSendExtraChar+0x1b4>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	67 e0       	ldi	r22, 0x07	; 7
    3f10:	40 e0       	ldi	r20, 0x00	; 0
    3f12:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3f16:	c8 01       	movw	r24, r16
    3f18:	01 97       	sbiw	r24, 0x01	; 1
    3f1a:	f1 f7       	brne	.-4      	; 0x3f18 <CLCD_voidSendExtraChar+0x1c4>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3f1c:	83 e0       	ldi	r24, 0x03	; 3
    3f1e:	60 e0       	ldi	r22, 0x00	; 0
    3f20:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3f24:	81 e0       	ldi	r24, 0x01	; 1
    3f26:	67 e0       	ldi	r22, 0x07	; 7
    3f28:	41 e0       	ldi	r20, 0x01	; 1
    3f2a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3f2e:	c8 01       	movw	r24, r16
    3f30:	01 97       	sbiw	r24, 0x01	; 1
    3f32:	f1 f7       	brne	.-4      	; 0x3f30 <CLCD_voidSendExtraChar+0x1dc>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	67 e0       	ldi	r22, 0x07	; 7
    3f38:	40 e0       	ldi	r20, 0x00	; 0
    3f3a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3f3e:	c8 01       	movw	r24, r16
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	f1 f7       	brne	.-4      	; 0x3f40 <CLCD_voidSendExtraChar+0x1ec>
    3f44:	c8 01       	movw	r24, r16
    3f46:	01 97       	sbiw	r24, 0x01	; 1
    3f48:	f1 f7       	brne	.-4      	; 0x3f46 <CLCD_voidSendExtraChar+0x1f2>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3f4a:	81 e0       	ldi	r24, 0x01	; 1
    3f4c:	65 e0       	ldi	r22, 0x05	; 5
    3f4e:	41 e0       	ldi	r20, 0x01	; 1
    3f50:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3f54:	81 e0       	ldi	r24, 0x01	; 1
    3f56:	66 e0       	ldi	r22, 0x06	; 6
    3f58:	40 e0       	ldi	r20, 0x00	; 0
    3f5a:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3f5e:	83 e0       	ldi	r24, 0x03	; 3
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3f66:	81 e0       	ldi	r24, 0x01	; 1
    3f68:	67 e0       	ldi	r22, 0x07	; 7
    3f6a:	41 e0       	ldi	r20, 0x01	; 1
    3f6c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3f70:	c8 01       	movw	r24, r16
    3f72:	01 97       	sbiw	r24, 0x01	; 1
    3f74:	f1 f7       	brne	.-4      	; 0x3f72 <CLCD_voidSendExtraChar+0x21e>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3f76:	81 e0       	ldi	r24, 0x01	; 1
    3f78:	67 e0       	ldi	r22, 0x07	; 7
    3f7a:	40 e0       	ldi	r20, 0x00	; 0
    3f7c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3f80:	c8 01       	movw	r24, r16
    3f82:	01 97       	sbiw	r24, 0x01	; 1
    3f84:	f1 f7       	brne	.-4      	; 0x3f82 <CLCD_voidSendExtraChar+0x22e>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3f86:	83 e0       	ldi	r24, 0x03	; 3
    3f88:	61 e0       	ldi	r22, 0x01	; 1
    3f8a:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3f8e:	81 e0       	ldi	r24, 0x01	; 1
    3f90:	67 e0       	ldi	r22, 0x07	; 7
    3f92:	41 e0       	ldi	r20, 0x01	; 1
    3f94:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3f98:	c8 01       	movw	r24, r16
    3f9a:	01 97       	sbiw	r24, 0x01	; 1
    3f9c:	f1 f7       	brne	.-4      	; 0x3f9a <CLCD_voidSendExtraChar+0x246>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3f9e:	81 e0       	ldi	r24, 0x01	; 1
    3fa0:	67 e0       	ldi	r22, 0x07	; 7
    3fa2:	40 e0       	ldi	r20, 0x00	; 0
    3fa4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3fa8:	c8 01       	movw	r24, r16
    3faa:	01 97       	sbiw	r24, 0x01	; 1
    3fac:	f1 f7       	brne	.-4      	; 0x3faa <CLCD_voidSendExtraChar+0x256>
    3fae:	c8 01       	movw	r24, r16
    3fb0:	01 97       	sbiw	r24, 0x01	; 1
    3fb2:	f1 f7       	brne	.-4      	; 0x3fb0 <CLCD_voidSendExtraChar+0x25c>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    3fb4:	81 e0       	ldi	r24, 0x01	; 1
    3fb6:	65 e0       	ldi	r22, 0x05	; 5
    3fb8:	41 e0       	ldi	r20, 0x01	; 1
    3fba:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	66 e0       	ldi	r22, 0x06	; 6
    3fc2:	40 e0       	ldi	r20, 0x00	; 0
    3fc4:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    3fc8:	83 e0       	ldi	r24, 0x03	; 3
    3fca:	60 e0       	ldi	r22, 0x00	; 0
    3fcc:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	67 e0       	ldi	r22, 0x07	; 7
    3fd4:	41 e0       	ldi	r20, 0x01	; 1
    3fd6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3fda:	c8 01       	movw	r24, r16
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	f1 f7       	brne	.-4      	; 0x3fdc <CLCD_voidSendExtraChar+0x288>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	67 e0       	ldi	r22, 0x07	; 7
    3fe4:	40 e0       	ldi	r20, 0x00	; 0
    3fe6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    3fea:	c8 01       	movw	r24, r16
    3fec:	01 97       	sbiw	r24, 0x01	; 1
    3fee:	f1 f7       	brne	.-4      	; 0x3fec <CLCD_voidSendExtraChar+0x298>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    3ff0:	83 e0       	ldi	r24, 0x03	; 3
    3ff2:	62 e0       	ldi	r22, 0x02	; 2
    3ff4:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    3ff8:	81 e0       	ldi	r24, 0x01	; 1
    3ffa:	67 e0       	ldi	r22, 0x07	; 7
    3ffc:	41 e0       	ldi	r20, 0x01	; 1
    3ffe:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4002:	c8 01       	movw	r24, r16
    4004:	01 97       	sbiw	r24, 0x01	; 1
    4006:	f1 f7       	brne	.-4      	; 0x4004 <CLCD_voidSendExtraChar+0x2b0>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    4008:	81 e0       	ldi	r24, 0x01	; 1
    400a:	67 e0       	ldi	r22, 0x07	; 7
    400c:	40 e0       	ldi	r20, 0x00	; 0
    400e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4012:	c8 01       	movw	r24, r16
    4014:	01 97       	sbiw	r24, 0x01	; 1
    4016:	f1 f7       	brne	.-4      	; 0x4014 <CLCD_voidSendExtraChar+0x2c0>
    4018:	c8 01       	movw	r24, r16
    401a:	01 97       	sbiw	r24, 0x01	; 1
    401c:	f1 f7       	brne	.-4      	; 0x401a <CLCD_voidSendExtraChar+0x2c6>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	65 e0       	ldi	r22, 0x05	; 5
    4022:	41 e0       	ldi	r20, 0x01	; 1
    4024:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    4028:	81 e0       	ldi	r24, 0x01	; 1
    402a:	66 e0       	ldi	r22, 0x06	; 6
    402c:	40 e0       	ldi	r20, 0x00	; 0
    402e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    4032:	83 e0       	ldi	r24, 0x03	; 3
    4034:	60 e0       	ldi	r22, 0x00	; 0
    4036:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	67 e0       	ldi	r22, 0x07	; 7
    403e:	41 e0       	ldi	r20, 0x01	; 1
    4040:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4044:	c8 01       	movw	r24, r16
    4046:	01 97       	sbiw	r24, 0x01	; 1
    4048:	f1 f7       	brne	.-4      	; 0x4046 <CLCD_voidSendExtraChar+0x2f2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    404a:	81 e0       	ldi	r24, 0x01	; 1
    404c:	67 e0       	ldi	r22, 0x07	; 7
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4054:	c8 01       	movw	r24, r16
    4056:	01 97       	sbiw	r24, 0x01	; 1
    4058:	f1 f7       	brne	.-4      	; 0x4056 <CLCD_voidSendExtraChar+0x302>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    405a:	83 e0       	ldi	r24, 0x03	; 3
    405c:	63 e0       	ldi	r22, 0x03	; 3
    405e:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	67 e0       	ldi	r22, 0x07	; 7
    4066:	41 e0       	ldi	r20, 0x01	; 1
    4068:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    406c:	c8 01       	movw	r24, r16
    406e:	01 97       	sbiw	r24, 0x01	; 1
    4070:	f1 f7       	brne	.-4      	; 0x406e <CLCD_voidSendExtraChar+0x31a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    4072:	81 e0       	ldi	r24, 0x01	; 1
    4074:	67 e0       	ldi	r22, 0x07	; 7
    4076:	40 e0       	ldi	r20, 0x00	; 0
    4078:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    407c:	c8 01       	movw	r24, r16
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	f1 f7       	brne	.-4      	; 0x407e <CLCD_voidSendExtraChar+0x32a>
    4082:	c8 01       	movw	r24, r16
    4084:	01 97       	sbiw	r24, 0x01	; 1
    4086:	f1 f7       	brne	.-4      	; 0x4084 <CLCD_voidSendExtraChar+0x330>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    4088:	81 e0       	ldi	r24, 0x01	; 1
    408a:	65 e0       	ldi	r22, 0x05	; 5
    408c:	41 e0       	ldi	r20, 0x01	; 1
    408e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	66 e0       	ldi	r22, 0x06	; 6
    4096:	40 e0       	ldi	r20, 0x00	; 0
    4098:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    409c:	83 e0       	ldi	r24, 0x03	; 3
    409e:	60 e0       	ldi	r22, 0x00	; 0
    40a0:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	67 e0       	ldi	r22, 0x07	; 7
    40a8:	41 e0       	ldi	r20, 0x01	; 1
    40aa:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    40ae:	c8 01       	movw	r24, r16
    40b0:	01 97       	sbiw	r24, 0x01	; 1
    40b2:	f1 f7       	brne	.-4      	; 0x40b0 <CLCD_voidSendExtraChar+0x35c>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	67 e0       	ldi	r22, 0x07	; 7
    40b8:	40 e0       	ldi	r20, 0x00	; 0
    40ba:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    40be:	c8 01       	movw	r24, r16
    40c0:	01 97       	sbiw	r24, 0x01	; 1
    40c2:	f1 f7       	brne	.-4      	; 0x40c0 <CLCD_voidSendExtraChar+0x36c>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    40c4:	83 e0       	ldi	r24, 0x03	; 3
    40c6:	64 e0       	ldi	r22, 0x04	; 4
    40c8:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    40cc:	81 e0       	ldi	r24, 0x01	; 1
    40ce:	67 e0       	ldi	r22, 0x07	; 7
    40d0:	41 e0       	ldi	r20, 0x01	; 1
    40d2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    40d6:	c8 01       	movw	r24, r16
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <CLCD_voidSendExtraChar+0x384>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    40dc:	81 e0       	ldi	r24, 0x01	; 1
    40de:	67 e0       	ldi	r22, 0x07	; 7
    40e0:	40 e0       	ldi	r20, 0x00	; 0
    40e2:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    40e6:	c8 01       	movw	r24, r16
    40e8:	01 97       	sbiw	r24, 0x01	; 1
    40ea:	f1 f7       	brne	.-4      	; 0x40e8 <CLCD_voidSendExtraChar+0x394>
    40ec:	c8 01       	movw	r24, r16
    40ee:	01 97       	sbiw	r24, 0x01	; 1
    40f0:	f1 f7       	brne	.-4      	; 0x40ee <CLCD_voidSendExtraChar+0x39a>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    40f2:	81 e0       	ldi	r24, 0x01	; 1
    40f4:	65 e0       	ldi	r22, 0x05	; 5
    40f6:	41 e0       	ldi	r20, 0x01	; 1
    40f8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	66 e0       	ldi	r22, 0x06	; 6
    4100:	40 e0       	ldi	r20, 0x00	; 0
    4102:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    4106:	83 e0       	ldi	r24, 0x03	; 3
    4108:	60 e0       	ldi	r22, 0x00	; 0
    410a:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    410e:	81 e0       	ldi	r24, 0x01	; 1
    4110:	67 e0       	ldi	r22, 0x07	; 7
    4112:	41 e0       	ldi	r20, 0x01	; 1
    4114:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4118:	c8 01       	movw	r24, r16
    411a:	01 97       	sbiw	r24, 0x01	; 1
    411c:	f1 f7       	brne	.-4      	; 0x411a <CLCD_voidSendExtraChar+0x3c6>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    411e:	81 e0       	ldi	r24, 0x01	; 1
    4120:	67 e0       	ldi	r22, 0x07	; 7
    4122:	40 e0       	ldi	r20, 0x00	; 0
    4124:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4128:	c8 01       	movw	r24, r16
    412a:	01 97       	sbiw	r24, 0x01	; 1
    412c:	f1 f7       	brne	.-4      	; 0x412a <CLCD_voidSendExtraChar+0x3d6>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    412e:	83 e0       	ldi	r24, 0x03	; 3
    4130:	65 e0       	ldi	r22, 0x05	; 5
    4132:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    4136:	81 e0       	ldi	r24, 0x01	; 1
    4138:	67 e0       	ldi	r22, 0x07	; 7
    413a:	41 e0       	ldi	r20, 0x01	; 1
    413c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4140:	c8 01       	movw	r24, r16
    4142:	01 97       	sbiw	r24, 0x01	; 1
    4144:	f1 f7       	brne	.-4      	; 0x4142 <CLCD_voidSendExtraChar+0x3ee>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	67 e0       	ldi	r22, 0x07	; 7
    414a:	40 e0       	ldi	r20, 0x00	; 0
    414c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4150:	c8 01       	movw	r24, r16
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	f1 f7       	brne	.-4      	; 0x4152 <CLCD_voidSendExtraChar+0x3fe>
    4156:	c8 01       	movw	r24, r16
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	f1 f7       	brne	.-4      	; 0x4158 <CLCD_voidSendExtraChar+0x404>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    415c:	81 e0       	ldi	r24, 0x01	; 1
    415e:	65 e0       	ldi	r22, 0x05	; 5
    4160:	41 e0       	ldi	r20, 0x01	; 1
    4162:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    4166:	81 e0       	ldi	r24, 0x01	; 1
    4168:	66 e0       	ldi	r22, 0x06	; 6
    416a:	40 e0       	ldi	r20, 0x00	; 0
    416c:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    4170:	83 e0       	ldi	r24, 0x03	; 3
    4172:	60 e0       	ldi	r22, 0x00	; 0
    4174:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    4178:	81 e0       	ldi	r24, 0x01	; 1
    417a:	67 e0       	ldi	r22, 0x07	; 7
    417c:	41 e0       	ldi	r20, 0x01	; 1
    417e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4182:	c8 01       	movw	r24, r16
    4184:	01 97       	sbiw	r24, 0x01	; 1
    4186:	f1 f7       	brne	.-4      	; 0x4184 <CLCD_voidSendExtraChar+0x430>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	67 e0       	ldi	r22, 0x07	; 7
    418c:	40 e0       	ldi	r20, 0x00	; 0
    418e:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4192:	c8 01       	movw	r24, r16
    4194:	01 97       	sbiw	r24, 0x01	; 1
    4196:	f1 f7       	brne	.-4      	; 0x4194 <CLCD_voidSendExtraChar+0x440>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    4198:	83 e0       	ldi	r24, 0x03	; 3
    419a:	66 e0       	ldi	r22, 0x06	; 6
    419c:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	67 e0       	ldi	r22, 0x07	; 7
    41a4:	41 e0       	ldi	r20, 0x01	; 1
    41a6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    41aa:	c8 01       	movw	r24, r16
    41ac:	01 97       	sbiw	r24, 0x01	; 1
    41ae:	f1 f7       	brne	.-4      	; 0x41ac <CLCD_voidSendExtraChar+0x458>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    41b0:	81 e0       	ldi	r24, 0x01	; 1
    41b2:	67 e0       	ldi	r22, 0x07	; 7
    41b4:	40 e0       	ldi	r20, 0x00	; 0
    41b6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    41ba:	c8 01       	movw	r24, r16
    41bc:	01 97       	sbiw	r24, 0x01	; 1
    41be:	f1 f7       	brne	.-4      	; 0x41bc <CLCD_voidSendExtraChar+0x468>
    41c0:	c8 01       	movw	r24, r16
    41c2:	01 97       	sbiw	r24, 0x01	; 1
    41c4:	f1 f7       	brne	.-4      	; 0x41c2 <CLCD_voidSendExtraChar+0x46e>
	CLCD_voidSendFallingEdge();

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      4 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#elif   CLCD_MODE == 4

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    41c6:	81 e0       	ldi	r24, 0x01	; 1
    41c8:	65 e0       	ldi	r22, 0x05	; 5
    41ca:	41 e0       	ldi	r20, 0x01	; 1
    41cc:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    41d0:	81 e0       	ldi	r24, 0x01	; 1
    41d2:	66 e0       	ldi	r22, 0x06	; 6
    41d4:	40 e0       	ldi	r20, 0x00	; 0
    41d6:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
    41da:	83 e0       	ldi	r24, 0x03	; 3
    41dc:	60 e0       	ldi	r22, 0x00	; 0
    41de:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    41e2:	81 e0       	ldi	r24, 0x01	; 1
    41e4:	67 e0       	ldi	r22, 0x07	; 7
    41e6:	41 e0       	ldi	r20, 0x01	; 1
    41e8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    41ec:	c8 01       	movw	r24, r16
    41ee:	01 97       	sbiw	r24, 0x01	; 1
    41f0:	f1 f7       	brne	.-4      	; 0x41ee <CLCD_voidSendExtraChar+0x49a>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	67 e0       	ldi	r22, 0x07	; 7
    41f6:	40 e0       	ldi	r20, 0x00	; 0
    41f8:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    41fc:	c8 01       	movw	r24, r16
    41fe:	01 97       	sbiw	r24, 0x01	; 1
    4200:	f1 f7       	brne	.-4      	; 0x41fe <CLCD_voidSendExtraChar+0x4aa>

	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,(Copy_u8Data>>4));            // send the most 4 bits of data to high nibbles
	CLCD_voidSendFallingEdge();
	DIO_voidWriteHighNibbles (CLCD_DATA_PORT ,Copy_u8Data);               // send the least 4 bits of data to high nibbles
    4202:	83 e0       	ldi	r24, 0x03	; 3
    4204:	67 e0       	ldi	r22, 0x07	; 7
    4206:	0e 94 11 18 	call	0x3022	; 0x3022 <DIO_voidWriteHighNibbles>
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    420a:	81 e0       	ldi	r24, 0x01	; 1
    420c:	67 e0       	ldi	r22, 0x07	; 7
    420e:	41 e0       	ldi	r20, 0x01	; 1
    4210:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4214:	c8 01       	movw	r24, r16
    4216:	01 97       	sbiw	r24, 0x01	; 1
    4218:	f1 f7       	brne	.-4      	; 0x4216 <CLCD_voidSendExtraChar+0x4c2>
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    421a:	81 e0       	ldi	r24, 0x01	; 1
    421c:	67 e0       	ldi	r22, 0x07	; 7
    421e:	40 e0       	ldi	r20, 0x00	; 0
    4220:	0e 94 05 16 	call	0x2c0a	; 0x2c0a <DIO_enumSetPinValue>
    4224:	c8 01       	movw	r24, r16
    4226:	01 97       	sbiw	r24, 0x01	; 1
    4228:	f1 f7       	brne	.-4      	; 0x4226 <CLCD_voidSendExtraChar+0x4d2>
    422a:	c8 01       	movw	r24, r16
    422c:	01 97       	sbiw	r24, 0x01	; 1
    422e:	f1 f7       	brne	.-4      	; 0x422c <CLCD_voidSendExtraChar+0x4d8>

		CLCD_voidSendData( LOC_u8Iterator );

	}

}
    4230:	df 91       	pop	r29
    4232:	cf 91       	pop	r28
    4234:	1f 91       	pop	r17
    4236:	0f 91       	pop	r16
    4238:	ff 90       	pop	r15
    423a:	ef 90       	pop	r14
    423c:	df 90       	pop	r13
    423e:	cf 90       	pop	r12
    4240:	08 95       	ret
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    4242:	80 e1       	ldi	r24, 0x10	; 16
    4244:	8c 15       	cp	r24, r12
    4246:	08 f4       	brcc	.+2      	; 0x424a <CLCD_voidSendExtraChar+0x4f6>
    4248:	0e ce       	rjmp	.-996    	; 0x3e66 <CLCD_voidSendExtraChar+0x112>
    424a:	cc 20       	and	r12, r12
    424c:	09 f4       	brne	.+2      	; 0x4250 <CLCD_voidSendExtraChar+0x4fc>
    424e:	0b ce       	rjmp	.-1002   	; 0x3e66 <CLCD_voidSendExtraChar+0x112>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	d8 16       	cp	r13, r24
    4254:	31 f0       	breq	.+12     	; 0x4262 <CLCD_voidSendExtraChar+0x50e>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    4256:	82 e0       	ldi	r24, 0x02	; 2
    4258:	d8 16       	cp	r13, r24
    425a:	41 f0       	breq	.+16     	; 0x426c <CLCD_voidSendExtraChar+0x518>
    425c:	ff 24       	eor	r15, r15
    425e:	10 e0       	ldi	r17, 0x00	; 0
    4260:	05 ce       	rjmp	.-1014   	; 0x3e6c <CLCD_voidSendExtraChar+0x118>
		LOC_u8data = lcd_SetCursor ;   // first location 
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    4262:	8f e7       	ldi	r24, 0x7F	; 127
    4264:	f8 2e       	mov	r15, r24
    4266:	fc 0c       	add	r15, r12
    4268:	18 e0       	ldi	r17, 0x08	; 8
    426a:	00 ce       	rjmp	.-1024   	; 0x3e6c <CLCD_voidSendExtraChar+0x118>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    426c:	0f eb       	ldi	r16, 0xBF	; 191
    426e:	f0 2e       	mov	r15, r16
    4270:	fc 0c       	add	r15, r12
    4272:	1c e0       	ldi	r17, 0x0C	; 12
    4274:	fb cd       	rjmp	.-1034   	; 0x3e6c <CLCD_voidSendExtraChar+0x118>

00004276 <NUM>:
/**************************************************************************/
/*********************    Helper Functions   ******************************/
/**************************************************************************/
// gathering the comblete number
void NUM (void)
{
    4276:	0f 93       	push	r16
    4278:	1f 93       	push	r17
	n++ ;
    427a:	00 91 22 02 	lds	r16, 0x0222
    427e:	0f 5f       	subi	r16, 0xFF	; 255
    4280:	00 93 22 02 	sts	0x0222, r16
	arr[n] = arr[n-1]*10 + x ;
    4284:	11 27       	eor	r17, r17
    4286:	07 fd       	sbrc	r16, 7
    4288:	10 95       	com	r17
    428a:	00 0f       	add	r16, r16
    428c:	11 1f       	adc	r17, r17
    428e:	00 0f       	add	r16, r16
    4290:	11 1f       	adc	r17, r17
    4292:	f8 01       	movw	r30, r16
    4294:	e6 52       	subi	r30, 0x26	; 38
    4296:	fe 4f       	sbci	r31, 0xFE	; 254
    4298:	60 81       	ld	r22, Z
    429a:	71 81       	ldd	r23, Z+1	; 0x01
    429c:	82 81       	ldd	r24, Z+2	; 0x02
    429e:	93 81       	ldd	r25, Z+3	; 0x03
    42a0:	20 e0       	ldi	r18, 0x00	; 0
    42a2:	30 e0       	ldi	r19, 0x00	; 0
    42a4:	40 e2       	ldi	r20, 0x20	; 32
    42a6:	51 e4       	ldi	r21, 0x41	; 65
    42a8:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    42ac:	20 91 1e 02 	lds	r18, 0x021E
    42b0:	30 91 1f 02 	lds	r19, 0x021F
    42b4:	40 91 20 02 	lds	r20, 0x0220
    42b8:	50 91 21 02 	lds	r21, 0x0221
    42bc:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    42c0:	9b 01       	movw	r18, r22
    42c2:	ac 01       	movw	r20, r24
    42c4:	f8 01       	movw	r30, r16
    42c6:	e2 52       	subi	r30, 0x22	; 34
    42c8:	fe 4f       	sbci	r31, 0xFE	; 254
    42ca:	20 83       	st	Z, r18
    42cc:	31 83       	std	Z+1, r19	; 0x01
    42ce:	42 83       	std	Z+2, r20	; 0x02
    42d0:	53 83       	std	Z+3, r21	; 0x03

	// to make the negative number
	if (sign==1){arr[n]=arr[n]*(-1); sign=0;}
    42d2:	80 91 dd 01 	lds	r24, 0x01DD
    42d6:	81 30       	cpi	r24, 0x01	; 1
    42d8:	49 f4       	brne	.+18     	; 0x42ec <NUM+0x76>
    42da:	da 01       	movw	r26, r20
    42dc:	c9 01       	movw	r24, r18
    42de:	b0 58       	subi	r27, 0x80	; 128
    42e0:	80 83       	st	Z, r24
    42e2:	91 83       	std	Z+1, r25	; 0x01
    42e4:	a2 83       	std	Z+2, r26	; 0x02
    42e6:	b3 83       	std	Z+3, r27	; 0x03
    42e8:	10 92 dd 01 	sts	0x01DD, r1

}
    42ec:	1f 91       	pop	r17
    42ee:	0f 91       	pop	r16
    42f0:	08 95       	ret

000042f2 <reset>:
}

// resting all variables
void reset(void)
{
	arr[0]=0; x=0;
    42f2:	80 e0       	ldi	r24, 0x00	; 0
    42f4:	90 e0       	ldi	r25, 0x00	; 0
    42f6:	a0 e0       	ldi	r26, 0x00	; 0
    42f8:	b0 e0       	ldi	r27, 0x00	; 0
    42fa:	80 93 de 01 	sts	0x01DE, r24
    42fe:	90 93 df 01 	sts	0x01DF, r25
    4302:	a0 93 e0 01 	sts	0x01E0, r26
    4306:	b0 93 e1 01 	sts	0x01E1, r27
    430a:	80 93 1e 02 	sts	0x021E, r24
    430e:	90 93 1f 02 	sts	0x021F, r25
    4312:	a0 93 20 02 	sts	0x0220, r26
    4316:	b0 93 21 02 	sts	0x0221, r27
	n=0; z=0; s=0; d=0; opArr[0]=0;
    431a:	10 92 22 02 	sts	0x0222, r1
    431e:	10 92 29 02 	sts	0x0229, r1
    4322:	10 92 7d 02 	sts	0x027D, r1
    4326:	10 92 3b 02 	sts	0x023B, r1
    432a:	80 93 c0 02 	sts	0x02C0, r24
    432e:	90 93 c1 02 	sts	0x02C1, r25
    4332:	a0 93 c2 02 	sts	0x02C2, r26
    4336:	b0 93 c3 02 	sts	0x02C3, r27
	Pop=0; Sop=0; sumArr[0]=0; MdArr[0]=0;
    433a:	10 92 bf 02 	sts	0x02BF, r1
    433e:	10 92 24 02 	sts	0x0224, r1
    4342:	80 93 7f 02 	sts	0x027F, r24
    4346:	90 93 80 02 	sts	0x0280, r25
    434a:	a0 93 81 02 	sts	0x0281, r26
    434e:	b0 93 82 02 	sts	0x0282, r27
    4352:	80 93 3d 02 	sts	0x023D, r24
    4356:	90 93 3e 02 	sts	0x023E, r25
    435a:	a0 93 3f 02 	sts	0x023F, r26
    435e:	b0 93 40 02 	sts	0x0240, r27
	Sstate=0;state=0;Pstate=0; i=0;
    4362:	10 92 23 02 	sts	0x0223, r1
    4366:	10 92 28 02 	sts	0x0228, r1
    436a:	10 92 25 02 	sts	0x0225, r1
    436e:	10 92 dc 01 	sts	0x01DC, r1

}
    4372:	08 95       	ret

00004374 <APP_voidInit>:
}

/*all Initials I need */
void APP_voidInit(void)
{
	CLCD_voidInit();
    4374:	0e 94 b3 1a 	call	0x3566	; 0x3566 <CLCD_voidInit>
	KPD_Init();
    4378:	0e 94 fe 18 	call	0x31fc	; 0x31fc <KPD_Init>
	/***************/
	CLCD_voidSendString((u8*)"Welcome .....         ");
    437c:	82 e6       	ldi	r24, 0x62	; 98
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	0e 94 c1 19 	call	0x3382	; 0x3382 <CLCD_voidSendString>
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	48 ec       	ldi	r20, 0xC8	; 200
    438a:	50 e0       	ldi	r21, 0x00	; 0
    438c:	ca 01       	movw	r24, r20
    438e:	01 97       	sbiw	r24, 0x01	; 1
    4390:	f1 f7       	brne	.-4      	; 0x438e <APP_voidInit+0x1a>
    4392:	2f 5f       	subi	r18, 0xFF	; 255
    4394:	3f 4f       	sbci	r19, 0xFF	; 255
    4396:	8e e4       	ldi	r24, 0x4E	; 78
    4398:	20 32       	cpi	r18, 0x20	; 32
    439a:	38 07       	cpc	r19, r24
    439c:	b9 f7       	brne	.-18     	; 0x438c <APP_voidInit+0x18>
	_delay_ms(2000);
	CLCD_voidClearScreen();
    439e:	0e 94 16 1a 	call	0x342c	; 0x342c <CLCD_voidClearScreen>
	CLCD_voidSetPosition(CLCD_ROW_1,CLCD_COL_1);
    43a2:	81 e0       	ldi	r24, 0x01	; 1
    43a4:	61 e0       	ldi	r22, 0x01	; 1
    43a6:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
}
    43aa:	08 95       	ret

000043ac <P_fun>:

}

// Multiplying or Dividing operation function
void P_fun (void)
{
    43ac:	ef 92       	push	r14
    43ae:	ff 92       	push	r15
    43b0:	0f 93       	push	r16
    43b2:	1f 93       	push	r17
    43b4:	cf 93       	push	r28
    43b6:	df 93       	push	r29
	Pop ++ ;
    43b8:	20 91 bf 02 	lds	r18, 0x02BF
    43bc:	2f 5f       	subi	r18, 0xFF	; 255
    43be:	20 93 bf 02 	sts	0x02BF, r18
	d++;
    43c2:	80 91 3b 02 	lds	r24, 0x023B
    43c6:	8f 5f       	subi	r24, 0xFF	; 255
    43c8:	80 93 3b 02 	sts	0x023B, r24
	// MdArr holding first and second number
	MdArr[d] = opArr[z] ;
    43cc:	c8 2f       	mov	r28, r24
    43ce:	dd 27       	eor	r29, r29
    43d0:	c7 fd       	sbrc	r28, 7
    43d2:	d0 95       	com	r29
    43d4:	cc 0f       	add	r28, r28
    43d6:	dd 1f       	adc	r29, r29
    43d8:	cc 0f       	add	r28, r28
    43da:	dd 1f       	adc	r29, r29
    43dc:	c3 5c       	subi	r28, 0xC3	; 195
    43de:	dd 4f       	sbci	r29, 0xFD	; 253
    43e0:	e0 91 29 02 	lds	r30, 0x0229
    43e4:	ff 27       	eor	r31, r31
    43e6:	e7 fd       	sbrc	r30, 7
    43e8:	f0 95       	com	r31
    43ea:	ee 0f       	add	r30, r30
    43ec:	ff 1f       	adc	r31, r31
    43ee:	ee 0f       	add	r30, r30
    43f0:	ff 1f       	adc	r31, r31
    43f2:	e0 54       	subi	r30, 0x40	; 64
    43f4:	fd 4f       	sbci	r31, 0xFD	; 253
    43f6:	80 81       	ld	r24, Z
    43f8:	91 81       	ldd	r25, Z+1	; 0x01
    43fa:	a2 81       	ldd	r26, Z+2	; 0x02
    43fc:	b3 81       	ldd	r27, Z+3	; 0x03
    43fe:	88 83       	st	Y, r24
    4400:	99 83       	std	Y+1, r25	; 0x01
    4402:	aa 83       	std	Y+2, r26	; 0x02
    4404:	bb 83       	std	Y+3, r27	; 0x03
	// doing the operation on two numbers
	if (Pop==2)
    4406:	22 30       	cpi	r18, 0x02	; 2
    4408:	39 f0       	breq	.+14     	; 0x4418 <P_fun+0x6c>
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
		// Exception to tell the S_fun to start calculating the all number pervious the equal operator
		if (state==1){Pstate=5;}

	}
}
    440a:	df 91       	pop	r29
    440c:	cf 91       	pop	r28
    440e:	1f 91       	pop	r17
    4410:	0f 91       	pop	r16
    4412:	ff 90       	pop	r15
    4414:	ef 90       	pop	r14
    4416:	08 95       	ret
	MdArr[d] = opArr[z] ;
	// doing the operation on two numbers
	if (Pop==2)
	{

		switch(Pstate)
    4418:	80 91 25 02 	lds	r24, 0x0225
    441c:	81 30       	cpi	r24, 0x01	; 1
    441e:	b9 f1       	breq	.+110    	; 0x448e <P_fun+0xe2>
    4420:	82 30       	cpi	r24, 0x02	; 2
    4422:	d1 f0       	breq	.+52     	; 0x4458 <P_fun+0xac>
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
			break ;
		}

		Pop = 1;
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	80 93 bf 02 	sts	0x02BF, r24
		d = 1;
    442a:	80 93 3b 02 	sts	0x023B, r24
		Pstate=0;
    442e:	10 92 25 02 	sts	0x0225, r1

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    4432:	80 91 7e 02 	lds	r24, 0x027E
    4436:	81 30       	cpi	r24, 0x01	; 1
    4438:	09 f4       	brne	.+2      	; 0x443c <P_fun+0x90>
    443a:	50 c0       	rjmp	.+160    	; 0x44dc <P_fun+0x130>
		// Exception to tell the S_fun to start calculating the all number pervious the equal operator
		if (state==1){Pstate=5;}
    443c:	80 91 28 02 	lds	r24, 0x0228
    4440:	81 30       	cpi	r24, 0x01	; 1
    4442:	19 f7       	brne	.-58     	; 0x440a <P_fun+0x5e>
    4444:	85 e0       	ldi	r24, 0x05	; 5
    4446:	80 93 25 02 	sts	0x0225, r24

	}
}
    444a:	df 91       	pop	r29
    444c:	cf 91       	pop	r28
    444e:	1f 91       	pop	r17
    4450:	0f 91       	pop	r16
    4452:	ff 90       	pop	r15
    4454:	ef 90       	pop	r14
    4456:	08 95       	ret
			}
			break ;

			// multiplying operation
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
    4458:	60 91 41 02 	lds	r22, 0x0241
    445c:	70 91 42 02 	lds	r23, 0x0242
    4460:	80 91 43 02 	lds	r24, 0x0243
    4464:	90 91 44 02 	lds	r25, 0x0244
    4468:	20 91 45 02 	lds	r18, 0x0245
    446c:	30 91 46 02 	lds	r19, 0x0246
    4470:	40 91 47 02 	lds	r20, 0x0247
    4474:	50 91 48 02 	lds	r21, 0x0248
    4478:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    447c:	60 93 41 02 	sts	0x0241, r22
    4480:	70 93 42 02 	sts	0x0242, r23
    4484:	80 93 43 02 	sts	0x0243, r24
    4488:	90 93 44 02 	sts	0x0244, r25
    448c:	cb cf       	rjmp	.-106    	; 0x4424 <P_fun+0x78>
		switch(Pstate)
		{
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
    448e:	e0 90 45 02 	lds	r14, 0x0245
    4492:	f0 90 46 02 	lds	r15, 0x0246
    4496:	00 91 47 02 	lds	r16, 0x0247
    449a:	10 91 48 02 	lds	r17, 0x0248
    449e:	c8 01       	movw	r24, r16
    44a0:	b7 01       	movw	r22, r14
    44a2:	20 e0       	ldi	r18, 0x00	; 0
    44a4:	30 e0       	ldi	r19, 0x00	; 0
    44a6:	40 e0       	ldi	r20, 0x00	; 0
    44a8:	50 e0       	ldi	r21, 0x00	; 0
    44aa:	0e 94 a5 11 	call	0x234a	; 0x234a <__eqsf2>
    44ae:	88 23       	and	r24, r24
    44b0:	e1 f0       	breq	.+56     	; 0x44ea <P_fun+0x13e>
				i=17;
			}
			else
				// dividing operation
			{
				MdArr[1]=MdArr[1] / MdArr[2] ;
    44b2:	60 91 41 02 	lds	r22, 0x0241
    44b6:	70 91 42 02 	lds	r23, 0x0242
    44ba:	80 91 43 02 	lds	r24, 0x0243
    44be:	90 91 44 02 	lds	r25, 0x0244
    44c2:	a8 01       	movw	r20, r16
    44c4:	97 01       	movw	r18, r14
    44c6:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
    44ca:	60 93 41 02 	sts	0x0241, r22
    44ce:	70 93 42 02 	sts	0x0242, r23
    44d2:	80 93 43 02 	sts	0x0243, r24
    44d6:	90 93 44 02 	sts	0x0244, r25
    44da:	a4 cf       	rjmp	.-184    	; 0x4424 <P_fun+0x78>
		Pop = 1;
		d = 1;
		Pstate=0;

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    44dc:	10 92 3b 02 	sts	0x023B, r1
    44e0:	10 92 bf 02 	sts	0x02BF, r1
    44e4:	10 92 7e 02 	sts	0x027E, r1
    44e8:	a9 cf       	rjmp	.-174    	; 0x443c <P_fun+0x90>
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
			{
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    44ea:	82 e0       	ldi	r24, 0x02	; 2
    44ec:	61 e0       	ldi	r22, 0x01	; 1
    44ee:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Math ERROR");
    44f2:	89 e7       	ldi	r24, 0x79	; 121
    44f4:	90 e0       	ldi	r25, 0x00	; 0
    44f6:	0e 94 c1 19 	call	0x3382	; 0x3382 <CLCD_voidSendString>
				i=17;
    44fa:	81 e1       	ldi	r24, 0x11	; 17
    44fc:	80 93 dc 01 	sts	0x01DC, r24
    4500:	91 cf       	rjmp	.-222    	; 0x4424 <P_fun+0x78>

00004502 <operat>:

}

// reciving the operations
void operat (void)
{
    4502:	ef 92       	push	r14
    4504:	ff 92       	push	r15
    4506:	0f 93       	push	r16
    4508:	1f 93       	push	r17
	z++;
    450a:	a0 91 29 02 	lds	r26, 0x0229
    450e:	af 5f       	subi	r26, 0xFF	; 255
    4510:	a0 93 29 02 	sts	0x0229, r26
	opArr[z]=arr[n];
    4514:	80 91 22 02 	lds	r24, 0x0222
    4518:	e8 2f       	mov	r30, r24
    451a:	ff 27       	eor	r31, r31
    451c:	e7 fd       	sbrc	r30, 7
    451e:	f0 95       	com	r31
    4520:	ee 0f       	add	r30, r30
    4522:	ff 1f       	adc	r31, r31
    4524:	ee 0f       	add	r30, r30
    4526:	ff 1f       	adc	r31, r31
    4528:	e2 52       	subi	r30, 0x22	; 34
    452a:	fe 4f       	sbci	r31, 0xFE	; 254
    452c:	20 81       	ld	r18, Z
    452e:	31 81       	ldd	r19, Z+1	; 0x01
    4530:	42 81       	ldd	r20, Z+2	; 0x02
    4532:	53 81       	ldd	r21, Z+3	; 0x03
    4534:	bb 27       	eor	r27, r27
    4536:	a7 fd       	sbrc	r26, 7
    4538:	b0 95       	com	r27
    453a:	aa 0f       	add	r26, r26
    453c:	bb 1f       	adc	r27, r27
    453e:	aa 0f       	add	r26, r26
    4540:	bb 1f       	adc	r27, r27
    4542:	a0 54       	subi	r26, 0x40	; 64
    4544:	bd 4f       	sbci	r27, 0xFD	; 253
    4546:	2d 93       	st	X+, r18
    4548:	3d 93       	st	X+, r19
    454a:	4d 93       	st	X+, r20
    454c:	5c 93       	st	X, r21
    454e:	13 97       	sbiw	r26, 0x03	; 3
	n++;
    4550:	e8 2f       	mov	r30, r24
    4552:	ef 5f       	subi	r30, 0xFF	; 255
    4554:	e0 93 22 02 	sts	0x0222, r30
	arr[n]=0 ;
    4558:	ff 27       	eor	r31, r31
    455a:	e7 fd       	sbrc	r30, 7
    455c:	f0 95       	com	r31
    455e:	ee 0f       	add	r30, r30
    4560:	ff 1f       	adc	r31, r31
    4562:	ee 0f       	add	r30, r30
    4564:	ff 1f       	adc	r31, r31
    4566:	e2 52       	subi	r30, 0x22	; 34
    4568:	fe 4f       	sbci	r31, 0xFE	; 254
    456a:	80 e0       	ldi	r24, 0x00	; 0
    456c:	90 e0       	ldi	r25, 0x00	; 0
    456e:	a0 e0       	ldi	r26, 0x00	; 0
    4570:	b0 e0       	ldi	r27, 0x00	; 0
    4572:	80 83       	st	Z, r24
    4574:	91 83       	std	Z+1, r25	; 0x01
    4576:	a2 83       	std	Z+2, r26	; 0x02
    4578:	b3 83       	std	Z+3, r27	; 0x03

	switch (keyPressed)
    457a:	80 91 3c 02 	lds	r24, 0x023C
    457e:	8d 32       	cpi	r24, 0x2D	; 45
    4580:	09 f4       	brne	.+2      	; 0x4584 <operat+0x82>
    4582:	e2 c0       	rjmp	.+452    	; 0x4748 <operat+0x246>
    4584:	8e 32       	cpi	r24, 0x2E	; 46
    4586:	50 f0       	brcs	.+20     	; 0x459c <operat+0x9a>
    4588:	8f 32       	cpi	r24, 0x2F	; 47
    458a:	09 f4       	brne	.+2      	; 0x458e <operat+0x8c>
    458c:	99 c0       	rjmp	.+306    	; 0x46c0 <operat+0x1be>
    458e:	8d 33       	cpi	r24, 0x3D	; 61
    4590:	d1 f1       	breq	.+116    	; 0x4606 <operat+0x104>

		Equal_fun ();
		break;

	}
}
    4592:	1f 91       	pop	r17
    4594:	0f 91       	pop	r16
    4596:	ff 90       	pop	r15
    4598:	ef 90       	pop	r14
    459a:	08 95       	ret
	z++;
	opArr[z]=arr[n];
	n++;
	arr[n]=0 ;

	switch (keyPressed)
    459c:	8a 32       	cpi	r24, 0x2A	; 42
    459e:	09 f4       	brne	.+2      	; 0x45a2 <operat+0xa0>
    45a0:	b1 c0       	rjmp	.+354    	; 0x4704 <operat+0x202>
    45a2:	8b 32       	cpi	r24, 0x2B	; 43
    45a4:	b1 f7       	brne	.-20     	; 0x4592 <operat+0x90>
}

// suming or minus operation function
void S_fun (void)
{
	Preset =1 ;
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	80 93 7e 02 	sts	0x027E, r24
	Sop++;
    45ac:	70 91 24 02 	lds	r23, 0x0224
    45b0:	7f 5f       	subi	r23, 0xFF	; 255
    45b2:	70 93 24 02 	sts	0x0224, r23
	s++ ;
    45b6:	60 91 7d 02 	lds	r22, 0x027D
    45ba:	6f 5f       	subi	r22, 0xFF	; 255
    45bc:	60 93 7d 02 	sts	0x027D, r22
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
    45c0:	e6 2f       	mov	r30, r22
    45c2:	ff 27       	eor	r31, r31
    45c4:	e7 fd       	sbrc	r30, 7
    45c6:	f0 95       	com	r31
    45c8:	ee 0f       	add	r30, r30
    45ca:	ff 1f       	adc	r31, r31
    45cc:	ee 0f       	add	r30, r30
    45ce:	ff 1f       	adc	r31, r31
    45d0:	e1 58       	subi	r30, 0x81	; 129
    45d2:	fd 4f       	sbci	r31, 0xFD	; 253
    45d4:	20 83       	st	Z, r18
    45d6:	31 83       	std	Z+1, r19	; 0x01
    45d8:	42 83       	std	Z+2, r20	; 0x02
    45da:	53 83       	std	Z+3, r21	; 0x03
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
    45dc:	90 91 25 02 	lds	r25, 0x0225
    45e0:	89 2f       	mov	r24, r25
    45e2:	81 50       	subi	r24, 0x01	; 1
    45e4:	82 30       	cpi	r24, 0x02	; 2
    45e6:	08 f4       	brcc	.+2      	; 0x45ea <operat+0xe8>
    45e8:	76 c2       	rjmp	.+1260   	; 0x4ad6 <operat+0x5d4>
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    45ea:	95 30       	cpi	r25, 0x05	; 5
    45ec:	09 f4       	brne	.+2      	; 0x45f0 <operat+0xee>
    45ee:	96 c1       	rjmp	.+812    	; 0x491c <operat+0x41a>
	{
		sumArr[s] = MdArr[1];
	}
	// doing the operation on two numbers
	if (Sop==2)
    45f0:	72 30       	cpi	r23, 0x02	; 2
    45f2:	09 f4       	brne	.+2      	; 0x45f6 <operat+0xf4>
    45f4:	d9 c0       	rjmp	.+434    	; 0x47a8 <operat+0x2a6>
		Pstate=2;
		break;
	case '+':

		S_fun ();
		Sstate=1;
    45f6:	81 e0       	ldi	r24, 0x01	; 1
    45f8:	80 93 23 02 	sts	0x0223, r24

		Equal_fun ();
		break;

	}
}
    45fc:	1f 91       	pop	r17
    45fe:	0f 91       	pop	r16
    4600:	ff 90       	pop	r15
    4602:	ef 90       	pop	r14
    4604:	08 95       	ret

		S_fun ();
		Sstate=2;
		break;
	case '=':
		state=1;
    4606:	81 e0       	ldi	r24, 0x01	; 1
    4608:	80 93 28 02 	sts	0x0228, r24

// desplaying the final result
void Equal_fun (void)
{

	cleanSc = 1 ;
    460c:	80 93 3a 02 	sts	0x023A, r24

	if (Pstate==1 || Pstate==2 )
    4610:	80 91 25 02 	lds	r24, 0x0225
    4614:	81 50       	subi	r24, 0x01	; 1
    4616:	82 30       	cpi	r24, 0x02	; 2
    4618:	08 f4       	brcc	.+2      	; 0x461c <operat+0x11a>
    461a:	7c c2       	rjmp	.+1272   	; 0x4b14 <operat+0x612>
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
			CLCD_voidSendFloat(MdArr[1]);
		}

	}
	if (Sstate==1 || Sstate==2 )
    461c:	80 91 23 02 	lds	r24, 0x0223
    4620:	81 50       	subi	r24, 0x01	; 1
    4622:	82 30       	cpi	r24, 0x02	; 2
    4624:	08 f0       	brcs	.+2      	; 0x4628 <operat+0x126>
    4626:	b5 cf       	rjmp	.-150    	; 0x4592 <operat+0x90>
}

// suming or minus operation function
void S_fun (void)
{
	Preset =1 ;
    4628:	81 e0       	ldi	r24, 0x01	; 1
    462a:	80 93 7e 02 	sts	0x027E, r24
	Sop++;
    462e:	70 91 24 02 	lds	r23, 0x0224
    4632:	7f 5f       	subi	r23, 0xFF	; 255
    4634:	70 93 24 02 	sts	0x0224, r23
	s++ ;
    4638:	60 91 7d 02 	lds	r22, 0x027D
    463c:	6f 5f       	subi	r22, 0xFF	; 255
    463e:	60 93 7d 02 	sts	0x027D, r22
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
    4642:	26 2f       	mov	r18, r22
    4644:	33 27       	eor	r19, r19
    4646:	27 fd       	sbrc	r18, 7
    4648:	30 95       	com	r19
    464a:	22 0f       	add	r18, r18
    464c:	33 1f       	adc	r19, r19
    464e:	22 0f       	add	r18, r18
    4650:	33 1f       	adc	r19, r19
    4652:	21 58       	subi	r18, 0x81	; 129
    4654:	3d 4f       	sbci	r19, 0xFD	; 253
    4656:	e0 91 29 02 	lds	r30, 0x0229
    465a:	ff 27       	eor	r31, r31
    465c:	e7 fd       	sbrc	r30, 7
    465e:	f0 95       	com	r31
    4660:	ee 0f       	add	r30, r30
    4662:	ff 1f       	adc	r31, r31
    4664:	ee 0f       	add	r30, r30
    4666:	ff 1f       	adc	r31, r31
    4668:	e0 54       	subi	r30, 0x40	; 64
    466a:	fd 4f       	sbci	r31, 0xFD	; 253
    466c:	80 81       	ld	r24, Z
    466e:	91 81       	ldd	r25, Z+1	; 0x01
    4670:	a2 81       	ldd	r26, Z+2	; 0x02
    4672:	b3 81       	ldd	r27, Z+3	; 0x03
    4674:	f9 01       	movw	r30, r18
    4676:	80 83       	st	Z, r24
    4678:	91 83       	std	Z+1, r25	; 0x01
    467a:	a2 83       	std	Z+2, r26	; 0x02
    467c:	b3 83       	std	Z+3, r27	; 0x03
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
    467e:	90 91 25 02 	lds	r25, 0x0225
    4682:	89 2f       	mov	r24, r25
    4684:	81 50       	subi	r24, 0x01	; 1
    4686:	82 30       	cpi	r24, 0x02	; 2
    4688:	08 f4       	brcc	.+2      	; 0x468c <operat+0x18a>
    468a:	b9 c2       	rjmp	.+1394   	; 0x4bfe <operat+0x6fc>
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    468c:	95 30       	cpi	r25, 0x05	; 5
    468e:	09 f4       	brne	.+2      	; 0x4692 <operat+0x190>
    4690:	82 c2       	rjmp	.+1284   	; 0x4b96 <operat+0x694>
	{
		sumArr[s] = MdArr[1];
	}
	// doing the operation on two numbers
	if (Sop==2)
    4692:	72 30       	cpi	r23, 0x02	; 2
    4694:	09 f4       	brne	.+2      	; 0x4698 <operat+0x196>
    4696:	54 c2       	rjmp	.+1192   	; 0x4b40 <operat+0x63e>
	}
	if (Sstate==1 || Sstate==2 )
	{
		S_fun ();
		// Exception for infinity loop (dividing by zero)
		if(i==17){}
    4698:	80 91 dc 01 	lds	r24, 0x01DC
    469c:	81 31       	cpi	r24, 0x11	; 17
    469e:	09 f4       	brne	.+2      	; 0x46a2 <operat+0x1a0>
    46a0:	78 cf       	rjmp	.-272    	; 0x4592 <operat+0x90>
		else
			// printing the result
		{
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    46a2:	82 e0       	ldi	r24, 0x02	; 2
    46a4:	61 e0       	ldi	r22, 0x01	; 1
    46a6:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
			CLCD_voidSendFloat(sumArr[1]);
    46aa:	60 91 83 02 	lds	r22, 0x0283
    46ae:	70 91 84 02 	lds	r23, 0x0284
    46b2:	80 91 85 02 	lds	r24, 0x0285
    46b6:	90 91 86 02 	lds	r25, 0x0286
    46ba:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <CLCD_voidSendFloat>
    46be:	69 cf       	rjmp	.-302    	; 0x4592 <operat+0x90>
}

// Multiplying or Dividing operation function
void P_fun (void)
{
	Pop ++ ;
    46c0:	80 91 bf 02 	lds	r24, 0x02BF
    46c4:	8f 5f       	subi	r24, 0xFF	; 255
    46c6:	80 93 bf 02 	sts	0x02BF, r24
	d++;
    46ca:	e0 91 3b 02 	lds	r30, 0x023B
    46ce:	ef 5f       	subi	r30, 0xFF	; 255
    46d0:	e0 93 3b 02 	sts	0x023B, r30
	// MdArr holding first and second number
	MdArr[d] = opArr[z] ;
    46d4:	ff 27       	eor	r31, r31
    46d6:	e7 fd       	sbrc	r30, 7
    46d8:	f0 95       	com	r31
    46da:	ee 0f       	add	r30, r30
    46dc:	ff 1f       	adc	r31, r31
    46de:	ee 0f       	add	r30, r30
    46e0:	ff 1f       	adc	r31, r31
    46e2:	e3 5c       	subi	r30, 0xC3	; 195
    46e4:	fd 4f       	sbci	r31, 0xFD	; 253
    46e6:	20 83       	st	Z, r18
    46e8:	31 83       	std	Z+1, r19	; 0x01
    46ea:	42 83       	std	Z+2, r20	; 0x02
    46ec:	53 83       	std	Z+3, r21	; 0x03
	// doing the operation on two numbers
	if (Pop==2)
    46ee:	82 30       	cpi	r24, 0x02	; 2
    46f0:	09 f4       	brne	.+2      	; 0x46f4 <operat+0x1f2>
    46f2:	85 c0       	rjmp	.+266    	; 0x47fe <operat+0x2fc>
	{

	case '/':

		P_fun ();
		Pstate=1;
    46f4:	81 e0       	ldi	r24, 0x01	; 1
    46f6:	80 93 25 02 	sts	0x0225, r24

		Equal_fun ();
		break;

	}
}
    46fa:	1f 91       	pop	r17
    46fc:	0f 91       	pop	r16
    46fe:	ff 90       	pop	r15
    4700:	ef 90       	pop	r14
    4702:	08 95       	ret
}

// Multiplying or Dividing operation function
void P_fun (void)
{
	Pop ++ ;
    4704:	80 91 bf 02 	lds	r24, 0x02BF
    4708:	8f 5f       	subi	r24, 0xFF	; 255
    470a:	80 93 bf 02 	sts	0x02BF, r24
	d++;
    470e:	e0 91 3b 02 	lds	r30, 0x023B
    4712:	ef 5f       	subi	r30, 0xFF	; 255
    4714:	e0 93 3b 02 	sts	0x023B, r30
	// MdArr holding first and second number
	MdArr[d] = opArr[z] ;
    4718:	ff 27       	eor	r31, r31
    471a:	e7 fd       	sbrc	r30, 7
    471c:	f0 95       	com	r31
    471e:	ee 0f       	add	r30, r30
    4720:	ff 1f       	adc	r31, r31
    4722:	ee 0f       	add	r30, r30
    4724:	ff 1f       	adc	r31, r31
    4726:	e3 5c       	subi	r30, 0xC3	; 195
    4728:	fd 4f       	sbci	r31, 0xFD	; 253
    472a:	20 83       	st	Z, r18
    472c:	31 83       	std	Z+1, r19	; 0x01
    472e:	42 83       	std	Z+2, r20	; 0x02
    4730:	53 83       	std	Z+3, r21	; 0x03
	// doing the operation on two numbers
	if (Pop==2)
    4732:	82 30       	cpi	r24, 0x02	; 2
    4734:	09 f4       	brne	.+2      	; 0x4738 <operat+0x236>
    4736:	95 c0       	rjmp	.+298    	; 0x4862 <operat+0x360>
		Pstate=1;
		break;
	case '*':

		P_fun ();
		Pstate=2;
    4738:	82 e0       	ldi	r24, 0x02	; 2
    473a:	80 93 25 02 	sts	0x0225, r24

		Equal_fun ();
		break;

	}
}
    473e:	1f 91       	pop	r17
    4740:	0f 91       	pop	r16
    4742:	ff 90       	pop	r15
    4744:	ef 90       	pop	r14
    4746:	08 95       	ret
}

// suming or minus operation function
void S_fun (void)
{
	Preset =1 ;
    4748:	81 e0       	ldi	r24, 0x01	; 1
    474a:	80 93 7e 02 	sts	0x027E, r24
	Sop++;
    474e:	70 91 24 02 	lds	r23, 0x0224
    4752:	7f 5f       	subi	r23, 0xFF	; 255
    4754:	70 93 24 02 	sts	0x0224, r23
	s++ ;
    4758:	60 91 7d 02 	lds	r22, 0x027D
    475c:	6f 5f       	subi	r22, 0xFF	; 255
    475e:	60 93 7d 02 	sts	0x027D, r22
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
    4762:	e6 2f       	mov	r30, r22
    4764:	ff 27       	eor	r31, r31
    4766:	e7 fd       	sbrc	r30, 7
    4768:	f0 95       	com	r31
    476a:	ee 0f       	add	r30, r30
    476c:	ff 1f       	adc	r31, r31
    476e:	ee 0f       	add	r30, r30
    4770:	ff 1f       	adc	r31, r31
    4772:	e1 58       	subi	r30, 0x81	; 129
    4774:	fd 4f       	sbci	r31, 0xFD	; 253
    4776:	20 83       	st	Z, r18
    4778:	31 83       	std	Z+1, r19	; 0x01
    477a:	42 83       	std	Z+2, r20	; 0x02
    477c:	53 83       	std	Z+3, r21	; 0x03
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
    477e:	90 91 25 02 	lds	r25, 0x0225
    4782:	89 2f       	mov	r24, r25
    4784:	81 50       	subi	r24, 0x01	; 1
    4786:	82 30       	cpi	r24, 0x02	; 2
    4788:	08 f4       	brcc	.+2      	; 0x478c <operat+0x28a>
    478a:	86 c1       	rjmp	.+780    	; 0x4a98 <operat+0x596>
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    478c:	95 30       	cpi	r25, 0x05	; 5
    478e:	09 f4       	brne	.+2      	; 0x4792 <operat+0x290>
    4790:	e1 c0       	rjmp	.+450    	; 0x4954 <operat+0x452>
	{
		sumArr[s] = MdArr[1];
	}
	// doing the operation on two numbers
	if (Sop==2)
    4792:	72 30       	cpi	r23, 0x02	; 2
    4794:	09 f4       	brne	.+2      	; 0x4798 <operat+0x296>
    4796:	97 c0       	rjmp	.+302    	; 0x48c6 <operat+0x3c4>
		Sstate=1;
		break;
	case '-':

		S_fun ();
		Sstate=2;
    4798:	82 e0       	ldi	r24, 0x02	; 2
    479a:	80 93 23 02 	sts	0x0223, r24

		Equal_fun ();
		break;

	}
}
    479e:	1f 91       	pop	r17
    47a0:	0f 91       	pop	r16
    47a2:	ff 90       	pop	r15
    47a4:	ef 90       	pop	r14
    47a6:	08 95       	ret
	}
	// doing the operation on two numbers
	if (Sop==2)
	{

		switch (Sstate)
    47a8:	80 91 23 02 	lds	r24, 0x0223
    47ac:	81 30       	cpi	r24, 0x01	; 1
    47ae:	09 f4       	brne	.+2      	; 0x47b2 <operat+0x2b0>
    47b0:	30 c1       	rjmp	.+608    	; 0x4a12 <operat+0x510>
    47b2:	82 30       	cpi	r24, 0x02	; 2
    47b4:	d1 f4       	brne	.+52     	; 0x47ea <operat+0x2e8>
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
			break ;
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
    47b6:	60 91 83 02 	lds	r22, 0x0283
    47ba:	70 91 84 02 	lds	r23, 0x0284
    47be:	80 91 85 02 	lds	r24, 0x0285
    47c2:	90 91 86 02 	lds	r25, 0x0286
    47c6:	20 91 87 02 	lds	r18, 0x0287
    47ca:	30 91 88 02 	lds	r19, 0x0288
    47ce:	40 91 89 02 	lds	r20, 0x0289
    47d2:	50 91 8a 02 	lds	r21, 0x028A
    47d6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    47da:	60 93 83 02 	sts	0x0283, r22
    47de:	70 93 84 02 	sts	0x0284, r23
    47e2:	80 93 85 02 	sts	0x0285, r24
    47e6:	90 93 86 02 	sts	0x0286, r25
			break ;
		}
		Sop=1;
    47ea:	81 e0       	ldi	r24, 0x01	; 1
    47ec:	80 93 24 02 	sts	0x0224, r24
		s=1;
    47f0:	80 93 7d 02 	sts	0x027D, r24
		Pop=0;
    47f4:	10 92 bf 02 	sts	0x02BF, r1
		d=0;
    47f8:	10 92 3b 02 	sts	0x023B, r1
    47fc:	fc ce       	rjmp	.-520    	; 0x45f6 <operat+0xf4>
	MdArr[d] = opArr[z] ;
	// doing the operation on two numbers
	if (Pop==2)
	{

		switch(Pstate)
    47fe:	80 91 25 02 	lds	r24, 0x0225
    4802:	81 30       	cpi	r24, 0x01	; 1
    4804:	09 f4       	brne	.+2      	; 0x4808 <operat+0x306>
    4806:	dd c0       	rjmp	.+442    	; 0x49c2 <operat+0x4c0>
    4808:	82 30       	cpi	r24, 0x02	; 2
    480a:	d1 f4       	brne	.+52     	; 0x4840 <operat+0x33e>
			}
			break ;

			// multiplying operation
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
    480c:	60 91 41 02 	lds	r22, 0x0241
    4810:	70 91 42 02 	lds	r23, 0x0242
    4814:	80 91 43 02 	lds	r24, 0x0243
    4818:	90 91 44 02 	lds	r25, 0x0244
    481c:	20 91 45 02 	lds	r18, 0x0245
    4820:	30 91 46 02 	lds	r19, 0x0246
    4824:	40 91 47 02 	lds	r20, 0x0247
    4828:	50 91 48 02 	lds	r21, 0x0248
    482c:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    4830:	60 93 41 02 	sts	0x0241, r22
    4834:	70 93 42 02 	sts	0x0242, r23
    4838:	80 93 43 02 	sts	0x0243, r24
    483c:	90 93 44 02 	sts	0x0244, r25
			break ;
		}

		Pop = 1;
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	80 93 bf 02 	sts	0x02BF, r24
		d = 1;
    4846:	80 93 3b 02 	sts	0x023B, r24
		Pstate=0;

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    484a:	80 91 7e 02 	lds	r24, 0x027E
    484e:	81 30       	cpi	r24, 0x01	; 1
    4850:	09 f0       	breq	.+2      	; 0x4854 <operat+0x352>
    4852:	50 cf       	rjmp	.-352    	; 0x46f4 <operat+0x1f2>
    4854:	10 92 3b 02 	sts	0x023B, r1
    4858:	10 92 bf 02 	sts	0x02BF, r1
    485c:	10 92 7e 02 	sts	0x027E, r1
    4860:	49 cf       	rjmp	.-366    	; 0x46f4 <operat+0x1f2>
	MdArr[d] = opArr[z] ;
	// doing the operation on two numbers
	if (Pop==2)
	{

		switch(Pstate)
    4862:	80 91 25 02 	lds	r24, 0x0225
    4866:	81 30       	cpi	r24, 0x01	; 1
    4868:	09 f4       	brne	.+2      	; 0x486c <operat+0x36a>
    486a:	ee c0       	rjmp	.+476    	; 0x4a48 <operat+0x546>
    486c:	82 30       	cpi	r24, 0x02	; 2
    486e:	d1 f4       	brne	.+52     	; 0x48a4 <operat+0x3a2>
			}
			break ;

			// multiplying operation
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
    4870:	60 91 41 02 	lds	r22, 0x0241
    4874:	70 91 42 02 	lds	r23, 0x0242
    4878:	80 91 43 02 	lds	r24, 0x0243
    487c:	90 91 44 02 	lds	r25, 0x0244
    4880:	20 91 45 02 	lds	r18, 0x0245
    4884:	30 91 46 02 	lds	r19, 0x0246
    4888:	40 91 47 02 	lds	r20, 0x0247
    488c:	50 91 48 02 	lds	r21, 0x0248
    4890:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    4894:	60 93 41 02 	sts	0x0241, r22
    4898:	70 93 42 02 	sts	0x0242, r23
    489c:	80 93 43 02 	sts	0x0243, r24
    48a0:	90 93 44 02 	sts	0x0244, r25
			break ;
		}

		Pop = 1;
    48a4:	81 e0       	ldi	r24, 0x01	; 1
    48a6:	80 93 bf 02 	sts	0x02BF, r24
		d = 1;
    48aa:	80 93 3b 02 	sts	0x023B, r24
		Pstate=0;

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    48ae:	80 91 7e 02 	lds	r24, 0x027E
    48b2:	81 30       	cpi	r24, 0x01	; 1
    48b4:	09 f0       	breq	.+2      	; 0x48b8 <operat+0x3b6>
    48b6:	40 cf       	rjmp	.-384    	; 0x4738 <operat+0x236>
    48b8:	10 92 3b 02 	sts	0x023B, r1
    48bc:	10 92 bf 02 	sts	0x02BF, r1
    48c0:	10 92 7e 02 	sts	0x027E, r1
    48c4:	39 cf       	rjmp	.-398    	; 0x4738 <operat+0x236>
	}
	// doing the operation on two numbers
	if (Sop==2)
	{

		switch (Sstate)
    48c6:	80 91 23 02 	lds	r24, 0x0223
    48ca:	81 30       	cpi	r24, 0x01	; 1
    48cc:	09 f4       	brne	.+2      	; 0x48d0 <operat+0x3ce>
    48ce:	5e c0       	rjmp	.+188    	; 0x498c <operat+0x48a>
    48d0:	82 30       	cpi	r24, 0x02	; 2
    48d2:	d1 f4       	brne	.+52     	; 0x4908 <operat+0x406>
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
			break ;
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
    48d4:	60 91 83 02 	lds	r22, 0x0283
    48d8:	70 91 84 02 	lds	r23, 0x0284
    48dc:	80 91 85 02 	lds	r24, 0x0285
    48e0:	90 91 86 02 	lds	r25, 0x0286
    48e4:	20 91 87 02 	lds	r18, 0x0287
    48e8:	30 91 88 02 	lds	r19, 0x0288
    48ec:	40 91 89 02 	lds	r20, 0x0289
    48f0:	50 91 8a 02 	lds	r21, 0x028A
    48f4:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    48f8:	60 93 83 02 	sts	0x0283, r22
    48fc:	70 93 84 02 	sts	0x0284, r23
    4900:	80 93 85 02 	sts	0x0285, r24
    4904:	90 93 86 02 	sts	0x0286, r25
			break ;
		}
		Sop=1;
    4908:	81 e0       	ldi	r24, 0x01	; 1
    490a:	80 93 24 02 	sts	0x0224, r24
		s=1;
    490e:	80 93 7d 02 	sts	0x027D, r24
		Pop=0;
    4912:	10 92 bf 02 	sts	0x02BF, r1
		d=0;
    4916:	10 92 3b 02 	sts	0x023B, r1
    491a:	3e cf       	rjmp	.-388    	; 0x4798 <operat+0x296>
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    491c:	80 91 28 02 	lds	r24, 0x0228
    4920:	81 30       	cpi	r24, 0x01	; 1
    4922:	09 f0       	breq	.+2      	; 0x4926 <operat+0x424>
    4924:	65 ce       	rjmp	.-822    	; 0x45f0 <operat+0xee>
	{
		sumArr[s] = MdArr[1];
    4926:	e6 2f       	mov	r30, r22
    4928:	ff 27       	eor	r31, r31
    492a:	e7 fd       	sbrc	r30, 7
    492c:	f0 95       	com	r31
    492e:	ee 0f       	add	r30, r30
    4930:	ff 1f       	adc	r31, r31
    4932:	ee 0f       	add	r30, r30
    4934:	ff 1f       	adc	r31, r31
    4936:	e1 58       	subi	r30, 0x81	; 129
    4938:	fd 4f       	sbci	r31, 0xFD	; 253
    493a:	80 91 41 02 	lds	r24, 0x0241
    493e:	90 91 42 02 	lds	r25, 0x0242
    4942:	a0 91 43 02 	lds	r26, 0x0243
    4946:	b0 91 44 02 	lds	r27, 0x0244
    494a:	80 83       	st	Z, r24
    494c:	91 83       	std	Z+1, r25	; 0x01
    494e:	a2 83       	std	Z+2, r26	; 0x02
    4950:	b3 83       	std	Z+3, r27	; 0x03
    4952:	4e ce       	rjmp	.-868    	; 0x45f0 <operat+0xee>
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    4954:	80 91 28 02 	lds	r24, 0x0228
    4958:	81 30       	cpi	r24, 0x01	; 1
    495a:	09 f0       	breq	.+2      	; 0x495e <operat+0x45c>
    495c:	1a cf       	rjmp	.-460    	; 0x4792 <operat+0x290>
	{
		sumArr[s] = MdArr[1];
    495e:	e6 2f       	mov	r30, r22
    4960:	ff 27       	eor	r31, r31
    4962:	e7 fd       	sbrc	r30, 7
    4964:	f0 95       	com	r31
    4966:	ee 0f       	add	r30, r30
    4968:	ff 1f       	adc	r31, r31
    496a:	ee 0f       	add	r30, r30
    496c:	ff 1f       	adc	r31, r31
    496e:	e1 58       	subi	r30, 0x81	; 129
    4970:	fd 4f       	sbci	r31, 0xFD	; 253
    4972:	80 91 41 02 	lds	r24, 0x0241
    4976:	90 91 42 02 	lds	r25, 0x0242
    497a:	a0 91 43 02 	lds	r26, 0x0243
    497e:	b0 91 44 02 	lds	r27, 0x0244
    4982:	80 83       	st	Z, r24
    4984:	91 83       	std	Z+1, r25	; 0x01
    4986:	a2 83       	std	Z+2, r26	; 0x02
    4988:	b3 83       	std	Z+3, r27	; 0x03
    498a:	03 cf       	rjmp	.-506    	; 0x4792 <operat+0x290>

		switch (Sstate)
		{
		// suming operation
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
    498c:	60 91 83 02 	lds	r22, 0x0283
    4990:	70 91 84 02 	lds	r23, 0x0284
    4994:	80 91 85 02 	lds	r24, 0x0285
    4998:	90 91 86 02 	lds	r25, 0x0286
    499c:	20 91 87 02 	lds	r18, 0x0287
    49a0:	30 91 88 02 	lds	r19, 0x0288
    49a4:	40 91 89 02 	lds	r20, 0x0289
    49a8:	50 91 8a 02 	lds	r21, 0x028A
    49ac:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    49b0:	60 93 83 02 	sts	0x0283, r22
    49b4:	70 93 84 02 	sts	0x0284, r23
    49b8:	80 93 85 02 	sts	0x0285, r24
    49bc:	90 93 86 02 	sts	0x0286, r25
    49c0:	a3 cf       	rjmp	.-186    	; 0x4908 <operat+0x406>
		switch(Pstate)
		{
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
    49c2:	e0 90 45 02 	lds	r14, 0x0245
    49c6:	f0 90 46 02 	lds	r15, 0x0246
    49ca:	00 91 47 02 	lds	r16, 0x0247
    49ce:	10 91 48 02 	lds	r17, 0x0248
    49d2:	c8 01       	movw	r24, r16
    49d4:	b7 01       	movw	r22, r14
    49d6:	20 e0       	ldi	r18, 0x00	; 0
    49d8:	30 e0       	ldi	r19, 0x00	; 0
    49da:	40 e0       	ldi	r20, 0x00	; 0
    49dc:	50 e0       	ldi	r21, 0x00	; 0
    49de:	0e 94 a5 11 	call	0x234a	; 0x234a <__eqsf2>
    49e2:	88 23       	and	r24, r24
    49e4:	09 f4       	brne	.+2      	; 0x49e8 <operat+0x4e6>
    49e6:	f3 c0       	rjmp	.+486    	; 0x4bce <operat+0x6cc>
				i=17;
			}
			else
				// dividing operation
			{
				MdArr[1]=MdArr[1] / MdArr[2] ;
    49e8:	60 91 41 02 	lds	r22, 0x0241
    49ec:	70 91 42 02 	lds	r23, 0x0242
    49f0:	80 91 43 02 	lds	r24, 0x0243
    49f4:	90 91 44 02 	lds	r25, 0x0244
    49f8:	a8 01       	movw	r20, r16
    49fa:	97 01       	movw	r18, r14
    49fc:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
    4a00:	60 93 41 02 	sts	0x0241, r22
    4a04:	70 93 42 02 	sts	0x0242, r23
    4a08:	80 93 43 02 	sts	0x0243, r24
    4a0c:	90 93 44 02 	sts	0x0244, r25
    4a10:	17 cf       	rjmp	.-466    	; 0x4840 <operat+0x33e>

		switch (Sstate)
		{
		// suming operation
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
    4a12:	60 91 83 02 	lds	r22, 0x0283
    4a16:	70 91 84 02 	lds	r23, 0x0284
    4a1a:	80 91 85 02 	lds	r24, 0x0285
    4a1e:	90 91 86 02 	lds	r25, 0x0286
    4a22:	20 91 87 02 	lds	r18, 0x0287
    4a26:	30 91 88 02 	lds	r19, 0x0288
    4a2a:	40 91 89 02 	lds	r20, 0x0289
    4a2e:	50 91 8a 02 	lds	r21, 0x028A
    4a32:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    4a36:	60 93 83 02 	sts	0x0283, r22
    4a3a:	70 93 84 02 	sts	0x0284, r23
    4a3e:	80 93 85 02 	sts	0x0285, r24
    4a42:	90 93 86 02 	sts	0x0286, r25
    4a46:	d1 ce       	rjmp	.-606    	; 0x47ea <operat+0x2e8>
		switch(Pstate)
		{
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
    4a48:	e0 90 45 02 	lds	r14, 0x0245
    4a4c:	f0 90 46 02 	lds	r15, 0x0246
    4a50:	00 91 47 02 	lds	r16, 0x0247
    4a54:	10 91 48 02 	lds	r17, 0x0248
    4a58:	c8 01       	movw	r24, r16
    4a5a:	b7 01       	movw	r22, r14
    4a5c:	20 e0       	ldi	r18, 0x00	; 0
    4a5e:	30 e0       	ldi	r19, 0x00	; 0
    4a60:	40 e0       	ldi	r20, 0x00	; 0
    4a62:	50 e0       	ldi	r21, 0x00	; 0
    4a64:	0e 94 a5 11 	call	0x234a	; 0x234a <__eqsf2>
    4a68:	88 23       	and	r24, r24
    4a6a:	09 f4       	brne	.+2      	; 0x4a6e <operat+0x56c>
    4a6c:	bc c0       	rjmp	.+376    	; 0x4be6 <operat+0x6e4>
				i=17;
			}
			else
				// dividing operation
			{
				MdArr[1]=MdArr[1] / MdArr[2] ;
    4a6e:	60 91 41 02 	lds	r22, 0x0241
    4a72:	70 91 42 02 	lds	r23, 0x0242
    4a76:	80 91 43 02 	lds	r24, 0x0243
    4a7a:	90 91 44 02 	lds	r25, 0x0244
    4a7e:	a8 01       	movw	r20, r16
    4a80:	97 01       	movw	r18, r14
    4a82:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
    4a86:	60 93 41 02 	sts	0x0241, r22
    4a8a:	70 93 42 02 	sts	0x0242, r23
    4a8e:	80 93 43 02 	sts	0x0243, r24
    4a92:	90 93 44 02 	sts	0x0244, r25
    4a96:	06 cf       	rjmp	.-500    	; 0x48a4 <operat+0x3a2>
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
    4a98:	0e 94 d6 21 	call	0x43ac	; 0x43ac <P_fun>
		sumArr[s] = MdArr[1];
    4a9c:	60 91 7d 02 	lds	r22, 0x027D
    4aa0:	e6 2f       	mov	r30, r22
    4aa2:	ff 27       	eor	r31, r31
    4aa4:	e7 fd       	sbrc	r30, 7
    4aa6:	f0 95       	com	r31
    4aa8:	ee 0f       	add	r30, r30
    4aaa:	ff 1f       	adc	r31, r31
    4aac:	ee 0f       	add	r30, r30
    4aae:	ff 1f       	adc	r31, r31
    4ab0:	e1 58       	subi	r30, 0x81	; 129
    4ab2:	fd 4f       	sbci	r31, 0xFD	; 253
    4ab4:	80 91 41 02 	lds	r24, 0x0241
    4ab8:	90 91 42 02 	lds	r25, 0x0242
    4abc:	a0 91 43 02 	lds	r26, 0x0243
    4ac0:	b0 91 44 02 	lds	r27, 0x0244
    4ac4:	80 83       	st	Z, r24
    4ac6:	91 83       	std	Z+1, r25	; 0x01
    4ac8:	a2 83       	std	Z+2, r26	; 0x02
    4aca:	b3 83       	std	Z+3, r27	; 0x03
    4acc:	90 91 25 02 	lds	r25, 0x0225
    4ad0:	70 91 24 02 	lds	r23, 0x0224
    4ad4:	5b ce       	rjmp	.-842    	; 0x478c <operat+0x28a>
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
    4ad6:	0e 94 d6 21 	call	0x43ac	; 0x43ac <P_fun>
		sumArr[s] = MdArr[1];
    4ada:	60 91 7d 02 	lds	r22, 0x027D
    4ade:	e6 2f       	mov	r30, r22
    4ae0:	ff 27       	eor	r31, r31
    4ae2:	e7 fd       	sbrc	r30, 7
    4ae4:	f0 95       	com	r31
    4ae6:	ee 0f       	add	r30, r30
    4ae8:	ff 1f       	adc	r31, r31
    4aea:	ee 0f       	add	r30, r30
    4aec:	ff 1f       	adc	r31, r31
    4aee:	e1 58       	subi	r30, 0x81	; 129
    4af0:	fd 4f       	sbci	r31, 0xFD	; 253
    4af2:	80 91 41 02 	lds	r24, 0x0241
    4af6:	90 91 42 02 	lds	r25, 0x0242
    4afa:	a0 91 43 02 	lds	r26, 0x0243
    4afe:	b0 91 44 02 	lds	r27, 0x0244
    4b02:	80 83       	st	Z, r24
    4b04:	91 83       	std	Z+1, r25	; 0x01
    4b06:	a2 83       	std	Z+2, r26	; 0x02
    4b08:	b3 83       	std	Z+3, r27	; 0x03
    4b0a:	90 91 25 02 	lds	r25, 0x0225
    4b0e:	70 91 24 02 	lds	r23, 0x0224
    4b12:	6b cd       	rjmp	.-1322   	; 0x45ea <operat+0xe8>

	cleanSc = 1 ;

	if (Pstate==1 || Pstate==2 )
	{
		P_fun ();
    4b14:	0e 94 d6 21 	call	0x43ac	; 0x43ac <P_fun>
		// Exception for infinity loop (dividing by zero)
		if(i==17){}
    4b18:	80 91 dc 01 	lds	r24, 0x01DC
    4b1c:	81 31       	cpi	r24, 0x11	; 17
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <operat+0x620>
    4b20:	7d cd       	rjmp	.-1286   	; 0x461c <operat+0x11a>
		else
			// printing the result
		{
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    4b22:	82 e0       	ldi	r24, 0x02	; 2
    4b24:	61 e0       	ldi	r22, 0x01	; 1
    4b26:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
			CLCD_voidSendFloat(MdArr[1]);
    4b2a:	60 91 41 02 	lds	r22, 0x0241
    4b2e:	70 91 42 02 	lds	r23, 0x0242
    4b32:	80 91 43 02 	lds	r24, 0x0243
    4b36:	90 91 44 02 	lds	r25, 0x0244
    4b3a:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <CLCD_voidSendFloat>
    4b3e:	6e cd       	rjmp	.-1316   	; 0x461c <operat+0x11a>
	}
	// doing the operation on two numbers
	if (Sop==2)
	{

		switch (Sstate)
    4b40:	80 91 23 02 	lds	r24, 0x0223
    4b44:	81 30       	cpi	r24, 0x01	; 1
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <operat+0x648>
    4b48:	79 c0       	rjmp	.+242    	; 0x4c3c <operat+0x73a>
    4b4a:	82 30       	cpi	r24, 0x02	; 2
    4b4c:	d1 f4       	brne	.+52     	; 0x4b82 <operat+0x680>
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
			break ;
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
    4b4e:	60 91 83 02 	lds	r22, 0x0283
    4b52:	70 91 84 02 	lds	r23, 0x0284
    4b56:	80 91 85 02 	lds	r24, 0x0285
    4b5a:	90 91 86 02 	lds	r25, 0x0286
    4b5e:	20 91 87 02 	lds	r18, 0x0287
    4b62:	30 91 88 02 	lds	r19, 0x0288
    4b66:	40 91 89 02 	lds	r20, 0x0289
    4b6a:	50 91 8a 02 	lds	r21, 0x028A
    4b6e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    4b72:	60 93 83 02 	sts	0x0283, r22
    4b76:	70 93 84 02 	sts	0x0284, r23
    4b7a:	80 93 85 02 	sts	0x0285, r24
    4b7e:	90 93 86 02 	sts	0x0286, r25
			break ;
		}
		Sop=1;
    4b82:	81 e0       	ldi	r24, 0x01	; 1
    4b84:	80 93 24 02 	sts	0x0224, r24
		s=1;
    4b88:	80 93 7d 02 	sts	0x027D, r24
		Pop=0;
    4b8c:	10 92 bf 02 	sts	0x02BF, r1
		d=0;
    4b90:	10 92 3b 02 	sts	0x023B, r1
    4b94:	81 cd       	rjmp	.-1278   	; 0x4698 <operat+0x196>
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    4b96:	80 91 28 02 	lds	r24, 0x0228
    4b9a:	81 30       	cpi	r24, 0x01	; 1
    4b9c:	09 f0       	breq	.+2      	; 0x4ba0 <operat+0x69e>
    4b9e:	79 cd       	rjmp	.-1294   	; 0x4692 <operat+0x190>
	{
		sumArr[s] = MdArr[1];
    4ba0:	e6 2f       	mov	r30, r22
    4ba2:	ff 27       	eor	r31, r31
    4ba4:	e7 fd       	sbrc	r30, 7
    4ba6:	f0 95       	com	r31
    4ba8:	ee 0f       	add	r30, r30
    4baa:	ff 1f       	adc	r31, r31
    4bac:	ee 0f       	add	r30, r30
    4bae:	ff 1f       	adc	r31, r31
    4bb0:	e1 58       	subi	r30, 0x81	; 129
    4bb2:	fd 4f       	sbci	r31, 0xFD	; 253
    4bb4:	80 91 41 02 	lds	r24, 0x0241
    4bb8:	90 91 42 02 	lds	r25, 0x0242
    4bbc:	a0 91 43 02 	lds	r26, 0x0243
    4bc0:	b0 91 44 02 	lds	r27, 0x0244
    4bc4:	80 83       	st	Z, r24
    4bc6:	91 83       	std	Z+1, r25	; 0x01
    4bc8:	a2 83       	std	Z+2, r26	; 0x02
    4bca:	b3 83       	std	Z+3, r27	; 0x03
    4bcc:	62 cd       	rjmp	.-1340   	; 0x4692 <operat+0x190>
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
			{
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    4bce:	82 e0       	ldi	r24, 0x02	; 2
    4bd0:	61 e0       	ldi	r22, 0x01	; 1
    4bd2:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Math ERROR");
    4bd6:	89 e7       	ldi	r24, 0x79	; 121
    4bd8:	90 e0       	ldi	r25, 0x00	; 0
    4bda:	0e 94 c1 19 	call	0x3382	; 0x3382 <CLCD_voidSendString>
				i=17;
    4bde:	81 e1       	ldi	r24, 0x11	; 17
    4be0:	80 93 dc 01 	sts	0x01DC, r24
    4be4:	2d ce       	rjmp	.-934    	; 0x4840 <operat+0x33e>
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
			{
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    4be6:	82 e0       	ldi	r24, 0x02	; 2
    4be8:	61 e0       	ldi	r22, 0x01	; 1
    4bea:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Math ERROR");
    4bee:	89 e7       	ldi	r24, 0x79	; 121
    4bf0:	90 e0       	ldi	r25, 0x00	; 0
    4bf2:	0e 94 c1 19 	call	0x3382	; 0x3382 <CLCD_voidSendString>
				i=17;
    4bf6:	81 e1       	ldi	r24, 0x11	; 17
    4bf8:	80 93 dc 01 	sts	0x01DC, r24
    4bfc:	53 ce       	rjmp	.-858    	; 0x48a4 <operat+0x3a2>
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
    4bfe:	0e 94 d6 21 	call	0x43ac	; 0x43ac <P_fun>
		sumArr[s] = MdArr[1];
    4c02:	60 91 7d 02 	lds	r22, 0x027D
    4c06:	e6 2f       	mov	r30, r22
    4c08:	ff 27       	eor	r31, r31
    4c0a:	e7 fd       	sbrc	r30, 7
    4c0c:	f0 95       	com	r31
    4c0e:	ee 0f       	add	r30, r30
    4c10:	ff 1f       	adc	r31, r31
    4c12:	ee 0f       	add	r30, r30
    4c14:	ff 1f       	adc	r31, r31
    4c16:	e1 58       	subi	r30, 0x81	; 129
    4c18:	fd 4f       	sbci	r31, 0xFD	; 253
    4c1a:	80 91 41 02 	lds	r24, 0x0241
    4c1e:	90 91 42 02 	lds	r25, 0x0242
    4c22:	a0 91 43 02 	lds	r26, 0x0243
    4c26:	b0 91 44 02 	lds	r27, 0x0244
    4c2a:	80 83       	st	Z, r24
    4c2c:	91 83       	std	Z+1, r25	; 0x01
    4c2e:	a2 83       	std	Z+2, r26	; 0x02
    4c30:	b3 83       	std	Z+3, r27	; 0x03
    4c32:	90 91 25 02 	lds	r25, 0x0225
    4c36:	70 91 24 02 	lds	r23, 0x0224
    4c3a:	28 cd       	rjmp	.-1456   	; 0x468c <operat+0x18a>

		switch (Sstate)
		{
		// suming operation
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
    4c3c:	60 91 83 02 	lds	r22, 0x0283
    4c40:	70 91 84 02 	lds	r23, 0x0284
    4c44:	80 91 85 02 	lds	r24, 0x0285
    4c48:	90 91 86 02 	lds	r25, 0x0286
    4c4c:	20 91 87 02 	lds	r18, 0x0287
    4c50:	30 91 88 02 	lds	r19, 0x0288
    4c54:	40 91 89 02 	lds	r20, 0x0289
    4c58:	50 91 8a 02 	lds	r21, 0x028A
    4c5c:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    4c60:	60 93 83 02 	sts	0x0283, r22
    4c64:	70 93 84 02 	sts	0x0284, r23
    4c68:	80 93 85 02 	sts	0x0285, r24
    4c6c:	90 93 86 02 	sts	0x0286, r25
    4c70:	88 cf       	rjmp	.-240    	; 0x4b82 <operat+0x680>

00004c72 <S_fun>:
	}
}

// suming or minus operation function
void S_fun (void)
{
    4c72:	cf 92       	push	r12
    4c74:	df 92       	push	r13
    4c76:	ef 92       	push	r14
    4c78:	ff 92       	push	r15
    4c7a:	0f 93       	push	r16
    4c7c:	1f 93       	push	r17
	Preset =1 ;
    4c7e:	81 e0       	ldi	r24, 0x01	; 1
    4c80:	80 93 7e 02 	sts	0x027E, r24
	Sop++;
    4c84:	00 91 24 02 	lds	r16, 0x0224
    4c88:	0f 5f       	subi	r16, 0xFF	; 255
    4c8a:	00 93 24 02 	sts	0x0224, r16
	s++ ;
    4c8e:	10 91 7d 02 	lds	r17, 0x027D
    4c92:	1f 5f       	subi	r17, 0xFF	; 255
    4c94:	10 93 7d 02 	sts	0x027D, r17
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
    4c98:	e0 91 29 02 	lds	r30, 0x0229
    4c9c:	ff 27       	eor	r31, r31
    4c9e:	e7 fd       	sbrc	r30, 7
    4ca0:	f0 95       	com	r31
    4ca2:	ee 0f       	add	r30, r30
    4ca4:	ff 1f       	adc	r31, r31
    4ca6:	ee 0f       	add	r30, r30
    4ca8:	ff 1f       	adc	r31, r31
    4caa:	e0 54       	subi	r30, 0x40	; 64
    4cac:	fd 4f       	sbci	r31, 0xFD	; 253
    4cae:	20 81       	ld	r18, Z
    4cb0:	31 81       	ldd	r19, Z+1	; 0x01
    4cb2:	42 81       	ldd	r20, Z+2	; 0x02
    4cb4:	53 81       	ldd	r21, Z+3	; 0x03
    4cb6:	e1 2f       	mov	r30, r17
    4cb8:	ff 27       	eor	r31, r31
    4cba:	e7 fd       	sbrc	r30, 7
    4cbc:	f0 95       	com	r31
    4cbe:	ee 0f       	add	r30, r30
    4cc0:	ff 1f       	adc	r31, r31
    4cc2:	ee 0f       	add	r30, r30
    4cc4:	ff 1f       	adc	r31, r31
    4cc6:	e1 58       	subi	r30, 0x81	; 129
    4cc8:	fd 4f       	sbci	r31, 0xFD	; 253
    4cca:	20 83       	st	Z, r18
    4ccc:	31 83       	std	Z+1, r19	; 0x01
    4cce:	42 83       	std	Z+2, r20	; 0x02
    4cd0:	53 83       	std	Z+3, r21	; 0x03
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
    4cd2:	60 91 25 02 	lds	r22, 0x0225
    4cd6:	86 2f       	mov	r24, r22
    4cd8:	81 50       	subi	r24, 0x01	; 1
    4cda:	82 30       	cpi	r24, 0x02	; 2
    4cdc:	08 f4       	brcc	.+2      	; 0x4ce0 <S_fun+0x6e>
    4cde:	58 c0       	rjmp	.+176    	; 0x4d90 <S_fun+0x11e>
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    4ce0:	65 30       	cpi	r22, 0x05	; 5
    4ce2:	01 f1       	breq	.+64     	; 0x4d24 <S_fun+0xb2>
	{
		sumArr[s] = MdArr[1];
	}
	// doing the operation on two numbers
	if (Sop==2)
    4ce4:	02 30       	cpi	r16, 0x02	; 2
    4ce6:	39 f0       	breq	.+14     	; 0x4cf6 <S_fun+0x84>
		Pop=0;
		d=0;

	}

}
    4ce8:	1f 91       	pop	r17
    4cea:	0f 91       	pop	r16
    4cec:	ff 90       	pop	r15
    4cee:	ef 90       	pop	r14
    4cf0:	df 90       	pop	r13
    4cf2:	cf 90       	pop	r12
    4cf4:	08 95       	ret
	}
	// doing the operation on two numbers
	if (Sop==2)
	{

		switch (Sstate)
    4cf6:	80 91 23 02 	lds	r24, 0x0223
    4cfa:	81 30       	cpi	r24, 0x01	; 1
    4cfc:	09 f4       	brne	.+2      	; 0x4d00 <S_fun+0x8e>
    4cfe:	78 c0       	rjmp	.+240    	; 0x4df0 <S_fun+0x17e>
    4d00:	82 30       	cpi	r24, 0x02	; 2
    4d02:	59 f1       	breq	.+86     	; 0x4d5a <S_fun+0xe8>
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
			break ;
		}
		Sop=1;
    4d04:	81 e0       	ldi	r24, 0x01	; 1
    4d06:	80 93 24 02 	sts	0x0224, r24
		s=1;
    4d0a:	80 93 7d 02 	sts	0x027D, r24
		Pop=0;
    4d0e:	10 92 bf 02 	sts	0x02BF, r1
		d=0;
    4d12:	10 92 3b 02 	sts	0x023B, r1

	}

}
    4d16:	1f 91       	pop	r17
    4d18:	0f 91       	pop	r16
    4d1a:	ff 90       	pop	r15
    4d1c:	ef 90       	pop	r14
    4d1e:	df 90       	pop	r13
    4d20:	cf 90       	pop	r12
    4d22:	08 95       	ret
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    4d24:	80 91 28 02 	lds	r24, 0x0228
    4d28:	81 30       	cpi	r24, 0x01	; 1
    4d2a:	e1 f6       	brne	.-72     	; 0x4ce4 <S_fun+0x72>
	{
		sumArr[s] = MdArr[1];
    4d2c:	e1 2f       	mov	r30, r17
    4d2e:	ff 27       	eor	r31, r31
    4d30:	e7 fd       	sbrc	r30, 7
    4d32:	f0 95       	com	r31
    4d34:	ee 0f       	add	r30, r30
    4d36:	ff 1f       	adc	r31, r31
    4d38:	ee 0f       	add	r30, r30
    4d3a:	ff 1f       	adc	r31, r31
    4d3c:	e1 58       	subi	r30, 0x81	; 129
    4d3e:	fd 4f       	sbci	r31, 0xFD	; 253
    4d40:	80 91 41 02 	lds	r24, 0x0241
    4d44:	90 91 42 02 	lds	r25, 0x0242
    4d48:	a0 91 43 02 	lds	r26, 0x0243
    4d4c:	b0 91 44 02 	lds	r27, 0x0244
    4d50:	80 83       	st	Z, r24
    4d52:	91 83       	std	Z+1, r25	; 0x01
    4d54:	a2 83       	std	Z+2, r26	; 0x02
    4d56:	b3 83       	std	Z+3, r27	; 0x03
    4d58:	c5 cf       	rjmp	.-118    	; 0x4ce4 <S_fun+0x72>
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
			break ;
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
    4d5a:	60 91 83 02 	lds	r22, 0x0283
    4d5e:	70 91 84 02 	lds	r23, 0x0284
    4d62:	80 91 85 02 	lds	r24, 0x0285
    4d66:	90 91 86 02 	lds	r25, 0x0286
    4d6a:	20 91 87 02 	lds	r18, 0x0287
    4d6e:	30 91 88 02 	lds	r19, 0x0288
    4d72:	40 91 89 02 	lds	r20, 0x0289
    4d76:	50 91 8a 02 	lds	r21, 0x028A
    4d7a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    4d7e:	60 93 83 02 	sts	0x0283, r22
    4d82:	70 93 84 02 	sts	0x0284, r23
    4d86:	80 93 85 02 	sts	0x0285, r24
    4d8a:	90 93 86 02 	sts	0x0286, r25
    4d8e:	ba cf       	rjmp	.-140    	; 0x4d04 <S_fun+0x92>
}

// Multiplying or Dividing operation function
void P_fun (void)
{
	Pop ++ ;
    4d90:	80 91 bf 02 	lds	r24, 0x02BF
    4d94:	8f 5f       	subi	r24, 0xFF	; 255
    4d96:	80 93 bf 02 	sts	0x02BF, r24
	d++;
    4d9a:	e0 91 3b 02 	lds	r30, 0x023B
    4d9e:	ef 5f       	subi	r30, 0xFF	; 255
    4da0:	e0 93 3b 02 	sts	0x023B, r30
	// MdArr holding first and second number
	MdArr[d] = opArr[z] ;
    4da4:	ff 27       	eor	r31, r31
    4da6:	e7 fd       	sbrc	r30, 7
    4da8:	f0 95       	com	r31
    4daa:	ee 0f       	add	r30, r30
    4dac:	ff 1f       	adc	r31, r31
    4dae:	ee 0f       	add	r30, r30
    4db0:	ff 1f       	adc	r31, r31
    4db2:	e3 5c       	subi	r30, 0xC3	; 195
    4db4:	fd 4f       	sbci	r31, 0xFD	; 253
    4db6:	20 83       	st	Z, r18
    4db8:	31 83       	std	Z+1, r19	; 0x01
    4dba:	42 83       	std	Z+2, r20	; 0x02
    4dbc:	53 83       	std	Z+3, r21	; 0x03
	// doing the operation on two numbers
	if (Pop==2)
    4dbe:	82 30       	cpi	r24, 0x02	; 2
    4dc0:	91 f1       	breq	.+100    	; 0x4e26 <S_fun+0x1b4>
	sumArr[s] = opArr[z] ;
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
		sumArr[s] = MdArr[1];
    4dc2:	e1 2f       	mov	r30, r17
    4dc4:	ff 27       	eor	r31, r31
    4dc6:	e7 fd       	sbrc	r30, 7
    4dc8:	f0 95       	com	r31
    4dca:	ee 0f       	add	r30, r30
    4dcc:	ff 1f       	adc	r31, r31
    4dce:	ee 0f       	add	r30, r30
    4dd0:	ff 1f       	adc	r31, r31
    4dd2:	e1 58       	subi	r30, 0x81	; 129
    4dd4:	fd 4f       	sbci	r31, 0xFD	; 253
    4dd6:	80 91 41 02 	lds	r24, 0x0241
    4dda:	90 91 42 02 	lds	r25, 0x0242
    4dde:	a0 91 43 02 	lds	r26, 0x0243
    4de2:	b0 91 44 02 	lds	r27, 0x0244
    4de6:	80 83       	st	Z, r24
    4de8:	91 83       	std	Z+1, r25	; 0x01
    4dea:	a2 83       	std	Z+2, r26	; 0x02
    4dec:	b3 83       	std	Z+3, r27	; 0x03
    4dee:	78 cf       	rjmp	.-272    	; 0x4ce0 <S_fun+0x6e>

		switch (Sstate)
		{
		// suming operation
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
    4df0:	60 91 83 02 	lds	r22, 0x0283
    4df4:	70 91 84 02 	lds	r23, 0x0284
    4df8:	80 91 85 02 	lds	r24, 0x0285
    4dfc:	90 91 86 02 	lds	r25, 0x0286
    4e00:	20 91 87 02 	lds	r18, 0x0287
    4e04:	30 91 88 02 	lds	r19, 0x0288
    4e08:	40 91 89 02 	lds	r20, 0x0289
    4e0c:	50 91 8a 02 	lds	r21, 0x028A
    4e10:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    4e14:	60 93 83 02 	sts	0x0283, r22
    4e18:	70 93 84 02 	sts	0x0284, r23
    4e1c:	80 93 85 02 	sts	0x0285, r24
    4e20:	90 93 86 02 	sts	0x0286, r25
    4e24:	6f cf       	rjmp	.-290    	; 0x4d04 <S_fun+0x92>
	MdArr[d] = opArr[z] ;
	// doing the operation on two numbers
	if (Pop==2)
	{

		switch(Pstate)
    4e26:	61 30       	cpi	r22, 0x01	; 1
    4e28:	a9 f0       	breq	.+42     	; 0x4e54 <S_fun+0x1e2>
    4e2a:	62 30       	cpi	r22, 0x02	; 2
    4e2c:	09 f4       	brne	.+2      	; 0x4e30 <S_fun+0x1be>
    4e2e:	46 c0       	rjmp	.+140    	; 0x4ebc <S_fun+0x24a>
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
			break ;
		}

		Pop = 1;
    4e30:	81 e0       	ldi	r24, 0x01	; 1
    4e32:	80 93 bf 02 	sts	0x02BF, r24
		d = 1;
    4e36:	80 93 3b 02 	sts	0x023B, r24
		Pstate=0;
    4e3a:	10 92 25 02 	sts	0x0225, r1

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    4e3e:	80 91 7e 02 	lds	r24, 0x027E
    4e42:	81 30       	cpi	r24, 0x01	; 1
    4e44:	79 f1       	breq	.+94     	; 0x4ea4 <S_fun+0x232>
		// Exception to tell the S_fun to start calculating the all number pervious the equal operator
		if (state==1){Pstate=5;}
    4e46:	80 91 28 02 	lds	r24, 0x0228
    4e4a:	81 30       	cpi	r24, 0x01	; 1
    4e4c:	91 f1       	breq	.+100    	; 0x4eb2 <S_fun+0x240>
    4e4e:	60 91 25 02 	lds	r22, 0x0225
    4e52:	b7 cf       	rjmp	.-146    	; 0x4dc2 <S_fun+0x150>
		switch(Pstate)
		{
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
    4e54:	c0 90 45 02 	lds	r12, 0x0245
    4e58:	d0 90 46 02 	lds	r13, 0x0246
    4e5c:	e0 90 47 02 	lds	r14, 0x0247
    4e60:	f0 90 48 02 	lds	r15, 0x0248
    4e64:	c7 01       	movw	r24, r14
    4e66:	b6 01       	movw	r22, r12
    4e68:	20 e0       	ldi	r18, 0x00	; 0
    4e6a:	30 e0       	ldi	r19, 0x00	; 0
    4e6c:	40 e0       	ldi	r20, 0x00	; 0
    4e6e:	50 e0       	ldi	r21, 0x00	; 0
    4e70:	0e 94 a5 11 	call	0x234a	; 0x234a <__eqsf2>
    4e74:	88 23       	and	r24, r24
    4e76:	e9 f1       	breq	.+122    	; 0x4ef2 <S_fun+0x280>
				i=17;
			}
			else
				// dividing operation
			{
				MdArr[1]=MdArr[1] / MdArr[2] ;
    4e78:	60 91 41 02 	lds	r22, 0x0241
    4e7c:	70 91 42 02 	lds	r23, 0x0242
    4e80:	80 91 43 02 	lds	r24, 0x0243
    4e84:	90 91 44 02 	lds	r25, 0x0244
    4e88:	a7 01       	movw	r20, r14
    4e8a:	96 01       	movw	r18, r12
    4e8c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
    4e90:	60 93 41 02 	sts	0x0241, r22
    4e94:	70 93 42 02 	sts	0x0242, r23
    4e98:	80 93 43 02 	sts	0x0243, r24
    4e9c:	90 93 44 02 	sts	0x0244, r25
			break ;
		}

		Pop = 1;
		d = 1;
		Pstate=0;
    4ea0:	10 92 25 02 	sts	0x0225, r1

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    4ea4:	10 92 3b 02 	sts	0x023B, r1
    4ea8:	10 92 bf 02 	sts	0x02BF, r1
    4eac:	10 92 7e 02 	sts	0x027E, r1
    4eb0:	ca cf       	rjmp	.-108    	; 0x4e46 <S_fun+0x1d4>
		// Exception to tell the S_fun to start calculating the all number pervious the equal operator
		if (state==1){Pstate=5;}
    4eb2:	85 e0       	ldi	r24, 0x05	; 5
    4eb4:	80 93 25 02 	sts	0x0225, r24
    4eb8:	65 e0       	ldi	r22, 0x05	; 5
    4eba:	83 cf       	rjmp	.-250    	; 0x4dc2 <S_fun+0x150>
			}
			break ;

			// multiplying operation
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
    4ebc:	60 91 41 02 	lds	r22, 0x0241
    4ec0:	70 91 42 02 	lds	r23, 0x0242
    4ec4:	80 91 43 02 	lds	r24, 0x0243
    4ec8:	90 91 44 02 	lds	r25, 0x0244
    4ecc:	20 91 45 02 	lds	r18, 0x0245
    4ed0:	30 91 46 02 	lds	r19, 0x0246
    4ed4:	40 91 47 02 	lds	r20, 0x0247
    4ed8:	50 91 48 02 	lds	r21, 0x0248
    4edc:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    4ee0:	60 93 41 02 	sts	0x0241, r22
    4ee4:	70 93 42 02 	sts	0x0242, r23
    4ee8:	80 93 43 02 	sts	0x0243, r24
    4eec:	90 93 44 02 	sts	0x0244, r25
    4ef0:	d7 cf       	rjmp	.-82     	; 0x4ea0 <S_fun+0x22e>
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
			{
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    4ef2:	82 e0       	ldi	r24, 0x02	; 2
    4ef4:	61 e0       	ldi	r22, 0x01	; 1
    4ef6:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Math ERROR");
    4efa:	89 e7       	ldi	r24, 0x79	; 121
    4efc:	90 e0       	ldi	r25, 0x00	; 0
    4efe:	0e 94 c1 19 	call	0x3382	; 0x3382 <CLCD_voidSendString>
				i=17;
    4f02:	81 e1       	ldi	r24, 0x11	; 17
    4f04:	80 93 dc 01 	sts	0x01DC, r24
    4f08:	00 91 24 02 	lds	r16, 0x0224
    4f0c:	10 91 7d 02 	lds	r17, 0x027D
    4f10:	8f cf       	rjmp	.-226    	; 0x4e30 <S_fun+0x1be>

00004f12 <APP_voidCalculatorMode>:
/**************************************************************************/


/*All application logic*/
void APP_voidCalculatorMode (void)
{
    4f12:	6f 92       	push	r6
    4f14:	7f 92       	push	r7
    4f16:	8f 92       	push	r8
    4f18:	9f 92       	push	r9
    4f1a:	af 92       	push	r10
    4f1c:	bf 92       	push	r11
    4f1e:	cf 92       	push	r12
    4f20:	df 92       	push	r13
    4f22:	ef 92       	push	r14
    4f24:	ff 92       	push	r15
    4f26:	0f 93       	push	r16
    4f28:	1f 93       	push	r17
    4f2a:	cf 93       	push	r28
    4f2c:	df 93       	push	r29
	KPD_enter = KPD_u8GetPressed();
    4f2e:	0e 94 70 18 	call	0x30e0	; 0x30e0 <KPD_u8GetPressed>
    4f32:	80 93 26 02 	sts	0x0226, r24
	if(KPD_enter != NOTPRESSED)
    4f36:	8f 3f       	cpi	r24, 0xFF	; 255
    4f38:	09 f4       	brne	.+2      	; 0x4f3c <APP_voidCalculatorMode+0x2a>
    4f3a:	52 c0       	rjmp	.+164    	; 0x4fe0 <APP_voidCalculatorMode+0xce>
	{
		// exception for erasing the screen after click on (C) key
		if ( (KPD_enter == 'C') && (cleanSc == 1) )
    4f3c:	83 34       	cpi	r24, 0x43	; 67
    4f3e:	09 f4       	brne	.+2      	; 0x4f42 <APP_voidCalculatorMode+0x30>
    4f40:	5e c0       	rjmp	.+188    	; 0x4ffe <APP_voidCalculatorMode+0xec>


		if (KPD_enter != 'C')
		{
			// exception for entering two operations next to each other
			if ( ((KPD_enter == '/') || (KPD_enter == '*')|| (KPD_enter == '+')|| (KPD_enter == '-')) && ((enteranceArr[i-1] == '/') || (enteranceArr[i-1] == '*')|| (enteranceArr[i-1] == '+')|| (enteranceArr[i-1] == '-')) )
    4f42:	8f 32       	cpi	r24, 0x2F	; 47
    4f44:	09 f4       	brne	.+2      	; 0x4f48 <APP_voidCalculatorMode+0x36>
    4f46:	3e c1       	rjmp	.+636    	; 0x51c4 <APP_voidCalculatorMode+0x2b2>
    4f48:	8a 32       	cpi	r24, 0x2A	; 42
    4f4a:	09 f4       	brne	.+2      	; 0x4f4e <APP_voidCalculatorMode+0x3c>
    4f4c:	3b c1       	rjmp	.+630    	; 0x51c4 <APP_voidCalculatorMode+0x2b2>
    4f4e:	8b 32       	cpi	r24, 0x2B	; 43
    4f50:	09 f4       	brne	.+2      	; 0x4f54 <APP_voidCalculatorMode+0x42>
    4f52:	38 c1       	rjmp	.+624    	; 0x51c4 <APP_voidCalculatorMode+0x2b2>
    4f54:	8d 32       	cpi	r24, 0x2D	; 45
    4f56:	09 f4       	brne	.+2      	; 0x4f5a <APP_voidCalculatorMode+0x48>
    4f58:	35 c1       	rjmp	.+618    	; 0x51c4 <APP_voidCalculatorMode+0x2b2>
    4f5a:	60 91 dc 01 	lds	r22, 0x01DC
    4f5e:	46 c1       	rjmp	.+652    	; 0x51ec <APP_voidCalculatorMode+0x2da>
}

// resting all variables
void reset(void)
{
	arr[0]=0; x=0;
    4f60:	80 e0       	ldi	r24, 0x00	; 0
    4f62:	90 e0       	ldi	r25, 0x00	; 0
    4f64:	a0 e0       	ldi	r26, 0x00	; 0
    4f66:	b0 e0       	ldi	r27, 0x00	; 0
    4f68:	80 93 de 01 	sts	0x01DE, r24
    4f6c:	90 93 df 01 	sts	0x01DF, r25
    4f70:	a0 93 e0 01 	sts	0x01E0, r26
    4f74:	b0 93 e1 01 	sts	0x01E1, r27
    4f78:	80 93 1e 02 	sts	0x021E, r24
    4f7c:	90 93 1f 02 	sts	0x021F, r25
    4f80:	a0 93 20 02 	sts	0x0220, r26
    4f84:	b0 93 21 02 	sts	0x0221, r27
	n=0; z=0; s=0; d=0; opArr[0]=0;
    4f88:	10 92 22 02 	sts	0x0222, r1
    4f8c:	10 92 29 02 	sts	0x0229, r1
    4f90:	10 92 7d 02 	sts	0x027D, r1
    4f94:	10 92 3b 02 	sts	0x023B, r1
    4f98:	80 93 c0 02 	sts	0x02C0, r24
    4f9c:	90 93 c1 02 	sts	0x02C1, r25
    4fa0:	a0 93 c2 02 	sts	0x02C2, r26
    4fa4:	b0 93 c3 02 	sts	0x02C3, r27
	Pop=0; Sop=0; sumArr[0]=0; MdArr[0]=0;
    4fa8:	10 92 bf 02 	sts	0x02BF, r1
    4fac:	10 92 24 02 	sts	0x0224, r1
    4fb0:	80 93 7f 02 	sts	0x027F, r24
    4fb4:	90 93 80 02 	sts	0x0280, r25
    4fb8:	a0 93 81 02 	sts	0x0281, r26
    4fbc:	b0 93 82 02 	sts	0x0282, r27
    4fc0:	80 93 3d 02 	sts	0x023D, r24
    4fc4:	90 93 3e 02 	sts	0x023E, r25
    4fc8:	a0 93 3f 02 	sts	0x023F, r26
    4fcc:	b0 93 40 02 	sts	0x0240, r27
	Sstate=0;state=0;Pstate=0; i=0;
    4fd0:	10 92 23 02 	sts	0x0223, r1
    4fd4:	10 92 28 02 	sts	0x0228, r1
    4fd8:	10 92 25 02 	sts	0x0225, r1
    4fdc:	10 92 dc 01 	sts	0x01DC, r1
			}

		}
		reset();
	}
}
    4fe0:	df 91       	pop	r29
    4fe2:	cf 91       	pop	r28
    4fe4:	1f 91       	pop	r17
    4fe6:	0f 91       	pop	r16
    4fe8:	ff 90       	pop	r15
    4fea:	ef 90       	pop	r14
    4fec:	df 90       	pop	r13
    4fee:	cf 90       	pop	r12
    4ff0:	bf 90       	pop	r11
    4ff2:	af 90       	pop	r10
    4ff4:	9f 90       	pop	r9
    4ff6:	8f 90       	pop	r8
    4ff8:	7f 90       	pop	r7
    4ffa:	6f 90       	pop	r6
    4ffc:	08 95       	ret
{
	KPD_enter = KPD_u8GetPressed();
	if(KPD_enter != NOTPRESSED)
	{
		// exception for erasing the screen after click on (C) key
		if ( (KPD_enter == 'C') && (cleanSc == 1) )
    4ffe:	80 91 3a 02 	lds	r24, 0x023A
    5002:	81 30       	cpi	r24, 0x01	; 1
    5004:	09 f4       	brne	.+2      	; 0x5008 <APP_voidCalculatorMode+0xf6>
    5006:	fa c2       	rjmp	.+1524   	; 0x55fc <APP_voidCalculatorMode+0x6ea>
    5008:	60 91 dc 01 	lds	r22, 0x01DC
		}

		// clearing the previous cell
		if (KPD_enter == 'C')
		{
			if(i != 0)
    500c:	66 23       	and	r22, r22
    500e:	09 f0       	breq	.+2      	; 0x5012 <APP_voidCalculatorMode+0x100>
    5010:	05 c1       	rjmp	.+522    	; 0x521c <APP_voidCalculatorMode+0x30a>
    5012:	80 91 26 02 	lds	r24, 0x0226
			}*/

	}

	// Calculating the result and reading the entire line of entered number and operations
	if (KPD_enter == '=')
    5016:	8d 33       	cpi	r24, 0x3D	; 61
    5018:	19 f7       	brne	.-58     	; 0x4fe0 <APP_voidCalculatorMode+0xce>
	{
		k = i ;
    501a:	80 91 dc 01 	lds	r24, 0x01DC
    501e:	80 93 27 02 	sts	0x0227, r24
		CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    5022:	82 e0       	ldi	r24, 0x02	; 2
    5024:	61 e0       	ldi	r22, 0x01	; 1
    5026:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
		for(i=0 ; i <= k ; i++)
    502a:	10 92 dc 01 	sts	0x01DC, r1
    502e:	60 e0       	ldi	r22, 0x00	; 0
void operat (void)
{
	z++;
	opArr[z]=arr[n];
	n++;
	arr[n]=0 ;
    5030:	0f 2e       	mov	r0, r31
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	8f 2e       	mov	r8, r31
    5036:	f0 e0       	ldi	r31, 0x00	; 0
    5038:	9f 2e       	mov	r9, r31
    503a:	f0 e0       	ldi	r31, 0x00	; 0
    503c:	af 2e       	mov	r10, r31
    503e:	f0 e0       	ldi	r31, 0x00	; 0
    5040:	bf 2e       	mov	r11, r31
    5042:	f0 2d       	mov	r31, r0
	{

	case '/':

		P_fun ();
		Pstate=1;
    5044:	77 24       	eor	r7, r7
    5046:	73 94       	inc	r7
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
			{
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
				CLCD_voidSendString((u8*)"Math ERROR");
				i=17;
    5048:	11 e1       	ldi	r17, 0x11	; 17
    504a:	61 2e       	mov	r6, r17
    504c:	55 c0       	rjmp	.+170    	; 0x50f8 <APP_voidCalculatorMode+0x1e6>

			// making exception for negative number
			if ( (n==0) && (keyPressed== '-') ) {sign = 1; }

			// determining either operation or number
			else if ((keyPressed == '/') || (keyPressed == '*')|| (keyPressed == '+')|| (keyPressed == '-')|| (keyPressed == '='))
    504e:	6b 32       	cpi	r22, 0x2B	; 43
    5050:	09 f4       	brne	.+2      	; 0x5054 <APP_voidCalculatorMode+0x142>
    5052:	f4 c0       	rjmp	.+488    	; 0x523c <APP_voidCalculatorMode+0x32a>
    5054:	6d 32       	cpi	r22, 0x2D	; 45
    5056:	09 f4       	brne	.+2      	; 0x505a <APP_voidCalculatorMode+0x148>
    5058:	e8 c1       	rjmp	.+976    	; 0x542a <APP_voidCalculatorMode+0x518>
    505a:	6d 33       	cpi	r22, 0x3D	; 61
    505c:	09 f0       	breq	.+2      	; 0x5060 <APP_voidCalculatorMode+0x14e>
    505e:	9d c1       	rjmp	.+826    	; 0x539a <APP_voidCalculatorMode+0x488>
}

// reciving the operations
void operat (void)
{
	z++;
    5060:	80 91 29 02 	lds	r24, 0x0229
    5064:	8f 5f       	subi	r24, 0xFF	; 255
    5066:	80 93 29 02 	sts	0x0229, r24
	opArr[z]=arr[n];
    506a:	c8 2f       	mov	r28, r24
    506c:	dd 27       	eor	r29, r29
    506e:	c7 fd       	sbrc	r28, 7
    5070:	d0 95       	com	r29
    5072:	cc 0f       	add	r28, r28
    5074:	dd 1f       	adc	r29, r29
    5076:	cc 0f       	add	r28, r28
    5078:	dd 1f       	adc	r29, r29
    507a:	c0 54       	subi	r28, 0x40	; 64
    507c:	dd 4f       	sbci	r29, 0xFD	; 253
    507e:	e0 2f       	mov	r30, r16
    5080:	ff 27       	eor	r31, r31
    5082:	e7 fd       	sbrc	r30, 7
    5084:	f0 95       	com	r31
    5086:	ee 0f       	add	r30, r30
    5088:	ff 1f       	adc	r31, r31
    508a:	ee 0f       	add	r30, r30
    508c:	ff 1f       	adc	r31, r31
    508e:	e2 52       	subi	r30, 0x22	; 34
    5090:	fe 4f       	sbci	r31, 0xFE	; 254
    5092:	80 81       	ld	r24, Z
    5094:	91 81       	ldd	r25, Z+1	; 0x01
    5096:	a2 81       	ldd	r26, Z+2	; 0x02
    5098:	b3 81       	ldd	r27, Z+3	; 0x03
    509a:	88 83       	st	Y, r24
    509c:	99 83       	std	Y+1, r25	; 0x01
    509e:	aa 83       	std	Y+2, r26	; 0x02
    50a0:	bb 83       	std	Y+3, r27	; 0x03
	n++;
    50a2:	e0 2f       	mov	r30, r16
    50a4:	ef 5f       	subi	r30, 0xFF	; 255
    50a6:	e0 93 22 02 	sts	0x0222, r30
	arr[n]=0 ;
    50aa:	ff 27       	eor	r31, r31
    50ac:	e7 fd       	sbrc	r30, 7
    50ae:	f0 95       	com	r31
    50b0:	ee 0f       	add	r30, r30
    50b2:	ff 1f       	adc	r31, r31
    50b4:	ee 0f       	add	r30, r30
    50b6:	ff 1f       	adc	r31, r31
    50b8:	e2 52       	subi	r30, 0x22	; 34
    50ba:	fe 4f       	sbci	r31, 0xFE	; 254
    50bc:	80 82       	st	Z, r8
    50be:	91 82       	std	Z+1, r9	; 0x01
    50c0:	a2 82       	std	Z+2, r10	; 0x02
    50c2:	b3 82       	std	Z+3, r11	; 0x03

		S_fun ();
		Sstate=2;
		break;
	case '=':
		state=1;
    50c4:	70 92 28 02 	sts	0x0228, r7

// desplaying the final result
void Equal_fun (void)
{

	cleanSc = 1 ;
    50c8:	70 92 3a 02 	sts	0x023A, r7

	if (Pstate==1 || Pstate==2 )
    50cc:	80 91 25 02 	lds	r24, 0x0225
    50d0:	81 50       	subi	r24, 0x01	; 1
    50d2:	82 30       	cpi	r24, 0x02	; 2
    50d4:	08 f4       	brcc	.+2      	; 0x50d8 <APP_voidCalculatorMode+0x1c6>
    50d6:	20 c3       	rjmp	.+1600   	; 0x5718 <APP_voidCalculatorMode+0x806>
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
			CLCD_voidSendFloat(MdArr[1]);
		}

	}
	if (Sstate==1 || Sstate==2 )
    50d8:	80 91 23 02 	lds	r24, 0x0223
    50dc:	81 50       	subi	r24, 0x01	; 1
    50de:	82 30       	cpi	r24, 0x02	; 2
    50e0:	08 f4       	brcc	.+2      	; 0x50e4 <APP_voidCalculatorMode+0x1d2>
    50e2:	02 c3       	rjmp	.+1540   	; 0x56e8 <APP_voidCalculatorMode+0x7d6>
    50e4:	60 91 dc 01 	lds	r22, 0x01DC
	// Calculating the result and reading the entire line of entered number and operations
	if (KPD_enter == '=')
	{
		k = i ;
		CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
		for(i=0 ; i <= k ; i++)
    50e8:	6f 5f       	subi	r22, 0xFF	; 255
    50ea:	60 93 dc 01 	sts	0x01DC, r22
    50ee:	80 91 27 02 	lds	r24, 0x0227
    50f2:	86 17       	cp	r24, r22
    50f4:	08 f4       	brcc	.+2      	; 0x50f8 <APP_voidCalculatorMode+0x1e6>
    50f6:	34 cf       	rjmp	.-408    	; 0x4f60 <APP_voidCalculatorMode+0x4e>
		{
			keyPressed = enteranceArr[i];
    50f8:	e6 2f       	mov	r30, r22
    50fa:	f0 e0       	ldi	r31, 0x00	; 0
    50fc:	e6 5d       	subi	r30, 0xD6	; 214
    50fe:	fd 4f       	sbci	r31, 0xFD	; 253
    5100:	60 81       	ld	r22, Z
    5102:	60 93 3c 02 	sts	0x023C, r22

			// making exception for negative number
			if ( (n==0) && (keyPressed== '-') ) {sign = 1; }
    5106:	00 91 22 02 	lds	r16, 0x0222
    510a:	00 23       	and	r16, r16
    510c:	19 f4       	brne	.+6      	; 0x5114 <APP_voidCalculatorMode+0x202>
    510e:	6d 32       	cpi	r22, 0x2D	; 45
    5110:	09 f4       	brne	.+2      	; 0x5114 <APP_voidCalculatorMode+0x202>
    5112:	8f c0       	rjmp	.+286    	; 0x5232 <APP_voidCalculatorMode+0x320>

			// determining either operation or number
			else if ((keyPressed == '/') || (keyPressed == '*')|| (keyPressed == '+')|| (keyPressed == '-')|| (keyPressed == '='))
    5114:	6f 32       	cpi	r22, 0x2F	; 47
    5116:	09 f4       	brne	.+2      	; 0x511a <APP_voidCalculatorMode+0x208>
    5118:	ef c0       	rjmp	.+478    	; 0x52f8 <APP_voidCalculatorMode+0x3e6>
    511a:	6a 32       	cpi	r22, 0x2A	; 42
    511c:	09 f0       	breq	.+2      	; 0x5120 <APP_voidCalculatorMode+0x20e>
    511e:	97 cf       	rjmp	.-210    	; 0x504e <APP_voidCalculatorMode+0x13c>
}

// reciving the operations
void operat (void)
{
	z++;
    5120:	a0 91 29 02 	lds	r26, 0x0229
    5124:	af 5f       	subi	r26, 0xFF	; 255
    5126:	a0 93 29 02 	sts	0x0229, r26
	opArr[z]=arr[n];
    512a:	e0 2f       	mov	r30, r16
    512c:	ff 27       	eor	r31, r31
    512e:	e7 fd       	sbrc	r30, 7
    5130:	f0 95       	com	r31
    5132:	ee 0f       	add	r30, r30
    5134:	ff 1f       	adc	r31, r31
    5136:	ee 0f       	add	r30, r30
    5138:	ff 1f       	adc	r31, r31
    513a:	e2 52       	subi	r30, 0x22	; 34
    513c:	fe 4f       	sbci	r31, 0xFE	; 254
    513e:	20 81       	ld	r18, Z
    5140:	31 81       	ldd	r19, Z+1	; 0x01
    5142:	42 81       	ldd	r20, Z+2	; 0x02
    5144:	53 81       	ldd	r21, Z+3	; 0x03
    5146:	bb 27       	eor	r27, r27
    5148:	a7 fd       	sbrc	r26, 7
    514a:	b0 95       	com	r27
    514c:	aa 0f       	add	r26, r26
    514e:	bb 1f       	adc	r27, r27
    5150:	aa 0f       	add	r26, r26
    5152:	bb 1f       	adc	r27, r27
    5154:	a0 54       	subi	r26, 0x40	; 64
    5156:	bd 4f       	sbci	r27, 0xFD	; 253
    5158:	2d 93       	st	X+, r18
    515a:	3d 93       	st	X+, r19
    515c:	4d 93       	st	X+, r20
    515e:	5c 93       	st	X, r21
    5160:	13 97       	sbiw	r26, 0x03	; 3
	n++;
    5162:	e0 2f       	mov	r30, r16
    5164:	ef 5f       	subi	r30, 0xFF	; 255
    5166:	e0 93 22 02 	sts	0x0222, r30
	arr[n]=0 ;
    516a:	ff 27       	eor	r31, r31
    516c:	e7 fd       	sbrc	r30, 7
    516e:	f0 95       	com	r31
    5170:	ee 0f       	add	r30, r30
    5172:	ff 1f       	adc	r31, r31
    5174:	ee 0f       	add	r30, r30
    5176:	ff 1f       	adc	r31, r31
    5178:	e2 52       	subi	r30, 0x22	; 34
    517a:	fe 4f       	sbci	r31, 0xFE	; 254
    517c:	80 82       	st	Z, r8
    517e:	91 82       	std	Z+1, r9	; 0x01
    5180:	a2 82       	std	Z+2, r10	; 0x02
    5182:	b3 82       	std	Z+3, r11	; 0x03
}

// Multiplying or Dividing operation function
void P_fun (void)
{
	Pop ++ ;
    5184:	80 91 bf 02 	lds	r24, 0x02BF
    5188:	8f 5f       	subi	r24, 0xFF	; 255
    518a:	80 93 bf 02 	sts	0x02BF, r24
	d++;
    518e:	e0 91 3b 02 	lds	r30, 0x023B
    5192:	ef 5f       	subi	r30, 0xFF	; 255
    5194:	e0 93 3b 02 	sts	0x023B, r30
	// MdArr holding first and second number
	MdArr[d] = opArr[z] ;
    5198:	ff 27       	eor	r31, r31
    519a:	e7 fd       	sbrc	r30, 7
    519c:	f0 95       	com	r31
    519e:	ee 0f       	add	r30, r30
    51a0:	ff 1f       	adc	r31, r31
    51a2:	ee 0f       	add	r30, r30
    51a4:	ff 1f       	adc	r31, r31
    51a6:	e3 5c       	subi	r30, 0xC3	; 195
    51a8:	fd 4f       	sbci	r31, 0xFD	; 253
    51aa:	20 83       	st	Z, r18
    51ac:	31 83       	std	Z+1, r19	; 0x01
    51ae:	42 83       	std	Z+2, r20	; 0x02
    51b0:	53 83       	std	Z+3, r21	; 0x03
	// doing the operation on two numbers
	if (Pop==2)
    51b2:	82 30       	cpi	r24, 0x02	; 2
    51b4:	09 f4       	brne	.+2      	; 0x51b8 <APP_voidCalculatorMode+0x2a6>
    51b6:	98 c1       	rjmp	.+816    	; 0x54e8 <APP_voidCalculatorMode+0x5d6>
		Pstate=1;
		break;
	case '*':

		P_fun ();
		Pstate=2;
    51b8:	82 e0       	ldi	r24, 0x02	; 2
    51ba:	80 93 25 02 	sts	0x0225, r24
    51be:	60 91 dc 01 	lds	r22, 0x01DC
    51c2:	92 cf       	rjmp	.-220    	; 0x50e8 <APP_voidCalculatorMode+0x1d6>


		if (KPD_enter != 'C')
		{
			// exception for entering two operations next to each other
			if ( ((KPD_enter == '/') || (KPD_enter == '*')|| (KPD_enter == '+')|| (KPD_enter == '-')) && ((enteranceArr[i-1] == '/') || (enteranceArr[i-1] == '*')|| (enteranceArr[i-1] == '+')|| (enteranceArr[i-1] == '-')) )
    51c4:	60 91 dc 01 	lds	r22, 0x01DC
    51c8:	e6 2f       	mov	r30, r22
    51ca:	f0 e0       	ldi	r31, 0x00	; 0
    51cc:	e7 5d       	subi	r30, 0xD7	; 215
    51ce:	fd 4f       	sbci	r31, 0xFD	; 253
    51d0:	e0 81       	ld	r30, Z
    51d2:	ef 32       	cpi	r30, 0x2F	; 47
    51d4:	31 f0       	breq	.+12     	; 0x51e2 <APP_voidCalculatorMode+0x2d0>
    51d6:	ea 32       	cpi	r30, 0x2A	; 42
    51d8:	21 f0       	breq	.+8      	; 0x51e2 <APP_voidCalculatorMode+0x2d0>
    51da:	eb 32       	cpi	r30, 0x2B	; 43
    51dc:	11 f0       	breq	.+4      	; 0x51e2 <APP_voidCalculatorMode+0x2d0>
    51de:	ed 32       	cpi	r30, 0x2D	; 45
    51e0:	29 f4       	brne	.+10     	; 0x51ec <APP_voidCalculatorMode+0x2da>
			{
				i--;
    51e2:	86 2f       	mov	r24, r22
    51e4:	81 50       	subi	r24, 0x01	; 1
    51e6:	80 93 dc 01 	sts	0x01DC, r24
    51ea:	68 2f       	mov	r22, r24
			}
			// storing and displaying the entered key
			CLCD_voidSetPosition(CLCD_ROW_1,i+1);
    51ec:	6f 5f       	subi	r22, 0xFF	; 255
    51ee:	81 e0       	ldi	r24, 0x01	; 1
    51f0:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
			CLCD_voidSendData   (KPD_enter);
    51f4:	80 91 26 02 	lds	r24, 0x0226
    51f8:	0e 94 7e 19 	call	0x32fc	; 0x32fc <CLCD_voidSendData>
			enteranceArr[i++] = KPD_enter ;
    51fc:	60 91 dc 01 	lds	r22, 0x01DC
    5200:	80 91 26 02 	lds	r24, 0x0226
    5204:	e6 2f       	mov	r30, r22
    5206:	f0 e0       	ldi	r31, 0x00	; 0
    5208:	e6 5d       	subi	r30, 0xD6	; 214
    520a:	fd 4f       	sbci	r31, 0xFD	; 253
    520c:	80 83       	st	Z, r24
    520e:	6f 5f       	subi	r22, 0xFF	; 255
    5210:	60 93 dc 01 	sts	0x01DC, r22
		}

		// clearing the previous cell
		if (KPD_enter == 'C')
    5214:	83 34       	cpi	r24, 0x43	; 67
    5216:	09 f0       	breq	.+2      	; 0x521a <APP_voidCalculatorMode+0x308>
    5218:	fe ce       	rjmp	.-516    	; 0x5016 <APP_voidCalculatorMode+0x104>
    521a:	f8 ce       	rjmp	.-528    	; 0x500c <APP_voidCalculatorMode+0xfa>
		{
			if(i != 0)
			{
				i--;
    521c:	61 50       	subi	r22, 0x01	; 1
    521e:	60 93 dc 01 	sts	0x01DC, r22
    5222:	6f 5f       	subi	r22, 0xFF	; 255
				CLCD_voidSetPosition(CLCD_ROW_1,i+1);
    5224:	81 e0       	ldi	r24, 0x01	; 1
    5226:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
				CLCD_voidSendData   (CLR_Cell);
    522a:	8e ef       	ldi	r24, 0xFE	; 254
    522c:	0e 94 7e 19 	call	0x32fc	; 0x32fc <CLCD_voidSendData>
    5230:	f0 ce       	rjmp	.-544    	; 0x5012 <APP_voidCalculatorMode+0x100>
		for(i=0 ; i <= k ; i++)
		{
			keyPressed = enteranceArr[i];

			// making exception for negative number
			if ( (n==0) && (keyPressed== '-') ) {sign = 1; }
    5232:	70 92 dd 01 	sts	0x01DD, r7
    5236:	60 91 dc 01 	lds	r22, 0x01DC
    523a:	56 cf       	rjmp	.-340    	; 0x50e8 <APP_voidCalculatorMode+0x1d6>
}

// reciving the operations
void operat (void)
{
	z++;
    523c:	a0 91 29 02 	lds	r26, 0x0229
    5240:	af 5f       	subi	r26, 0xFF	; 255
    5242:	a0 93 29 02 	sts	0x0229, r26
	opArr[z]=arr[n];
    5246:	e0 2f       	mov	r30, r16
    5248:	ff 27       	eor	r31, r31
    524a:	e7 fd       	sbrc	r30, 7
    524c:	f0 95       	com	r31
    524e:	ee 0f       	add	r30, r30
    5250:	ff 1f       	adc	r31, r31
    5252:	ee 0f       	add	r30, r30
    5254:	ff 1f       	adc	r31, r31
    5256:	e2 52       	subi	r30, 0x22	; 34
    5258:	fe 4f       	sbci	r31, 0xFE	; 254
    525a:	20 81       	ld	r18, Z
    525c:	31 81       	ldd	r19, Z+1	; 0x01
    525e:	42 81       	ldd	r20, Z+2	; 0x02
    5260:	53 81       	ldd	r21, Z+3	; 0x03
    5262:	bb 27       	eor	r27, r27
    5264:	a7 fd       	sbrc	r26, 7
    5266:	b0 95       	com	r27
    5268:	aa 0f       	add	r26, r26
    526a:	bb 1f       	adc	r27, r27
    526c:	aa 0f       	add	r26, r26
    526e:	bb 1f       	adc	r27, r27
    5270:	a0 54       	subi	r26, 0x40	; 64
    5272:	bd 4f       	sbci	r27, 0xFD	; 253
    5274:	2d 93       	st	X+, r18
    5276:	3d 93       	st	X+, r19
    5278:	4d 93       	st	X+, r20
    527a:	5c 93       	st	X, r21
    527c:	13 97       	sbiw	r26, 0x03	; 3
	n++;
    527e:	e0 2f       	mov	r30, r16
    5280:	ef 5f       	subi	r30, 0xFF	; 255
    5282:	e0 93 22 02 	sts	0x0222, r30
	arr[n]=0 ;
    5286:	ff 27       	eor	r31, r31
    5288:	e7 fd       	sbrc	r30, 7
    528a:	f0 95       	com	r31
    528c:	ee 0f       	add	r30, r30
    528e:	ff 1f       	adc	r31, r31
    5290:	ee 0f       	add	r30, r30
    5292:	ff 1f       	adc	r31, r31
    5294:	e2 52       	subi	r30, 0x22	; 34
    5296:	fe 4f       	sbci	r31, 0xFE	; 254
    5298:	80 82       	st	Z, r8
    529a:	91 82       	std	Z+1, r9	; 0x01
    529c:	a2 82       	std	Z+2, r10	; 0x02
    529e:	b3 82       	std	Z+3, r11	; 0x03
}

// suming or minus operation function
void S_fun (void)
{
	Preset =1 ;
    52a0:	70 92 7e 02 	sts	0x027E, r7
	Sop++;
    52a4:	70 91 24 02 	lds	r23, 0x0224
    52a8:	7f 5f       	subi	r23, 0xFF	; 255
    52aa:	70 93 24 02 	sts	0x0224, r23
	s++ ;
    52ae:	60 91 7d 02 	lds	r22, 0x027D
    52b2:	6f 5f       	subi	r22, 0xFF	; 255
    52b4:	60 93 7d 02 	sts	0x027D, r22
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
    52b8:	e6 2f       	mov	r30, r22
    52ba:	ff 27       	eor	r31, r31
    52bc:	e7 fd       	sbrc	r30, 7
    52be:	f0 95       	com	r31
    52c0:	ee 0f       	add	r30, r30
    52c2:	ff 1f       	adc	r31, r31
    52c4:	ee 0f       	add	r30, r30
    52c6:	ff 1f       	adc	r31, r31
    52c8:	e1 58       	subi	r30, 0x81	; 129
    52ca:	fd 4f       	sbci	r31, 0xFD	; 253
    52cc:	20 83       	st	Z, r18
    52ce:	31 83       	std	Z+1, r19	; 0x01
    52d0:	42 83       	std	Z+2, r20	; 0x02
    52d2:	53 83       	std	Z+3, r21	; 0x03
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
    52d4:	90 91 25 02 	lds	r25, 0x0225
    52d8:	89 2f       	mov	r24, r25
    52da:	81 50       	subi	r24, 0x01	; 1
    52dc:	82 30       	cpi	r24, 0x02	; 2
    52de:	08 f4       	brcc	.+2      	; 0x52e2 <APP_voidCalculatorMode+0x3d0>
    52e0:	50 c2       	rjmp	.+1184   	; 0x5782 <APP_voidCalculatorMode+0x870>
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    52e2:	95 30       	cpi	r25, 0x05	; 5
    52e4:	09 f4       	brne	.+2      	; 0x52e8 <APP_voidCalculatorMode+0x3d6>
    52e6:	52 c1       	rjmp	.+676    	; 0x558c <APP_voidCalculatorMode+0x67a>
	{
		sumArr[s] = MdArr[1];
	}
	// doing the operation on two numbers
	if (Sop==2)
    52e8:	72 30       	cpi	r23, 0x02	; 2
    52ea:	09 f4       	brne	.+2      	; 0x52ee <APP_voidCalculatorMode+0x3dc>
    52ec:	2d c1       	rjmp	.+602    	; 0x5548 <APP_voidCalculatorMode+0x636>
		Pstate=2;
		break;
	case '+':

		S_fun ();
		Sstate=1;
    52ee:	70 92 23 02 	sts	0x0223, r7
    52f2:	60 91 dc 01 	lds	r22, 0x01DC
    52f6:	f8 ce       	rjmp	.-528    	; 0x50e8 <APP_voidCalculatorMode+0x1d6>
}

// reciving the operations
void operat (void)
{
	z++;
    52f8:	a0 91 29 02 	lds	r26, 0x0229
    52fc:	af 5f       	subi	r26, 0xFF	; 255
    52fe:	a0 93 29 02 	sts	0x0229, r26
	opArr[z]=arr[n];
    5302:	e0 2f       	mov	r30, r16
    5304:	ff 27       	eor	r31, r31
    5306:	e7 fd       	sbrc	r30, 7
    5308:	f0 95       	com	r31
    530a:	ee 0f       	add	r30, r30
    530c:	ff 1f       	adc	r31, r31
    530e:	ee 0f       	add	r30, r30
    5310:	ff 1f       	adc	r31, r31
    5312:	e2 52       	subi	r30, 0x22	; 34
    5314:	fe 4f       	sbci	r31, 0xFE	; 254
    5316:	20 81       	ld	r18, Z
    5318:	31 81       	ldd	r19, Z+1	; 0x01
    531a:	42 81       	ldd	r20, Z+2	; 0x02
    531c:	53 81       	ldd	r21, Z+3	; 0x03
    531e:	bb 27       	eor	r27, r27
    5320:	a7 fd       	sbrc	r26, 7
    5322:	b0 95       	com	r27
    5324:	aa 0f       	add	r26, r26
    5326:	bb 1f       	adc	r27, r27
    5328:	aa 0f       	add	r26, r26
    532a:	bb 1f       	adc	r27, r27
    532c:	a0 54       	subi	r26, 0x40	; 64
    532e:	bd 4f       	sbci	r27, 0xFD	; 253
    5330:	2d 93       	st	X+, r18
    5332:	3d 93       	st	X+, r19
    5334:	4d 93       	st	X+, r20
    5336:	5c 93       	st	X, r21
    5338:	13 97       	sbiw	r26, 0x03	; 3
	n++;
    533a:	e0 2f       	mov	r30, r16
    533c:	ef 5f       	subi	r30, 0xFF	; 255
    533e:	e0 93 22 02 	sts	0x0222, r30
	arr[n]=0 ;
    5342:	ff 27       	eor	r31, r31
    5344:	e7 fd       	sbrc	r30, 7
    5346:	f0 95       	com	r31
    5348:	ee 0f       	add	r30, r30
    534a:	ff 1f       	adc	r31, r31
    534c:	ee 0f       	add	r30, r30
    534e:	ff 1f       	adc	r31, r31
    5350:	e2 52       	subi	r30, 0x22	; 34
    5352:	fe 4f       	sbci	r31, 0xFE	; 254
    5354:	80 82       	st	Z, r8
    5356:	91 82       	std	Z+1, r9	; 0x01
    5358:	a2 82       	std	Z+2, r10	; 0x02
    535a:	b3 82       	std	Z+3, r11	; 0x03
}

// Multiplying or Dividing operation function
void P_fun (void)
{
	Pop ++ ;
    535c:	80 91 bf 02 	lds	r24, 0x02BF
    5360:	8f 5f       	subi	r24, 0xFF	; 255
    5362:	80 93 bf 02 	sts	0x02BF, r24
	d++;
    5366:	e0 91 3b 02 	lds	r30, 0x023B
    536a:	ef 5f       	subi	r30, 0xFF	; 255
    536c:	e0 93 3b 02 	sts	0x023B, r30
	// MdArr holding first and second number
	MdArr[d] = opArr[z] ;
    5370:	ff 27       	eor	r31, r31
    5372:	e7 fd       	sbrc	r30, 7
    5374:	f0 95       	com	r31
    5376:	ee 0f       	add	r30, r30
    5378:	ff 1f       	adc	r31, r31
    537a:	ee 0f       	add	r30, r30
    537c:	ff 1f       	adc	r31, r31
    537e:	e3 5c       	subi	r30, 0xC3	; 195
    5380:	fd 4f       	sbci	r31, 0xFD	; 253
    5382:	20 83       	st	Z, r18
    5384:	31 83       	std	Z+1, r19	; 0x01
    5386:	42 83       	std	Z+2, r20	; 0x02
    5388:	53 83       	std	Z+3, r21	; 0x03
	// doing the operation on two numbers
	if (Pop==2)
    538a:	82 30       	cpi	r24, 0x02	; 2
    538c:	09 f4       	brne	.+2      	; 0x5390 <APP_voidCalculatorMode+0x47e>
    538e:	c4 c0       	rjmp	.+392    	; 0x5518 <APP_voidCalculatorMode+0x606>
	{

	case '/':

		P_fun ();
		Pstate=1;
    5390:	70 92 25 02 	sts	0x0225, r7
    5394:	60 91 dc 01 	lds	r22, 0x01DC
    5398:	a7 ce       	rjmp	.-690    	; 0x50e8 <APP_voidCalculatorMode+0x1d6>

				operat ();
			}
			else
			{
				x=keyPressed - 48 ;
    539a:	70 e0       	ldi	r23, 0x00	; 0
    539c:	60 53       	subi	r22, 0x30	; 48
    539e:	70 40       	sbci	r23, 0x00	; 0
    53a0:	88 27       	eor	r24, r24
    53a2:	77 fd       	sbrc	r23, 7
    53a4:	80 95       	com	r24
    53a6:	98 2f       	mov	r25, r24
    53a8:	0e 94 35 12 	call	0x246a	; 0x246a <__floatsisf>
    53ac:	6b 01       	movw	r12, r22
    53ae:	7c 01       	movw	r14, r24
    53b0:	60 93 1e 02 	sts	0x021E, r22
    53b4:	70 93 1f 02 	sts	0x021F, r23
    53b8:	80 93 20 02 	sts	0x0220, r24
    53bc:	90 93 21 02 	sts	0x0221, r25
/*********************    Helper Functions   ******************************/
/**************************************************************************/
// gathering the comblete number
void NUM (void)
{
	n++ ;
    53c0:	0f 5f       	subi	r16, 0xFF	; 255
    53c2:	00 93 22 02 	sts	0x0222, r16
	arr[n] = arr[n-1]*10 + x ;
    53c6:	11 27       	eor	r17, r17
    53c8:	07 fd       	sbrc	r16, 7
    53ca:	10 95       	com	r17
    53cc:	00 0f       	add	r16, r16
    53ce:	11 1f       	adc	r17, r17
    53d0:	00 0f       	add	r16, r16
    53d2:	11 1f       	adc	r17, r17
    53d4:	f8 01       	movw	r30, r16
    53d6:	e6 52       	subi	r30, 0x26	; 38
    53d8:	fe 4f       	sbci	r31, 0xFE	; 254
    53da:	60 81       	ld	r22, Z
    53dc:	71 81       	ldd	r23, Z+1	; 0x01
    53de:	82 81       	ldd	r24, Z+2	; 0x02
    53e0:	93 81       	ldd	r25, Z+3	; 0x03
    53e2:	20 e0       	ldi	r18, 0x00	; 0
    53e4:	30 e0       	ldi	r19, 0x00	; 0
    53e6:	40 e2       	ldi	r20, 0x20	; 32
    53e8:	51 e4       	ldi	r21, 0x41	; 65
    53ea:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    53ee:	9b 01       	movw	r18, r22
    53f0:	ac 01       	movw	r20, r24
    53f2:	c7 01       	movw	r24, r14
    53f4:	b6 01       	movw	r22, r12
    53f6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    53fa:	9b 01       	movw	r18, r22
    53fc:	ac 01       	movw	r20, r24
    53fe:	f8 01       	movw	r30, r16
    5400:	e2 52       	subi	r30, 0x22	; 34
    5402:	fe 4f       	sbci	r31, 0xFE	; 254
    5404:	20 83       	st	Z, r18
    5406:	31 83       	std	Z+1, r19	; 0x01
    5408:	42 83       	std	Z+2, r20	; 0x02
    540a:	53 83       	std	Z+3, r21	; 0x03

	// to make the negative number
	if (sign==1){arr[n]=arr[n]*(-1); sign=0;}
    540c:	80 91 dd 01 	lds	r24, 0x01DD
    5410:	81 30       	cpi	r24, 0x01	; 1
    5412:	09 f0       	breq	.+2      	; 0x5416 <APP_voidCalculatorMode+0x504>
    5414:	67 ce       	rjmp	.-818    	; 0x50e4 <APP_voidCalculatorMode+0x1d2>
    5416:	da 01       	movw	r26, r20
    5418:	c9 01       	movw	r24, r18
    541a:	b0 58       	subi	r27, 0x80	; 128
    541c:	80 83       	st	Z, r24
    541e:	91 83       	std	Z+1, r25	; 0x01
    5420:	a2 83       	std	Z+2, r26	; 0x02
    5422:	b3 83       	std	Z+3, r27	; 0x03
    5424:	10 92 dd 01 	sts	0x01DD, r1
    5428:	5d ce       	rjmp	.-838    	; 0x50e4 <APP_voidCalculatorMode+0x1d2>
}

// reciving the operations
void operat (void)
{
	z++;
    542a:	a0 91 29 02 	lds	r26, 0x0229
    542e:	af 5f       	subi	r26, 0xFF	; 255
    5430:	a0 93 29 02 	sts	0x0229, r26
	opArr[z]=arr[n];
    5434:	e0 2f       	mov	r30, r16
    5436:	ff 27       	eor	r31, r31
    5438:	e7 fd       	sbrc	r30, 7
    543a:	f0 95       	com	r31
    543c:	ee 0f       	add	r30, r30
    543e:	ff 1f       	adc	r31, r31
    5440:	ee 0f       	add	r30, r30
    5442:	ff 1f       	adc	r31, r31
    5444:	e2 52       	subi	r30, 0x22	; 34
    5446:	fe 4f       	sbci	r31, 0xFE	; 254
    5448:	20 81       	ld	r18, Z
    544a:	31 81       	ldd	r19, Z+1	; 0x01
    544c:	42 81       	ldd	r20, Z+2	; 0x02
    544e:	53 81       	ldd	r21, Z+3	; 0x03
    5450:	bb 27       	eor	r27, r27
    5452:	a7 fd       	sbrc	r26, 7
    5454:	b0 95       	com	r27
    5456:	aa 0f       	add	r26, r26
    5458:	bb 1f       	adc	r27, r27
    545a:	aa 0f       	add	r26, r26
    545c:	bb 1f       	adc	r27, r27
    545e:	a0 54       	subi	r26, 0x40	; 64
    5460:	bd 4f       	sbci	r27, 0xFD	; 253
    5462:	2d 93       	st	X+, r18
    5464:	3d 93       	st	X+, r19
    5466:	4d 93       	st	X+, r20
    5468:	5c 93       	st	X, r21
    546a:	13 97       	sbiw	r26, 0x03	; 3
	n++;
    546c:	e0 2f       	mov	r30, r16
    546e:	ef 5f       	subi	r30, 0xFF	; 255
    5470:	e0 93 22 02 	sts	0x0222, r30
	arr[n]=0 ;
    5474:	ff 27       	eor	r31, r31
    5476:	e7 fd       	sbrc	r30, 7
    5478:	f0 95       	com	r31
    547a:	ee 0f       	add	r30, r30
    547c:	ff 1f       	adc	r31, r31
    547e:	ee 0f       	add	r30, r30
    5480:	ff 1f       	adc	r31, r31
    5482:	e2 52       	subi	r30, 0x22	; 34
    5484:	fe 4f       	sbci	r31, 0xFE	; 254
    5486:	80 82       	st	Z, r8
    5488:	91 82       	std	Z+1, r9	; 0x01
    548a:	a2 82       	std	Z+2, r10	; 0x02
    548c:	b3 82       	std	Z+3, r11	; 0x03
}

// suming or minus operation function
void S_fun (void)
{
	Preset =1 ;
    548e:	70 92 7e 02 	sts	0x027E, r7
	Sop++;
    5492:	70 91 24 02 	lds	r23, 0x0224
    5496:	7f 5f       	subi	r23, 0xFF	; 255
    5498:	70 93 24 02 	sts	0x0224, r23
	s++ ;
    549c:	60 91 7d 02 	lds	r22, 0x027D
    54a0:	6f 5f       	subi	r22, 0xFF	; 255
    54a2:	60 93 7d 02 	sts	0x027D, r22
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
    54a6:	e6 2f       	mov	r30, r22
    54a8:	ff 27       	eor	r31, r31
    54aa:	e7 fd       	sbrc	r30, 7
    54ac:	f0 95       	com	r31
    54ae:	ee 0f       	add	r30, r30
    54b0:	ff 1f       	adc	r31, r31
    54b2:	ee 0f       	add	r30, r30
    54b4:	ff 1f       	adc	r31, r31
    54b6:	e1 58       	subi	r30, 0x81	; 129
    54b8:	fd 4f       	sbci	r31, 0xFD	; 253
    54ba:	20 83       	st	Z, r18
    54bc:	31 83       	std	Z+1, r19	; 0x01
    54be:	42 83       	std	Z+2, r20	; 0x02
    54c0:	53 83       	std	Z+3, r21	; 0x03
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
    54c2:	90 91 25 02 	lds	r25, 0x0225
    54c6:	89 2f       	mov	r24, r25
    54c8:	81 50       	subi	r24, 0x01	; 1
    54ca:	82 30       	cpi	r24, 0x02	; 2
    54cc:	08 f4       	brcc	.+2      	; 0x54d0 <APP_voidCalculatorMode+0x5be>
    54ce:	3a c1       	rjmp	.+628    	; 0x5744 <APP_voidCalculatorMode+0x832>
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    54d0:	95 30       	cpi	r25, 0x05	; 5
    54d2:	09 f4       	brne	.+2      	; 0x54d6 <APP_voidCalculatorMode+0x5c4>
    54d4:	77 c0       	rjmp	.+238    	; 0x55c4 <APP_voidCalculatorMode+0x6b2>
	{
		sumArr[s] = MdArr[1];
	}
	// doing the operation on two numbers
	if (Sop==2)
    54d6:	72 30       	cpi	r23, 0x02	; 2
    54d8:	09 f4       	brne	.+2      	; 0x54dc <APP_voidCalculatorMode+0x5ca>
    54da:	47 c0       	rjmp	.+142    	; 0x556a <APP_voidCalculatorMode+0x658>
		Sstate=1;
		break;
	case '-':

		S_fun ();
		Sstate=2;
    54dc:	82 e0       	ldi	r24, 0x02	; 2
    54de:	80 93 23 02 	sts	0x0223, r24
    54e2:	60 91 dc 01 	lds	r22, 0x01DC
    54e6:	00 ce       	rjmp	.-1024   	; 0x50e8 <APP_voidCalculatorMode+0x1d6>
	MdArr[d] = opArr[z] ;
	// doing the operation on two numbers
	if (Pop==2)
	{

		switch(Pstate)
    54e8:	80 91 25 02 	lds	r24, 0x0225
    54ec:	81 30       	cpi	r24, 0x01	; 1
    54ee:	09 f4       	brne	.+2      	; 0x54f2 <APP_voidCalculatorMode+0x5e0>
    54f0:	67 c1       	rjmp	.+718    	; 0x57c0 <APP_voidCalculatorMode+0x8ae>
    54f2:	82 30       	cpi	r24, 0x02	; 2
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <APP_voidCalculatorMode+0x5e6>
    54f6:	8c c0       	rjmp	.+280    	; 0x5610 <APP_voidCalculatorMode+0x6fe>
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
			break ;
		}

		Pop = 1;
    54f8:	70 92 bf 02 	sts	0x02BF, r7
		d = 1;
    54fc:	70 92 3b 02 	sts	0x023B, r7
		Pstate=0;

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    5500:	80 91 7e 02 	lds	r24, 0x027E
    5504:	81 30       	cpi	r24, 0x01	; 1
    5506:	09 f0       	breq	.+2      	; 0x550a <APP_voidCalculatorMode+0x5f8>
    5508:	57 ce       	rjmp	.-850    	; 0x51b8 <APP_voidCalculatorMode+0x2a6>
    550a:	10 92 3b 02 	sts	0x023B, r1
    550e:	10 92 bf 02 	sts	0x02BF, r1
    5512:	10 92 7e 02 	sts	0x027E, r1
    5516:	50 ce       	rjmp	.-864    	; 0x51b8 <APP_voidCalculatorMode+0x2a6>
	MdArr[d] = opArr[z] ;
	// doing the operation on two numbers
	if (Pop==2)
	{

		switch(Pstate)
    5518:	80 91 25 02 	lds	r24, 0x0225
    551c:	81 30       	cpi	r24, 0x01	; 1
    551e:	09 f4       	brne	.+2      	; 0x5522 <APP_voidCalculatorMode+0x610>
    5520:	77 c1       	rjmp	.+750    	; 0x5810 <APP_voidCalculatorMode+0x8fe>
    5522:	82 30       	cpi	r24, 0x02	; 2
    5524:	09 f4       	brne	.+2      	; 0x5528 <APP_voidCalculatorMode+0x616>
    5526:	8f c0       	rjmp	.+286    	; 0x5646 <APP_voidCalculatorMode+0x734>
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
			break ;
		}

		Pop = 1;
    5528:	70 92 bf 02 	sts	0x02BF, r7
		d = 1;
    552c:	70 92 3b 02 	sts	0x023B, r7
		Pstate=0;

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    5530:	80 91 7e 02 	lds	r24, 0x027E
    5534:	81 30       	cpi	r24, 0x01	; 1
    5536:	09 f0       	breq	.+2      	; 0x553a <APP_voidCalculatorMode+0x628>
    5538:	2b cf       	rjmp	.-426    	; 0x5390 <APP_voidCalculatorMode+0x47e>
    553a:	10 92 3b 02 	sts	0x023B, r1
    553e:	10 92 bf 02 	sts	0x02BF, r1
    5542:	10 92 7e 02 	sts	0x027E, r1
    5546:	24 cf       	rjmp	.-440    	; 0x5390 <APP_voidCalculatorMode+0x47e>
	}
	// doing the operation on two numbers
	if (Sop==2)
	{

		switch (Sstate)
    5548:	80 91 23 02 	lds	r24, 0x0223
    554c:	81 30       	cpi	r24, 0x01	; 1
    554e:	09 f4       	brne	.+2      	; 0x5552 <APP_voidCalculatorMode+0x640>
    5550:	a2 c1       	rjmp	.+836    	; 0x5896 <APP_voidCalculatorMode+0x984>
    5552:	82 30       	cpi	r24, 0x02	; 2
    5554:	09 f4       	brne	.+2      	; 0x5558 <APP_voidCalculatorMode+0x646>
    5556:	ad c0       	rjmp	.+346    	; 0x56b2 <APP_voidCalculatorMode+0x7a0>
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
			break ;
		}
		Sop=1;
    5558:	70 92 24 02 	sts	0x0224, r7
		s=1;
    555c:	70 92 7d 02 	sts	0x027D, r7
		Pop=0;
    5560:	10 92 bf 02 	sts	0x02BF, r1
		d=0;
    5564:	10 92 3b 02 	sts	0x023B, r1
    5568:	c2 ce       	rjmp	.-636    	; 0x52ee <APP_voidCalculatorMode+0x3dc>
	}
	// doing the operation on two numbers
	if (Sop==2)
	{

		switch (Sstate)
    556a:	80 91 23 02 	lds	r24, 0x0223
    556e:	81 30       	cpi	r24, 0x01	; 1
    5570:	09 f4       	brne	.+2      	; 0x5574 <APP_voidCalculatorMode+0x662>
    5572:	76 c1       	rjmp	.+748    	; 0x5860 <APP_voidCalculatorMode+0x94e>
    5574:	82 30       	cpi	r24, 0x02	; 2
    5576:	09 f4       	brne	.+2      	; 0x557a <APP_voidCalculatorMode+0x668>
    5578:	81 c0       	rjmp	.+258    	; 0x567c <APP_voidCalculatorMode+0x76a>
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
			break ;
		}
		Sop=1;
    557a:	70 92 24 02 	sts	0x0224, r7
		s=1;
    557e:	70 92 7d 02 	sts	0x027D, r7
		Pop=0;
    5582:	10 92 bf 02 	sts	0x02BF, r1
		d=0;
    5586:	10 92 3b 02 	sts	0x023B, r1
    558a:	a8 cf       	rjmp	.-176    	; 0x54dc <APP_voidCalculatorMode+0x5ca>
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    558c:	80 91 28 02 	lds	r24, 0x0228
    5590:	81 30       	cpi	r24, 0x01	; 1
    5592:	09 f0       	breq	.+2      	; 0x5596 <APP_voidCalculatorMode+0x684>
    5594:	a9 ce       	rjmp	.-686    	; 0x52e8 <APP_voidCalculatorMode+0x3d6>
	{
		sumArr[s] = MdArr[1];
    5596:	e6 2f       	mov	r30, r22
    5598:	ff 27       	eor	r31, r31
    559a:	e7 fd       	sbrc	r30, 7
    559c:	f0 95       	com	r31
    559e:	ee 0f       	add	r30, r30
    55a0:	ff 1f       	adc	r31, r31
    55a2:	ee 0f       	add	r30, r30
    55a4:	ff 1f       	adc	r31, r31
    55a6:	e1 58       	subi	r30, 0x81	; 129
    55a8:	fd 4f       	sbci	r31, 0xFD	; 253
    55aa:	80 91 41 02 	lds	r24, 0x0241
    55ae:	90 91 42 02 	lds	r25, 0x0242
    55b2:	a0 91 43 02 	lds	r26, 0x0243
    55b6:	b0 91 44 02 	lds	r27, 0x0244
    55ba:	80 83       	st	Z, r24
    55bc:	91 83       	std	Z+1, r25	; 0x01
    55be:	a2 83       	std	Z+2, r26	; 0x02
    55c0:	b3 83       	std	Z+3, r27	; 0x03
    55c2:	92 ce       	rjmp	.-732    	; 0x52e8 <APP_voidCalculatorMode+0x3d6>
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    55c4:	80 91 28 02 	lds	r24, 0x0228
    55c8:	81 30       	cpi	r24, 0x01	; 1
    55ca:	09 f0       	breq	.+2      	; 0x55ce <APP_voidCalculatorMode+0x6bc>
    55cc:	84 cf       	rjmp	.-248    	; 0x54d6 <APP_voidCalculatorMode+0x5c4>
	{
		sumArr[s] = MdArr[1];
    55ce:	e6 2f       	mov	r30, r22
    55d0:	ff 27       	eor	r31, r31
    55d2:	e7 fd       	sbrc	r30, 7
    55d4:	f0 95       	com	r31
    55d6:	ee 0f       	add	r30, r30
    55d8:	ff 1f       	adc	r31, r31
    55da:	ee 0f       	add	r30, r30
    55dc:	ff 1f       	adc	r31, r31
    55de:	e1 58       	subi	r30, 0x81	; 129
    55e0:	fd 4f       	sbci	r31, 0xFD	; 253
    55e2:	80 91 41 02 	lds	r24, 0x0241
    55e6:	90 91 42 02 	lds	r25, 0x0242
    55ea:	a0 91 43 02 	lds	r26, 0x0243
    55ee:	b0 91 44 02 	lds	r27, 0x0244
    55f2:	80 83       	st	Z, r24
    55f4:	91 83       	std	Z+1, r25	; 0x01
    55f6:	a2 83       	std	Z+2, r26	; 0x02
    55f8:	b3 83       	std	Z+3, r27	; 0x03
    55fa:	6d cf       	rjmp	.-294    	; 0x54d6 <APP_voidCalculatorMode+0x5c4>
	if(KPD_enter != NOTPRESSED)
	{
		// exception for erasing the screen after click on (C) key
		if ( (KPD_enter == 'C') && (cleanSc == 1) )
		{
			cleanSc =0;
    55fc:	10 92 3a 02 	sts	0x023A, r1
			CLCD_voidClearScreen();
    5600:	0e 94 16 1a 	call	0x342c	; 0x342c <CLCD_voidClearScreen>

		}



		if (KPD_enter != 'C')
    5604:	80 91 26 02 	lds	r24, 0x0226
    5608:	83 34       	cpi	r24, 0x43	; 67
    560a:	09 f4       	brne	.+2      	; 0x560e <APP_voidCalculatorMode+0x6fc>
    560c:	fd cc       	rjmp	.-1542   	; 0x5008 <APP_voidCalculatorMode+0xf6>
    560e:	99 cc       	rjmp	.-1742   	; 0x4f42 <APP_voidCalculatorMode+0x30>
			}
			break ;

			// multiplying operation
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
    5610:	60 91 41 02 	lds	r22, 0x0241
    5614:	70 91 42 02 	lds	r23, 0x0242
    5618:	80 91 43 02 	lds	r24, 0x0243
    561c:	90 91 44 02 	lds	r25, 0x0244
    5620:	20 91 45 02 	lds	r18, 0x0245
    5624:	30 91 46 02 	lds	r19, 0x0246
    5628:	40 91 47 02 	lds	r20, 0x0247
    562c:	50 91 48 02 	lds	r21, 0x0248
    5630:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    5634:	60 93 41 02 	sts	0x0241, r22
    5638:	70 93 42 02 	sts	0x0242, r23
    563c:	80 93 43 02 	sts	0x0243, r24
    5640:	90 93 44 02 	sts	0x0244, r25
    5644:	59 cf       	rjmp	.-334    	; 0x54f8 <APP_voidCalculatorMode+0x5e6>
    5646:	60 91 41 02 	lds	r22, 0x0241
    564a:	70 91 42 02 	lds	r23, 0x0242
    564e:	80 91 43 02 	lds	r24, 0x0243
    5652:	90 91 44 02 	lds	r25, 0x0244
    5656:	20 91 45 02 	lds	r18, 0x0245
    565a:	30 91 46 02 	lds	r19, 0x0246
    565e:	40 91 47 02 	lds	r20, 0x0247
    5662:	50 91 48 02 	lds	r21, 0x0248
    5666:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    566a:	60 93 41 02 	sts	0x0241, r22
    566e:	70 93 42 02 	sts	0x0242, r23
    5672:	80 93 43 02 	sts	0x0243, r24
    5676:	90 93 44 02 	sts	0x0244, r25
    567a:	56 cf       	rjmp	.-340    	; 0x5528 <APP_voidCalculatorMode+0x616>
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
			break ;
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
    567c:	60 91 83 02 	lds	r22, 0x0283
    5680:	70 91 84 02 	lds	r23, 0x0284
    5684:	80 91 85 02 	lds	r24, 0x0285
    5688:	90 91 86 02 	lds	r25, 0x0286
    568c:	20 91 87 02 	lds	r18, 0x0287
    5690:	30 91 88 02 	lds	r19, 0x0288
    5694:	40 91 89 02 	lds	r20, 0x0289
    5698:	50 91 8a 02 	lds	r21, 0x028A
    569c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    56a0:	60 93 83 02 	sts	0x0283, r22
    56a4:	70 93 84 02 	sts	0x0284, r23
    56a8:	80 93 85 02 	sts	0x0285, r24
    56ac:	90 93 86 02 	sts	0x0286, r25
    56b0:	64 cf       	rjmp	.-312    	; 0x557a <APP_voidCalculatorMode+0x668>
    56b2:	60 91 83 02 	lds	r22, 0x0283
    56b6:	70 91 84 02 	lds	r23, 0x0284
    56ba:	80 91 85 02 	lds	r24, 0x0285
    56be:	90 91 86 02 	lds	r25, 0x0286
    56c2:	20 91 87 02 	lds	r18, 0x0287
    56c6:	30 91 88 02 	lds	r19, 0x0288
    56ca:	40 91 89 02 	lds	r20, 0x0289
    56ce:	50 91 8a 02 	lds	r21, 0x028A
    56d2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    56d6:	60 93 83 02 	sts	0x0283, r22
    56da:	70 93 84 02 	sts	0x0284, r23
    56de:	80 93 85 02 	sts	0x0285, r24
    56e2:	90 93 86 02 	sts	0x0286, r25
    56e6:	38 cf       	rjmp	.-400    	; 0x5558 <APP_voidCalculatorMode+0x646>
		}

	}
	if (Sstate==1 || Sstate==2 )
	{
		S_fun ();
    56e8:	0e 94 39 26 	call	0x4c72	; 0x4c72 <S_fun>
		// Exception for infinity loop (dividing by zero)
		if(i==17){}
    56ec:	60 91 dc 01 	lds	r22, 0x01DC
    56f0:	61 31       	cpi	r22, 0x11	; 17
    56f2:	09 f4       	brne	.+2      	; 0x56f6 <APP_voidCalculatorMode+0x7e4>
    56f4:	f9 cc       	rjmp	.-1550   	; 0x50e8 <APP_voidCalculatorMode+0x1d6>
		else
			// printing the result
		{
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    56f6:	82 e0       	ldi	r24, 0x02	; 2
    56f8:	61 e0       	ldi	r22, 0x01	; 1
    56fa:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
			CLCD_voidSendFloat(sumArr[1]);
    56fe:	60 91 83 02 	lds	r22, 0x0283
    5702:	70 91 84 02 	lds	r23, 0x0284
    5706:	80 91 85 02 	lds	r24, 0x0285
    570a:	90 91 86 02 	lds	r25, 0x0286
    570e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <CLCD_voidSendFloat>
    5712:	60 91 dc 01 	lds	r22, 0x01DC
    5716:	e8 cc       	rjmp	.-1584   	; 0x50e8 <APP_voidCalculatorMode+0x1d6>

	cleanSc = 1 ;

	if (Pstate==1 || Pstate==2 )
	{
		P_fun ();
    5718:	0e 94 d6 21 	call	0x43ac	; 0x43ac <P_fun>
		// Exception for infinity loop (dividing by zero)
		if(i==17){}
    571c:	60 91 dc 01 	lds	r22, 0x01DC
    5720:	61 31       	cpi	r22, 0x11	; 17
    5722:	09 f4       	brne	.+2      	; 0x5726 <APP_voidCalculatorMode+0x814>
    5724:	d9 cc       	rjmp	.-1614   	; 0x50d8 <APP_voidCalculatorMode+0x1c6>
		else
			// printing the result
		{
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    5726:	82 e0       	ldi	r24, 0x02	; 2
    5728:	61 e0       	ldi	r22, 0x01	; 1
    572a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
			CLCD_voidSendFloat(MdArr[1]);
    572e:	60 91 41 02 	lds	r22, 0x0241
    5732:	70 91 42 02 	lds	r23, 0x0242
    5736:	80 91 43 02 	lds	r24, 0x0243
    573a:	90 91 44 02 	lds	r25, 0x0244
    573e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <CLCD_voidSendFloat>
    5742:	ca cc       	rjmp	.-1644   	; 0x50d8 <APP_voidCalculatorMode+0x1c6>
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
    5744:	0e 94 d6 21 	call	0x43ac	; 0x43ac <P_fun>
		sumArr[s] = MdArr[1];
    5748:	60 91 7d 02 	lds	r22, 0x027D
    574c:	e6 2f       	mov	r30, r22
    574e:	ff 27       	eor	r31, r31
    5750:	e7 fd       	sbrc	r30, 7
    5752:	f0 95       	com	r31
    5754:	ee 0f       	add	r30, r30
    5756:	ff 1f       	adc	r31, r31
    5758:	ee 0f       	add	r30, r30
    575a:	ff 1f       	adc	r31, r31
    575c:	e1 58       	subi	r30, 0x81	; 129
    575e:	fd 4f       	sbci	r31, 0xFD	; 253
    5760:	80 91 41 02 	lds	r24, 0x0241
    5764:	90 91 42 02 	lds	r25, 0x0242
    5768:	a0 91 43 02 	lds	r26, 0x0243
    576c:	b0 91 44 02 	lds	r27, 0x0244
    5770:	80 83       	st	Z, r24
    5772:	91 83       	std	Z+1, r25	; 0x01
    5774:	a2 83       	std	Z+2, r26	; 0x02
    5776:	b3 83       	std	Z+3, r27	; 0x03
    5778:	90 91 25 02 	lds	r25, 0x0225
    577c:	70 91 24 02 	lds	r23, 0x0224
    5780:	a7 ce       	rjmp	.-690    	; 0x54d0 <APP_voidCalculatorMode+0x5be>
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
    5782:	0e 94 d6 21 	call	0x43ac	; 0x43ac <P_fun>
		sumArr[s] = MdArr[1];
    5786:	60 91 7d 02 	lds	r22, 0x027D
    578a:	e6 2f       	mov	r30, r22
    578c:	ff 27       	eor	r31, r31
    578e:	e7 fd       	sbrc	r30, 7
    5790:	f0 95       	com	r31
    5792:	ee 0f       	add	r30, r30
    5794:	ff 1f       	adc	r31, r31
    5796:	ee 0f       	add	r30, r30
    5798:	ff 1f       	adc	r31, r31
    579a:	e1 58       	subi	r30, 0x81	; 129
    579c:	fd 4f       	sbci	r31, 0xFD	; 253
    579e:	80 91 41 02 	lds	r24, 0x0241
    57a2:	90 91 42 02 	lds	r25, 0x0242
    57a6:	a0 91 43 02 	lds	r26, 0x0243
    57aa:	b0 91 44 02 	lds	r27, 0x0244
    57ae:	80 83       	st	Z, r24
    57b0:	91 83       	std	Z+1, r25	; 0x01
    57b2:	a2 83       	std	Z+2, r26	; 0x02
    57b4:	b3 83       	std	Z+3, r27	; 0x03
    57b6:	90 91 25 02 	lds	r25, 0x0225
    57ba:	70 91 24 02 	lds	r23, 0x0224
    57be:	91 cd       	rjmp	.-1246   	; 0x52e2 <APP_voidCalculatorMode+0x3d0>
		switch(Pstate)
		{
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
    57c0:	e0 90 45 02 	lds	r14, 0x0245
    57c4:	f0 90 46 02 	lds	r15, 0x0246
    57c8:	00 91 47 02 	lds	r16, 0x0247
    57cc:	10 91 48 02 	lds	r17, 0x0248
    57d0:	c8 01       	movw	r24, r16
    57d2:	b7 01       	movw	r22, r14
    57d4:	20 e0       	ldi	r18, 0x00	; 0
    57d6:	30 e0       	ldi	r19, 0x00	; 0
    57d8:	40 e0       	ldi	r20, 0x00	; 0
    57da:	50 e0       	ldi	r21, 0x00	; 0
    57dc:	0e 94 a5 11 	call	0x234a	; 0x234a <__eqsf2>
    57e0:	88 23       	and	r24, r24
    57e2:	09 f4       	brne	.+2      	; 0x57e6 <APP_voidCalculatorMode+0x8d4>
    57e4:	73 c0       	rjmp	.+230    	; 0x58cc <APP_voidCalculatorMode+0x9ba>
				i=17;
			}
			else
				// dividing operation
			{
				MdArr[1]=MdArr[1] / MdArr[2] ;
    57e6:	60 91 41 02 	lds	r22, 0x0241
    57ea:	70 91 42 02 	lds	r23, 0x0242
    57ee:	80 91 43 02 	lds	r24, 0x0243
    57f2:	90 91 44 02 	lds	r25, 0x0244
    57f6:	a8 01       	movw	r20, r16
    57f8:	97 01       	movw	r18, r14
    57fa:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
    57fe:	60 93 41 02 	sts	0x0241, r22
    5802:	70 93 42 02 	sts	0x0242, r23
    5806:	80 93 43 02 	sts	0x0243, r24
    580a:	90 93 44 02 	sts	0x0244, r25
    580e:	74 ce       	rjmp	.-792    	; 0x54f8 <APP_voidCalculatorMode+0x5e6>
		switch(Pstate)
		{
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
    5810:	e0 90 45 02 	lds	r14, 0x0245
    5814:	f0 90 46 02 	lds	r15, 0x0246
    5818:	00 91 47 02 	lds	r16, 0x0247
    581c:	10 91 48 02 	lds	r17, 0x0248
    5820:	c8 01       	movw	r24, r16
    5822:	b7 01       	movw	r22, r14
    5824:	20 e0       	ldi	r18, 0x00	; 0
    5826:	30 e0       	ldi	r19, 0x00	; 0
    5828:	40 e0       	ldi	r20, 0x00	; 0
    582a:	50 e0       	ldi	r21, 0x00	; 0
    582c:	0e 94 a5 11 	call	0x234a	; 0x234a <__eqsf2>
    5830:	88 23       	and	r24, r24
    5832:	09 f4       	brne	.+2      	; 0x5836 <APP_voidCalculatorMode+0x924>
    5834:	56 c0       	rjmp	.+172    	; 0x58e2 <APP_voidCalculatorMode+0x9d0>
				i=17;
			}
			else
				// dividing operation
			{
				MdArr[1]=MdArr[1] / MdArr[2] ;
    5836:	60 91 41 02 	lds	r22, 0x0241
    583a:	70 91 42 02 	lds	r23, 0x0242
    583e:	80 91 43 02 	lds	r24, 0x0243
    5842:	90 91 44 02 	lds	r25, 0x0244
    5846:	a8 01       	movw	r20, r16
    5848:	97 01       	movw	r18, r14
    584a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
    584e:	60 93 41 02 	sts	0x0241, r22
    5852:	70 93 42 02 	sts	0x0242, r23
    5856:	80 93 43 02 	sts	0x0243, r24
    585a:	90 93 44 02 	sts	0x0244, r25
    585e:	64 ce       	rjmp	.-824    	; 0x5528 <APP_voidCalculatorMode+0x616>

		switch (Sstate)
		{
		// suming operation
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
    5860:	60 91 83 02 	lds	r22, 0x0283
    5864:	70 91 84 02 	lds	r23, 0x0284
    5868:	80 91 85 02 	lds	r24, 0x0285
    586c:	90 91 86 02 	lds	r25, 0x0286
    5870:	20 91 87 02 	lds	r18, 0x0287
    5874:	30 91 88 02 	lds	r19, 0x0288
    5878:	40 91 89 02 	lds	r20, 0x0289
    587c:	50 91 8a 02 	lds	r21, 0x028A
    5880:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    5884:	60 93 83 02 	sts	0x0283, r22
    5888:	70 93 84 02 	sts	0x0284, r23
    588c:	80 93 85 02 	sts	0x0285, r24
    5890:	90 93 86 02 	sts	0x0286, r25
    5894:	72 ce       	rjmp	.-796    	; 0x557a <APP_voidCalculatorMode+0x668>
    5896:	60 91 83 02 	lds	r22, 0x0283
    589a:	70 91 84 02 	lds	r23, 0x0284
    589e:	80 91 85 02 	lds	r24, 0x0285
    58a2:	90 91 86 02 	lds	r25, 0x0286
    58a6:	20 91 87 02 	lds	r18, 0x0287
    58aa:	30 91 88 02 	lds	r19, 0x0288
    58ae:	40 91 89 02 	lds	r20, 0x0289
    58b2:	50 91 8a 02 	lds	r21, 0x028A
    58b6:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    58ba:	60 93 83 02 	sts	0x0283, r22
    58be:	70 93 84 02 	sts	0x0284, r23
    58c2:	80 93 85 02 	sts	0x0285, r24
    58c6:	90 93 86 02 	sts	0x0286, r25
    58ca:	46 ce       	rjmp	.-884    	; 0x5558 <APP_voidCalculatorMode+0x646>
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
			{
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    58cc:	82 e0       	ldi	r24, 0x02	; 2
    58ce:	61 e0       	ldi	r22, 0x01	; 1
    58d0:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Math ERROR");
    58d4:	89 e7       	ldi	r24, 0x79	; 121
    58d6:	90 e0       	ldi	r25, 0x00	; 0
    58d8:	0e 94 c1 19 	call	0x3382	; 0x3382 <CLCD_voidSendString>
				i=17;
    58dc:	60 92 dc 01 	sts	0x01DC, r6
    58e0:	0b ce       	rjmp	.-1002   	; 0x54f8 <APP_voidCalculatorMode+0x5e6>
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
			{
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    58e2:	82 e0       	ldi	r24, 0x02	; 2
    58e4:	61 e0       	ldi	r22, 0x01	; 1
    58e6:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Math ERROR");
    58ea:	89 e7       	ldi	r24, 0x79	; 121
    58ec:	90 e0       	ldi	r25, 0x00	; 0
    58ee:	0e 94 c1 19 	call	0x3382	; 0x3382 <CLCD_voidSendString>
				i=17;
    58f2:	60 92 dc 01 	sts	0x01DC, r6
    58f6:	18 ce       	rjmp	.-976    	; 0x5528 <APP_voidCalculatorMode+0x616>

000058f8 <Equal_fun>:

}

// desplaying the final result
void Equal_fun (void)
{
    58f8:	ef 92       	push	r14
    58fa:	ff 92       	push	r15
    58fc:	0f 93       	push	r16
    58fe:	1f 93       	push	r17
    5900:	cf 93       	push	r28
    5902:	df 93       	push	r29

	cleanSc = 1 ;
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	80 93 3a 02 	sts	0x023A, r24

	if (Pstate==1 || Pstate==2 )
    590a:	30 91 25 02 	lds	r19, 0x0225
    590e:	83 2f       	mov	r24, r19
    5910:	81 50       	subi	r24, 0x01	; 1
    5912:	82 30       	cpi	r24, 0x02	; 2
    5914:	08 f4       	brcc	.+2      	; 0x5918 <Equal_fun+0x20>
    5916:	58 c0       	rjmp	.+176    	; 0x59c8 <Equal_fun+0xd0>
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
			CLCD_voidSendFloat(MdArr[1]);
		}

	}
	if (Sstate==1 || Sstate==2 )
    5918:	80 91 23 02 	lds	r24, 0x0223
    591c:	81 50       	subi	r24, 0x01	; 1
    591e:	82 30       	cpi	r24, 0x02	; 2
    5920:	38 f0       	brcs	.+14     	; 0x5930 <Equal_fun+0x38>
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
			CLCD_voidSendFloat(sumArr[1]);
		}
	}

}
    5922:	df 91       	pop	r29
    5924:	cf 91       	pop	r28
    5926:	1f 91       	pop	r17
    5928:	0f 91       	pop	r16
    592a:	ff 90       	pop	r15
    592c:	ef 90       	pop	r14
    592e:	08 95       	ret
}

// suming or minus operation function
void S_fun (void)
{
	Preset =1 ;
    5930:	81 e0       	ldi	r24, 0x01	; 1
    5932:	80 93 7e 02 	sts	0x027E, r24
	Sop++;
    5936:	50 91 24 02 	lds	r21, 0x0224
    593a:	5f 5f       	subi	r21, 0xFF	; 255
    593c:	50 93 24 02 	sts	0x0224, r21
	s++ ;
    5940:	40 91 7d 02 	lds	r20, 0x027D
    5944:	4f 5f       	subi	r20, 0xFF	; 255
    5946:	40 93 7d 02 	sts	0x027D, r20
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
    594a:	24 2f       	mov	r18, r20
    594c:	33 27       	eor	r19, r19
    594e:	27 fd       	sbrc	r18, 7
    5950:	30 95       	com	r19
    5952:	22 0f       	add	r18, r18
    5954:	33 1f       	adc	r19, r19
    5956:	22 0f       	add	r18, r18
    5958:	33 1f       	adc	r19, r19
    595a:	21 58       	subi	r18, 0x81	; 129
    595c:	3d 4f       	sbci	r19, 0xFD	; 253
    595e:	e0 91 29 02 	lds	r30, 0x0229
    5962:	ff 27       	eor	r31, r31
    5964:	e7 fd       	sbrc	r30, 7
    5966:	f0 95       	com	r31
    5968:	ee 0f       	add	r30, r30
    596a:	ff 1f       	adc	r31, r31
    596c:	ee 0f       	add	r30, r30
    596e:	ff 1f       	adc	r31, r31
    5970:	e0 54       	subi	r30, 0x40	; 64
    5972:	fd 4f       	sbci	r31, 0xFD	; 253
    5974:	80 81       	ld	r24, Z
    5976:	91 81       	ldd	r25, Z+1	; 0x01
    5978:	a2 81       	ldd	r26, Z+2	; 0x02
    597a:	b3 81       	ldd	r27, Z+3	; 0x03
    597c:	f9 01       	movw	r30, r18
    597e:	80 83       	st	Z, r24
    5980:	91 83       	std	Z+1, r25	; 0x01
    5982:	a2 83       	std	Z+2, r26	; 0x02
    5984:	b3 83       	std	Z+3, r27	; 0x03
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
    5986:	90 91 25 02 	lds	r25, 0x0225
    598a:	89 2f       	mov	r24, r25
    598c:	81 50       	subi	r24, 0x01	; 1
    598e:	82 30       	cpi	r24, 0x02	; 2
    5990:	08 f4       	brcc	.+2      	; 0x5994 <Equal_fun+0x9c>
    5992:	15 c1       	rjmp	.+554    	; 0x5bbe <Equal_fun+0x2c6>
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    5994:	95 30       	cpi	r25, 0x05	; 5
    5996:	09 f4       	brne	.+2      	; 0x599a <Equal_fun+0xa2>
    5998:	80 c0       	rjmp	.+256    	; 0x5a9a <Equal_fun+0x1a2>
	{
		sumArr[s] = MdArr[1];
	}
	// doing the operation on two numbers
	if (Sop==2)
    599a:	52 30       	cpi	r21, 0x02	; 2
    599c:	09 f4       	brne	.+2      	; 0x59a0 <Equal_fun+0xa8>
    599e:	52 c0       	rjmp	.+164    	; 0x5a44 <Equal_fun+0x14c>
	}
	if (Sstate==1 || Sstate==2 )
	{
		S_fun ();
		// Exception for infinity loop (dividing by zero)
		if(i==17){}
    59a0:	80 91 dc 01 	lds	r24, 0x01DC
    59a4:	81 31       	cpi	r24, 0x11	; 17
    59a6:	09 f4       	brne	.+2      	; 0x59aa <Equal_fun+0xb2>
    59a8:	bc cf       	rjmp	.-136    	; 0x5922 <Equal_fun+0x2a>
		else
			// printing the result
		{
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    59aa:	82 e0       	ldi	r24, 0x02	; 2
    59ac:	61 e0       	ldi	r22, 0x01	; 1
    59ae:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
			CLCD_voidSendFloat(sumArr[1]);
    59b2:	60 91 83 02 	lds	r22, 0x0283
    59b6:	70 91 84 02 	lds	r23, 0x0284
    59ba:	80 91 85 02 	lds	r24, 0x0285
    59be:	90 91 86 02 	lds	r25, 0x0286
    59c2:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <CLCD_voidSendFloat>
    59c6:	ad cf       	rjmp	.-166    	; 0x5922 <Equal_fun+0x2a>
}

// Multiplying or Dividing operation function
void P_fun (void)
{
	Pop ++ ;
    59c8:	20 91 bf 02 	lds	r18, 0x02BF
    59cc:	2f 5f       	subi	r18, 0xFF	; 255
    59ce:	20 93 bf 02 	sts	0x02BF, r18
	d++;
    59d2:	80 91 3b 02 	lds	r24, 0x023B
    59d6:	8f 5f       	subi	r24, 0xFF	; 255
    59d8:	80 93 3b 02 	sts	0x023B, r24
	// MdArr holding first and second number
	MdArr[d] = opArr[z] ;
    59dc:	c8 2f       	mov	r28, r24
    59de:	dd 27       	eor	r29, r29
    59e0:	c7 fd       	sbrc	r28, 7
    59e2:	d0 95       	com	r29
    59e4:	cc 0f       	add	r28, r28
    59e6:	dd 1f       	adc	r29, r29
    59e8:	cc 0f       	add	r28, r28
    59ea:	dd 1f       	adc	r29, r29
    59ec:	c3 5c       	subi	r28, 0xC3	; 195
    59ee:	dd 4f       	sbci	r29, 0xFD	; 253
    59f0:	e0 91 29 02 	lds	r30, 0x0229
    59f4:	ff 27       	eor	r31, r31
    59f6:	e7 fd       	sbrc	r30, 7
    59f8:	f0 95       	com	r31
    59fa:	ee 0f       	add	r30, r30
    59fc:	ff 1f       	adc	r31, r31
    59fe:	ee 0f       	add	r30, r30
    5a00:	ff 1f       	adc	r31, r31
    5a02:	e0 54       	subi	r30, 0x40	; 64
    5a04:	fd 4f       	sbci	r31, 0xFD	; 253
    5a06:	80 81       	ld	r24, Z
    5a08:	91 81       	ldd	r25, Z+1	; 0x01
    5a0a:	a2 81       	ldd	r26, Z+2	; 0x02
    5a0c:	b3 81       	ldd	r27, Z+3	; 0x03
    5a0e:	88 83       	st	Y, r24
    5a10:	99 83       	std	Y+1, r25	; 0x01
    5a12:	aa 83       	std	Y+2, r26	; 0x02
    5a14:	bb 83       	std	Y+3, r27	; 0x03
	// doing the operation on two numbers
	if (Pop==2)
    5a16:	22 30       	cpi	r18, 0x02	; 2
    5a18:	09 f4       	brne	.+2      	; 0x5a1c <Equal_fun+0x124>
    5a1a:	5b c0       	rjmp	.+182    	; 0x5ad2 <Equal_fun+0x1da>

	if (Pstate==1 || Pstate==2 )
	{
		P_fun ();
		// Exception for infinity loop (dividing by zero)
		if(i==17){}
    5a1c:	80 91 dc 01 	lds	r24, 0x01DC
    5a20:	81 31       	cpi	r24, 0x11	; 17
    5a22:	09 f4       	brne	.+2      	; 0x5a26 <Equal_fun+0x12e>
    5a24:	79 cf       	rjmp	.-270    	; 0x5918 <Equal_fun+0x20>
		else
			// printing the result
		{
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    5a26:	82 e0       	ldi	r24, 0x02	; 2
    5a28:	61 e0       	ldi	r22, 0x01	; 1
    5a2a:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
			CLCD_voidSendFloat(MdArr[1]);
    5a2e:	60 91 41 02 	lds	r22, 0x0241
    5a32:	70 91 42 02 	lds	r23, 0x0242
    5a36:	80 91 43 02 	lds	r24, 0x0243
    5a3a:	90 91 44 02 	lds	r25, 0x0244
    5a3e:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <CLCD_voidSendFloat>
    5a42:	6a cf       	rjmp	.-300    	; 0x5918 <Equal_fun+0x20>
	}
	// doing the operation on two numbers
	if (Sop==2)
	{

		switch (Sstate)
    5a44:	80 91 23 02 	lds	r24, 0x0223
    5a48:	81 30       	cpi	r24, 0x01	; 1
    5a4a:	09 f4       	brne	.+2      	; 0x5a4e <Equal_fun+0x156>
    5a4c:	76 c0       	rjmp	.+236    	; 0x5b3a <Equal_fun+0x242>
    5a4e:	82 30       	cpi	r24, 0x02	; 2
    5a50:	d1 f4       	brne	.+52     	; 0x5a86 <Equal_fun+0x18e>
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
			break ;
			// minus operation
		case 2 :
			sumArr[1]=sumArr[1] - sumArr[2] ;
    5a52:	60 91 83 02 	lds	r22, 0x0283
    5a56:	70 91 84 02 	lds	r23, 0x0284
    5a5a:	80 91 85 02 	lds	r24, 0x0285
    5a5e:	90 91 86 02 	lds	r25, 0x0286
    5a62:	20 91 87 02 	lds	r18, 0x0287
    5a66:	30 91 88 02 	lds	r19, 0x0288
    5a6a:	40 91 89 02 	lds	r20, 0x0289
    5a6e:	50 91 8a 02 	lds	r21, 0x028A
    5a72:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__subsf3>
    5a76:	60 93 83 02 	sts	0x0283, r22
    5a7a:	70 93 84 02 	sts	0x0284, r23
    5a7e:	80 93 85 02 	sts	0x0285, r24
    5a82:	90 93 86 02 	sts	0x0286, r25
			break ;
		}
		Sop=1;
    5a86:	81 e0       	ldi	r24, 0x01	; 1
    5a88:	80 93 24 02 	sts	0x0224, r24
		s=1;
    5a8c:	80 93 7d 02 	sts	0x027D, r24
		Pop=0;
    5a90:	10 92 bf 02 	sts	0x02BF, r1
		d=0;
    5a94:	10 92 3b 02 	sts	0x023B, r1
    5a98:	83 cf       	rjmp	.-250    	; 0x59a0 <Equal_fun+0xa8>
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
		sumArr[s] = MdArr[1];
	}
	if (Pstate==5 && state==1)
    5a9a:	80 91 28 02 	lds	r24, 0x0228
    5a9e:	81 30       	cpi	r24, 0x01	; 1
    5aa0:	09 f0       	breq	.+2      	; 0x5aa4 <Equal_fun+0x1ac>
    5aa2:	7b cf       	rjmp	.-266    	; 0x599a <Equal_fun+0xa2>
	{
		sumArr[s] = MdArr[1];
    5aa4:	e4 2f       	mov	r30, r20
    5aa6:	ff 27       	eor	r31, r31
    5aa8:	e7 fd       	sbrc	r30, 7
    5aaa:	f0 95       	com	r31
    5aac:	ee 0f       	add	r30, r30
    5aae:	ff 1f       	adc	r31, r31
    5ab0:	ee 0f       	add	r30, r30
    5ab2:	ff 1f       	adc	r31, r31
    5ab4:	e1 58       	subi	r30, 0x81	; 129
    5ab6:	fd 4f       	sbci	r31, 0xFD	; 253
    5ab8:	80 91 41 02 	lds	r24, 0x0241
    5abc:	90 91 42 02 	lds	r25, 0x0242
    5ac0:	a0 91 43 02 	lds	r26, 0x0243
    5ac4:	b0 91 44 02 	lds	r27, 0x0244
    5ac8:	80 83       	st	Z, r24
    5aca:	91 83       	std	Z+1, r25	; 0x01
    5acc:	a2 83       	std	Z+2, r26	; 0x02
    5ace:	b3 83       	std	Z+3, r27	; 0x03
    5ad0:	64 cf       	rjmp	.-312    	; 0x599a <Equal_fun+0xa2>
	MdArr[d] = opArr[z] ;
	// doing the operation on two numbers
	if (Pop==2)
	{

		switch(Pstate)
    5ad2:	31 30       	cpi	r19, 0x01	; 1
    5ad4:	09 f4       	brne	.+2      	; 0x5ad8 <Equal_fun+0x1e0>
    5ad6:	4c c0       	rjmp	.+152    	; 0x5b70 <Equal_fun+0x278>
    5ad8:	32 30       	cpi	r19, 0x02	; 2
    5ada:	d1 f4       	brne	.+52     	; 0x5b10 <Equal_fun+0x218>
			}
			break ;

			// multiplying operation
		case 2 :
			MdArr[1]=MdArr[1] * MdArr[2] ;
    5adc:	60 91 41 02 	lds	r22, 0x0241
    5ae0:	70 91 42 02 	lds	r23, 0x0242
    5ae4:	80 91 43 02 	lds	r24, 0x0243
    5ae8:	90 91 44 02 	lds	r25, 0x0244
    5aec:	20 91 45 02 	lds	r18, 0x0245
    5af0:	30 91 46 02 	lds	r19, 0x0246
    5af4:	40 91 47 02 	lds	r20, 0x0247
    5af8:	50 91 48 02 	lds	r21, 0x0248
    5afc:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <__mulsf3>
    5b00:	60 93 41 02 	sts	0x0241, r22
    5b04:	70 93 42 02 	sts	0x0242, r23
    5b08:	80 93 43 02 	sts	0x0243, r24
    5b0c:	90 93 44 02 	sts	0x0244, r25
			break ;
		}

		Pop = 1;
    5b10:	81 e0       	ldi	r24, 0x01	; 1
    5b12:	80 93 bf 02 	sts	0x02BF, r24
		d = 1;
    5b16:	80 93 3b 02 	sts	0x023B, r24
		Pstate=0;
    5b1a:	10 92 25 02 	sts	0x0225, r1

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    5b1e:	80 91 7e 02 	lds	r24, 0x027E
    5b22:	81 30       	cpi	r24, 0x01	; 1
    5b24:	09 f4       	brne	.+2      	; 0x5b28 <Equal_fun+0x230>
    5b26:	6a c0       	rjmp	.+212    	; 0x5bfc <Equal_fun+0x304>
		// Exception to tell the S_fun to start calculating the all number pervious the equal operator
		if (state==1){Pstate=5;}
    5b28:	80 91 28 02 	lds	r24, 0x0228
    5b2c:	81 30       	cpi	r24, 0x01	; 1
    5b2e:	09 f0       	breq	.+2      	; 0x5b32 <Equal_fun+0x23a>
    5b30:	75 cf       	rjmp	.-278    	; 0x5a1c <Equal_fun+0x124>
    5b32:	85 e0       	ldi	r24, 0x05	; 5
    5b34:	80 93 25 02 	sts	0x0225, r24
    5b38:	71 cf       	rjmp	.-286    	; 0x5a1c <Equal_fun+0x124>

		switch (Sstate)
		{
		// suming operation
		case 1 :
			sumArr[1]=sumArr[1] + sumArr[2] ;
    5b3a:	60 91 83 02 	lds	r22, 0x0283
    5b3e:	70 91 84 02 	lds	r23, 0x0284
    5b42:	80 91 85 02 	lds	r24, 0x0285
    5b46:	90 91 86 02 	lds	r25, 0x0286
    5b4a:	20 91 87 02 	lds	r18, 0x0287
    5b4e:	30 91 88 02 	lds	r19, 0x0288
    5b52:	40 91 89 02 	lds	r20, 0x0289
    5b56:	50 91 8a 02 	lds	r21, 0x028A
    5b5a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <__addsf3>
    5b5e:	60 93 83 02 	sts	0x0283, r22
    5b62:	70 93 84 02 	sts	0x0284, r23
    5b66:	80 93 85 02 	sts	0x0285, r24
    5b6a:	90 93 86 02 	sts	0x0286, r25
    5b6e:	8b cf       	rjmp	.-234    	; 0x5a86 <Equal_fun+0x18e>
		switch(Pstate)
		{
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
    5b70:	e0 90 45 02 	lds	r14, 0x0245
    5b74:	f0 90 46 02 	lds	r15, 0x0246
    5b78:	00 91 47 02 	lds	r16, 0x0247
    5b7c:	10 91 48 02 	lds	r17, 0x0248
    5b80:	c8 01       	movw	r24, r16
    5b82:	b7 01       	movw	r22, r14
    5b84:	20 e0       	ldi	r18, 0x00	; 0
    5b86:	30 e0       	ldi	r19, 0x00	; 0
    5b88:	40 e0       	ldi	r20, 0x00	; 0
    5b8a:	50 e0       	ldi	r21, 0x00	; 0
    5b8c:	0e 94 a5 11 	call	0x234a	; 0x234a <__eqsf2>
    5b90:	88 23       	and	r24, r24
    5b92:	d9 f1       	breq	.+118    	; 0x5c0a <Equal_fun+0x312>
				i=17;
			}
			else
				// dividing operation
			{
				MdArr[1]=MdArr[1] / MdArr[2] ;
    5b94:	60 91 41 02 	lds	r22, 0x0241
    5b98:	70 91 42 02 	lds	r23, 0x0242
    5b9c:	80 91 43 02 	lds	r24, 0x0243
    5ba0:	90 91 44 02 	lds	r25, 0x0244
    5ba4:	a8 01       	movw	r20, r16
    5ba6:	97 01       	movw	r18, r14
    5ba8:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <__divsf3>
    5bac:	60 93 41 02 	sts	0x0241, r22
    5bb0:	70 93 42 02 	sts	0x0242, r23
    5bb4:	80 93 43 02 	sts	0x0243, r24
    5bb8:	90 93 44 02 	sts	0x0244, r25
    5bbc:	a9 cf       	rjmp	.-174    	; 0x5b10 <Equal_fun+0x218>
	// sumArr holding first and secound number
	sumArr[s] = opArr[z] ;
	// if there is any previous multipication or division operation have to be done first
	if (Pstate==1 || Pstate==2)
	{
		P_fun();
    5bbe:	0e 94 d6 21 	call	0x43ac	; 0x43ac <P_fun>
		sumArr[s] = MdArr[1];
    5bc2:	40 91 7d 02 	lds	r20, 0x027D
    5bc6:	e4 2f       	mov	r30, r20
    5bc8:	ff 27       	eor	r31, r31
    5bca:	e7 fd       	sbrc	r30, 7
    5bcc:	f0 95       	com	r31
    5bce:	ee 0f       	add	r30, r30
    5bd0:	ff 1f       	adc	r31, r31
    5bd2:	ee 0f       	add	r30, r30
    5bd4:	ff 1f       	adc	r31, r31
    5bd6:	e1 58       	subi	r30, 0x81	; 129
    5bd8:	fd 4f       	sbci	r31, 0xFD	; 253
    5bda:	80 91 41 02 	lds	r24, 0x0241
    5bde:	90 91 42 02 	lds	r25, 0x0242
    5be2:	a0 91 43 02 	lds	r26, 0x0243
    5be6:	b0 91 44 02 	lds	r27, 0x0244
    5bea:	80 83       	st	Z, r24
    5bec:	91 83       	std	Z+1, r25	; 0x01
    5bee:	a2 83       	std	Z+2, r26	; 0x02
    5bf0:	b3 83       	std	Z+3, r27	; 0x03
    5bf2:	90 91 25 02 	lds	r25, 0x0225
    5bf6:	50 91 24 02 	lds	r21, 0x0224
    5bfa:	cc ce       	rjmp	.-616    	; 0x5994 <Equal_fun+0x9c>
		Pop = 1;
		d = 1;
		Pstate=0;

		// Exception to reset P_fun counters
		if (Preset==1 ){ d=0; Pop=0; Preset=0; }
    5bfc:	10 92 3b 02 	sts	0x023B, r1
    5c00:	10 92 bf 02 	sts	0x02BF, r1
    5c04:	10 92 7e 02 	sts	0x027E, r1
    5c08:	8f cf       	rjmp	.-226    	; 0x5b28 <Equal_fun+0x230>
		// dividing operation
		case 1 :
			// Exception for infinity loop (dividing by zero)
			if (MdArr[2]==0)
			{
				CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    5c0a:	82 e0       	ldi	r24, 0x02	; 2
    5c0c:	61 e0       	ldi	r22, 0x01	; 1
    5c0e:	0e 94 56 1a 	call	0x34ac	; 0x34ac <CLCD_voidSetPosition>
				CLCD_voidSendString((u8*)"Math ERROR");
    5c12:	89 e7       	ldi	r24, 0x79	; 121
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	0e 94 c1 19 	call	0x3382	; 0x3382 <CLCD_voidSendString>
				i=17;
    5c1a:	81 e1       	ldi	r24, 0x11	; 17
    5c1c:	80 93 dc 01 	sts	0x01DC, r24
    5c20:	77 cf       	rjmp	.-274    	; 0x5b10 <Equal_fun+0x218>

00005c22 <main>:

#include "APP/APP_interface.h"

int main ()
{
	APP_voidInit();
    5c22:	0e 94 ba 21 	call	0x4374	; 0x4374 <APP_voidInit>
	while(1)
	{
		APP_voidCalculatorMode();
    5c26:	0e 94 89 27 	call	0x4f12	; 0x4f12 <APP_voidCalculatorMode>
    5c2a:	fd cf       	rjmp	.-6      	; 0x5c26 <main+0x4>

00005c2c <__mulsi3>:
    5c2c:	62 9f       	mul	r22, r18
    5c2e:	d0 01       	movw	r26, r0
    5c30:	73 9f       	mul	r23, r19
    5c32:	f0 01       	movw	r30, r0
    5c34:	82 9f       	mul	r24, r18
    5c36:	e0 0d       	add	r30, r0
    5c38:	f1 1d       	adc	r31, r1
    5c3a:	64 9f       	mul	r22, r20
    5c3c:	e0 0d       	add	r30, r0
    5c3e:	f1 1d       	adc	r31, r1
    5c40:	92 9f       	mul	r25, r18
    5c42:	f0 0d       	add	r31, r0
    5c44:	83 9f       	mul	r24, r19
    5c46:	f0 0d       	add	r31, r0
    5c48:	74 9f       	mul	r23, r20
    5c4a:	f0 0d       	add	r31, r0
    5c4c:	65 9f       	mul	r22, r21
    5c4e:	f0 0d       	add	r31, r0
    5c50:	99 27       	eor	r25, r25
    5c52:	72 9f       	mul	r23, r18
    5c54:	b0 0d       	add	r27, r0
    5c56:	e1 1d       	adc	r30, r1
    5c58:	f9 1f       	adc	r31, r25
    5c5a:	63 9f       	mul	r22, r19
    5c5c:	b0 0d       	add	r27, r0
    5c5e:	e1 1d       	adc	r30, r1
    5c60:	f9 1f       	adc	r31, r25
    5c62:	bd 01       	movw	r22, r26
    5c64:	cf 01       	movw	r24, r30
    5c66:	11 24       	eor	r1, r1
    5c68:	08 95       	ret

00005c6a <__udivmodsi4>:
    5c6a:	a1 e2       	ldi	r26, 0x21	; 33
    5c6c:	1a 2e       	mov	r1, r26
    5c6e:	aa 1b       	sub	r26, r26
    5c70:	bb 1b       	sub	r27, r27
    5c72:	fd 01       	movw	r30, r26
    5c74:	0d c0       	rjmp	.+26     	; 0x5c90 <__udivmodsi4_ep>

00005c76 <__udivmodsi4_loop>:
    5c76:	aa 1f       	adc	r26, r26
    5c78:	bb 1f       	adc	r27, r27
    5c7a:	ee 1f       	adc	r30, r30
    5c7c:	ff 1f       	adc	r31, r31
    5c7e:	a2 17       	cp	r26, r18
    5c80:	b3 07       	cpc	r27, r19
    5c82:	e4 07       	cpc	r30, r20
    5c84:	f5 07       	cpc	r31, r21
    5c86:	20 f0       	brcs	.+8      	; 0x5c90 <__udivmodsi4_ep>
    5c88:	a2 1b       	sub	r26, r18
    5c8a:	b3 0b       	sbc	r27, r19
    5c8c:	e4 0b       	sbc	r30, r20
    5c8e:	f5 0b       	sbc	r31, r21

00005c90 <__udivmodsi4_ep>:
    5c90:	66 1f       	adc	r22, r22
    5c92:	77 1f       	adc	r23, r23
    5c94:	88 1f       	adc	r24, r24
    5c96:	99 1f       	adc	r25, r25
    5c98:	1a 94       	dec	r1
    5c9a:	69 f7       	brne	.-38     	; 0x5c76 <__udivmodsi4_loop>
    5c9c:	60 95       	com	r22
    5c9e:	70 95       	com	r23
    5ca0:	80 95       	com	r24
    5ca2:	90 95       	com	r25
    5ca4:	9b 01       	movw	r18, r22
    5ca6:	ac 01       	movw	r20, r24
    5ca8:	bd 01       	movw	r22, r26
    5caa:	cf 01       	movw	r24, r30
    5cac:	08 95       	ret

00005cae <__prologue_saves__>:
    5cae:	2f 92       	push	r2
    5cb0:	3f 92       	push	r3
    5cb2:	4f 92       	push	r4
    5cb4:	5f 92       	push	r5
    5cb6:	6f 92       	push	r6
    5cb8:	7f 92       	push	r7
    5cba:	8f 92       	push	r8
    5cbc:	9f 92       	push	r9
    5cbe:	af 92       	push	r10
    5cc0:	bf 92       	push	r11
    5cc2:	cf 92       	push	r12
    5cc4:	df 92       	push	r13
    5cc6:	ef 92       	push	r14
    5cc8:	ff 92       	push	r15
    5cca:	0f 93       	push	r16
    5ccc:	1f 93       	push	r17
    5cce:	cf 93       	push	r28
    5cd0:	df 93       	push	r29
    5cd2:	cd b7       	in	r28, 0x3d	; 61
    5cd4:	de b7       	in	r29, 0x3e	; 62
    5cd6:	ca 1b       	sub	r28, r26
    5cd8:	db 0b       	sbc	r29, r27
    5cda:	0f b6       	in	r0, 0x3f	; 63
    5cdc:	f8 94       	cli
    5cde:	de bf       	out	0x3e, r29	; 62
    5ce0:	0f be       	out	0x3f, r0	; 63
    5ce2:	cd bf       	out	0x3d, r28	; 61
    5ce4:	09 94       	ijmp

00005ce6 <__epilogue_restores__>:
    5ce6:	2a 88       	ldd	r2, Y+18	; 0x12
    5ce8:	39 88       	ldd	r3, Y+17	; 0x11
    5cea:	48 88       	ldd	r4, Y+16	; 0x10
    5cec:	5f 84       	ldd	r5, Y+15	; 0x0f
    5cee:	6e 84       	ldd	r6, Y+14	; 0x0e
    5cf0:	7d 84       	ldd	r7, Y+13	; 0x0d
    5cf2:	8c 84       	ldd	r8, Y+12	; 0x0c
    5cf4:	9b 84       	ldd	r9, Y+11	; 0x0b
    5cf6:	aa 84       	ldd	r10, Y+10	; 0x0a
    5cf8:	b9 84       	ldd	r11, Y+9	; 0x09
    5cfa:	c8 84       	ldd	r12, Y+8	; 0x08
    5cfc:	df 80       	ldd	r13, Y+7	; 0x07
    5cfe:	ee 80       	ldd	r14, Y+6	; 0x06
    5d00:	fd 80       	ldd	r15, Y+5	; 0x05
    5d02:	0c 81       	ldd	r16, Y+4	; 0x04
    5d04:	1b 81       	ldd	r17, Y+3	; 0x03
    5d06:	aa 81       	ldd	r26, Y+2	; 0x02
    5d08:	b9 81       	ldd	r27, Y+1	; 0x01
    5d0a:	ce 0f       	add	r28, r30
    5d0c:	d1 1d       	adc	r29, r1
    5d0e:	0f b6       	in	r0, 0x3f	; 63
    5d10:	f8 94       	cli
    5d12:	de bf       	out	0x3e, r29	; 62
    5d14:	0f be       	out	0x3f, r0	; 63
    5d16:	cd bf       	out	0x3d, r28	; 61
    5d18:	ed 01       	movw	r28, r26
    5d1a:	08 95       	ret

00005d1c <_exit>:
    5d1c:	f8 94       	cli

00005d1e <__stop_program>:
    5d1e:	ff cf       	rjmp	.-2      	; 0x5d1e <__stop_program>
