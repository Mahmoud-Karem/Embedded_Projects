
FreeRTOS_LCD_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007100  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  00007100  00007194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000031b  008001da  008001da  0000730e  2**0
                  ALLOC
  3 .stab         00006090  00000000  00000000  00007310  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000038a6  00000000  00000000  0000d3a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00010c46  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  00010de6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ce6  00000000  00000000  00010fd6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001354  00000000  00000000  00013cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001308  00000000  00000000  00015010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00016318  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000340  00000000  00000000  000164d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000021ec  00000000  00000000  00016818  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000080  00000000  00000000  00018a04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 55 1a 	jmp	0x34aa	; 0x34aa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	f1 e7       	ldi	r31, 0x71	; 113
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	14 e0       	ldi	r17, 0x04	; 4
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3f       	cpi	r26, 0xF5	; 245
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 64 37 	call	0x6ec8	; 0x6ec8 <main>
      8a:	0c 94 7e 38 	jmp	0x70fc	; 0x70fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 ad 10 	call	0x215a	; 0x215a <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 25 0f 	call	0x1e4a	; 0x1e4a <__subsf3>
     1bc:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 0d 11 	call	0x221a	; 0x221a <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 28 38 	jmp	0x7050	; 0x7050 <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	89 56       	subi	r24, 0x69	; 105
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	89 56       	subi	r24, 0x69	; 105
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	89 56       	subi	r24, 0x69	; 105
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 44 38 	jmp	0x7088	; 0x7088 <__epilogue_restores__>

00000ed2 <__umoddi3>:
     ed2:	ab e5       	ldi	r26, 0x5B	; 91
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 28 38 	jmp	0x7050	; 0x7050 <__prologue_saves__>
     ede:	a8 e0       	ldi	r26, 0x08	; 8
     ee0:	4e 01       	movw	r8, r28
     ee2:	08 94       	sec
     ee4:	81 1c       	adc	r8, r1
     ee6:	91 1c       	adc	r9, r1
     ee8:	f4 01       	movw	r30, r8
     eea:	6a 2e       	mov	r6, r26
     eec:	11 92       	st	Z+, r1
     eee:	6a 94       	dec	r6
     ef0:	e9 f7       	brne	.-6      	; 0xeec <__umoddi3+0x1a>
     ef2:	29 83       	std	Y+1, r18	; 0x01
     ef4:	3a 83       	std	Y+2, r19	; 0x02
     ef6:	4b 83       	std	Y+3, r20	; 0x03
     ef8:	5c 83       	std	Y+4, r21	; 0x04
     efa:	6d 83       	std	Y+5, r22	; 0x05
     efc:	7e 83       	std	Y+6, r23	; 0x06
     efe:	8f 83       	std	Y+7, r24	; 0x07
     f00:	98 87       	std	Y+8, r25	; 0x08
     f02:	ce 01       	movw	r24, r28
     f04:	09 96       	adiw	r24, 0x09	; 9
     f06:	fc 01       	movw	r30, r24
     f08:	11 92       	st	Z+, r1
     f0a:	aa 95       	dec	r26
     f0c:	e9 f7       	brne	.-6      	; 0xf08 <__umoddi3+0x36>
     f0e:	a9 86       	std	Y+9, r10	; 0x09
     f10:	ba 86       	std	Y+10, r11	; 0x0a
     f12:	cb 86       	std	Y+11, r12	; 0x0b
     f14:	dc 86       	std	Y+12, r13	; 0x0c
     f16:	ed 86       	std	Y+13, r14	; 0x0d
     f18:	fe 86       	std	Y+14, r15	; 0x0e
     f1a:	0f 87       	std	Y+15, r16	; 0x0f
     f1c:	18 8b       	std	Y+16, r17	; 0x10
     f1e:	29 84       	ldd	r2, Y+9	; 0x09
     f20:	3a 84       	ldd	r3, Y+10	; 0x0a
     f22:	4b 84       	ldd	r4, Y+11	; 0x0b
     f24:	5c 84       	ldd	r5, Y+12	; 0x0c
     f26:	ad 84       	ldd	r10, Y+13	; 0x0d
     f28:	be 84       	ldd	r11, Y+14	; 0x0e
     f2a:	cf 84       	ldd	r12, Y+15	; 0x0f
     f2c:	d8 88       	ldd	r13, Y+16	; 0x10
     f2e:	29 81       	ldd	r18, Y+1	; 0x01
     f30:	3a 81       	ldd	r19, Y+2	; 0x02
     f32:	4b 81       	ldd	r20, Y+3	; 0x03
     f34:	5c 81       	ldd	r21, Y+4	; 0x04
     f36:	69 96       	adiw	r28, 0x19	; 25
     f38:	2f af       	std	Y+63, r18	; 0x3f
     f3a:	69 97       	sbiw	r28, 0x19	; 25
     f3c:	6a 96       	adiw	r28, 0x1a	; 26
     f3e:	3f af       	std	Y+63, r19	; 0x3f
     f40:	6a 97       	sbiw	r28, 0x1a	; 26
     f42:	6b 96       	adiw	r28, 0x1b	; 27
     f44:	4f af       	std	Y+63, r20	; 0x3f
     f46:	6b 97       	sbiw	r28, 0x1b	; 27
     f48:	6c 96       	adiw	r28, 0x1c	; 28
     f4a:	5f af       	std	Y+63, r21	; 0x3f
     f4c:	6c 97       	sbiw	r28, 0x1c	; 28
     f4e:	6c 96       	adiw	r28, 0x1c	; 28
     f50:	6c ac       	ldd	r6, Y+60	; 0x3c
     f52:	7d ac       	ldd	r7, Y+61	; 0x3d
     f54:	8e ac       	ldd	r8, Y+62	; 0x3e
     f56:	9f ac       	ldd	r9, Y+63	; 0x3f
     f58:	6c 97       	sbiw	r28, 0x1c	; 28
     f5a:	69 aa       	std	Y+49, r6	; 0x31
     f5c:	7a aa       	std	Y+50, r7	; 0x32
     f5e:	8b aa       	std	Y+51, r8	; 0x33
     f60:	9c aa       	std	Y+52, r9	; 0x34
     f62:	6d 81       	ldd	r22, Y+5	; 0x05
     f64:	7e 81       	ldd	r23, Y+6	; 0x06
     f66:	8f 81       	ldd	r24, Y+7	; 0x07
     f68:	98 85       	ldd	r25, Y+8	; 0x08
     f6a:	3b 01       	movw	r6, r22
     f6c:	4c 01       	movw	r8, r24
     f6e:	6d aa       	std	Y+53, r6	; 0x35
     f70:	7e aa       	std	Y+54, r7	; 0x36
     f72:	8f aa       	std	Y+55, r8	; 0x37
     f74:	98 ae       	std	Y+56, r9	; 0x38
     f76:	a1 14       	cp	r10, r1
     f78:	b1 04       	cpc	r11, r1
     f7a:	c1 04       	cpc	r12, r1
     f7c:	d1 04       	cpc	r13, r1
     f7e:	09 f0       	breq	.+2      	; 0xf82 <__umoddi3+0xb0>
     f80:	04 c3       	rjmp	.+1544   	; 0x158a <__umoddi3+0x6b8>
     f82:	62 14       	cp	r6, r2
     f84:	73 04       	cpc	r7, r3
     f86:	84 04       	cpc	r8, r4
     f88:	95 04       	cpc	r9, r5
     f8a:	08 f0       	brcs	.+2      	; 0xf8e <__umoddi3+0xbc>
     f8c:	00 c1       	rjmp	.+512    	; 0x118e <__umoddi3+0x2bc>
     f8e:	00 e0       	ldi	r16, 0x00	; 0
     f90:	20 16       	cp	r2, r16
     f92:	00 e0       	ldi	r16, 0x00	; 0
     f94:	30 06       	cpc	r3, r16
     f96:	01 e0       	ldi	r16, 0x01	; 1
     f98:	40 06       	cpc	r4, r16
     f9a:	00 e0       	ldi	r16, 0x00	; 0
     f9c:	50 06       	cpc	r5, r16
     f9e:	88 f4       	brcc	.+34     	; 0xfc2 <__umoddi3+0xf0>
     fa0:	1f ef       	ldi	r17, 0xFF	; 255
     fa2:	21 16       	cp	r2, r17
     fa4:	31 04       	cpc	r3, r1
     fa6:	41 04       	cpc	r4, r1
     fa8:	51 04       	cpc	r5, r1
     faa:	39 f0       	breq	.+14     	; 0xfba <__umoddi3+0xe8>
     fac:	30 f0       	brcs	.+12     	; 0xfba <__umoddi3+0xe8>
     fae:	88 e0       	ldi	r24, 0x08	; 8
     fb0:	e8 2e       	mov	r14, r24
     fb2:	f1 2c       	mov	r15, r1
     fb4:	01 2d       	mov	r16, r1
     fb6:	11 2d       	mov	r17, r1
     fb8:	18 c0       	rjmp	.+48     	; 0xfea <__umoddi3+0x118>
     fba:	ee 24       	eor	r14, r14
     fbc:	ff 24       	eor	r15, r15
     fbe:	87 01       	movw	r16, r14
     fc0:	14 c0       	rjmp	.+40     	; 0xfea <__umoddi3+0x118>
     fc2:	40 e0       	ldi	r20, 0x00	; 0
     fc4:	24 16       	cp	r2, r20
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	34 06       	cpc	r3, r20
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	44 06       	cpc	r4, r20
     fce:	41 e0       	ldi	r20, 0x01	; 1
     fd0:	54 06       	cpc	r5, r20
     fd2:	30 f0       	brcs	.+12     	; 0xfe0 <__umoddi3+0x10e>
     fd4:	b8 e1       	ldi	r27, 0x18	; 24
     fd6:	eb 2e       	mov	r14, r27
     fd8:	f1 2c       	mov	r15, r1
     fda:	01 2d       	mov	r16, r1
     fdc:	11 2d       	mov	r17, r1
     fde:	05 c0       	rjmp	.+10     	; 0xfea <__umoddi3+0x118>
     fe0:	a0 e1       	ldi	r26, 0x10	; 16
     fe2:	ea 2e       	mov	r14, r26
     fe4:	f1 2c       	mov	r15, r1
     fe6:	01 2d       	mov	r16, r1
     fe8:	11 2d       	mov	r17, r1
     fea:	d2 01       	movw	r26, r4
     fec:	c1 01       	movw	r24, r2
     fee:	0e 2c       	mov	r0, r14
     ff0:	04 c0       	rjmp	.+8      	; 0xffa <__umoddi3+0x128>
     ff2:	b6 95       	lsr	r27
     ff4:	a7 95       	ror	r26
     ff6:	97 95       	ror	r25
     ff8:	87 95       	ror	r24
     ffa:	0a 94       	dec	r0
     ffc:	d2 f7       	brpl	.-12     	; 0xff2 <__umoddi3+0x120>
     ffe:	89 56       	subi	r24, 0x69	; 105
    1000:	9f 4f       	sbci	r25, 0xFF	; 255
    1002:	dc 01       	movw	r26, r24
    1004:	2c 91       	ld	r18, X
    1006:	80 e2       	ldi	r24, 0x20	; 32
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	8e 19       	sub	r24, r14
    1010:	9f 09       	sbc	r25, r15
    1012:	a0 0b       	sbc	r26, r16
    1014:	b1 0b       	sbc	r27, r17
    1016:	5c 01       	movw	r10, r24
    1018:	6d 01       	movw	r12, r26
    101a:	a2 1a       	sub	r10, r18
    101c:	b1 08       	sbc	r11, r1
    101e:	c1 08       	sbc	r12, r1
    1020:	d1 08       	sbc	r13, r1
    1022:	a9 ae       	std	Y+57, r10	; 0x39
    1024:	ba ae       	std	Y+58, r11	; 0x3a
    1026:	cb ae       	std	Y+59, r12	; 0x3b
    1028:	dc ae       	std	Y+60, r13	; 0x3c
    102a:	a1 14       	cp	r10, r1
    102c:	b1 04       	cpc	r11, r1
    102e:	c1 04       	cpc	r12, r1
    1030:	d1 04       	cpc	r13, r1
    1032:	09 f4       	brne	.+2      	; 0x1036 <__umoddi3+0x164>
    1034:	3f c0       	rjmp	.+126    	; 0x10b4 <__umoddi3+0x1e2>
    1036:	69 ad       	ldd	r22, Y+57	; 0x39
    1038:	06 2e       	mov	r0, r22
    103a:	04 c0       	rjmp	.+8      	; 0x1044 <__umoddi3+0x172>
    103c:	22 0c       	add	r2, r2
    103e:	33 1c       	adc	r3, r3
    1040:	44 1c       	adc	r4, r4
    1042:	55 1c       	adc	r5, r5
    1044:	0a 94       	dec	r0
    1046:	d2 f7       	brpl	.-12     	; 0x103c <__umoddi3+0x16a>
    1048:	a4 01       	movw	r20, r8
    104a:	93 01       	movw	r18, r6
    104c:	06 2e       	mov	r0, r22
    104e:	04 c0       	rjmp	.+8      	; 0x1058 <__umoddi3+0x186>
    1050:	22 0f       	add	r18, r18
    1052:	33 1f       	adc	r19, r19
    1054:	44 1f       	adc	r20, r20
    1056:	55 1f       	adc	r21, r21
    1058:	0a 94       	dec	r0
    105a:	d2 f7       	brpl	.-12     	; 0x1050 <__umoddi3+0x17e>
    105c:	80 e2       	ldi	r24, 0x20	; 32
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	8a 19       	sub	r24, r10
    1062:	9b 09       	sbc	r25, r11
    1064:	6c 96       	adiw	r28, 0x1c	; 28
    1066:	cc ac       	ldd	r12, Y+60	; 0x3c
    1068:	dd ac       	ldd	r13, Y+61	; 0x3d
    106a:	ee ac       	ldd	r14, Y+62	; 0x3e
    106c:	ff ac       	ldd	r15, Y+63	; 0x3f
    106e:	6c 97       	sbiw	r28, 0x1c	; 28
    1070:	04 c0       	rjmp	.+8      	; 0x107a <__umoddi3+0x1a8>
    1072:	f6 94       	lsr	r15
    1074:	e7 94       	ror	r14
    1076:	d7 94       	ror	r13
    1078:	c7 94       	ror	r12
    107a:	8a 95       	dec	r24
    107c:	d2 f7       	brpl	.-12     	; 0x1072 <__umoddi3+0x1a0>
    107e:	87 01       	movw	r16, r14
    1080:	76 01       	movw	r14, r12
    1082:	e2 2a       	or	r14, r18
    1084:	f3 2a       	or	r15, r19
    1086:	04 2b       	or	r16, r20
    1088:	15 2b       	or	r17, r21
    108a:	ed aa       	std	Y+53, r14	; 0x35
    108c:	fe aa       	std	Y+54, r15	; 0x36
    108e:	0f ab       	std	Y+55, r16	; 0x37
    1090:	18 af       	std	Y+56, r17	; 0x38
    1092:	6c 96       	adiw	r28, 0x1c	; 28
    1094:	8c ad       	ldd	r24, Y+60	; 0x3c
    1096:	9d ad       	ldd	r25, Y+61	; 0x3d
    1098:	ae ad       	ldd	r26, Y+62	; 0x3e
    109a:	bf ad       	ldd	r27, Y+63	; 0x3f
    109c:	6c 97       	sbiw	r28, 0x1c	; 28
    109e:	04 c0       	rjmp	.+8      	; 0x10a8 <__umoddi3+0x1d6>
    10a0:	88 0f       	add	r24, r24
    10a2:	99 1f       	adc	r25, r25
    10a4:	aa 1f       	adc	r26, r26
    10a6:	bb 1f       	adc	r27, r27
    10a8:	6a 95       	dec	r22
    10aa:	d2 f7       	brpl	.-12     	; 0x10a0 <__umoddi3+0x1ce>
    10ac:	89 ab       	std	Y+49, r24	; 0x31
    10ae:	9a ab       	std	Y+50, r25	; 0x32
    10b0:	ab ab       	std	Y+51, r26	; 0x33
    10b2:	bc ab       	std	Y+52, r27	; 0x34
    10b4:	32 01       	movw	r6, r4
    10b6:	88 24       	eor	r8, r8
    10b8:	99 24       	eor	r9, r9
    10ba:	b2 01       	movw	r22, r4
    10bc:	a1 01       	movw	r20, r2
    10be:	60 70       	andi	r22, 0x00	; 0
    10c0:	70 70       	andi	r23, 0x00	; 0
    10c2:	21 96       	adiw	r28, 0x01	; 1
    10c4:	4c af       	std	Y+60, r20	; 0x3c
    10c6:	5d af       	std	Y+61, r21	; 0x3d
    10c8:	6e af       	std	Y+62, r22	; 0x3e
    10ca:	7f af       	std	Y+63, r23	; 0x3f
    10cc:	21 97       	sbiw	r28, 0x01	; 1
    10ce:	6d a9       	ldd	r22, Y+53	; 0x35
    10d0:	7e a9       	ldd	r23, Y+54	; 0x36
    10d2:	8f a9       	ldd	r24, Y+55	; 0x37
    10d4:	98 ad       	ldd	r25, Y+56	; 0x38
    10d6:	a4 01       	movw	r20, r8
    10d8:	93 01       	movw	r18, r6
    10da:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    10de:	7b 01       	movw	r14, r22
    10e0:	8c 01       	movw	r16, r24
    10e2:	6d a9       	ldd	r22, Y+53	; 0x35
    10e4:	7e a9       	ldd	r23, Y+54	; 0x36
    10e6:	8f a9       	ldd	r24, Y+55	; 0x37
    10e8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ea:	a4 01       	movw	r20, r8
    10ec:	93 01       	movw	r18, r6
    10ee:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    10f2:	ca 01       	movw	r24, r20
    10f4:	b9 01       	movw	r22, r18
    10f6:	21 96       	adiw	r28, 0x01	; 1
    10f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    10fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	21 97       	sbiw	r28, 0x01	; 1
    1102:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    1106:	9b 01       	movw	r18, r22
    1108:	ac 01       	movw	r20, r24
    110a:	87 01       	movw	r16, r14
    110c:	ff 24       	eor	r15, r15
    110e:	ee 24       	eor	r14, r14
    1110:	a9 a8       	ldd	r10, Y+49	; 0x31
    1112:	ba a8       	ldd	r11, Y+50	; 0x32
    1114:	cb a8       	ldd	r12, Y+51	; 0x33
    1116:	dc a8       	ldd	r13, Y+52	; 0x34
    1118:	c6 01       	movw	r24, r12
    111a:	aa 27       	eor	r26, r26
    111c:	bb 27       	eor	r27, r27
    111e:	57 01       	movw	r10, r14
    1120:	68 01       	movw	r12, r16
    1122:	a8 2a       	or	r10, r24
    1124:	b9 2a       	or	r11, r25
    1126:	ca 2a       	or	r12, r26
    1128:	db 2a       	or	r13, r27
    112a:	a2 16       	cp	r10, r18
    112c:	b3 06       	cpc	r11, r19
    112e:	c4 06       	cpc	r12, r20
    1130:	d5 06       	cpc	r13, r21
    1132:	90 f4       	brcc	.+36     	; 0x1158 <__umoddi3+0x286>
    1134:	a2 0c       	add	r10, r2
    1136:	b3 1c       	adc	r11, r3
    1138:	c4 1c       	adc	r12, r4
    113a:	d5 1c       	adc	r13, r5
    113c:	a2 14       	cp	r10, r2
    113e:	b3 04       	cpc	r11, r3
    1140:	c4 04       	cpc	r12, r4
    1142:	d5 04       	cpc	r13, r5
    1144:	48 f0       	brcs	.+18     	; 0x1158 <__umoddi3+0x286>
    1146:	a2 16       	cp	r10, r18
    1148:	b3 06       	cpc	r11, r19
    114a:	c4 06       	cpc	r12, r20
    114c:	d5 06       	cpc	r13, r21
    114e:	20 f4       	brcc	.+8      	; 0x1158 <__umoddi3+0x286>
    1150:	a2 0c       	add	r10, r2
    1152:	b3 1c       	adc	r11, r3
    1154:	c4 1c       	adc	r12, r4
    1156:	d5 1c       	adc	r13, r5
    1158:	a2 1a       	sub	r10, r18
    115a:	b3 0a       	sbc	r11, r19
    115c:	c4 0a       	sbc	r12, r20
    115e:	d5 0a       	sbc	r13, r21
    1160:	c6 01       	movw	r24, r12
    1162:	b5 01       	movw	r22, r10
    1164:	a4 01       	movw	r20, r8
    1166:	93 01       	movw	r18, r6
    1168:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    116c:	7b 01       	movw	r14, r22
    116e:	8c 01       	movw	r16, r24
    1170:	c6 01       	movw	r24, r12
    1172:	b5 01       	movw	r22, r10
    1174:	a4 01       	movw	r20, r8
    1176:	93 01       	movw	r18, r6
    1178:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    117c:	ca 01       	movw	r24, r20
    117e:	b9 01       	movw	r22, r18
    1180:	21 96       	adiw	r28, 0x01	; 1
    1182:	2c ad       	ldd	r18, Y+60	; 0x3c
    1184:	3d ad       	ldd	r19, Y+61	; 0x3d
    1186:	4e ad       	ldd	r20, Y+62	; 0x3e
    1188:	5f ad       	ldd	r21, Y+63	; 0x3f
    118a:	21 97       	sbiw	r28, 0x01	; 1
    118c:	ba c1       	rjmp	.+884    	; 0x1502 <__umoddi3+0x630>
    118e:	21 14       	cp	r2, r1
    1190:	31 04       	cpc	r3, r1
    1192:	41 04       	cpc	r4, r1
    1194:	51 04       	cpc	r5, r1
    1196:	71 f4       	brne	.+28     	; 0x11b4 <__umoddi3+0x2e2>
    1198:	61 e0       	ldi	r22, 0x01	; 1
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	80 e0       	ldi	r24, 0x00	; 0
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	20 e0       	ldi	r18, 0x00	; 0
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	40 e0       	ldi	r20, 0x00	; 0
    11a6:	50 e0       	ldi	r21, 0x00	; 0
    11a8:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    11ac:	c9 01       	movw	r24, r18
    11ae:	da 01       	movw	r26, r20
    11b0:	1c 01       	movw	r2, r24
    11b2:	2d 01       	movw	r4, r26
    11b4:	00 e0       	ldi	r16, 0x00	; 0
    11b6:	20 16       	cp	r2, r16
    11b8:	00 e0       	ldi	r16, 0x00	; 0
    11ba:	30 06       	cpc	r3, r16
    11bc:	01 e0       	ldi	r16, 0x01	; 1
    11be:	40 06       	cpc	r4, r16
    11c0:	00 e0       	ldi	r16, 0x00	; 0
    11c2:	50 06       	cpc	r5, r16
    11c4:	88 f4       	brcc	.+34     	; 0x11e8 <__umoddi3+0x316>
    11c6:	1f ef       	ldi	r17, 0xFF	; 255
    11c8:	21 16       	cp	r2, r17
    11ca:	31 04       	cpc	r3, r1
    11cc:	41 04       	cpc	r4, r1
    11ce:	51 04       	cpc	r5, r1
    11d0:	39 f0       	breq	.+14     	; 0x11e0 <__umoddi3+0x30e>
    11d2:	30 f0       	brcs	.+12     	; 0x11e0 <__umoddi3+0x30e>
    11d4:	68 e0       	ldi	r22, 0x08	; 8
    11d6:	e6 2e       	mov	r14, r22
    11d8:	f1 2c       	mov	r15, r1
    11da:	01 2d       	mov	r16, r1
    11dc:	11 2d       	mov	r17, r1
    11de:	18 c0       	rjmp	.+48     	; 0x1210 <__umoddi3+0x33e>
    11e0:	ee 24       	eor	r14, r14
    11e2:	ff 24       	eor	r15, r15
    11e4:	87 01       	movw	r16, r14
    11e6:	14 c0       	rjmp	.+40     	; 0x1210 <__umoddi3+0x33e>
    11e8:	40 e0       	ldi	r20, 0x00	; 0
    11ea:	24 16       	cp	r2, r20
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	34 06       	cpc	r3, r20
    11f0:	40 e0       	ldi	r20, 0x00	; 0
    11f2:	44 06       	cpc	r4, r20
    11f4:	41 e0       	ldi	r20, 0x01	; 1
    11f6:	54 06       	cpc	r5, r20
    11f8:	30 f0       	brcs	.+12     	; 0x1206 <__umoddi3+0x334>
    11fa:	58 e1       	ldi	r21, 0x18	; 24
    11fc:	e5 2e       	mov	r14, r21
    11fe:	f1 2c       	mov	r15, r1
    1200:	01 2d       	mov	r16, r1
    1202:	11 2d       	mov	r17, r1
    1204:	05 c0       	rjmp	.+10     	; 0x1210 <__umoddi3+0x33e>
    1206:	40 e1       	ldi	r20, 0x10	; 16
    1208:	e4 2e       	mov	r14, r20
    120a:	f1 2c       	mov	r15, r1
    120c:	01 2d       	mov	r16, r1
    120e:	11 2d       	mov	r17, r1
    1210:	d2 01       	movw	r26, r4
    1212:	c1 01       	movw	r24, r2
    1214:	0e 2c       	mov	r0, r14
    1216:	04 c0       	rjmp	.+8      	; 0x1220 <__umoddi3+0x34e>
    1218:	b6 95       	lsr	r27
    121a:	a7 95       	ror	r26
    121c:	97 95       	ror	r25
    121e:	87 95       	ror	r24
    1220:	0a 94       	dec	r0
    1222:	d2 f7       	brpl	.-12     	; 0x1218 <__umoddi3+0x346>
    1224:	89 56       	subi	r24, 0x69	; 105
    1226:	9f 4f       	sbci	r25, 0xFF	; 255
    1228:	dc 01       	movw	r26, r24
    122a:	2c 91       	ld	r18, X
    122c:	30 e2       	ldi	r19, 0x20	; 32
    122e:	a3 2e       	mov	r10, r19
    1230:	b1 2c       	mov	r11, r1
    1232:	c1 2c       	mov	r12, r1
    1234:	d1 2c       	mov	r13, r1
    1236:	d6 01       	movw	r26, r12
    1238:	c5 01       	movw	r24, r10
    123a:	8e 19       	sub	r24, r14
    123c:	9f 09       	sbc	r25, r15
    123e:	a0 0b       	sbc	r26, r16
    1240:	b1 0b       	sbc	r27, r17
    1242:	7c 01       	movw	r14, r24
    1244:	8d 01       	movw	r16, r26
    1246:	e2 1a       	sub	r14, r18
    1248:	f1 08       	sbc	r15, r1
    124a:	01 09       	sbc	r16, r1
    124c:	11 09       	sbc	r17, r1
    124e:	e9 ae       	std	Y+57, r14	; 0x39
    1250:	fa ae       	std	Y+58, r15	; 0x3a
    1252:	0b af       	std	Y+59, r16	; 0x3b
    1254:	1c af       	std	Y+60, r17	; 0x3c
    1256:	e1 14       	cp	r14, r1
    1258:	f1 04       	cpc	r15, r1
    125a:	01 05       	cpc	r16, r1
    125c:	11 05       	cpc	r17, r1
    125e:	39 f4       	brne	.+14     	; 0x126e <__umoddi3+0x39c>
    1260:	64 01       	movw	r12, r8
    1262:	53 01       	movw	r10, r6
    1264:	a2 18       	sub	r10, r2
    1266:	b3 08       	sbc	r11, r3
    1268:	c4 08       	sbc	r12, r4
    126a:	d5 08       	sbc	r13, r5
    126c:	e2 c0       	rjmp	.+452    	; 0x1432 <__umoddi3+0x560>
    126e:	f9 ac       	ldd	r15, Y+57	; 0x39
    1270:	68 96       	adiw	r28, 0x18	; 24
    1272:	ff ae       	std	Y+63, r15	; 0x3f
    1274:	68 97       	sbiw	r28, 0x18	; 24
    1276:	0f 2c       	mov	r0, r15
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <__umoddi3+0x3b0>
    127a:	22 0c       	add	r2, r2
    127c:	33 1c       	adc	r3, r3
    127e:	44 1c       	adc	r4, r4
    1280:	55 1c       	adc	r5, r5
    1282:	0a 94       	dec	r0
    1284:	d2 f7       	brpl	.-12     	; 0x127a <__umoddi3+0x3a8>
    1286:	8a 2d       	mov	r24, r10
    1288:	8f 19       	sub	r24, r15
    128a:	64 01       	movw	r12, r8
    128c:	53 01       	movw	r10, r6
    128e:	08 2e       	mov	r0, r24
    1290:	04 c0       	rjmp	.+8      	; 0x129a <__umoddi3+0x3c8>
    1292:	d6 94       	lsr	r13
    1294:	c7 94       	ror	r12
    1296:	b7 94       	ror	r11
    1298:	a7 94       	ror	r10
    129a:	0a 94       	dec	r0
    129c:	d2 f7       	brpl	.-12     	; 0x1292 <__umoddi3+0x3c0>
    129e:	a4 01       	movw	r20, r8
    12a0:	93 01       	movw	r18, r6
    12a2:	04 c0       	rjmp	.+8      	; 0x12ac <__umoddi3+0x3da>
    12a4:	22 0f       	add	r18, r18
    12a6:	33 1f       	adc	r19, r19
    12a8:	44 1f       	adc	r20, r20
    12aa:	55 1f       	adc	r21, r21
    12ac:	fa 94       	dec	r15
    12ae:	d2 f7       	brpl	.-12     	; 0x12a4 <__umoddi3+0x3d2>
    12b0:	6c 96       	adiw	r28, 0x1c	; 28
    12b2:	6c ac       	ldd	r6, Y+60	; 0x3c
    12b4:	7d ac       	ldd	r7, Y+61	; 0x3d
    12b6:	8e ac       	ldd	r8, Y+62	; 0x3e
    12b8:	9f ac       	ldd	r9, Y+63	; 0x3f
    12ba:	6c 97       	sbiw	r28, 0x1c	; 28
    12bc:	04 c0       	rjmp	.+8      	; 0x12c6 <__umoddi3+0x3f4>
    12be:	96 94       	lsr	r9
    12c0:	87 94       	ror	r8
    12c2:	77 94       	ror	r7
    12c4:	67 94       	ror	r6
    12c6:	8a 95       	dec	r24
    12c8:	d2 f7       	brpl	.-12     	; 0x12be <__umoddi3+0x3ec>
    12ca:	84 01       	movw	r16, r8
    12cc:	73 01       	movw	r14, r6
    12ce:	e2 2a       	or	r14, r18
    12d0:	f3 2a       	or	r15, r19
    12d2:	04 2b       	or	r16, r20
    12d4:	15 2b       	or	r17, r21
    12d6:	ed a6       	std	Y+45, r14	; 0x2d
    12d8:	fe a6       	std	Y+46, r15	; 0x2e
    12da:	0f a7       	std	Y+47, r16	; 0x2f
    12dc:	18 ab       	std	Y+48, r17	; 0x30
    12de:	32 01       	movw	r6, r4
    12e0:	88 24       	eor	r8, r8
    12e2:	99 24       	eor	r9, r9
    12e4:	b2 01       	movw	r22, r4
    12e6:	a1 01       	movw	r20, r2
    12e8:	60 70       	andi	r22, 0x00	; 0
    12ea:	70 70       	andi	r23, 0x00	; 0
    12ec:	25 96       	adiw	r28, 0x05	; 5
    12ee:	4c af       	std	Y+60, r20	; 0x3c
    12f0:	5d af       	std	Y+61, r21	; 0x3d
    12f2:	6e af       	std	Y+62, r22	; 0x3e
    12f4:	7f af       	std	Y+63, r23	; 0x3f
    12f6:	25 97       	sbiw	r28, 0x05	; 5
    12f8:	c6 01       	movw	r24, r12
    12fa:	b5 01       	movw	r22, r10
    12fc:	a4 01       	movw	r20, r8
    12fe:	93 01       	movw	r18, r6
    1300:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    1304:	7b 01       	movw	r14, r22
    1306:	8c 01       	movw	r16, r24
    1308:	c6 01       	movw	r24, r12
    130a:	b5 01       	movw	r22, r10
    130c:	a4 01       	movw	r20, r8
    130e:	93 01       	movw	r18, r6
    1310:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    1314:	ca 01       	movw	r24, r20
    1316:	b9 01       	movw	r22, r18
    1318:	25 96       	adiw	r28, 0x05	; 5
    131a:	2c ad       	ldd	r18, Y+60	; 0x3c
    131c:	3d ad       	ldd	r19, Y+61	; 0x3d
    131e:	4e ad       	ldd	r20, Y+62	; 0x3e
    1320:	5f ad       	ldd	r21, Y+63	; 0x3f
    1322:	25 97       	sbiw	r28, 0x05	; 5
    1324:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    1328:	9b 01       	movw	r18, r22
    132a:	ac 01       	movw	r20, r24
    132c:	87 01       	movw	r16, r14
    132e:	ff 24       	eor	r15, r15
    1330:	ee 24       	eor	r14, r14
    1332:	ad a4       	ldd	r10, Y+45	; 0x2d
    1334:	be a4       	ldd	r11, Y+46	; 0x2e
    1336:	cf a4       	ldd	r12, Y+47	; 0x2f
    1338:	d8 a8       	ldd	r13, Y+48	; 0x30
    133a:	c6 01       	movw	r24, r12
    133c:	aa 27       	eor	r26, r26
    133e:	bb 27       	eor	r27, r27
    1340:	5c 01       	movw	r10, r24
    1342:	6d 01       	movw	r12, r26
    1344:	ae 28       	or	r10, r14
    1346:	bf 28       	or	r11, r15
    1348:	c0 2a       	or	r12, r16
    134a:	d1 2a       	or	r13, r17
    134c:	a2 16       	cp	r10, r18
    134e:	b3 06       	cpc	r11, r19
    1350:	c4 06       	cpc	r12, r20
    1352:	d5 06       	cpc	r13, r21
    1354:	90 f4       	brcc	.+36     	; 0x137a <__umoddi3+0x4a8>
    1356:	a2 0c       	add	r10, r2
    1358:	b3 1c       	adc	r11, r3
    135a:	c4 1c       	adc	r12, r4
    135c:	d5 1c       	adc	r13, r5
    135e:	a2 14       	cp	r10, r2
    1360:	b3 04       	cpc	r11, r3
    1362:	c4 04       	cpc	r12, r4
    1364:	d5 04       	cpc	r13, r5
    1366:	48 f0       	brcs	.+18     	; 0x137a <__umoddi3+0x4a8>
    1368:	a2 16       	cp	r10, r18
    136a:	b3 06       	cpc	r11, r19
    136c:	c4 06       	cpc	r12, r20
    136e:	d5 06       	cpc	r13, r21
    1370:	20 f4       	brcc	.+8      	; 0x137a <__umoddi3+0x4a8>
    1372:	a2 0c       	add	r10, r2
    1374:	b3 1c       	adc	r11, r3
    1376:	c4 1c       	adc	r12, r4
    1378:	d5 1c       	adc	r13, r5
    137a:	a2 1a       	sub	r10, r18
    137c:	b3 0a       	sbc	r11, r19
    137e:	c4 0a       	sbc	r12, r20
    1380:	d5 0a       	sbc	r13, r21
    1382:	c6 01       	movw	r24, r12
    1384:	b5 01       	movw	r22, r10
    1386:	a4 01       	movw	r20, r8
    1388:	93 01       	movw	r18, r6
    138a:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    138e:	7b 01       	movw	r14, r22
    1390:	8c 01       	movw	r16, r24
    1392:	c6 01       	movw	r24, r12
    1394:	b5 01       	movw	r22, r10
    1396:	a4 01       	movw	r20, r8
    1398:	93 01       	movw	r18, r6
    139a:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    139e:	ca 01       	movw	r24, r20
    13a0:	b9 01       	movw	r22, r18
    13a2:	25 96       	adiw	r28, 0x05	; 5
    13a4:	2c ad       	ldd	r18, Y+60	; 0x3c
    13a6:	3d ad       	ldd	r19, Y+61	; 0x3d
    13a8:	4e ad       	ldd	r20, Y+62	; 0x3e
    13aa:	5f ad       	ldd	r21, Y+63	; 0x3f
    13ac:	25 97       	sbiw	r28, 0x05	; 5
    13ae:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    13b2:	9b 01       	movw	r18, r22
    13b4:	ac 01       	movw	r20, r24
    13b6:	87 01       	movw	r16, r14
    13b8:	ff 24       	eor	r15, r15
    13ba:	ee 24       	eor	r14, r14
    13bc:	8d a5       	ldd	r24, Y+45	; 0x2d
    13be:	9e a5       	ldd	r25, Y+46	; 0x2e
    13c0:	af a5       	ldd	r26, Y+47	; 0x2f
    13c2:	b8 a9       	ldd	r27, Y+48	; 0x30
    13c4:	a0 70       	andi	r26, 0x00	; 0
    13c6:	b0 70       	andi	r27, 0x00	; 0
    13c8:	57 01       	movw	r10, r14
    13ca:	68 01       	movw	r12, r16
    13cc:	a8 2a       	or	r10, r24
    13ce:	b9 2a       	or	r11, r25
    13d0:	ca 2a       	or	r12, r26
    13d2:	db 2a       	or	r13, r27
    13d4:	a2 16       	cp	r10, r18
    13d6:	b3 06       	cpc	r11, r19
    13d8:	c4 06       	cpc	r12, r20
    13da:	d5 06       	cpc	r13, r21
    13dc:	90 f4       	brcc	.+36     	; 0x1402 <__umoddi3+0x530>
    13de:	a2 0c       	add	r10, r2
    13e0:	b3 1c       	adc	r11, r3
    13e2:	c4 1c       	adc	r12, r4
    13e4:	d5 1c       	adc	r13, r5
    13e6:	a2 14       	cp	r10, r2
    13e8:	b3 04       	cpc	r11, r3
    13ea:	c4 04       	cpc	r12, r4
    13ec:	d5 04       	cpc	r13, r5
    13ee:	48 f0       	brcs	.+18     	; 0x1402 <__umoddi3+0x530>
    13f0:	a2 16       	cp	r10, r18
    13f2:	b3 06       	cpc	r11, r19
    13f4:	c4 06       	cpc	r12, r20
    13f6:	d5 06       	cpc	r13, r21
    13f8:	20 f4       	brcc	.+8      	; 0x1402 <__umoddi3+0x530>
    13fa:	a2 0c       	add	r10, r2
    13fc:	b3 1c       	adc	r11, r3
    13fe:	c4 1c       	adc	r12, r4
    1400:	d5 1c       	adc	r13, r5
    1402:	6c 96       	adiw	r28, 0x1c	; 28
    1404:	ec ac       	ldd	r14, Y+60	; 0x3c
    1406:	fd ac       	ldd	r15, Y+61	; 0x3d
    1408:	0e ad       	ldd	r16, Y+62	; 0x3e
    140a:	1f ad       	ldd	r17, Y+63	; 0x3f
    140c:	6c 97       	sbiw	r28, 0x1c	; 28
    140e:	68 96       	adiw	r28, 0x18	; 24
    1410:	0f ac       	ldd	r0, Y+63	; 0x3f
    1412:	68 97       	sbiw	r28, 0x18	; 24
    1414:	04 c0       	rjmp	.+8      	; 0x141e <__umoddi3+0x54c>
    1416:	ee 0c       	add	r14, r14
    1418:	ff 1c       	adc	r15, r15
    141a:	00 1f       	adc	r16, r16
    141c:	11 1f       	adc	r17, r17
    141e:	0a 94       	dec	r0
    1420:	d2 f7       	brpl	.-12     	; 0x1416 <__umoddi3+0x544>
    1422:	e9 aa       	std	Y+49, r14	; 0x31
    1424:	fa aa       	std	Y+50, r15	; 0x32
    1426:	0b ab       	std	Y+51, r16	; 0x33
    1428:	1c ab       	std	Y+52, r17	; 0x34
    142a:	a2 1a       	sub	r10, r18
    142c:	b3 0a       	sbc	r11, r19
    142e:	c4 0a       	sbc	r12, r20
    1430:	d5 0a       	sbc	r13, r21
    1432:	32 01       	movw	r6, r4
    1434:	88 24       	eor	r8, r8
    1436:	99 24       	eor	r9, r9
    1438:	b2 01       	movw	r22, r4
    143a:	a1 01       	movw	r20, r2
    143c:	60 70       	andi	r22, 0x00	; 0
    143e:	70 70       	andi	r23, 0x00	; 0
    1440:	29 96       	adiw	r28, 0x09	; 9
    1442:	4c af       	std	Y+60, r20	; 0x3c
    1444:	5d af       	std	Y+61, r21	; 0x3d
    1446:	6e af       	std	Y+62, r22	; 0x3e
    1448:	7f af       	std	Y+63, r23	; 0x3f
    144a:	29 97       	sbiw	r28, 0x09	; 9
    144c:	c6 01       	movw	r24, r12
    144e:	b5 01       	movw	r22, r10
    1450:	a4 01       	movw	r20, r8
    1452:	93 01       	movw	r18, r6
    1454:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    1458:	7b 01       	movw	r14, r22
    145a:	8c 01       	movw	r16, r24
    145c:	c6 01       	movw	r24, r12
    145e:	b5 01       	movw	r22, r10
    1460:	a4 01       	movw	r20, r8
    1462:	93 01       	movw	r18, r6
    1464:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    1468:	ca 01       	movw	r24, r20
    146a:	b9 01       	movw	r22, r18
    146c:	29 96       	adiw	r28, 0x09	; 9
    146e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1470:	3d ad       	ldd	r19, Y+61	; 0x3d
    1472:	4e ad       	ldd	r20, Y+62	; 0x3e
    1474:	5f ad       	ldd	r21, Y+63	; 0x3f
    1476:	29 97       	sbiw	r28, 0x09	; 9
    1478:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    147c:	9b 01       	movw	r18, r22
    147e:	ac 01       	movw	r20, r24
    1480:	87 01       	movw	r16, r14
    1482:	ff 24       	eor	r15, r15
    1484:	ee 24       	eor	r14, r14
    1486:	a9 a8       	ldd	r10, Y+49	; 0x31
    1488:	ba a8       	ldd	r11, Y+50	; 0x32
    148a:	cb a8       	ldd	r12, Y+51	; 0x33
    148c:	dc a8       	ldd	r13, Y+52	; 0x34
    148e:	c6 01       	movw	r24, r12
    1490:	aa 27       	eor	r26, r26
    1492:	bb 27       	eor	r27, r27
    1494:	57 01       	movw	r10, r14
    1496:	68 01       	movw	r12, r16
    1498:	a8 2a       	or	r10, r24
    149a:	b9 2a       	or	r11, r25
    149c:	ca 2a       	or	r12, r26
    149e:	db 2a       	or	r13, r27
    14a0:	a2 16       	cp	r10, r18
    14a2:	b3 06       	cpc	r11, r19
    14a4:	c4 06       	cpc	r12, r20
    14a6:	d5 06       	cpc	r13, r21
    14a8:	90 f4       	brcc	.+36     	; 0x14ce <__umoddi3+0x5fc>
    14aa:	a2 0c       	add	r10, r2
    14ac:	b3 1c       	adc	r11, r3
    14ae:	c4 1c       	adc	r12, r4
    14b0:	d5 1c       	adc	r13, r5
    14b2:	a2 14       	cp	r10, r2
    14b4:	b3 04       	cpc	r11, r3
    14b6:	c4 04       	cpc	r12, r4
    14b8:	d5 04       	cpc	r13, r5
    14ba:	48 f0       	brcs	.+18     	; 0x14ce <__umoddi3+0x5fc>
    14bc:	a2 16       	cp	r10, r18
    14be:	b3 06       	cpc	r11, r19
    14c0:	c4 06       	cpc	r12, r20
    14c2:	d5 06       	cpc	r13, r21
    14c4:	20 f4       	brcc	.+8      	; 0x14ce <__umoddi3+0x5fc>
    14c6:	a2 0c       	add	r10, r2
    14c8:	b3 1c       	adc	r11, r3
    14ca:	c4 1c       	adc	r12, r4
    14cc:	d5 1c       	adc	r13, r5
    14ce:	a2 1a       	sub	r10, r18
    14d0:	b3 0a       	sbc	r11, r19
    14d2:	c4 0a       	sbc	r12, r20
    14d4:	d5 0a       	sbc	r13, r21
    14d6:	c6 01       	movw	r24, r12
    14d8:	b5 01       	movw	r22, r10
    14da:	a4 01       	movw	r20, r8
    14dc:	93 01       	movw	r18, r6
    14de:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    14e2:	7b 01       	movw	r14, r22
    14e4:	8c 01       	movw	r16, r24
    14e6:	c6 01       	movw	r24, r12
    14e8:	b5 01       	movw	r22, r10
    14ea:	a4 01       	movw	r20, r8
    14ec:	93 01       	movw	r18, r6
    14ee:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    14f2:	ca 01       	movw	r24, r20
    14f4:	b9 01       	movw	r22, r18
    14f6:	29 96       	adiw	r28, 0x09	; 9
    14f8:	2c ad       	ldd	r18, Y+60	; 0x3c
    14fa:	3d ad       	ldd	r19, Y+61	; 0x3d
    14fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    14fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1500:	29 97       	sbiw	r28, 0x09	; 9
    1502:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    1506:	9b 01       	movw	r18, r22
    1508:	ac 01       	movw	r20, r24
    150a:	87 01       	movw	r16, r14
    150c:	ff 24       	eor	r15, r15
    150e:	ee 24       	eor	r14, r14
    1510:	89 a9       	ldd	r24, Y+49	; 0x31
    1512:	9a a9       	ldd	r25, Y+50	; 0x32
    1514:	ab a9       	ldd	r26, Y+51	; 0x33
    1516:	bc a9       	ldd	r27, Y+52	; 0x34
    1518:	a0 70       	andi	r26, 0x00	; 0
    151a:	b0 70       	andi	r27, 0x00	; 0
    151c:	e8 2a       	or	r14, r24
    151e:	f9 2a       	or	r15, r25
    1520:	0a 2b       	or	r16, r26
    1522:	1b 2b       	or	r17, r27
    1524:	e2 16       	cp	r14, r18
    1526:	f3 06       	cpc	r15, r19
    1528:	04 07       	cpc	r16, r20
    152a:	15 07       	cpc	r17, r21
    152c:	90 f4       	brcc	.+36     	; 0x1552 <__umoddi3+0x680>
    152e:	e2 0c       	add	r14, r2
    1530:	f3 1c       	adc	r15, r3
    1532:	04 1d       	adc	r16, r4
    1534:	15 1d       	adc	r17, r5
    1536:	e2 14       	cp	r14, r2
    1538:	f3 04       	cpc	r15, r3
    153a:	04 05       	cpc	r16, r4
    153c:	15 05       	cpc	r17, r5
    153e:	48 f0       	brcs	.+18     	; 0x1552 <__umoddi3+0x680>
    1540:	e2 16       	cp	r14, r18
    1542:	f3 06       	cpc	r15, r19
    1544:	04 07       	cpc	r16, r20
    1546:	15 07       	cpc	r17, r21
    1548:	20 f4       	brcc	.+8      	; 0x1552 <__umoddi3+0x680>
    154a:	e2 0c       	add	r14, r2
    154c:	f3 1c       	adc	r15, r3
    154e:	04 1d       	adc	r16, r4
    1550:	15 1d       	adc	r17, r5
    1552:	e2 1a       	sub	r14, r18
    1554:	f3 0a       	sbc	r15, r19
    1556:	04 0b       	sbc	r16, r20
    1558:	15 0b       	sbc	r17, r21
    155a:	d8 01       	movw	r26, r16
    155c:	c7 01       	movw	r24, r14
    155e:	09 ac       	ldd	r0, Y+57	; 0x39
    1560:	04 c0       	rjmp	.+8      	; 0x156a <__umoddi3+0x698>
    1562:	b6 95       	lsr	r27
    1564:	a7 95       	ror	r26
    1566:	97 95       	ror	r25
    1568:	87 95       	ror	r24
    156a:	0a 94       	dec	r0
    156c:	d2 f7       	brpl	.-12     	; 0x1562 <__umoddi3+0x690>
    156e:	89 8b       	std	Y+17, r24	; 0x11
    1570:	9a 8b       	std	Y+18, r25	; 0x12
    1572:	ab 8b       	std	Y+19, r26	; 0x13
    1574:	bc 8b       	std	Y+20, r27	; 0x14
    1576:	1d 8a       	std	Y+21, r1	; 0x15
    1578:	1e 8a       	std	Y+22, r1	; 0x16
    157a:	1f 8a       	std	Y+23, r1	; 0x17
    157c:	18 8e       	std	Y+24, r1	; 0x18
    157e:	28 2f       	mov	r18, r24
    1580:	3a 89       	ldd	r19, Y+18	; 0x12
    1582:	4b 89       	ldd	r20, Y+19	; 0x13
    1584:	5c 89       	ldd	r21, Y+20	; 0x14
    1586:	6d 89       	ldd	r22, Y+21	; 0x15
    1588:	0c c3       	rjmp	.+1560   	; 0x1ba2 <__umoddi3+0xcd0>
    158a:	6a 14       	cp	r6, r10
    158c:	7b 04       	cpc	r7, r11
    158e:	8c 04       	cpc	r8, r12
    1590:	9d 04       	cpc	r9, r13
    1592:	08 f4       	brcc	.+2      	; 0x1596 <__umoddi3+0x6c4>
    1594:	09 c3       	rjmp	.+1554   	; 0x1ba8 <__umoddi3+0xcd6>
    1596:	00 e0       	ldi	r16, 0x00	; 0
    1598:	a0 16       	cp	r10, r16
    159a:	00 e0       	ldi	r16, 0x00	; 0
    159c:	b0 06       	cpc	r11, r16
    159e:	01 e0       	ldi	r16, 0x01	; 1
    15a0:	c0 06       	cpc	r12, r16
    15a2:	00 e0       	ldi	r16, 0x00	; 0
    15a4:	d0 06       	cpc	r13, r16
    15a6:	88 f4       	brcc	.+34     	; 0x15ca <__umoddi3+0x6f8>
    15a8:	1f ef       	ldi	r17, 0xFF	; 255
    15aa:	a1 16       	cp	r10, r17
    15ac:	b1 04       	cpc	r11, r1
    15ae:	c1 04       	cpc	r12, r1
    15b0:	d1 04       	cpc	r13, r1
    15b2:	39 f0       	breq	.+14     	; 0x15c2 <__umoddi3+0x6f0>
    15b4:	30 f0       	brcs	.+12     	; 0x15c2 <__umoddi3+0x6f0>
    15b6:	28 e0       	ldi	r18, 0x08	; 8
    15b8:	e2 2e       	mov	r14, r18
    15ba:	f1 2c       	mov	r15, r1
    15bc:	01 2d       	mov	r16, r1
    15be:	11 2d       	mov	r17, r1
    15c0:	18 c0       	rjmp	.+48     	; 0x15f2 <__umoddi3+0x720>
    15c2:	ee 24       	eor	r14, r14
    15c4:	ff 24       	eor	r15, r15
    15c6:	87 01       	movw	r16, r14
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <__umoddi3+0x720>
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	a4 16       	cp	r10, r20
    15ce:	40 e0       	ldi	r20, 0x00	; 0
    15d0:	b4 06       	cpc	r11, r20
    15d2:	40 e0       	ldi	r20, 0x00	; 0
    15d4:	c4 06       	cpc	r12, r20
    15d6:	41 e0       	ldi	r20, 0x01	; 1
    15d8:	d4 06       	cpc	r13, r20
    15da:	30 f0       	brcs	.+12     	; 0x15e8 <__umoddi3+0x716>
    15dc:	98 e1       	ldi	r25, 0x18	; 24
    15de:	e9 2e       	mov	r14, r25
    15e0:	f1 2c       	mov	r15, r1
    15e2:	01 2d       	mov	r16, r1
    15e4:	11 2d       	mov	r17, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <__umoddi3+0x720>
    15e8:	80 e1       	ldi	r24, 0x10	; 16
    15ea:	e8 2e       	mov	r14, r24
    15ec:	f1 2c       	mov	r15, r1
    15ee:	01 2d       	mov	r16, r1
    15f0:	11 2d       	mov	r17, r1
    15f2:	d6 01       	movw	r26, r12
    15f4:	c5 01       	movw	r24, r10
    15f6:	0e 2c       	mov	r0, r14
    15f8:	04 c0       	rjmp	.+8      	; 0x1602 <__umoddi3+0x730>
    15fa:	b6 95       	lsr	r27
    15fc:	a7 95       	ror	r26
    15fe:	97 95       	ror	r25
    1600:	87 95       	ror	r24
    1602:	0a 94       	dec	r0
    1604:	d2 f7       	brpl	.-12     	; 0x15fa <__umoddi3+0x728>
    1606:	89 56       	subi	r24, 0x69	; 105
    1608:	9f 4f       	sbci	r25, 0xFF	; 255
    160a:	dc 01       	movw	r26, r24
    160c:	2c 91       	ld	r18, X
    160e:	80 e2       	ldi	r24, 0x20	; 32
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	a0 e0       	ldi	r26, 0x00	; 0
    1614:	b0 e0       	ldi	r27, 0x00	; 0
    1616:	8e 19       	sub	r24, r14
    1618:	9f 09       	sbc	r25, r15
    161a:	a0 0b       	sbc	r26, r16
    161c:	b1 0b       	sbc	r27, r17
    161e:	82 1b       	sub	r24, r18
    1620:	91 09       	sbc	r25, r1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	a1 05       	cpc	r26, r1
    162a:	b1 05       	cpc	r27, r1
    162c:	09 f0       	breq	.+2      	; 0x1630 <__umoddi3+0x75e>
    162e:	4f c0       	rjmp	.+158    	; 0x16ce <__umoddi3+0x7fc>
    1630:	a6 14       	cp	r10, r6
    1632:	b7 04       	cpc	r11, r7
    1634:	c8 04       	cpc	r12, r8
    1636:	d9 04       	cpc	r13, r9
    1638:	58 f0       	brcs	.+22     	; 0x1650 <__umoddi3+0x77e>
    163a:	6c 96       	adiw	r28, 0x1c	; 28
    163c:	ec ac       	ldd	r14, Y+60	; 0x3c
    163e:	fd ac       	ldd	r15, Y+61	; 0x3d
    1640:	0e ad       	ldd	r16, Y+62	; 0x3e
    1642:	1f ad       	ldd	r17, Y+63	; 0x3f
    1644:	6c 97       	sbiw	r28, 0x1c	; 28
    1646:	e2 14       	cp	r14, r2
    1648:	f3 04       	cpc	r15, r3
    164a:	04 05       	cpc	r16, r4
    164c:	15 05       	cpc	r17, r5
    164e:	68 f1       	brcs	.+90     	; 0x16aa <__umoddi3+0x7d8>
    1650:	6c 96       	adiw	r28, 0x1c	; 28
    1652:	ec ac       	ldd	r14, Y+60	; 0x3c
    1654:	fd ac       	ldd	r15, Y+61	; 0x3d
    1656:	0e ad       	ldd	r16, Y+62	; 0x3e
    1658:	1f ad       	ldd	r17, Y+63	; 0x3f
    165a:	6c 97       	sbiw	r28, 0x1c	; 28
    165c:	e2 18       	sub	r14, r2
    165e:	f3 08       	sbc	r15, r3
    1660:	04 09       	sbc	r16, r4
    1662:	15 09       	sbc	r17, r5
    1664:	a4 01       	movw	r20, r8
    1666:	93 01       	movw	r18, r6
    1668:	2a 19       	sub	r18, r10
    166a:	3b 09       	sbc	r19, r11
    166c:	4c 09       	sbc	r20, r12
    166e:	5d 09       	sbc	r21, r13
    1670:	aa 24       	eor	r10, r10
    1672:	bb 24       	eor	r11, r11
    1674:	65 01       	movw	r12, r10
    1676:	6c 96       	adiw	r28, 0x1c	; 28
    1678:	6c ad       	ldd	r22, Y+60	; 0x3c
    167a:	7d ad       	ldd	r23, Y+61	; 0x3d
    167c:	8e ad       	ldd	r24, Y+62	; 0x3e
    167e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1680:	6c 97       	sbiw	r28, 0x1c	; 28
    1682:	6e 15       	cp	r22, r14
    1684:	7f 05       	cpc	r23, r15
    1686:	80 07       	cpc	r24, r16
    1688:	91 07       	cpc	r25, r17
    168a:	28 f4       	brcc	.+10     	; 0x1696 <__umoddi3+0x7c4>
    168c:	b1 e0       	ldi	r27, 0x01	; 1
    168e:	ab 2e       	mov	r10, r27
    1690:	b1 2c       	mov	r11, r1
    1692:	c1 2c       	mov	r12, r1
    1694:	d1 2c       	mov	r13, r1
    1696:	da 01       	movw	r26, r20
    1698:	c9 01       	movw	r24, r18
    169a:	8a 19       	sub	r24, r10
    169c:	9b 09       	sbc	r25, r11
    169e:	ac 09       	sbc	r26, r12
    16a0:	bd 09       	sbc	r27, r13
    16a2:	8d ab       	std	Y+53, r24	; 0x35
    16a4:	9e ab       	std	Y+54, r25	; 0x36
    16a6:	af ab       	std	Y+55, r26	; 0x37
    16a8:	b8 af       	std	Y+56, r27	; 0x38
    16aa:	e9 8a       	std	Y+17, r14	; 0x11
    16ac:	fa 8a       	std	Y+18, r15	; 0x12
    16ae:	0b 8b       	std	Y+19, r16	; 0x13
    16b0:	1c 8b       	std	Y+20, r17	; 0x14
    16b2:	6d a8       	ldd	r6, Y+53	; 0x35
    16b4:	7e a8       	ldd	r7, Y+54	; 0x36
    16b6:	8f a8       	ldd	r8, Y+55	; 0x37
    16b8:	98 ac       	ldd	r9, Y+56	; 0x38
    16ba:	6d 8a       	std	Y+21, r6	; 0x15
    16bc:	7e 8a       	std	Y+22, r7	; 0x16
    16be:	8f 8a       	std	Y+23, r8	; 0x17
    16c0:	98 8e       	std	Y+24, r9	; 0x18
    16c2:	2e 2d       	mov	r18, r14
    16c4:	3a 89       	ldd	r19, Y+18	; 0x12
    16c6:	4b 89       	ldd	r20, Y+19	; 0x13
    16c8:	5c 89       	ldd	r21, Y+20	; 0x14
    16ca:	6d a9       	ldd	r22, Y+53	; 0x35
    16cc:	6a c2       	rjmp	.+1236   	; 0x1ba2 <__umoddi3+0xcd0>
    16ce:	67 96       	adiw	r28, 0x17	; 23
    16d0:	8f af       	std	Y+63, r24	; 0x3f
    16d2:	67 97       	sbiw	r28, 0x17	; 23
    16d4:	a6 01       	movw	r20, r12
    16d6:	95 01       	movw	r18, r10
    16d8:	08 2e       	mov	r0, r24
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <__umoddi3+0x812>
    16dc:	22 0f       	add	r18, r18
    16de:	33 1f       	adc	r19, r19
    16e0:	44 1f       	adc	r20, r20
    16e2:	55 1f       	adc	r21, r21
    16e4:	0a 94       	dec	r0
    16e6:	d2 f7       	brpl	.-12     	; 0x16dc <__umoddi3+0x80a>
    16e8:	a0 e2       	ldi	r26, 0x20	; 32
    16ea:	aa 2e       	mov	r10, r26
    16ec:	a8 1a       	sub	r10, r24
    16ee:	66 96       	adiw	r28, 0x16	; 22
    16f0:	af ae       	std	Y+63, r10	; 0x3f
    16f2:	66 97       	sbiw	r28, 0x16	; 22
    16f4:	d2 01       	movw	r26, r4
    16f6:	c1 01       	movw	r24, r2
    16f8:	04 c0       	rjmp	.+8      	; 0x1702 <__umoddi3+0x830>
    16fa:	b6 95       	lsr	r27
    16fc:	a7 95       	ror	r26
    16fe:	97 95       	ror	r25
    1700:	87 95       	ror	r24
    1702:	aa 94       	dec	r10
    1704:	d2 f7       	brpl	.-12     	; 0x16fa <__umoddi3+0x828>
    1706:	6c 01       	movw	r12, r24
    1708:	7d 01       	movw	r14, r26
    170a:	c2 2a       	or	r12, r18
    170c:	d3 2a       	or	r13, r19
    170e:	e4 2a       	or	r14, r20
    1710:	f5 2a       	or	r15, r21
    1712:	c9 a6       	std	Y+41, r12	; 0x29
    1714:	da a6       	std	Y+42, r13	; 0x2a
    1716:	eb a6       	std	Y+43, r14	; 0x2b
    1718:	fc a6       	std	Y+44, r15	; 0x2c
    171a:	82 01       	movw	r16, r4
    171c:	71 01       	movw	r14, r2
    171e:	67 96       	adiw	r28, 0x17	; 23
    1720:	0f ac       	ldd	r0, Y+63	; 0x3f
    1722:	67 97       	sbiw	r28, 0x17	; 23
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__umoddi3+0x85c>
    1726:	ee 0c       	add	r14, r14
    1728:	ff 1c       	adc	r15, r15
    172a:	00 1f       	adc	r16, r16
    172c:	11 1f       	adc	r17, r17
    172e:	0a 94       	dec	r0
    1730:	d2 f7       	brpl	.-12     	; 0x1726 <__umoddi3+0x854>
    1732:	ed a2       	std	Y+37, r14	; 0x25
    1734:	fe a2       	std	Y+38, r15	; 0x26
    1736:	0f a3       	std	Y+39, r16	; 0x27
    1738:	18 a7       	std	Y+40, r17	; 0x28
    173a:	64 01       	movw	r12, r8
    173c:	53 01       	movw	r10, r6
    173e:	66 96       	adiw	r28, 0x16	; 22
    1740:	0f ac       	ldd	r0, Y+63	; 0x3f
    1742:	66 97       	sbiw	r28, 0x16	; 22
    1744:	04 c0       	rjmp	.+8      	; 0x174e <__umoddi3+0x87c>
    1746:	d6 94       	lsr	r13
    1748:	c7 94       	ror	r12
    174a:	b7 94       	ror	r11
    174c:	a7 94       	ror	r10
    174e:	0a 94       	dec	r0
    1750:	d2 f7       	brpl	.-12     	; 0x1746 <__umoddi3+0x874>
    1752:	a4 01       	movw	r20, r8
    1754:	93 01       	movw	r18, r6
    1756:	67 96       	adiw	r28, 0x17	; 23
    1758:	0f ac       	ldd	r0, Y+63	; 0x3f
    175a:	67 97       	sbiw	r28, 0x17	; 23
    175c:	04 c0       	rjmp	.+8      	; 0x1766 <__umoddi3+0x894>
    175e:	22 0f       	add	r18, r18
    1760:	33 1f       	adc	r19, r19
    1762:	44 1f       	adc	r20, r20
    1764:	55 1f       	adc	r21, r21
    1766:	0a 94       	dec	r0
    1768:	d2 f7       	brpl	.-12     	; 0x175e <__umoddi3+0x88c>
    176a:	6c 96       	adiw	r28, 0x1c	; 28
    176c:	8c ad       	ldd	r24, Y+60	; 0x3c
    176e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1770:	ae ad       	ldd	r26, Y+62	; 0x3e
    1772:	bf ad       	ldd	r27, Y+63	; 0x3f
    1774:	6c 97       	sbiw	r28, 0x1c	; 28
    1776:	66 96       	adiw	r28, 0x16	; 22
    1778:	0f ac       	ldd	r0, Y+63	; 0x3f
    177a:	66 97       	sbiw	r28, 0x16	; 22
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <__umoddi3+0x8b4>
    177e:	b6 95       	lsr	r27
    1780:	a7 95       	ror	r26
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	0a 94       	dec	r0
    1788:	d2 f7       	brpl	.-12     	; 0x177e <__umoddi3+0x8ac>
    178a:	3c 01       	movw	r6, r24
    178c:	4d 01       	movw	r8, r26
    178e:	62 2a       	or	r6, r18
    1790:	73 2a       	or	r7, r19
    1792:	84 2a       	or	r8, r20
    1794:	95 2a       	or	r9, r21
    1796:	69 a2       	std	Y+33, r6	; 0x21
    1798:	7a a2       	std	Y+34, r7	; 0x22
    179a:	8b a2       	std	Y+35, r8	; 0x23
    179c:	9c a2       	std	Y+36, r9	; 0x24
    179e:	6c 96       	adiw	r28, 0x1c	; 28
    17a0:	ec ac       	ldd	r14, Y+60	; 0x3c
    17a2:	fd ac       	ldd	r15, Y+61	; 0x3d
    17a4:	0e ad       	ldd	r16, Y+62	; 0x3e
    17a6:	1f ad       	ldd	r17, Y+63	; 0x3f
    17a8:	6c 97       	sbiw	r28, 0x1c	; 28
    17aa:	67 96       	adiw	r28, 0x17	; 23
    17ac:	0f ac       	ldd	r0, Y+63	; 0x3f
    17ae:	67 97       	sbiw	r28, 0x17	; 23
    17b0:	04 c0       	rjmp	.+8      	; 0x17ba <__umoddi3+0x8e8>
    17b2:	ee 0c       	add	r14, r14
    17b4:	ff 1c       	adc	r15, r15
    17b6:	00 1f       	adc	r16, r16
    17b8:	11 1f       	adc	r17, r17
    17ba:	0a 94       	dec	r0
    17bc:	d2 f7       	brpl	.-12     	; 0x17b2 <__umoddi3+0x8e0>
    17be:	ed 8e       	std	Y+29, r14	; 0x1d
    17c0:	fe 8e       	std	Y+30, r15	; 0x1e
    17c2:	0f 8f       	std	Y+31, r16	; 0x1f
    17c4:	18 a3       	std	Y+32, r17	; 0x20
    17c6:	49 a5       	ldd	r20, Y+41	; 0x29
    17c8:	5a a5       	ldd	r21, Y+42	; 0x2a
    17ca:	6b a5       	ldd	r22, Y+43	; 0x2b
    17cc:	7c a5       	ldd	r23, Y+44	; 0x2c
    17ce:	3b 01       	movw	r6, r22
    17d0:	88 24       	eor	r8, r8
    17d2:	99 24       	eor	r9, r9
    17d4:	60 70       	andi	r22, 0x00	; 0
    17d6:	70 70       	andi	r23, 0x00	; 0
    17d8:	2d 96       	adiw	r28, 0x0d	; 13
    17da:	4c af       	std	Y+60, r20	; 0x3c
    17dc:	5d af       	std	Y+61, r21	; 0x3d
    17de:	6e af       	std	Y+62, r22	; 0x3e
    17e0:	7f af       	std	Y+63, r23	; 0x3f
    17e2:	2d 97       	sbiw	r28, 0x0d	; 13
    17e4:	c6 01       	movw	r24, r12
    17e6:	b5 01       	movw	r22, r10
    17e8:	a4 01       	movw	r20, r8
    17ea:	93 01       	movw	r18, r6
    17ec:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    17f0:	7b 01       	movw	r14, r22
    17f2:	8c 01       	movw	r16, r24
    17f4:	c6 01       	movw	r24, r12
    17f6:	b5 01       	movw	r22, r10
    17f8:	a4 01       	movw	r20, r8
    17fa:	93 01       	movw	r18, r6
    17fc:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    1800:	c9 01       	movw	r24, r18
    1802:	da 01       	movw	r26, r20
    1804:	1c 01       	movw	r2, r24
    1806:	2d 01       	movw	r4, r26
    1808:	c2 01       	movw	r24, r4
    180a:	b1 01       	movw	r22, r2
    180c:	2d 96       	adiw	r28, 0x0d	; 13
    180e:	2c ad       	ldd	r18, Y+60	; 0x3c
    1810:	3d ad       	ldd	r19, Y+61	; 0x3d
    1812:	4e ad       	ldd	r20, Y+62	; 0x3e
    1814:	5f ad       	ldd	r21, Y+63	; 0x3f
    1816:	2d 97       	sbiw	r28, 0x0d	; 13
    1818:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    181c:	9b 01       	movw	r18, r22
    181e:	ac 01       	movw	r20, r24
    1820:	87 01       	movw	r16, r14
    1822:	ff 24       	eor	r15, r15
    1824:	ee 24       	eor	r14, r14
    1826:	a9 a0       	ldd	r10, Y+33	; 0x21
    1828:	ba a0       	ldd	r11, Y+34	; 0x22
    182a:	cb a0       	ldd	r12, Y+35	; 0x23
    182c:	dc a0       	ldd	r13, Y+36	; 0x24
    182e:	c6 01       	movw	r24, r12
    1830:	aa 27       	eor	r26, r26
    1832:	bb 27       	eor	r27, r27
    1834:	57 01       	movw	r10, r14
    1836:	68 01       	movw	r12, r16
    1838:	a8 2a       	or	r10, r24
    183a:	b9 2a       	or	r11, r25
    183c:	ca 2a       	or	r12, r26
    183e:	db 2a       	or	r13, r27
    1840:	a2 16       	cp	r10, r18
    1842:	b3 06       	cpc	r11, r19
    1844:	c4 06       	cpc	r12, r20
    1846:	d5 06       	cpc	r13, r21
    1848:	00 f5       	brcc	.+64     	; 0x188a <__umoddi3+0x9b8>
    184a:	08 94       	sec
    184c:	21 08       	sbc	r2, r1
    184e:	31 08       	sbc	r3, r1
    1850:	41 08       	sbc	r4, r1
    1852:	51 08       	sbc	r5, r1
    1854:	e9 a4       	ldd	r14, Y+41	; 0x29
    1856:	fa a4       	ldd	r15, Y+42	; 0x2a
    1858:	0b a5       	ldd	r16, Y+43	; 0x2b
    185a:	1c a5       	ldd	r17, Y+44	; 0x2c
    185c:	ae 0c       	add	r10, r14
    185e:	bf 1c       	adc	r11, r15
    1860:	c0 1e       	adc	r12, r16
    1862:	d1 1e       	adc	r13, r17
    1864:	ae 14       	cp	r10, r14
    1866:	bf 04       	cpc	r11, r15
    1868:	c0 06       	cpc	r12, r16
    186a:	d1 06       	cpc	r13, r17
    186c:	70 f0       	brcs	.+28     	; 0x188a <__umoddi3+0x9b8>
    186e:	a2 16       	cp	r10, r18
    1870:	b3 06       	cpc	r11, r19
    1872:	c4 06       	cpc	r12, r20
    1874:	d5 06       	cpc	r13, r21
    1876:	48 f4       	brcc	.+18     	; 0x188a <__umoddi3+0x9b8>
    1878:	08 94       	sec
    187a:	21 08       	sbc	r2, r1
    187c:	31 08       	sbc	r3, r1
    187e:	41 08       	sbc	r4, r1
    1880:	51 08       	sbc	r5, r1
    1882:	ae 0c       	add	r10, r14
    1884:	bf 1c       	adc	r11, r15
    1886:	c0 1e       	adc	r12, r16
    1888:	d1 1e       	adc	r13, r17
    188a:	a2 1a       	sub	r10, r18
    188c:	b3 0a       	sbc	r11, r19
    188e:	c4 0a       	sbc	r12, r20
    1890:	d5 0a       	sbc	r13, r21
    1892:	c6 01       	movw	r24, r12
    1894:	b5 01       	movw	r22, r10
    1896:	a4 01       	movw	r20, r8
    1898:	93 01       	movw	r18, r6
    189a:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    189e:	7b 01       	movw	r14, r22
    18a0:	8c 01       	movw	r16, r24
    18a2:	c6 01       	movw	r24, r12
    18a4:	b5 01       	movw	r22, r10
    18a6:	a4 01       	movw	r20, r8
    18a8:	93 01       	movw	r18, r6
    18aa:	0e 94 06 38 	call	0x700c	; 0x700c <__udivmodsi4>
    18ae:	c9 01       	movw	r24, r18
    18b0:	da 01       	movw	r26, r20
    18b2:	3c 01       	movw	r6, r24
    18b4:	4d 01       	movw	r8, r26
    18b6:	c4 01       	movw	r24, r8
    18b8:	b3 01       	movw	r22, r6
    18ba:	2d 96       	adiw	r28, 0x0d	; 13
    18bc:	2c ad       	ldd	r18, Y+60	; 0x3c
    18be:	3d ad       	ldd	r19, Y+61	; 0x3d
    18c0:	4e ad       	ldd	r20, Y+62	; 0x3e
    18c2:	5f ad       	ldd	r21, Y+63	; 0x3f
    18c4:	2d 97       	sbiw	r28, 0x0d	; 13
    18c6:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    18ca:	9b 01       	movw	r18, r22
    18cc:	ac 01       	movw	r20, r24
    18ce:	87 01       	movw	r16, r14
    18d0:	ff 24       	eor	r15, r15
    18d2:	ee 24       	eor	r14, r14
    18d4:	89 a1       	ldd	r24, Y+33	; 0x21
    18d6:	9a a1       	ldd	r25, Y+34	; 0x22
    18d8:	ab a1       	ldd	r26, Y+35	; 0x23
    18da:	bc a1       	ldd	r27, Y+36	; 0x24
    18dc:	a0 70       	andi	r26, 0x00	; 0
    18de:	b0 70       	andi	r27, 0x00	; 0
    18e0:	57 01       	movw	r10, r14
    18e2:	68 01       	movw	r12, r16
    18e4:	a8 2a       	or	r10, r24
    18e6:	b9 2a       	or	r11, r25
    18e8:	ca 2a       	or	r12, r26
    18ea:	db 2a       	or	r13, r27
    18ec:	a2 16       	cp	r10, r18
    18ee:	b3 06       	cpc	r11, r19
    18f0:	c4 06       	cpc	r12, r20
    18f2:	d5 06       	cpc	r13, r21
    18f4:	00 f5       	brcc	.+64     	; 0x1936 <__umoddi3+0xa64>
    18f6:	08 94       	sec
    18f8:	61 08       	sbc	r6, r1
    18fa:	71 08       	sbc	r7, r1
    18fc:	81 08       	sbc	r8, r1
    18fe:	91 08       	sbc	r9, r1
    1900:	69 a5       	ldd	r22, Y+41	; 0x29
    1902:	7a a5       	ldd	r23, Y+42	; 0x2a
    1904:	8b a5       	ldd	r24, Y+43	; 0x2b
    1906:	9c a5       	ldd	r25, Y+44	; 0x2c
    1908:	a6 0e       	add	r10, r22
    190a:	b7 1e       	adc	r11, r23
    190c:	c8 1e       	adc	r12, r24
    190e:	d9 1e       	adc	r13, r25
    1910:	a6 16       	cp	r10, r22
    1912:	b7 06       	cpc	r11, r23
    1914:	c8 06       	cpc	r12, r24
    1916:	d9 06       	cpc	r13, r25
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__umoddi3+0xa64>
    191a:	a2 16       	cp	r10, r18
    191c:	b3 06       	cpc	r11, r19
    191e:	c4 06       	cpc	r12, r20
    1920:	d5 06       	cpc	r13, r21
    1922:	48 f4       	brcc	.+18     	; 0x1936 <__umoddi3+0xa64>
    1924:	08 94       	sec
    1926:	61 08       	sbc	r6, r1
    1928:	71 08       	sbc	r7, r1
    192a:	81 08       	sbc	r8, r1
    192c:	91 08       	sbc	r9, r1
    192e:	a6 0e       	add	r10, r22
    1930:	b7 1e       	adc	r11, r23
    1932:	c8 1e       	adc	r12, r24
    1934:	d9 1e       	adc	r13, r25
    1936:	d6 01       	movw	r26, r12
    1938:	c5 01       	movw	r24, r10
    193a:	82 1b       	sub	r24, r18
    193c:	93 0b       	sbc	r25, r19
    193e:	a4 0b       	sbc	r26, r20
    1940:	b5 0b       	sbc	r27, r21
    1942:	89 8f       	std	Y+25, r24	; 0x19
    1944:	9a 8f       	std	Y+26, r25	; 0x1a
    1946:	ab 8f       	std	Y+27, r26	; 0x1b
    1948:	bc 8f       	std	Y+28, r27	; 0x1c
    194a:	d1 01       	movw	r26, r2
    194c:	99 27       	eor	r25, r25
    194e:	88 27       	eor	r24, r24
    1950:	84 01       	movw	r16, r8
    1952:	73 01       	movw	r14, r6
    1954:	e8 2a       	or	r14, r24
    1956:	f9 2a       	or	r15, r25
    1958:	0a 2b       	or	r16, r26
    195a:	1b 2b       	or	r17, r27
    195c:	4f ef       	ldi	r20, 0xFF	; 255
    195e:	a4 2e       	mov	r10, r20
    1960:	4f ef       	ldi	r20, 0xFF	; 255
    1962:	b4 2e       	mov	r11, r20
    1964:	c1 2c       	mov	r12, r1
    1966:	d1 2c       	mov	r13, r1
    1968:	ae 20       	and	r10, r14
    196a:	bf 20       	and	r11, r15
    196c:	c0 22       	and	r12, r16
    196e:	d1 22       	and	r13, r17
    1970:	78 01       	movw	r14, r16
    1972:	00 27       	eor	r16, r16
    1974:	11 27       	eor	r17, r17
    1976:	6d a0       	ldd	r6, Y+37	; 0x25
    1978:	7e a0       	ldd	r7, Y+38	; 0x26
    197a:	8f a0       	ldd	r8, Y+39	; 0x27
    197c:	98 a4       	ldd	r9, Y+40	; 0x28
    197e:	4f ef       	ldi	r20, 0xFF	; 255
    1980:	5f ef       	ldi	r21, 0xFF	; 255
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	64 22       	and	r6, r20
    1988:	75 22       	and	r7, r21
    198a:	86 22       	and	r8, r22
    198c:	97 22       	and	r9, r23
    198e:	8d a1       	ldd	r24, Y+37	; 0x25
    1990:	9e a1       	ldd	r25, Y+38	; 0x26
    1992:	af a1       	ldd	r26, Y+39	; 0x27
    1994:	b8 a5       	ldd	r27, Y+40	; 0x28
    1996:	bd 01       	movw	r22, r26
    1998:	88 27       	eor	r24, r24
    199a:	99 27       	eor	r25, r25
    199c:	65 96       	adiw	r28, 0x15	; 21
    199e:	6c af       	std	Y+60, r22	; 0x3c
    19a0:	7d af       	std	Y+61, r23	; 0x3d
    19a2:	8e af       	std	Y+62, r24	; 0x3e
    19a4:	9f af       	std	Y+63, r25	; 0x3f
    19a6:	65 97       	sbiw	r28, 0x15	; 21
    19a8:	c6 01       	movw	r24, r12
    19aa:	b5 01       	movw	r22, r10
    19ac:	a4 01       	movw	r20, r8
    19ae:	93 01       	movw	r18, r6
    19b0:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    19b4:	61 96       	adiw	r28, 0x11	; 17
    19b6:	6c af       	std	Y+60, r22	; 0x3c
    19b8:	7d af       	std	Y+61, r23	; 0x3d
    19ba:	8e af       	std	Y+62, r24	; 0x3e
    19bc:	9f af       	std	Y+63, r25	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	c6 01       	movw	r24, r12
    19c2:	b5 01       	movw	r22, r10
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	2c ad       	ldd	r18, Y+60	; 0x3c
    19c8:	3d ad       	ldd	r19, Y+61	; 0x3d
    19ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    19cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    19ce:	65 97       	sbiw	r28, 0x15	; 21
    19d0:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    19d4:	1b 01       	movw	r2, r22
    19d6:	2c 01       	movw	r4, r24
    19d8:	c8 01       	movw	r24, r16
    19da:	b7 01       	movw	r22, r14
    19dc:	a4 01       	movw	r20, r8
    19de:	93 01       	movw	r18, r6
    19e0:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    19e4:	5b 01       	movw	r10, r22
    19e6:	6c 01       	movw	r12, r24
    19e8:	c8 01       	movw	r24, r16
    19ea:	b7 01       	movw	r22, r14
    19ec:	65 96       	adiw	r28, 0x15	; 21
    19ee:	2c ad       	ldd	r18, Y+60	; 0x3c
    19f0:	3d ad       	ldd	r19, Y+61	; 0x3d
    19f2:	4e ad       	ldd	r20, Y+62	; 0x3e
    19f4:	5f ad       	ldd	r21, Y+63	; 0x3f
    19f6:	65 97       	sbiw	r28, 0x15	; 21
    19f8:	0e 94 e7 37 	call	0x6fce	; 0x6fce <__mulsi3>
    19fc:	7b 01       	movw	r14, r22
    19fe:	8c 01       	movw	r16, r24
    1a00:	a6 01       	movw	r20, r12
    1a02:	95 01       	movw	r18, r10
    1a04:	22 0d       	add	r18, r2
    1a06:	33 1d       	adc	r19, r3
    1a08:	44 1d       	adc	r20, r4
    1a0a:	55 1d       	adc	r21, r5
    1a0c:	61 96       	adiw	r28, 0x11	; 17
    1a0e:	6c ac       	ldd	r6, Y+60	; 0x3c
    1a10:	7d ac       	ldd	r7, Y+61	; 0x3d
    1a12:	8e ac       	ldd	r8, Y+62	; 0x3e
    1a14:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a16:	61 97       	sbiw	r28, 0x11	; 17
    1a18:	c4 01       	movw	r24, r8
    1a1a:	aa 27       	eor	r26, r26
    1a1c:	bb 27       	eor	r27, r27
    1a1e:	28 0f       	add	r18, r24
    1a20:	39 1f       	adc	r19, r25
    1a22:	4a 1f       	adc	r20, r26
    1a24:	5b 1f       	adc	r21, r27
    1a26:	2a 15       	cp	r18, r10
    1a28:	3b 05       	cpc	r19, r11
    1a2a:	4c 05       	cpc	r20, r12
    1a2c:	5d 05       	cpc	r21, r13
    1a2e:	48 f4       	brcc	.+18     	; 0x1a42 <__umoddi3+0xb70>
    1a30:	81 2c       	mov	r8, r1
    1a32:	91 2c       	mov	r9, r1
    1a34:	e1 e0       	ldi	r30, 0x01	; 1
    1a36:	ae 2e       	mov	r10, r30
    1a38:	b1 2c       	mov	r11, r1
    1a3a:	e8 0c       	add	r14, r8
    1a3c:	f9 1c       	adc	r15, r9
    1a3e:	0a 1d       	adc	r16, r10
    1a40:	1b 1d       	adc	r17, r11
    1a42:	ca 01       	movw	r24, r20
    1a44:	aa 27       	eor	r26, r26
    1a46:	bb 27       	eor	r27, r27
    1a48:	57 01       	movw	r10, r14
    1a4a:	68 01       	movw	r12, r16
    1a4c:	a8 0e       	add	r10, r24
    1a4e:	b9 1e       	adc	r11, r25
    1a50:	ca 1e       	adc	r12, r26
    1a52:	db 1e       	adc	r13, r27
    1a54:	a9 01       	movw	r20, r18
    1a56:	33 27       	eor	r19, r19
    1a58:	22 27       	eor	r18, r18
    1a5a:	61 96       	adiw	r28, 0x11	; 17
    1a5c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1a5e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1a60:	ae ad       	ldd	r26, Y+62	; 0x3e
    1a62:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a64:	61 97       	sbiw	r28, 0x11	; 17
    1a66:	a0 70       	andi	r26, 0x00	; 0
    1a68:	b0 70       	andi	r27, 0x00	; 0
    1a6a:	28 0f       	add	r18, r24
    1a6c:	39 1f       	adc	r19, r25
    1a6e:	4a 1f       	adc	r20, r26
    1a70:	5b 1f       	adc	r21, r27
    1a72:	e9 8c       	ldd	r14, Y+25	; 0x19
    1a74:	fa 8c       	ldd	r15, Y+26	; 0x1a
    1a76:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1a78:	1c 8d       	ldd	r17, Y+28	; 0x1c
    1a7a:	ea 14       	cp	r14, r10
    1a7c:	fb 04       	cpc	r15, r11
    1a7e:	0c 05       	cpc	r16, r12
    1a80:	1d 05       	cpc	r17, r13
    1a82:	70 f0       	brcs	.+28     	; 0x1aa0 <__umoddi3+0xbce>
    1a84:	ae 14       	cp	r10, r14
    1a86:	bf 04       	cpc	r11, r15
    1a88:	c0 06       	cpc	r12, r16
    1a8a:	d1 06       	cpc	r13, r17
    1a8c:	69 f5       	brne	.+90     	; 0x1ae8 <__umoddi3+0xc16>
    1a8e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1a90:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1a92:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a94:	98 a1       	ldd	r25, Y+32	; 0x20
    1a96:	62 17       	cp	r22, r18
    1a98:	73 07       	cpc	r23, r19
    1a9a:	84 07       	cpc	r24, r20
    1a9c:	95 07       	cpc	r25, r21
    1a9e:	20 f5       	brcc	.+72     	; 0x1ae8 <__umoddi3+0xc16>
    1aa0:	da 01       	movw	r26, r20
    1aa2:	c9 01       	movw	r24, r18
    1aa4:	6d a0       	ldd	r6, Y+37	; 0x25
    1aa6:	7e a0       	ldd	r7, Y+38	; 0x26
    1aa8:	8f a0       	ldd	r8, Y+39	; 0x27
    1aaa:	98 a4       	ldd	r9, Y+40	; 0x28
    1aac:	86 19       	sub	r24, r6
    1aae:	97 09       	sbc	r25, r7
    1ab0:	a8 09       	sbc	r26, r8
    1ab2:	b9 09       	sbc	r27, r9
    1ab4:	e9 a4       	ldd	r14, Y+41	; 0x29
    1ab6:	fa a4       	ldd	r15, Y+42	; 0x2a
    1ab8:	0b a5       	ldd	r16, Y+43	; 0x2b
    1aba:	1c a5       	ldd	r17, Y+44	; 0x2c
    1abc:	ae 18       	sub	r10, r14
    1abe:	bf 08       	sbc	r11, r15
    1ac0:	c0 0a       	sbc	r12, r16
    1ac2:	d1 0a       	sbc	r13, r17
    1ac4:	ee 24       	eor	r14, r14
    1ac6:	ff 24       	eor	r15, r15
    1ac8:	87 01       	movw	r16, r14
    1aca:	28 17       	cp	r18, r24
    1acc:	39 07       	cpc	r19, r25
    1ace:	4a 07       	cpc	r20, r26
    1ad0:	5b 07       	cpc	r21, r27
    1ad2:	28 f4       	brcc	.+10     	; 0x1ade <__umoddi3+0xc0c>
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	e2 2e       	mov	r14, r18
    1ad8:	f1 2c       	mov	r15, r1
    1ada:	01 2d       	mov	r16, r1
    1adc:	11 2d       	mov	r17, r1
    1ade:	ae 18       	sub	r10, r14
    1ae0:	bf 08       	sbc	r11, r15
    1ae2:	c0 0a       	sbc	r12, r16
    1ae4:	d1 0a       	sbc	r13, r17
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <__umoddi3+0xc1a>
    1ae8:	da 01       	movw	r26, r20
    1aea:	c9 01       	movw	r24, r18
    1aec:	6d 8c       	ldd	r6, Y+29	; 0x1d
    1aee:	7e 8c       	ldd	r7, Y+30	; 0x1e
    1af0:	8f 8c       	ldd	r8, Y+31	; 0x1f
    1af2:	98 a0       	ldd	r9, Y+32	; 0x20
    1af4:	68 1a       	sub	r6, r24
    1af6:	79 0a       	sbc	r7, r25
    1af8:	8a 0a       	sbc	r8, r26
    1afa:	9b 0a       	sbc	r9, r27
    1afc:	49 8d       	ldd	r20, Y+25	; 0x19
    1afe:	5a 8d       	ldd	r21, Y+26	; 0x1a
    1b00:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1b02:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b04:	4a 19       	sub	r20, r10
    1b06:	5b 09       	sbc	r21, r11
    1b08:	6c 09       	sbc	r22, r12
    1b0a:	7d 09       	sbc	r23, r13
    1b0c:	5a 01       	movw	r10, r20
    1b0e:	6b 01       	movw	r12, r22
    1b10:	22 24       	eor	r2, r2
    1b12:	33 24       	eor	r3, r3
    1b14:	21 01       	movw	r4, r2
    1b16:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b18:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b1a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b1c:	98 a1       	ldd	r25, Y+32	; 0x20
    1b1e:	66 15       	cp	r22, r6
    1b20:	77 05       	cpc	r23, r7
    1b22:	88 05       	cpc	r24, r8
    1b24:	99 05       	cpc	r25, r9
    1b26:	28 f4       	brcc	.+10     	; 0x1b32 <__umoddi3+0xc60>
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	28 2e       	mov	r2, r24
    1b2c:	31 2c       	mov	r3, r1
    1b2e:	41 2c       	mov	r4, r1
    1b30:	51 2c       	mov	r5, r1
    1b32:	86 01       	movw	r16, r12
    1b34:	75 01       	movw	r14, r10
    1b36:	e2 18       	sub	r14, r2
    1b38:	f3 08       	sbc	r15, r3
    1b3a:	04 09       	sbc	r16, r4
    1b3c:	15 09       	sbc	r17, r5
    1b3e:	a8 01       	movw	r20, r16
    1b40:	97 01       	movw	r18, r14
    1b42:	66 96       	adiw	r28, 0x16	; 22
    1b44:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b46:	66 97       	sbiw	r28, 0x16	; 22
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <__umoddi3+0xc80>
    1b4a:	22 0f       	add	r18, r18
    1b4c:	33 1f       	adc	r19, r19
    1b4e:	44 1f       	adc	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	0a 94       	dec	r0
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <__umoddi3+0xc78>
    1b56:	d4 01       	movw	r26, r8
    1b58:	c3 01       	movw	r24, r6
    1b5a:	67 96       	adiw	r28, 0x17	; 23
    1b5c:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b5e:	67 97       	sbiw	r28, 0x17	; 23
    1b60:	04 c0       	rjmp	.+8      	; 0x1b6a <__umoddi3+0xc98>
    1b62:	b6 95       	lsr	r27
    1b64:	a7 95       	ror	r26
    1b66:	97 95       	ror	r25
    1b68:	87 95       	ror	r24
    1b6a:	0a 94       	dec	r0
    1b6c:	d2 f7       	brpl	.-12     	; 0x1b62 <__umoddi3+0xc90>
    1b6e:	28 2b       	or	r18, r24
    1b70:	39 2b       	or	r19, r25
    1b72:	4a 2b       	or	r20, r26
    1b74:	5b 2b       	or	r21, r27
    1b76:	29 8b       	std	Y+17, r18	; 0x11
    1b78:	3a 8b       	std	Y+18, r19	; 0x12
    1b7a:	4b 8b       	std	Y+19, r20	; 0x13
    1b7c:	5c 8b       	std	Y+20, r21	; 0x14
    1b7e:	67 96       	adiw	r28, 0x17	; 23
    1b80:	0f ac       	ldd	r0, Y+63	; 0x3f
    1b82:	67 97       	sbiw	r28, 0x17	; 23
    1b84:	04 c0       	rjmp	.+8      	; 0x1b8e <__umoddi3+0xcbc>
    1b86:	16 95       	lsr	r17
    1b88:	07 95       	ror	r16
    1b8a:	f7 94       	ror	r15
    1b8c:	e7 94       	ror	r14
    1b8e:	0a 94       	dec	r0
    1b90:	d2 f7       	brpl	.-12     	; 0x1b86 <__umoddi3+0xcb4>
    1b92:	ed 8a       	std	Y+21, r14	; 0x15
    1b94:	fe 8a       	std	Y+22, r15	; 0x16
    1b96:	0f 8b       	std	Y+23, r16	; 0x17
    1b98:	18 8f       	std	Y+24, r17	; 0x18
    1b9a:	3a 89       	ldd	r19, Y+18	; 0x12
    1b9c:	4b 89       	ldd	r20, Y+19	; 0x13
    1b9e:	5c 89       	ldd	r21, Y+20	; 0x14
    1ba0:	6e 2d       	mov	r22, r14
    1ba2:	7e 89       	ldd	r23, Y+22	; 0x16
    1ba4:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba6:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba8:	c5 5a       	subi	r28, 0xA5	; 165
    1baa:	df 4f       	sbci	r29, 0xFF	; 255
    1bac:	e2 e1       	ldi	r30, 0x12	; 18
    1bae:	0c 94 44 38 	jmp	0x7088	; 0x7088 <__epilogue_restores__>

00001bb2 <_fpadd_parts>:
    1bb2:	a0 e0       	ldi	r26, 0x00	; 0
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	ef ed       	ldi	r30, 0xDF	; 223
    1bb8:	fd e0       	ldi	r31, 0x0D	; 13
    1bba:	0c 94 28 38 	jmp	0x7050	; 0x7050 <__prologue_saves__>
    1bbe:	dc 01       	movw	r26, r24
    1bc0:	2b 01       	movw	r4, r22
    1bc2:	fa 01       	movw	r30, r20
    1bc4:	9c 91       	ld	r25, X
    1bc6:	92 30       	cpi	r25, 0x02	; 2
    1bc8:	08 f4       	brcc	.+2      	; 0x1bcc <_fpadd_parts+0x1a>
    1bca:	39 c1       	rjmp	.+626    	; 0x1e3e <_fpadd_parts+0x28c>
    1bcc:	eb 01       	movw	r28, r22
    1bce:	88 81       	ld	r24, Y
    1bd0:	82 30       	cpi	r24, 0x02	; 2
    1bd2:	08 f4       	brcc	.+2      	; 0x1bd6 <_fpadd_parts+0x24>
    1bd4:	33 c1       	rjmp	.+614    	; 0x1e3c <_fpadd_parts+0x28a>
    1bd6:	94 30       	cpi	r25, 0x04	; 4
    1bd8:	69 f4       	brne	.+26     	; 0x1bf4 <_fpadd_parts+0x42>
    1bda:	84 30       	cpi	r24, 0x04	; 4
    1bdc:	09 f0       	breq	.+2      	; 0x1be0 <_fpadd_parts+0x2e>
    1bde:	2f c1       	rjmp	.+606    	; 0x1e3e <_fpadd_parts+0x28c>
    1be0:	11 96       	adiw	r26, 0x01	; 1
    1be2:	9c 91       	ld	r25, X
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	89 81       	ldd	r24, Y+1	; 0x01
    1be8:	98 17       	cp	r25, r24
    1bea:	09 f4       	brne	.+2      	; 0x1bee <_fpadd_parts+0x3c>
    1bec:	28 c1       	rjmp	.+592    	; 0x1e3e <_fpadd_parts+0x28c>
    1bee:	af e8       	ldi	r26, 0x8F	; 143
    1bf0:	b0 e0       	ldi	r27, 0x00	; 0
    1bf2:	25 c1       	rjmp	.+586    	; 0x1e3e <_fpadd_parts+0x28c>
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	09 f4       	brne	.+2      	; 0x1bfa <_fpadd_parts+0x48>
    1bf8:	21 c1       	rjmp	.+578    	; 0x1e3c <_fpadd_parts+0x28a>
    1bfa:	82 30       	cpi	r24, 0x02	; 2
    1bfc:	a9 f4       	brne	.+42     	; 0x1c28 <_fpadd_parts+0x76>
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	09 f0       	breq	.+2      	; 0x1c04 <_fpadd_parts+0x52>
    1c02:	1d c1       	rjmp	.+570    	; 0x1e3e <_fpadd_parts+0x28c>
    1c04:	9a 01       	movw	r18, r20
    1c06:	ad 01       	movw	r20, r26
    1c08:	88 e0       	ldi	r24, 0x08	; 8
    1c0a:	ea 01       	movw	r28, r20
    1c0c:	09 90       	ld	r0, Y+
    1c0e:	ae 01       	movw	r20, r28
    1c10:	e9 01       	movw	r28, r18
    1c12:	09 92       	st	Y+, r0
    1c14:	9e 01       	movw	r18, r28
    1c16:	81 50       	subi	r24, 0x01	; 1
    1c18:	c1 f7       	brne	.-16     	; 0x1c0a <_fpadd_parts+0x58>
    1c1a:	e2 01       	movw	r28, r4
    1c1c:	89 81       	ldd	r24, Y+1	; 0x01
    1c1e:	11 96       	adiw	r26, 0x01	; 1
    1c20:	9c 91       	ld	r25, X
    1c22:	89 23       	and	r24, r25
    1c24:	81 83       	std	Z+1, r24	; 0x01
    1c26:	08 c1       	rjmp	.+528    	; 0x1e38 <_fpadd_parts+0x286>
    1c28:	92 30       	cpi	r25, 0x02	; 2
    1c2a:	09 f4       	brne	.+2      	; 0x1c2e <_fpadd_parts+0x7c>
    1c2c:	07 c1       	rjmp	.+526    	; 0x1e3c <_fpadd_parts+0x28a>
    1c2e:	12 96       	adiw	r26, 0x02	; 2
    1c30:	2d 90       	ld	r2, X+
    1c32:	3c 90       	ld	r3, X
    1c34:	13 97       	sbiw	r26, 0x03	; 3
    1c36:	eb 01       	movw	r28, r22
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c3c:	14 96       	adiw	r26, 0x04	; 4
    1c3e:	ad 90       	ld	r10, X+
    1c40:	bd 90       	ld	r11, X+
    1c42:	cd 90       	ld	r12, X+
    1c44:	dc 90       	ld	r13, X
    1c46:	17 97       	sbiw	r26, 0x07	; 7
    1c48:	ec 80       	ldd	r14, Y+4	; 0x04
    1c4a:	fd 80       	ldd	r15, Y+5	; 0x05
    1c4c:	0e 81       	ldd	r16, Y+6	; 0x06
    1c4e:	1f 81       	ldd	r17, Y+7	; 0x07
    1c50:	91 01       	movw	r18, r2
    1c52:	28 1b       	sub	r18, r24
    1c54:	39 0b       	sbc	r19, r25
    1c56:	b9 01       	movw	r22, r18
    1c58:	37 ff       	sbrs	r19, 7
    1c5a:	04 c0       	rjmp	.+8      	; 0x1c64 <_fpadd_parts+0xb2>
    1c5c:	66 27       	eor	r22, r22
    1c5e:	77 27       	eor	r23, r23
    1c60:	62 1b       	sub	r22, r18
    1c62:	73 0b       	sbc	r23, r19
    1c64:	60 32       	cpi	r22, 0x20	; 32
    1c66:	71 05       	cpc	r23, r1
    1c68:	0c f0       	brlt	.+2      	; 0x1c6c <_fpadd_parts+0xba>
    1c6a:	61 c0       	rjmp	.+194    	; 0x1d2e <_fpadd_parts+0x17c>
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	6c f5       	brge	.+90     	; 0x1ccc <_fpadd_parts+0x11a>
    1c72:	37 01       	movw	r6, r14
    1c74:	48 01       	movw	r8, r16
    1c76:	06 2e       	mov	r0, r22
    1c78:	04 c0       	rjmp	.+8      	; 0x1c82 <_fpadd_parts+0xd0>
    1c7a:	96 94       	lsr	r9
    1c7c:	87 94       	ror	r8
    1c7e:	77 94       	ror	r7
    1c80:	67 94       	ror	r6
    1c82:	0a 94       	dec	r0
    1c84:	d2 f7       	brpl	.-12     	; 0x1c7a <_fpadd_parts+0xc8>
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	40 e0       	ldi	r20, 0x00	; 0
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	04 c0       	rjmp	.+8      	; 0x1c98 <_fpadd_parts+0xe6>
    1c90:	22 0f       	add	r18, r18
    1c92:	33 1f       	adc	r19, r19
    1c94:	44 1f       	adc	r20, r20
    1c96:	55 1f       	adc	r21, r21
    1c98:	6a 95       	dec	r22
    1c9a:	d2 f7       	brpl	.-12     	; 0x1c90 <_fpadd_parts+0xde>
    1c9c:	21 50       	subi	r18, 0x01	; 1
    1c9e:	30 40       	sbci	r19, 0x00	; 0
    1ca0:	40 40       	sbci	r20, 0x00	; 0
    1ca2:	50 40       	sbci	r21, 0x00	; 0
    1ca4:	2e 21       	and	r18, r14
    1ca6:	3f 21       	and	r19, r15
    1ca8:	40 23       	and	r20, r16
    1caa:	51 23       	and	r21, r17
    1cac:	21 15       	cp	r18, r1
    1cae:	31 05       	cpc	r19, r1
    1cb0:	41 05       	cpc	r20, r1
    1cb2:	51 05       	cpc	r21, r1
    1cb4:	21 f0       	breq	.+8      	; 0x1cbe <_fpadd_parts+0x10c>
    1cb6:	21 e0       	ldi	r18, 0x01	; 1
    1cb8:	30 e0       	ldi	r19, 0x00	; 0
    1cba:	40 e0       	ldi	r20, 0x00	; 0
    1cbc:	50 e0       	ldi	r21, 0x00	; 0
    1cbe:	79 01       	movw	r14, r18
    1cc0:	8a 01       	movw	r16, r20
    1cc2:	e6 28       	or	r14, r6
    1cc4:	f7 28       	or	r15, r7
    1cc6:	08 29       	or	r16, r8
    1cc8:	19 29       	or	r17, r9
    1cca:	3c c0       	rjmp	.+120    	; 0x1d44 <_fpadd_parts+0x192>
    1ccc:	23 2b       	or	r18, r19
    1cce:	d1 f1       	breq	.+116    	; 0x1d44 <_fpadd_parts+0x192>
    1cd0:	26 0e       	add	r2, r22
    1cd2:	37 1e       	adc	r3, r23
    1cd4:	35 01       	movw	r6, r10
    1cd6:	46 01       	movw	r8, r12
    1cd8:	06 2e       	mov	r0, r22
    1cda:	04 c0       	rjmp	.+8      	; 0x1ce4 <_fpadd_parts+0x132>
    1cdc:	96 94       	lsr	r9
    1cde:	87 94       	ror	r8
    1ce0:	77 94       	ror	r7
    1ce2:	67 94       	ror	r6
    1ce4:	0a 94       	dec	r0
    1ce6:	d2 f7       	brpl	.-12     	; 0x1cdc <_fpadd_parts+0x12a>
    1ce8:	21 e0       	ldi	r18, 0x01	; 1
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	40 e0       	ldi	r20, 0x00	; 0
    1cee:	50 e0       	ldi	r21, 0x00	; 0
    1cf0:	04 c0       	rjmp	.+8      	; 0x1cfa <_fpadd_parts+0x148>
    1cf2:	22 0f       	add	r18, r18
    1cf4:	33 1f       	adc	r19, r19
    1cf6:	44 1f       	adc	r20, r20
    1cf8:	55 1f       	adc	r21, r21
    1cfa:	6a 95       	dec	r22
    1cfc:	d2 f7       	brpl	.-12     	; 0x1cf2 <_fpadd_parts+0x140>
    1cfe:	21 50       	subi	r18, 0x01	; 1
    1d00:	30 40       	sbci	r19, 0x00	; 0
    1d02:	40 40       	sbci	r20, 0x00	; 0
    1d04:	50 40       	sbci	r21, 0x00	; 0
    1d06:	2a 21       	and	r18, r10
    1d08:	3b 21       	and	r19, r11
    1d0a:	4c 21       	and	r20, r12
    1d0c:	5d 21       	and	r21, r13
    1d0e:	21 15       	cp	r18, r1
    1d10:	31 05       	cpc	r19, r1
    1d12:	41 05       	cpc	r20, r1
    1d14:	51 05       	cpc	r21, r1
    1d16:	21 f0       	breq	.+8      	; 0x1d20 <_fpadd_parts+0x16e>
    1d18:	21 e0       	ldi	r18, 0x01	; 1
    1d1a:	30 e0       	ldi	r19, 0x00	; 0
    1d1c:	40 e0       	ldi	r20, 0x00	; 0
    1d1e:	50 e0       	ldi	r21, 0x00	; 0
    1d20:	59 01       	movw	r10, r18
    1d22:	6a 01       	movw	r12, r20
    1d24:	a6 28       	or	r10, r6
    1d26:	b7 28       	or	r11, r7
    1d28:	c8 28       	or	r12, r8
    1d2a:	d9 28       	or	r13, r9
    1d2c:	0b c0       	rjmp	.+22     	; 0x1d44 <_fpadd_parts+0x192>
    1d2e:	82 15       	cp	r24, r2
    1d30:	93 05       	cpc	r25, r3
    1d32:	2c f0       	brlt	.+10     	; 0x1d3e <_fpadd_parts+0x18c>
    1d34:	1c 01       	movw	r2, r24
    1d36:	aa 24       	eor	r10, r10
    1d38:	bb 24       	eor	r11, r11
    1d3a:	65 01       	movw	r12, r10
    1d3c:	03 c0       	rjmp	.+6      	; 0x1d44 <_fpadd_parts+0x192>
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	11 96       	adiw	r26, 0x01	; 1
    1d46:	9c 91       	ld	r25, X
    1d48:	d2 01       	movw	r26, r4
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	8c 91       	ld	r24, X
    1d4e:	98 17       	cp	r25, r24
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_fpadd_parts+0x1a2>
    1d52:	45 c0       	rjmp	.+138    	; 0x1dde <_fpadd_parts+0x22c>
    1d54:	99 23       	and	r25, r25
    1d56:	39 f0       	breq	.+14     	; 0x1d66 <_fpadd_parts+0x1b4>
    1d58:	a8 01       	movw	r20, r16
    1d5a:	97 01       	movw	r18, r14
    1d5c:	2a 19       	sub	r18, r10
    1d5e:	3b 09       	sbc	r19, r11
    1d60:	4c 09       	sbc	r20, r12
    1d62:	5d 09       	sbc	r21, r13
    1d64:	06 c0       	rjmp	.+12     	; 0x1d72 <_fpadd_parts+0x1c0>
    1d66:	a6 01       	movw	r20, r12
    1d68:	95 01       	movw	r18, r10
    1d6a:	2e 19       	sub	r18, r14
    1d6c:	3f 09       	sbc	r19, r15
    1d6e:	40 0b       	sbc	r20, r16
    1d70:	51 0b       	sbc	r21, r17
    1d72:	57 fd       	sbrc	r21, 7
    1d74:	08 c0       	rjmp	.+16     	; 0x1d86 <_fpadd_parts+0x1d4>
    1d76:	11 82       	std	Z+1, r1	; 0x01
    1d78:	33 82       	std	Z+3, r3	; 0x03
    1d7a:	22 82       	std	Z+2, r2	; 0x02
    1d7c:	24 83       	std	Z+4, r18	; 0x04
    1d7e:	35 83       	std	Z+5, r19	; 0x05
    1d80:	46 83       	std	Z+6, r20	; 0x06
    1d82:	57 83       	std	Z+7, r21	; 0x07
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <_fpadd_parts+0x20e>
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	81 83       	std	Z+1, r24	; 0x01
    1d8a:	33 82       	std	Z+3, r3	; 0x03
    1d8c:	22 82       	std	Z+2, r2	; 0x02
    1d8e:	88 27       	eor	r24, r24
    1d90:	99 27       	eor	r25, r25
    1d92:	dc 01       	movw	r26, r24
    1d94:	82 1b       	sub	r24, r18
    1d96:	93 0b       	sbc	r25, r19
    1d98:	a4 0b       	sbc	r26, r20
    1d9a:	b5 0b       	sbc	r27, r21
    1d9c:	84 83       	std	Z+4, r24	; 0x04
    1d9e:	95 83       	std	Z+5, r25	; 0x05
    1da0:	a6 83       	std	Z+6, r26	; 0x06
    1da2:	b7 83       	std	Z+7, r27	; 0x07
    1da4:	0d c0       	rjmp	.+26     	; 0x1dc0 <_fpadd_parts+0x20e>
    1da6:	22 0f       	add	r18, r18
    1da8:	33 1f       	adc	r19, r19
    1daa:	44 1f       	adc	r20, r20
    1dac:	55 1f       	adc	r21, r21
    1dae:	24 83       	std	Z+4, r18	; 0x04
    1db0:	35 83       	std	Z+5, r19	; 0x05
    1db2:	46 83       	std	Z+6, r20	; 0x06
    1db4:	57 83       	std	Z+7, r21	; 0x07
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	01 97       	sbiw	r24, 0x01	; 1
    1dbc:	93 83       	std	Z+3, r25	; 0x03
    1dbe:	82 83       	std	Z+2, r24	; 0x02
    1dc0:	24 81       	ldd	r18, Z+4	; 0x04
    1dc2:	35 81       	ldd	r19, Z+5	; 0x05
    1dc4:	46 81       	ldd	r20, Z+6	; 0x06
    1dc6:	57 81       	ldd	r21, Z+7	; 0x07
    1dc8:	da 01       	movw	r26, r20
    1dca:	c9 01       	movw	r24, r18
    1dcc:	01 97       	sbiw	r24, 0x01	; 1
    1dce:	a1 09       	sbc	r26, r1
    1dd0:	b1 09       	sbc	r27, r1
    1dd2:	8f 5f       	subi	r24, 0xFF	; 255
    1dd4:	9f 4f       	sbci	r25, 0xFF	; 255
    1dd6:	af 4f       	sbci	r26, 0xFF	; 255
    1dd8:	bf 43       	sbci	r27, 0x3F	; 63
    1dda:	28 f3       	brcs	.-54     	; 0x1da6 <_fpadd_parts+0x1f4>
    1ddc:	0b c0       	rjmp	.+22     	; 0x1df4 <_fpadd_parts+0x242>
    1dde:	91 83       	std	Z+1, r25	; 0x01
    1de0:	33 82       	std	Z+3, r3	; 0x03
    1de2:	22 82       	std	Z+2, r2	; 0x02
    1de4:	ea 0c       	add	r14, r10
    1de6:	fb 1c       	adc	r15, r11
    1de8:	0c 1d       	adc	r16, r12
    1dea:	1d 1d       	adc	r17, r13
    1dec:	e4 82       	std	Z+4, r14	; 0x04
    1dee:	f5 82       	std	Z+5, r15	; 0x05
    1df0:	06 83       	std	Z+6, r16	; 0x06
    1df2:	17 83       	std	Z+7, r17	; 0x07
    1df4:	83 e0       	ldi	r24, 0x03	; 3
    1df6:	80 83       	st	Z, r24
    1df8:	24 81       	ldd	r18, Z+4	; 0x04
    1dfa:	35 81       	ldd	r19, Z+5	; 0x05
    1dfc:	46 81       	ldd	r20, Z+6	; 0x06
    1dfe:	57 81       	ldd	r21, Z+7	; 0x07
    1e00:	57 ff       	sbrs	r21, 7
    1e02:	1a c0       	rjmp	.+52     	; 0x1e38 <_fpadd_parts+0x286>
    1e04:	c9 01       	movw	r24, r18
    1e06:	aa 27       	eor	r26, r26
    1e08:	97 fd       	sbrc	r25, 7
    1e0a:	a0 95       	com	r26
    1e0c:	ba 2f       	mov	r27, r26
    1e0e:	81 70       	andi	r24, 0x01	; 1
    1e10:	90 70       	andi	r25, 0x00	; 0
    1e12:	a0 70       	andi	r26, 0x00	; 0
    1e14:	b0 70       	andi	r27, 0x00	; 0
    1e16:	56 95       	lsr	r21
    1e18:	47 95       	ror	r20
    1e1a:	37 95       	ror	r19
    1e1c:	27 95       	ror	r18
    1e1e:	82 2b       	or	r24, r18
    1e20:	93 2b       	or	r25, r19
    1e22:	a4 2b       	or	r26, r20
    1e24:	b5 2b       	or	r27, r21
    1e26:	84 83       	std	Z+4, r24	; 0x04
    1e28:	95 83       	std	Z+5, r25	; 0x05
    1e2a:	a6 83       	std	Z+6, r26	; 0x06
    1e2c:	b7 83       	std	Z+7, r27	; 0x07
    1e2e:	82 81       	ldd	r24, Z+2	; 0x02
    1e30:	93 81       	ldd	r25, Z+3	; 0x03
    1e32:	01 96       	adiw	r24, 0x01	; 1
    1e34:	93 83       	std	Z+3, r25	; 0x03
    1e36:	82 83       	std	Z+2, r24	; 0x02
    1e38:	df 01       	movw	r26, r30
    1e3a:	01 c0       	rjmp	.+2      	; 0x1e3e <_fpadd_parts+0x28c>
    1e3c:	d2 01       	movw	r26, r4
    1e3e:	cd 01       	movw	r24, r26
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	e2 e1       	ldi	r30, 0x12	; 18
    1e46:	0c 94 44 38 	jmp	0x7088	; 0x7088 <__epilogue_restores__>

00001e4a <__subsf3>:
    1e4a:	a0 e2       	ldi	r26, 0x20	; 32
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	eb e2       	ldi	r30, 0x2B	; 43
    1e50:	ff e0       	ldi	r31, 0x0F	; 15
    1e52:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__prologue_saves__+0x18>
    1e56:	69 83       	std	Y+1, r22	; 0x01
    1e58:	7a 83       	std	Y+2, r23	; 0x02
    1e5a:	8b 83       	std	Y+3, r24	; 0x03
    1e5c:	9c 83       	std	Y+4, r25	; 0x04
    1e5e:	2d 83       	std	Y+5, r18	; 0x05
    1e60:	3e 83       	std	Y+6, r19	; 0x06
    1e62:	4f 83       	std	Y+7, r20	; 0x07
    1e64:	58 87       	std	Y+8, r21	; 0x08
    1e66:	e9 e0       	ldi	r30, 0x09	; 9
    1e68:	ee 2e       	mov	r14, r30
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	ec 0e       	add	r14, r28
    1e6e:	fd 1e       	adc	r15, r29
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	b7 01       	movw	r22, r14
    1e76:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	0f 5e       	subi	r16, 0xEF	; 239
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	ce 01       	movw	r24, r28
    1e82:	05 96       	adiw	r24, 0x05	; 5
    1e84:	b8 01       	movw	r22, r16
    1e86:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1e8a:	8a 89       	ldd	r24, Y+18	; 0x12
    1e8c:	91 e0       	ldi	r25, 0x01	; 1
    1e8e:	89 27       	eor	r24, r25
    1e90:	8a 8b       	std	Y+18, r24	; 0x12
    1e92:	c7 01       	movw	r24, r14
    1e94:	b8 01       	movw	r22, r16
    1e96:	ae 01       	movw	r20, r28
    1e98:	47 5e       	subi	r20, 0xE7	; 231
    1e9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e9c:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1ea0:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1ea4:	a0 96       	adiw	r28, 0x20	; 32
    1ea6:	e6 e0       	ldi	r30, 0x06	; 6
    1ea8:	0c 94 50 38 	jmp	0x70a0	; 0x70a0 <__epilogue_restores__+0x18>

00001eac <__addsf3>:
    1eac:	a0 e2       	ldi	r26, 0x20	; 32
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	ec e5       	ldi	r30, 0x5C	; 92
    1eb2:	ff e0       	ldi	r31, 0x0F	; 15
    1eb4:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__prologue_saves__+0x18>
    1eb8:	69 83       	std	Y+1, r22	; 0x01
    1eba:	7a 83       	std	Y+2, r23	; 0x02
    1ebc:	8b 83       	std	Y+3, r24	; 0x03
    1ebe:	9c 83       	std	Y+4, r25	; 0x04
    1ec0:	2d 83       	std	Y+5, r18	; 0x05
    1ec2:	3e 83       	std	Y+6, r19	; 0x06
    1ec4:	4f 83       	std	Y+7, r20	; 0x07
    1ec6:	58 87       	std	Y+8, r21	; 0x08
    1ec8:	f9 e0       	ldi	r31, 0x09	; 9
    1eca:	ef 2e       	mov	r14, r31
    1ecc:	f1 2c       	mov	r15, r1
    1ece:	ec 0e       	add	r14, r28
    1ed0:	fd 1e       	adc	r15, r29
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	b7 01       	movw	r22, r14
    1ed8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1edc:	8e 01       	movw	r16, r28
    1ede:	0f 5e       	subi	r16, 0xEF	; 239
    1ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ee2:	ce 01       	movw	r24, r28
    1ee4:	05 96       	adiw	r24, 0x05	; 5
    1ee6:	b8 01       	movw	r22, r16
    1ee8:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1eec:	c7 01       	movw	r24, r14
    1eee:	b8 01       	movw	r22, r16
    1ef0:	ae 01       	movw	r20, r28
    1ef2:	47 5e       	subi	r20, 0xE7	; 231
    1ef4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ef6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <_fpadd_parts>
    1efa:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    1efe:	a0 96       	adiw	r28, 0x20	; 32
    1f00:	e6 e0       	ldi	r30, 0x06	; 6
    1f02:	0c 94 50 38 	jmp	0x70a0	; 0x70a0 <__epilogue_restores__+0x18>

00001f06 <__mulsf3>:
    1f06:	a0 e2       	ldi	r26, 0x20	; 32
    1f08:	b0 e0       	ldi	r27, 0x00	; 0
    1f0a:	e9 e8       	ldi	r30, 0x89	; 137
    1f0c:	ff e0       	ldi	r31, 0x0F	; 15
    1f0e:	0c 94 28 38 	jmp	0x7050	; 0x7050 <__prologue_saves__>
    1f12:	69 83       	std	Y+1, r22	; 0x01
    1f14:	7a 83       	std	Y+2, r23	; 0x02
    1f16:	8b 83       	std	Y+3, r24	; 0x03
    1f18:	9c 83       	std	Y+4, r25	; 0x04
    1f1a:	2d 83       	std	Y+5, r18	; 0x05
    1f1c:	3e 83       	std	Y+6, r19	; 0x06
    1f1e:	4f 83       	std	Y+7, r20	; 0x07
    1f20:	58 87       	std	Y+8, r21	; 0x08
    1f22:	ce 01       	movw	r24, r28
    1f24:	01 96       	adiw	r24, 0x01	; 1
    1f26:	be 01       	movw	r22, r28
    1f28:	67 5f       	subi	r22, 0xF7	; 247
    1f2a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f2c:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f30:	ce 01       	movw	r24, r28
    1f32:	05 96       	adiw	r24, 0x05	; 5
    1f34:	be 01       	movw	r22, r28
    1f36:	6f 5e       	subi	r22, 0xEF	; 239
    1f38:	7f 4f       	sbci	r23, 0xFF	; 255
    1f3a:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    1f3e:	99 85       	ldd	r25, Y+9	; 0x09
    1f40:	92 30       	cpi	r25, 0x02	; 2
    1f42:	88 f0       	brcs	.+34     	; 0x1f66 <__mulsf3+0x60>
    1f44:	89 89       	ldd	r24, Y+17	; 0x11
    1f46:	82 30       	cpi	r24, 0x02	; 2
    1f48:	c8 f0       	brcs	.+50     	; 0x1f7c <__mulsf3+0x76>
    1f4a:	94 30       	cpi	r25, 0x04	; 4
    1f4c:	19 f4       	brne	.+6      	; 0x1f54 <__mulsf3+0x4e>
    1f4e:	82 30       	cpi	r24, 0x02	; 2
    1f50:	51 f4       	brne	.+20     	; 0x1f66 <__mulsf3+0x60>
    1f52:	04 c0       	rjmp	.+8      	; 0x1f5c <__mulsf3+0x56>
    1f54:	84 30       	cpi	r24, 0x04	; 4
    1f56:	29 f4       	brne	.+10     	; 0x1f62 <__mulsf3+0x5c>
    1f58:	92 30       	cpi	r25, 0x02	; 2
    1f5a:	81 f4       	brne	.+32     	; 0x1f7c <__mulsf3+0x76>
    1f5c:	8f e8       	ldi	r24, 0x8F	; 143
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	c6 c0       	rjmp	.+396    	; 0x20ee <__mulsf3+0x1e8>
    1f62:	92 30       	cpi	r25, 0x02	; 2
    1f64:	49 f4       	brne	.+18     	; 0x1f78 <__mulsf3+0x72>
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f6c:	98 13       	cpse	r25, r24
    1f6e:	21 e0       	ldi	r18, 0x01	; 1
    1f70:	2a 87       	std	Y+10, r18	; 0x0a
    1f72:	ce 01       	movw	r24, r28
    1f74:	09 96       	adiw	r24, 0x09	; 9
    1f76:	bb c0       	rjmp	.+374    	; 0x20ee <__mulsf3+0x1e8>
    1f78:	82 30       	cpi	r24, 0x02	; 2
    1f7a:	49 f4       	brne	.+18     	; 0x1f8e <__mulsf3+0x88>
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f80:	8a 89       	ldd	r24, Y+18	; 0x12
    1f82:	98 13       	cpse	r25, r24
    1f84:	21 e0       	ldi	r18, 0x01	; 1
    1f86:	2a 8b       	std	Y+18, r18	; 0x12
    1f88:	ce 01       	movw	r24, r28
    1f8a:	41 96       	adiw	r24, 0x11	; 17
    1f8c:	b0 c0       	rjmp	.+352    	; 0x20ee <__mulsf3+0x1e8>
    1f8e:	2d 84       	ldd	r2, Y+13	; 0x0d
    1f90:	3e 84       	ldd	r3, Y+14	; 0x0e
    1f92:	4f 84       	ldd	r4, Y+15	; 0x0f
    1f94:	58 88       	ldd	r5, Y+16	; 0x10
    1f96:	6d 88       	ldd	r6, Y+21	; 0x15
    1f98:	7e 88       	ldd	r7, Y+22	; 0x16
    1f9a:	8f 88       	ldd	r8, Y+23	; 0x17
    1f9c:	98 8c       	ldd	r9, Y+24	; 0x18
    1f9e:	ee 24       	eor	r14, r14
    1fa0:	ff 24       	eor	r15, r15
    1fa2:	87 01       	movw	r16, r14
    1fa4:	aa 24       	eor	r10, r10
    1fa6:	bb 24       	eor	r11, r11
    1fa8:	65 01       	movw	r12, r10
    1faa:	40 e0       	ldi	r20, 0x00	; 0
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	70 e0       	ldi	r23, 0x00	; 0
    1fb2:	e0 e0       	ldi	r30, 0x00	; 0
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	c1 01       	movw	r24, r2
    1fb8:	81 70       	andi	r24, 0x01	; 1
    1fba:	90 70       	andi	r25, 0x00	; 0
    1fbc:	89 2b       	or	r24, r25
    1fbe:	e9 f0       	breq	.+58     	; 0x1ffa <__mulsf3+0xf4>
    1fc0:	e6 0c       	add	r14, r6
    1fc2:	f7 1c       	adc	r15, r7
    1fc4:	08 1d       	adc	r16, r8
    1fc6:	19 1d       	adc	r17, r9
    1fc8:	9a 01       	movw	r18, r20
    1fca:	ab 01       	movw	r20, r22
    1fcc:	2a 0d       	add	r18, r10
    1fce:	3b 1d       	adc	r19, r11
    1fd0:	4c 1d       	adc	r20, r12
    1fd2:	5d 1d       	adc	r21, r13
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e0       	ldi	r26, 0x00	; 0
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 14       	cp	r14, r6
    1fde:	f7 04       	cpc	r15, r7
    1fe0:	08 05       	cpc	r16, r8
    1fe2:	19 05       	cpc	r17, r9
    1fe4:	20 f4       	brcc	.+8      	; 0x1fee <__mulsf3+0xe8>
    1fe6:	81 e0       	ldi	r24, 0x01	; 1
    1fe8:	90 e0       	ldi	r25, 0x00	; 0
    1fea:	a0 e0       	ldi	r26, 0x00	; 0
    1fec:	b0 e0       	ldi	r27, 0x00	; 0
    1fee:	ba 01       	movw	r22, r20
    1ff0:	a9 01       	movw	r20, r18
    1ff2:	48 0f       	add	r20, r24
    1ff4:	59 1f       	adc	r21, r25
    1ff6:	6a 1f       	adc	r22, r26
    1ff8:	7b 1f       	adc	r23, r27
    1ffa:	aa 0c       	add	r10, r10
    1ffc:	bb 1c       	adc	r11, r11
    1ffe:	cc 1c       	adc	r12, r12
    2000:	dd 1c       	adc	r13, r13
    2002:	97 fe       	sbrs	r9, 7
    2004:	08 c0       	rjmp	.+16     	; 0x2016 <__mulsf3+0x110>
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	90 e0       	ldi	r25, 0x00	; 0
    200a:	a0 e0       	ldi	r26, 0x00	; 0
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	a8 2a       	or	r10, r24
    2010:	b9 2a       	or	r11, r25
    2012:	ca 2a       	or	r12, r26
    2014:	db 2a       	or	r13, r27
    2016:	31 96       	adiw	r30, 0x01	; 1
    2018:	e0 32       	cpi	r30, 0x20	; 32
    201a:	f1 05       	cpc	r31, r1
    201c:	49 f0       	breq	.+18     	; 0x2030 <__mulsf3+0x12a>
    201e:	66 0c       	add	r6, r6
    2020:	77 1c       	adc	r7, r7
    2022:	88 1c       	adc	r8, r8
    2024:	99 1c       	adc	r9, r9
    2026:	56 94       	lsr	r5
    2028:	47 94       	ror	r4
    202a:	37 94       	ror	r3
    202c:	27 94       	ror	r2
    202e:	c3 cf       	rjmp	.-122    	; 0x1fb6 <__mulsf3+0xb0>
    2030:	fa 85       	ldd	r31, Y+10	; 0x0a
    2032:	ea 89       	ldd	r30, Y+18	; 0x12
    2034:	2b 89       	ldd	r18, Y+19	; 0x13
    2036:	3c 89       	ldd	r19, Y+20	; 0x14
    2038:	8b 85       	ldd	r24, Y+11	; 0x0b
    203a:	9c 85       	ldd	r25, Y+12	; 0x0c
    203c:	28 0f       	add	r18, r24
    203e:	39 1f       	adc	r19, r25
    2040:	2e 5f       	subi	r18, 0xFE	; 254
    2042:	3f 4f       	sbci	r19, 0xFF	; 255
    2044:	17 c0       	rjmp	.+46     	; 0x2074 <__mulsf3+0x16e>
    2046:	ca 01       	movw	r24, r20
    2048:	81 70       	andi	r24, 0x01	; 1
    204a:	90 70       	andi	r25, 0x00	; 0
    204c:	89 2b       	or	r24, r25
    204e:	61 f0       	breq	.+24     	; 0x2068 <__mulsf3+0x162>
    2050:	16 95       	lsr	r17
    2052:	07 95       	ror	r16
    2054:	f7 94       	ror	r15
    2056:	e7 94       	ror	r14
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	90 e0       	ldi	r25, 0x00	; 0
    205c:	a0 e0       	ldi	r26, 0x00	; 0
    205e:	b0 e8       	ldi	r27, 0x80	; 128
    2060:	e8 2a       	or	r14, r24
    2062:	f9 2a       	or	r15, r25
    2064:	0a 2b       	or	r16, r26
    2066:	1b 2b       	or	r17, r27
    2068:	76 95       	lsr	r23
    206a:	67 95       	ror	r22
    206c:	57 95       	ror	r21
    206e:	47 95       	ror	r20
    2070:	2f 5f       	subi	r18, 0xFF	; 255
    2072:	3f 4f       	sbci	r19, 0xFF	; 255
    2074:	77 fd       	sbrc	r23, 7
    2076:	e7 cf       	rjmp	.-50     	; 0x2046 <__mulsf3+0x140>
    2078:	0c c0       	rjmp	.+24     	; 0x2092 <__mulsf3+0x18c>
    207a:	44 0f       	add	r20, r20
    207c:	55 1f       	adc	r21, r21
    207e:	66 1f       	adc	r22, r22
    2080:	77 1f       	adc	r23, r23
    2082:	17 fd       	sbrc	r17, 7
    2084:	41 60       	ori	r20, 0x01	; 1
    2086:	ee 0c       	add	r14, r14
    2088:	ff 1c       	adc	r15, r15
    208a:	00 1f       	adc	r16, r16
    208c:	11 1f       	adc	r17, r17
    208e:	21 50       	subi	r18, 0x01	; 1
    2090:	30 40       	sbci	r19, 0x00	; 0
    2092:	40 30       	cpi	r20, 0x00	; 0
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	59 07       	cpc	r21, r25
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	69 07       	cpc	r22, r25
    209c:	90 e4       	ldi	r25, 0x40	; 64
    209e:	79 07       	cpc	r23, r25
    20a0:	60 f3       	brcs	.-40     	; 0x207a <__mulsf3+0x174>
    20a2:	2b 8f       	std	Y+27, r18	; 0x1b
    20a4:	3c 8f       	std	Y+28, r19	; 0x1c
    20a6:	db 01       	movw	r26, r22
    20a8:	ca 01       	movw	r24, r20
    20aa:	8f 77       	andi	r24, 0x7F	; 127
    20ac:	90 70       	andi	r25, 0x00	; 0
    20ae:	a0 70       	andi	r26, 0x00	; 0
    20b0:	b0 70       	andi	r27, 0x00	; 0
    20b2:	80 34       	cpi	r24, 0x40	; 64
    20b4:	91 05       	cpc	r25, r1
    20b6:	a1 05       	cpc	r26, r1
    20b8:	b1 05       	cpc	r27, r1
    20ba:	61 f4       	brne	.+24     	; 0x20d4 <__mulsf3+0x1ce>
    20bc:	47 fd       	sbrc	r20, 7
    20be:	0a c0       	rjmp	.+20     	; 0x20d4 <__mulsf3+0x1ce>
    20c0:	e1 14       	cp	r14, r1
    20c2:	f1 04       	cpc	r15, r1
    20c4:	01 05       	cpc	r16, r1
    20c6:	11 05       	cpc	r17, r1
    20c8:	29 f0       	breq	.+10     	; 0x20d4 <__mulsf3+0x1ce>
    20ca:	40 5c       	subi	r20, 0xC0	; 192
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	40 78       	andi	r20, 0x80	; 128
    20d4:	1a 8e       	std	Y+26, r1	; 0x1a
    20d6:	fe 17       	cp	r31, r30
    20d8:	11 f0       	breq	.+4      	; 0x20de <__mulsf3+0x1d8>
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	8a 8f       	std	Y+26, r24	; 0x1a
    20de:	4d 8f       	std	Y+29, r20	; 0x1d
    20e0:	5e 8f       	std	Y+30, r21	; 0x1e
    20e2:	6f 8f       	std	Y+31, r22	; 0x1f
    20e4:	78 a3       	std	Y+32, r23	; 0x20
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	89 8f       	std	Y+25, r24	; 0x19
    20ea:	ce 01       	movw	r24, r28
    20ec:	49 96       	adiw	r24, 0x19	; 25
    20ee:	0e 94 61 11 	call	0x22c2	; 0x22c2 <__pack_f>
    20f2:	a0 96       	adiw	r28, 0x20	; 32
    20f4:	e2 e1       	ldi	r30, 0x12	; 18
    20f6:	0c 94 44 38 	jmp	0x7088	; 0x7088 <__epilogue_restores__>

000020fa <__gtsf2>:
    20fa:	a8 e1       	ldi	r26, 0x18	; 24
    20fc:	b0 e0       	ldi	r27, 0x00	; 0
    20fe:	e3 e8       	ldi	r30, 0x83	; 131
    2100:	f0 e1       	ldi	r31, 0x10	; 16
    2102:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__prologue_saves__+0x18>
    2106:	69 83       	std	Y+1, r22	; 0x01
    2108:	7a 83       	std	Y+2, r23	; 0x02
    210a:	8b 83       	std	Y+3, r24	; 0x03
    210c:	9c 83       	std	Y+4, r25	; 0x04
    210e:	2d 83       	std	Y+5, r18	; 0x05
    2110:	3e 83       	std	Y+6, r19	; 0x06
    2112:	4f 83       	std	Y+7, r20	; 0x07
    2114:	58 87       	std	Y+8, r21	; 0x08
    2116:	89 e0       	ldi	r24, 0x09	; 9
    2118:	e8 2e       	mov	r14, r24
    211a:	f1 2c       	mov	r15, r1
    211c:	ec 0e       	add	r14, r28
    211e:	fd 1e       	adc	r15, r29
    2120:	ce 01       	movw	r24, r28
    2122:	01 96       	adiw	r24, 0x01	; 1
    2124:	b7 01       	movw	r22, r14
    2126:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    212a:	8e 01       	movw	r16, r28
    212c:	0f 5e       	subi	r16, 0xEF	; 239
    212e:	1f 4f       	sbci	r17, 0xFF	; 255
    2130:	ce 01       	movw	r24, r28
    2132:	05 96       	adiw	r24, 0x05	; 5
    2134:	b8 01       	movw	r22, r16
    2136:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    213a:	89 85       	ldd	r24, Y+9	; 0x09
    213c:	82 30       	cpi	r24, 0x02	; 2
    213e:	40 f0       	brcs	.+16     	; 0x2150 <__gtsf2+0x56>
    2140:	89 89       	ldd	r24, Y+17	; 0x11
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	28 f0       	brcs	.+10     	; 0x2150 <__gtsf2+0x56>
    2146:	c7 01       	movw	r24, r14
    2148:	b8 01       	movw	r22, r16
    214a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    214e:	01 c0       	rjmp	.+2      	; 0x2152 <__gtsf2+0x58>
    2150:	8f ef       	ldi	r24, 0xFF	; 255
    2152:	68 96       	adiw	r28, 0x18	; 24
    2154:	e6 e0       	ldi	r30, 0x06	; 6
    2156:	0c 94 50 38 	jmp	0x70a0	; 0x70a0 <__epilogue_restores__+0x18>

0000215a <__gesf2>:
    215a:	a8 e1       	ldi	r26, 0x18	; 24
    215c:	b0 e0       	ldi	r27, 0x00	; 0
    215e:	e3 eb       	ldi	r30, 0xB3	; 179
    2160:	f0 e1       	ldi	r31, 0x10	; 16
    2162:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__prologue_saves__+0x18>
    2166:	69 83       	std	Y+1, r22	; 0x01
    2168:	7a 83       	std	Y+2, r23	; 0x02
    216a:	8b 83       	std	Y+3, r24	; 0x03
    216c:	9c 83       	std	Y+4, r25	; 0x04
    216e:	2d 83       	std	Y+5, r18	; 0x05
    2170:	3e 83       	std	Y+6, r19	; 0x06
    2172:	4f 83       	std	Y+7, r20	; 0x07
    2174:	58 87       	std	Y+8, r21	; 0x08
    2176:	89 e0       	ldi	r24, 0x09	; 9
    2178:	e8 2e       	mov	r14, r24
    217a:	f1 2c       	mov	r15, r1
    217c:	ec 0e       	add	r14, r28
    217e:	fd 1e       	adc	r15, r29
    2180:	ce 01       	movw	r24, r28
    2182:	01 96       	adiw	r24, 0x01	; 1
    2184:	b7 01       	movw	r22, r14
    2186:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    218a:	8e 01       	movw	r16, r28
    218c:	0f 5e       	subi	r16, 0xEF	; 239
    218e:	1f 4f       	sbci	r17, 0xFF	; 255
    2190:	ce 01       	movw	r24, r28
    2192:	05 96       	adiw	r24, 0x05	; 5
    2194:	b8 01       	movw	r22, r16
    2196:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    219a:	89 85       	ldd	r24, Y+9	; 0x09
    219c:	82 30       	cpi	r24, 0x02	; 2
    219e:	40 f0       	brcs	.+16     	; 0x21b0 <__gesf2+0x56>
    21a0:	89 89       	ldd	r24, Y+17	; 0x11
    21a2:	82 30       	cpi	r24, 0x02	; 2
    21a4:	28 f0       	brcs	.+10     	; 0x21b0 <__gesf2+0x56>
    21a6:	c7 01       	movw	r24, r14
    21a8:	b8 01       	movw	r22, r16
    21aa:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <__gesf2+0x58>
    21b0:	8f ef       	ldi	r24, 0xFF	; 255
    21b2:	68 96       	adiw	r28, 0x18	; 24
    21b4:	e6 e0       	ldi	r30, 0x06	; 6
    21b6:	0c 94 50 38 	jmp	0x70a0	; 0x70a0 <__epilogue_restores__+0x18>

000021ba <__ltsf2>:
    21ba:	a8 e1       	ldi	r26, 0x18	; 24
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 ee       	ldi	r30, 0xE3	; 227
    21c0:	f0 e1       	ldi	r31, 0x10	; 16
    21c2:	0c 94 34 38 	jmp	0x7068	; 0x7068 <__prologue_saves__+0x18>
    21c6:	69 83       	std	Y+1, r22	; 0x01
    21c8:	7a 83       	std	Y+2, r23	; 0x02
    21ca:	8b 83       	std	Y+3, r24	; 0x03
    21cc:	9c 83       	std	Y+4, r25	; 0x04
    21ce:	2d 83       	std	Y+5, r18	; 0x05
    21d0:	3e 83       	std	Y+6, r19	; 0x06
    21d2:	4f 83       	std	Y+7, r20	; 0x07
    21d4:	58 87       	std	Y+8, r21	; 0x08
    21d6:	89 e0       	ldi	r24, 0x09	; 9
    21d8:	e8 2e       	mov	r14, r24
    21da:	f1 2c       	mov	r15, r1
    21dc:	ec 0e       	add	r14, r28
    21de:	fd 1e       	adc	r15, r29
    21e0:	ce 01       	movw	r24, r28
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	b7 01       	movw	r22, r14
    21e6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21ea:	8e 01       	movw	r16, r28
    21ec:	0f 5e       	subi	r16, 0xEF	; 239
    21ee:	1f 4f       	sbci	r17, 0xFF	; 255
    21f0:	ce 01       	movw	r24, r28
    21f2:	05 96       	adiw	r24, 0x05	; 5
    21f4:	b8 01       	movw	r22, r16
    21f6:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    21fa:	89 85       	ldd	r24, Y+9	; 0x09
    21fc:	82 30       	cpi	r24, 0x02	; 2
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__ltsf2+0x56>
    2200:	89 89       	ldd	r24, Y+17	; 0x11
    2202:	82 30       	cpi	r24, 0x02	; 2
    2204:	28 f0       	brcs	.+10     	; 0x2210 <__ltsf2+0x56>
    2206:	c7 01       	movw	r24, r14
    2208:	b8 01       	movw	r22, r16
    220a:	0e 94 ae 12 	call	0x255c	; 0x255c <__fpcmp_parts_f>
    220e:	01 c0       	rjmp	.+2      	; 0x2212 <__ltsf2+0x58>
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	68 96       	adiw	r28, 0x18	; 24
    2214:	e6 e0       	ldi	r30, 0x06	; 6
    2216:	0c 94 50 38 	jmp	0x70a0	; 0x70a0 <__epilogue_restores__+0x18>

0000221a <__fixsfsi>:
    221a:	ac e0       	ldi	r26, 0x0C	; 12
    221c:	b0 e0       	ldi	r27, 0x00	; 0
    221e:	e3 e1       	ldi	r30, 0x13	; 19
    2220:	f1 e1       	ldi	r31, 0x11	; 17
    2222:	0c 94 38 38 	jmp	0x7070	; 0x7070 <__prologue_saves__+0x20>
    2226:	69 83       	std	Y+1, r22	; 0x01
    2228:	7a 83       	std	Y+2, r23	; 0x02
    222a:	8b 83       	std	Y+3, r24	; 0x03
    222c:	9c 83       	std	Y+4, r25	; 0x04
    222e:	ce 01       	movw	r24, r28
    2230:	01 96       	adiw	r24, 0x01	; 1
    2232:	be 01       	movw	r22, r28
    2234:	6b 5f       	subi	r22, 0xFB	; 251
    2236:	7f 4f       	sbci	r23, 0xFF	; 255
    2238:	0e 94 36 12 	call	0x246c	; 0x246c <__unpack_f>
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	82 30       	cpi	r24, 0x02	; 2
    2240:	61 f1       	breq	.+88     	; 0x229a <__fixsfsi+0x80>
    2242:	82 30       	cpi	r24, 0x02	; 2
    2244:	50 f1       	brcs	.+84     	; 0x229a <__fixsfsi+0x80>
    2246:	84 30       	cpi	r24, 0x04	; 4
    2248:	21 f4       	brne	.+8      	; 0x2252 <__fixsfsi+0x38>
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	88 23       	and	r24, r24
    224e:	51 f1       	breq	.+84     	; 0x22a4 <__fixsfsi+0x8a>
    2250:	2e c0       	rjmp	.+92     	; 0x22ae <__fixsfsi+0x94>
    2252:	2f 81       	ldd	r18, Y+7	; 0x07
    2254:	38 85       	ldd	r19, Y+8	; 0x08
    2256:	37 fd       	sbrc	r19, 7
    2258:	20 c0       	rjmp	.+64     	; 0x229a <__fixsfsi+0x80>
    225a:	6e 81       	ldd	r22, Y+6	; 0x06
    225c:	2f 31       	cpi	r18, 0x1F	; 31
    225e:	31 05       	cpc	r19, r1
    2260:	1c f0       	brlt	.+6      	; 0x2268 <__fixsfsi+0x4e>
    2262:	66 23       	and	r22, r22
    2264:	f9 f0       	breq	.+62     	; 0x22a4 <__fixsfsi+0x8a>
    2266:	23 c0       	rjmp	.+70     	; 0x22ae <__fixsfsi+0x94>
    2268:	8e e1       	ldi	r24, 0x1E	; 30
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	82 1b       	sub	r24, r18
    226e:	93 0b       	sbc	r25, r19
    2270:	29 85       	ldd	r18, Y+9	; 0x09
    2272:	3a 85       	ldd	r19, Y+10	; 0x0a
    2274:	4b 85       	ldd	r20, Y+11	; 0x0b
    2276:	5c 85       	ldd	r21, Y+12	; 0x0c
    2278:	04 c0       	rjmp	.+8      	; 0x2282 <__fixsfsi+0x68>
    227a:	56 95       	lsr	r21
    227c:	47 95       	ror	r20
    227e:	37 95       	ror	r19
    2280:	27 95       	ror	r18
    2282:	8a 95       	dec	r24
    2284:	d2 f7       	brpl	.-12     	; 0x227a <__fixsfsi+0x60>
    2286:	66 23       	and	r22, r22
    2288:	b1 f0       	breq	.+44     	; 0x22b6 <__fixsfsi+0x9c>
    228a:	50 95       	com	r21
    228c:	40 95       	com	r20
    228e:	30 95       	com	r19
    2290:	21 95       	neg	r18
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	4f 4f       	sbci	r20, 0xFF	; 255
    2296:	5f 4f       	sbci	r21, 0xFF	; 255
    2298:	0e c0       	rjmp	.+28     	; 0x22b6 <__fixsfsi+0x9c>
    229a:	20 e0       	ldi	r18, 0x00	; 0
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	40 e0       	ldi	r20, 0x00	; 0
    22a0:	50 e0       	ldi	r21, 0x00	; 0
    22a2:	09 c0       	rjmp	.+18     	; 0x22b6 <__fixsfsi+0x9c>
    22a4:	2f ef       	ldi	r18, 0xFF	; 255
    22a6:	3f ef       	ldi	r19, 0xFF	; 255
    22a8:	4f ef       	ldi	r20, 0xFF	; 255
    22aa:	5f e7       	ldi	r21, 0x7F	; 127
    22ac:	04 c0       	rjmp	.+8      	; 0x22b6 <__fixsfsi+0x9c>
    22ae:	20 e0       	ldi	r18, 0x00	; 0
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	40 e0       	ldi	r20, 0x00	; 0
    22b4:	50 e8       	ldi	r21, 0x80	; 128
    22b6:	b9 01       	movw	r22, r18
    22b8:	ca 01       	movw	r24, r20
    22ba:	2c 96       	adiw	r28, 0x0c	; 12
    22bc:	e2 e0       	ldi	r30, 0x02	; 2
    22be:	0c 94 54 38 	jmp	0x70a8	; 0x70a8 <__epilogue_restores__+0x20>

000022c2 <__pack_f>:
    22c2:	df 92       	push	r13
    22c4:	ef 92       	push	r14
    22c6:	ff 92       	push	r15
    22c8:	0f 93       	push	r16
    22ca:	1f 93       	push	r17
    22cc:	fc 01       	movw	r30, r24
    22ce:	e4 80       	ldd	r14, Z+4	; 0x04
    22d0:	f5 80       	ldd	r15, Z+5	; 0x05
    22d2:	06 81       	ldd	r16, Z+6	; 0x06
    22d4:	17 81       	ldd	r17, Z+7	; 0x07
    22d6:	d1 80       	ldd	r13, Z+1	; 0x01
    22d8:	80 81       	ld	r24, Z
    22da:	82 30       	cpi	r24, 0x02	; 2
    22dc:	48 f4       	brcc	.+18     	; 0x22f0 <__pack_f+0x2e>
    22de:	80 e0       	ldi	r24, 0x00	; 0
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	a0 e1       	ldi	r26, 0x10	; 16
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e8 2a       	or	r14, r24
    22e8:	f9 2a       	or	r15, r25
    22ea:	0a 2b       	or	r16, r26
    22ec:	1b 2b       	or	r17, r27
    22ee:	a5 c0       	rjmp	.+330    	; 0x243a <__pack_f+0x178>
    22f0:	84 30       	cpi	r24, 0x04	; 4
    22f2:	09 f4       	brne	.+2      	; 0x22f6 <__pack_f+0x34>
    22f4:	9f c0       	rjmp	.+318    	; 0x2434 <__pack_f+0x172>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	21 f4       	brne	.+8      	; 0x2302 <__pack_f+0x40>
    22fa:	ee 24       	eor	r14, r14
    22fc:	ff 24       	eor	r15, r15
    22fe:	87 01       	movw	r16, r14
    2300:	05 c0       	rjmp	.+10     	; 0x230c <__pack_f+0x4a>
    2302:	e1 14       	cp	r14, r1
    2304:	f1 04       	cpc	r15, r1
    2306:	01 05       	cpc	r16, r1
    2308:	11 05       	cpc	r17, r1
    230a:	19 f4       	brne	.+6      	; 0x2312 <__pack_f+0x50>
    230c:	e0 e0       	ldi	r30, 0x00	; 0
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	96 c0       	rjmp	.+300    	; 0x243e <__pack_f+0x17c>
    2312:	62 81       	ldd	r22, Z+2	; 0x02
    2314:	73 81       	ldd	r23, Z+3	; 0x03
    2316:	9f ef       	ldi	r25, 0xFF	; 255
    2318:	62 38       	cpi	r22, 0x82	; 130
    231a:	79 07       	cpc	r23, r25
    231c:	0c f0       	brlt	.+2      	; 0x2320 <__pack_f+0x5e>
    231e:	5b c0       	rjmp	.+182    	; 0x23d6 <__pack_f+0x114>
    2320:	22 e8       	ldi	r18, 0x82	; 130
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	26 1b       	sub	r18, r22
    2326:	37 0b       	sbc	r19, r23
    2328:	2a 31       	cpi	r18, 0x1A	; 26
    232a:	31 05       	cpc	r19, r1
    232c:	2c f0       	brlt	.+10     	; 0x2338 <__pack_f+0x76>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e0       	ldi	r20, 0x00	; 0
    2334:	50 e0       	ldi	r21, 0x00	; 0
    2336:	2a c0       	rjmp	.+84     	; 0x238c <__pack_f+0xca>
    2338:	b8 01       	movw	r22, r16
    233a:	a7 01       	movw	r20, r14
    233c:	02 2e       	mov	r0, r18
    233e:	04 c0       	rjmp	.+8      	; 0x2348 <__pack_f+0x86>
    2340:	76 95       	lsr	r23
    2342:	67 95       	ror	r22
    2344:	57 95       	ror	r21
    2346:	47 95       	ror	r20
    2348:	0a 94       	dec	r0
    234a:	d2 f7       	brpl	.-12     	; 0x2340 <__pack_f+0x7e>
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	90 e0       	ldi	r25, 0x00	; 0
    2350:	a0 e0       	ldi	r26, 0x00	; 0
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	04 c0       	rjmp	.+8      	; 0x235e <__pack_f+0x9c>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	aa 1f       	adc	r26, r26
    235c:	bb 1f       	adc	r27, r27
    235e:	2a 95       	dec	r18
    2360:	d2 f7       	brpl	.-12     	; 0x2356 <__pack_f+0x94>
    2362:	01 97       	sbiw	r24, 0x01	; 1
    2364:	a1 09       	sbc	r26, r1
    2366:	b1 09       	sbc	r27, r1
    2368:	8e 21       	and	r24, r14
    236a:	9f 21       	and	r25, r15
    236c:	a0 23       	and	r26, r16
    236e:	b1 23       	and	r27, r17
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	a1 05       	cpc	r26, r1
    2374:	b1 05       	cpc	r27, r1
    2376:	21 f0       	breq	.+8      	; 0x2380 <__pack_f+0xbe>
    2378:	81 e0       	ldi	r24, 0x01	; 1
    237a:	90 e0       	ldi	r25, 0x00	; 0
    237c:	a0 e0       	ldi	r26, 0x00	; 0
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	9a 01       	movw	r18, r20
    2382:	ab 01       	movw	r20, r22
    2384:	28 2b       	or	r18, r24
    2386:	39 2b       	or	r19, r25
    2388:	4a 2b       	or	r20, r26
    238a:	5b 2b       	or	r21, r27
    238c:	da 01       	movw	r26, r20
    238e:	c9 01       	movw	r24, r18
    2390:	8f 77       	andi	r24, 0x7F	; 127
    2392:	90 70       	andi	r25, 0x00	; 0
    2394:	a0 70       	andi	r26, 0x00	; 0
    2396:	b0 70       	andi	r27, 0x00	; 0
    2398:	80 34       	cpi	r24, 0x40	; 64
    239a:	91 05       	cpc	r25, r1
    239c:	a1 05       	cpc	r26, r1
    239e:	b1 05       	cpc	r27, r1
    23a0:	39 f4       	brne	.+14     	; 0x23b0 <__pack_f+0xee>
    23a2:	27 ff       	sbrs	r18, 7
    23a4:	09 c0       	rjmp	.+18     	; 0x23b8 <__pack_f+0xf6>
    23a6:	20 5c       	subi	r18, 0xC0	; 192
    23a8:	3f 4f       	sbci	r19, 0xFF	; 255
    23aa:	4f 4f       	sbci	r20, 0xFF	; 255
    23ac:	5f 4f       	sbci	r21, 0xFF	; 255
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__pack_f+0xf6>
    23b0:	21 5c       	subi	r18, 0xC1	; 193
    23b2:	3f 4f       	sbci	r19, 0xFF	; 255
    23b4:	4f 4f       	sbci	r20, 0xFF	; 255
    23b6:	5f 4f       	sbci	r21, 0xFF	; 255
    23b8:	e0 e0       	ldi	r30, 0x00	; 0
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	20 30       	cpi	r18, 0x00	; 0
    23be:	a0 e0       	ldi	r26, 0x00	; 0
    23c0:	3a 07       	cpc	r19, r26
    23c2:	a0 e0       	ldi	r26, 0x00	; 0
    23c4:	4a 07       	cpc	r20, r26
    23c6:	a0 e4       	ldi	r26, 0x40	; 64
    23c8:	5a 07       	cpc	r21, r26
    23ca:	10 f0       	brcs	.+4      	; 0x23d0 <__pack_f+0x10e>
    23cc:	e1 e0       	ldi	r30, 0x01	; 1
    23ce:	f0 e0       	ldi	r31, 0x00	; 0
    23d0:	79 01       	movw	r14, r18
    23d2:	8a 01       	movw	r16, r20
    23d4:	27 c0       	rjmp	.+78     	; 0x2424 <__pack_f+0x162>
    23d6:	60 38       	cpi	r22, 0x80	; 128
    23d8:	71 05       	cpc	r23, r1
    23da:	64 f5       	brge	.+88     	; 0x2434 <__pack_f+0x172>
    23dc:	fb 01       	movw	r30, r22
    23de:	e1 58       	subi	r30, 0x81	; 129
    23e0:	ff 4f       	sbci	r31, 0xFF	; 255
    23e2:	d8 01       	movw	r26, r16
    23e4:	c7 01       	movw	r24, r14
    23e6:	8f 77       	andi	r24, 0x7F	; 127
    23e8:	90 70       	andi	r25, 0x00	; 0
    23ea:	a0 70       	andi	r26, 0x00	; 0
    23ec:	b0 70       	andi	r27, 0x00	; 0
    23ee:	80 34       	cpi	r24, 0x40	; 64
    23f0:	91 05       	cpc	r25, r1
    23f2:	a1 05       	cpc	r26, r1
    23f4:	b1 05       	cpc	r27, r1
    23f6:	39 f4       	brne	.+14     	; 0x2406 <__pack_f+0x144>
    23f8:	e7 fe       	sbrs	r14, 7
    23fa:	0d c0       	rjmp	.+26     	; 0x2416 <__pack_f+0x154>
    23fc:	80 e4       	ldi	r24, 0x40	; 64
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e0       	ldi	r26, 0x00	; 0
    2402:	b0 e0       	ldi	r27, 0x00	; 0
    2404:	04 c0       	rjmp	.+8      	; 0x240e <__pack_f+0x14c>
    2406:	8f e3       	ldi	r24, 0x3F	; 63
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	a0 e0       	ldi	r26, 0x00	; 0
    240c:	b0 e0       	ldi	r27, 0x00	; 0
    240e:	e8 0e       	add	r14, r24
    2410:	f9 1e       	adc	r15, r25
    2412:	0a 1f       	adc	r16, r26
    2414:	1b 1f       	adc	r17, r27
    2416:	17 ff       	sbrs	r17, 7
    2418:	05 c0       	rjmp	.+10     	; 0x2424 <__pack_f+0x162>
    241a:	16 95       	lsr	r17
    241c:	07 95       	ror	r16
    241e:	f7 94       	ror	r15
    2420:	e7 94       	ror	r14
    2422:	31 96       	adiw	r30, 0x01	; 1
    2424:	87 e0       	ldi	r24, 0x07	; 7
    2426:	16 95       	lsr	r17
    2428:	07 95       	ror	r16
    242a:	f7 94       	ror	r15
    242c:	e7 94       	ror	r14
    242e:	8a 95       	dec	r24
    2430:	d1 f7       	brne	.-12     	; 0x2426 <__pack_f+0x164>
    2432:	05 c0       	rjmp	.+10     	; 0x243e <__pack_f+0x17c>
    2434:	ee 24       	eor	r14, r14
    2436:	ff 24       	eor	r15, r15
    2438:	87 01       	movw	r16, r14
    243a:	ef ef       	ldi	r30, 0xFF	; 255
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	6e 2f       	mov	r22, r30
    2440:	67 95       	ror	r22
    2442:	66 27       	eor	r22, r22
    2444:	67 95       	ror	r22
    2446:	90 2f       	mov	r25, r16
    2448:	9f 77       	andi	r25, 0x7F	; 127
    244a:	d7 94       	ror	r13
    244c:	dd 24       	eor	r13, r13
    244e:	d7 94       	ror	r13
    2450:	8e 2f       	mov	r24, r30
    2452:	86 95       	lsr	r24
    2454:	49 2f       	mov	r20, r25
    2456:	46 2b       	or	r20, r22
    2458:	58 2f       	mov	r21, r24
    245a:	5d 29       	or	r21, r13
    245c:	b7 01       	movw	r22, r14
    245e:	ca 01       	movw	r24, r20
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	df 90       	pop	r13
    246a:	08 95       	ret

0000246c <__unpack_f>:
    246c:	fc 01       	movw	r30, r24
    246e:	db 01       	movw	r26, r22
    2470:	40 81       	ld	r20, Z
    2472:	51 81       	ldd	r21, Z+1	; 0x01
    2474:	22 81       	ldd	r18, Z+2	; 0x02
    2476:	62 2f       	mov	r22, r18
    2478:	6f 77       	andi	r22, 0x7F	; 127
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	22 1f       	adc	r18, r18
    247e:	22 27       	eor	r18, r18
    2480:	22 1f       	adc	r18, r18
    2482:	93 81       	ldd	r25, Z+3	; 0x03
    2484:	89 2f       	mov	r24, r25
    2486:	88 0f       	add	r24, r24
    2488:	82 2b       	or	r24, r18
    248a:	28 2f       	mov	r18, r24
    248c:	30 e0       	ldi	r19, 0x00	; 0
    248e:	99 1f       	adc	r25, r25
    2490:	99 27       	eor	r25, r25
    2492:	99 1f       	adc	r25, r25
    2494:	11 96       	adiw	r26, 0x01	; 1
    2496:	9c 93       	st	X, r25
    2498:	11 97       	sbiw	r26, 0x01	; 1
    249a:	21 15       	cp	r18, r1
    249c:	31 05       	cpc	r19, r1
    249e:	a9 f5       	brne	.+106    	; 0x250a <__unpack_f+0x9e>
    24a0:	41 15       	cp	r20, r1
    24a2:	51 05       	cpc	r21, r1
    24a4:	61 05       	cpc	r22, r1
    24a6:	71 05       	cpc	r23, r1
    24a8:	11 f4       	brne	.+4      	; 0x24ae <__unpack_f+0x42>
    24aa:	82 e0       	ldi	r24, 0x02	; 2
    24ac:	37 c0       	rjmp	.+110    	; 0x251c <__unpack_f+0xb0>
    24ae:	82 e8       	ldi	r24, 0x82	; 130
    24b0:	9f ef       	ldi	r25, 0xFF	; 255
    24b2:	13 96       	adiw	r26, 0x03	; 3
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
    24b8:	12 97       	sbiw	r26, 0x02	; 2
    24ba:	9a 01       	movw	r18, r20
    24bc:	ab 01       	movw	r20, r22
    24be:	67 e0       	ldi	r22, 0x07	; 7
    24c0:	22 0f       	add	r18, r18
    24c2:	33 1f       	adc	r19, r19
    24c4:	44 1f       	adc	r20, r20
    24c6:	55 1f       	adc	r21, r21
    24c8:	6a 95       	dec	r22
    24ca:	d1 f7       	brne	.-12     	; 0x24c0 <__unpack_f+0x54>
    24cc:	83 e0       	ldi	r24, 0x03	; 3
    24ce:	8c 93       	st	X, r24
    24d0:	0d c0       	rjmp	.+26     	; 0x24ec <__unpack_f+0x80>
    24d2:	22 0f       	add	r18, r18
    24d4:	33 1f       	adc	r19, r19
    24d6:	44 1f       	adc	r20, r20
    24d8:	55 1f       	adc	r21, r21
    24da:	12 96       	adiw	r26, 0x02	; 2
    24dc:	8d 91       	ld	r24, X+
    24de:	9c 91       	ld	r25, X
    24e0:	13 97       	sbiw	r26, 0x03	; 3
    24e2:	01 97       	sbiw	r24, 0x01	; 1
    24e4:	13 96       	adiw	r26, 0x03	; 3
    24e6:	9c 93       	st	X, r25
    24e8:	8e 93       	st	-X, r24
    24ea:	12 97       	sbiw	r26, 0x02	; 2
    24ec:	20 30       	cpi	r18, 0x00	; 0
    24ee:	80 e0       	ldi	r24, 0x00	; 0
    24f0:	38 07       	cpc	r19, r24
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	48 07       	cpc	r20, r24
    24f6:	80 e4       	ldi	r24, 0x40	; 64
    24f8:	58 07       	cpc	r21, r24
    24fa:	58 f3       	brcs	.-42     	; 0x24d2 <__unpack_f+0x66>
    24fc:	14 96       	adiw	r26, 0x04	; 4
    24fe:	2d 93       	st	X+, r18
    2500:	3d 93       	st	X+, r19
    2502:	4d 93       	st	X+, r20
    2504:	5c 93       	st	X, r21
    2506:	17 97       	sbiw	r26, 0x07	; 7
    2508:	08 95       	ret
    250a:	2f 3f       	cpi	r18, 0xFF	; 255
    250c:	31 05       	cpc	r19, r1
    250e:	79 f4       	brne	.+30     	; 0x252e <__unpack_f+0xc2>
    2510:	41 15       	cp	r20, r1
    2512:	51 05       	cpc	r21, r1
    2514:	61 05       	cpc	r22, r1
    2516:	71 05       	cpc	r23, r1
    2518:	19 f4       	brne	.+6      	; 0x2520 <__unpack_f+0xb4>
    251a:	84 e0       	ldi	r24, 0x04	; 4
    251c:	8c 93       	st	X, r24
    251e:	08 95       	ret
    2520:	64 ff       	sbrs	r22, 4
    2522:	03 c0       	rjmp	.+6      	; 0x252a <__unpack_f+0xbe>
    2524:	81 e0       	ldi	r24, 0x01	; 1
    2526:	8c 93       	st	X, r24
    2528:	12 c0       	rjmp	.+36     	; 0x254e <__unpack_f+0xe2>
    252a:	1c 92       	st	X, r1
    252c:	10 c0       	rjmp	.+32     	; 0x254e <__unpack_f+0xe2>
    252e:	2f 57       	subi	r18, 0x7F	; 127
    2530:	30 40       	sbci	r19, 0x00	; 0
    2532:	13 96       	adiw	r26, 0x03	; 3
    2534:	3c 93       	st	X, r19
    2536:	2e 93       	st	-X, r18
    2538:	12 97       	sbiw	r26, 0x02	; 2
    253a:	83 e0       	ldi	r24, 0x03	; 3
    253c:	8c 93       	st	X, r24
    253e:	87 e0       	ldi	r24, 0x07	; 7
    2540:	44 0f       	add	r20, r20
    2542:	55 1f       	adc	r21, r21
    2544:	66 1f       	adc	r22, r22
    2546:	77 1f       	adc	r23, r23
    2548:	8a 95       	dec	r24
    254a:	d1 f7       	brne	.-12     	; 0x2540 <__unpack_f+0xd4>
    254c:	70 64       	ori	r23, 0x40	; 64
    254e:	14 96       	adiw	r26, 0x04	; 4
    2550:	4d 93       	st	X+, r20
    2552:	5d 93       	st	X+, r21
    2554:	6d 93       	st	X+, r22
    2556:	7c 93       	st	X, r23
    2558:	17 97       	sbiw	r26, 0x07	; 7
    255a:	08 95       	ret

0000255c <__fpcmp_parts_f>:
    255c:	1f 93       	push	r17
    255e:	dc 01       	movw	r26, r24
    2560:	fb 01       	movw	r30, r22
    2562:	9c 91       	ld	r25, X
    2564:	92 30       	cpi	r25, 0x02	; 2
    2566:	08 f4       	brcc	.+2      	; 0x256a <__fpcmp_parts_f+0xe>
    2568:	47 c0       	rjmp	.+142    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    256a:	80 81       	ld	r24, Z
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	08 f4       	brcc	.+2      	; 0x2572 <__fpcmp_parts_f+0x16>
    2570:	43 c0       	rjmp	.+134    	; 0x25f8 <__fpcmp_parts_f+0x9c>
    2572:	94 30       	cpi	r25, 0x04	; 4
    2574:	51 f4       	brne	.+20     	; 0x258a <__fpcmp_parts_f+0x2e>
    2576:	11 96       	adiw	r26, 0x01	; 1
    2578:	1c 91       	ld	r17, X
    257a:	84 30       	cpi	r24, 0x04	; 4
    257c:	99 f5       	brne	.+102    	; 0x25e4 <__fpcmp_parts_f+0x88>
    257e:	81 81       	ldd	r24, Z+1	; 0x01
    2580:	68 2f       	mov	r22, r24
    2582:	70 e0       	ldi	r23, 0x00	; 0
    2584:	61 1b       	sub	r22, r17
    2586:	71 09       	sbc	r23, r1
    2588:	3f c0       	rjmp	.+126    	; 0x2608 <__fpcmp_parts_f+0xac>
    258a:	84 30       	cpi	r24, 0x04	; 4
    258c:	21 f0       	breq	.+8      	; 0x2596 <__fpcmp_parts_f+0x3a>
    258e:	92 30       	cpi	r25, 0x02	; 2
    2590:	31 f4       	brne	.+12     	; 0x259e <__fpcmp_parts_f+0x42>
    2592:	82 30       	cpi	r24, 0x02	; 2
    2594:	b9 f1       	breq	.+110    	; 0x2604 <__fpcmp_parts_f+0xa8>
    2596:	81 81       	ldd	r24, Z+1	; 0x01
    2598:	88 23       	and	r24, r24
    259a:	89 f1       	breq	.+98     	; 0x25fe <__fpcmp_parts_f+0xa2>
    259c:	2d c0       	rjmp	.+90     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    259e:	11 96       	adiw	r26, 0x01	; 1
    25a0:	1c 91       	ld	r17, X
    25a2:	11 97       	sbiw	r26, 0x01	; 1
    25a4:	82 30       	cpi	r24, 0x02	; 2
    25a6:	f1 f0       	breq	.+60     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25a8:	81 81       	ldd	r24, Z+1	; 0x01
    25aa:	18 17       	cp	r17, r24
    25ac:	d9 f4       	brne	.+54     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25ae:	12 96       	adiw	r26, 0x02	; 2
    25b0:	2d 91       	ld	r18, X+
    25b2:	3c 91       	ld	r19, X
    25b4:	13 97       	sbiw	r26, 0x03	; 3
    25b6:	82 81       	ldd	r24, Z+2	; 0x02
    25b8:	93 81       	ldd	r25, Z+3	; 0x03
    25ba:	82 17       	cp	r24, r18
    25bc:	93 07       	cpc	r25, r19
    25be:	94 f0       	brlt	.+36     	; 0x25e4 <__fpcmp_parts_f+0x88>
    25c0:	28 17       	cp	r18, r24
    25c2:	39 07       	cpc	r19, r25
    25c4:	bc f0       	brlt	.+46     	; 0x25f4 <__fpcmp_parts_f+0x98>
    25c6:	14 96       	adiw	r26, 0x04	; 4
    25c8:	8d 91       	ld	r24, X+
    25ca:	9d 91       	ld	r25, X+
    25cc:	0d 90       	ld	r0, X+
    25ce:	bc 91       	ld	r27, X
    25d0:	a0 2d       	mov	r26, r0
    25d2:	24 81       	ldd	r18, Z+4	; 0x04
    25d4:	35 81       	ldd	r19, Z+5	; 0x05
    25d6:	46 81       	ldd	r20, Z+6	; 0x06
    25d8:	57 81       	ldd	r21, Z+7	; 0x07
    25da:	28 17       	cp	r18, r24
    25dc:	39 07       	cpc	r19, r25
    25de:	4a 07       	cpc	r20, r26
    25e0:	5b 07       	cpc	r21, r27
    25e2:	18 f4       	brcc	.+6      	; 0x25ea <__fpcmp_parts_f+0x8e>
    25e4:	11 23       	and	r17, r17
    25e6:	41 f0       	breq	.+16     	; 0x25f8 <__fpcmp_parts_f+0x9c>
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <__fpcmp_parts_f+0xa2>
    25ea:	82 17       	cp	r24, r18
    25ec:	93 07       	cpc	r25, r19
    25ee:	a4 07       	cpc	r26, r20
    25f0:	b5 07       	cpc	r27, r21
    25f2:	40 f4       	brcc	.+16     	; 0x2604 <__fpcmp_parts_f+0xa8>
    25f4:	11 23       	and	r17, r17
    25f6:	19 f0       	breq	.+6      	; 0x25fe <__fpcmp_parts_f+0xa2>
    25f8:	61 e0       	ldi	r22, 0x01	; 1
    25fa:	70 e0       	ldi	r23, 0x00	; 0
    25fc:	05 c0       	rjmp	.+10     	; 0x2608 <__fpcmp_parts_f+0xac>
    25fe:	6f ef       	ldi	r22, 0xFF	; 255
    2600:	7f ef       	ldi	r23, 0xFF	; 255
    2602:	02 c0       	rjmp	.+4      	; 0x2608 <__fpcmp_parts_f+0xac>
    2604:	60 e0       	ldi	r22, 0x00	; 0
    2606:	70 e0       	ldi	r23, 0x00	; 0
    2608:	cb 01       	movw	r24, r22
    260a:	1f 91       	pop	r17
    260c:	08 95       	ret

0000260e <xCoRoutineCreate>:
static void prvCheckDelayedList( void );

/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineCreate( crCOROUTINE_CODE pxCoRoutineCode, unsigned portBASE_TYPE uxPriority, unsigned portBASE_TYPE uxIndex )
{
    260e:	df 93       	push	r29
    2610:	cf 93       	push	r28
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	27 97       	sbiw	r28, 0x07	; 7
    2618:	0f b6       	in	r0, 0x3f	; 63
    261a:	f8 94       	cli
    261c:	de bf       	out	0x3e, r29	; 62
    261e:	0f be       	out	0x3f, r0	; 63
    2620:	cd bf       	out	0x3d, r28	; 61
    2622:	9d 83       	std	Y+5, r25	; 0x05
    2624:	8c 83       	std	Y+4, r24	; 0x04
    2626:	6e 83       	std	Y+6, r22	; 0x06
    2628:	4f 83       	std	Y+7, r20	; 0x07
signed portBASE_TYPE xReturn;
corCRCB *pxCoRoutine;

	/* Allocate the memory that will store the co-routine control block. */
	pxCoRoutine = ( corCRCB * ) pvPortMalloc( sizeof( corCRCB ) );
    262a:	8a e1       	ldi	r24, 0x1A	; 26
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
	if( pxCoRoutine )
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	09 f4       	brne	.+2      	; 0x2640 <xCoRoutineCreate+0x32>
    263e:	6f c0       	rjmp	.+222    	; 0x271e <xCoRoutineCreate+0x110>
	{
		/* If pxCurrentCoRoutine is NULL then this is the first co-routine to
		be created and the co-routine data structures need initialising. */
		if( pxCurrentCoRoutine == NULL )
    2640:	80 91 da 01 	lds	r24, 0x01DA
    2644:	90 91 db 01 	lds	r25, 0x01DB
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	41 f4       	brne	.+16     	; 0x265c <xCoRoutineCreate+0x4e>
		{
			pxCurrentCoRoutine = pxCoRoutine;
    264c:	89 81       	ldd	r24, Y+1	; 0x01
    264e:	9a 81       	ldd	r25, Y+2	; 0x02
    2650:	90 93 db 01 	sts	0x01DB, r25
    2654:	80 93 da 01 	sts	0x01DA, r24
			prvInitialiseCoRoutineLists();
    2658:	0e 94 6e 15 	call	0x2adc	; 0x2adc <prvInitialiseCoRoutineLists>
		}

		/* Check the priority is within limits. */
		if( uxPriority >= configMAX_CO_ROUTINE_PRIORITIES )
    265c:	8e 81       	ldd	r24, Y+6	; 0x06
    265e:	82 30       	cpi	r24, 0x02	; 2
    2660:	10 f0       	brcs	.+4      	; 0x2666 <xCoRoutineCreate+0x58>
		{
			uxPriority = configMAX_CO_ROUTINE_PRIORITIES - 1;
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	8e 83       	std	Y+6, r24	; 0x06
		}

		/* Fill out the co-routine control block from the function parameters. */
		pxCoRoutine->uxState = corINITIAL_STATE;
    2666:	e9 81       	ldd	r30, Y+1	; 0x01
    2668:	fa 81       	ldd	r31, Y+2	; 0x02
    266a:	11 8e       	std	Z+25, r1	; 0x19
    266c:	10 8e       	std	Z+24, r1	; 0x18
		pxCoRoutine->uxPriority = uxPriority;
    266e:	e9 81       	ldd	r30, Y+1	; 0x01
    2670:	fa 81       	ldd	r31, Y+2	; 0x02
    2672:	8e 81       	ldd	r24, Y+6	; 0x06
    2674:	86 8b       	std	Z+22, r24	; 0x16
		pxCoRoutine->uxIndex = uxIndex;
    2676:	e9 81       	ldd	r30, Y+1	; 0x01
    2678:	fa 81       	ldd	r31, Y+2	; 0x02
    267a:	8f 81       	ldd	r24, Y+7	; 0x07
    267c:	87 8b       	std	Z+23, r24	; 0x17
		pxCoRoutine->pxCoRoutineFunction = pxCoRoutineCode;
    267e:	e9 81       	ldd	r30, Y+1	; 0x01
    2680:	fa 81       	ldd	r31, Y+2	; 0x02
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24

		/* Initialise all the other co-routine control block parameters. */
		vListInitialiseItem( &( pxCoRoutine->xGenericListItem ) );
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	02 96       	adiw	r24, 0x02	; 2
    2690:	0e 94 75 16 	call	0x2cea	; 0x2cea <vListInitialiseItem>
		vListInitialiseItem( &( pxCoRoutine->xEventListItem ) );
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	9a 81       	ldd	r25, Y+2	; 0x02
    2698:	0c 96       	adiw	r24, 0x0c	; 12
    269a:	0e 94 75 16 	call	0x2cea	; 0x2cea <vListInitialiseItem>

		/* Set the co-routine control block as a link back from the xListItem.
		This is so we can get back to the containing CRCB from a generic item
		in a list. */
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xGenericListItem ), pxCoRoutine );
    269e:	e9 81       	ldd	r30, Y+1	; 0x01
    26a0:	fa 81       	ldd	r31, Y+2	; 0x02
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	91 87       	std	Z+9, r25	; 0x09
    26a8:	80 87       	std	Z+8, r24	; 0x08
		listSET_LIST_ITEM_OWNER( &( pxCoRoutine->xEventListItem ), pxCoRoutine );
    26aa:	e9 81       	ldd	r30, Y+1	; 0x01
    26ac:	fa 81       	ldd	r31, Y+2	; 0x02
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	93 8b       	std	Z+19, r25	; 0x13
    26b4:	82 8b       	std	Z+18, r24	; 0x12
	
		/* Event lists are always in priority order. */
		listSET_LIST_ITEM_VALUE( &( pxCoRoutine->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    26b6:	8e 81       	ldd	r24, Y+6	; 0x06
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	89 e0       	ldi	r24, 0x09	; 9
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	82 1b       	sub	r24, r18
    26c2:	93 0b       	sbc	r25, r19
    26c4:	e9 81       	ldd	r30, Y+1	; 0x01
    26c6:	fa 81       	ldd	r31, Y+2	; 0x02
    26c8:	95 87       	std	Z+13, r25	; 0x0d
    26ca:	84 87       	std	Z+12, r24	; 0x0c
		
		/* Now the co-routine has been initialised it can be added to the ready
		list at the correct priority. */
		prvAddCoRoutineToReadyQueue( pxCoRoutine );
    26cc:	e9 81       	ldd	r30, Y+1	; 0x01
    26ce:	fa 81       	ldd	r31, Y+2	; 0x02
    26d0:	96 89       	ldd	r25, Z+22	; 0x16
    26d2:	80 91 dc 01 	lds	r24, 0x01DC
    26d6:	89 17       	cp	r24, r25
    26d8:	28 f4       	brcc	.+10     	; 0x26e4 <xCoRoutineCreate+0xd6>
    26da:	e9 81       	ldd	r30, Y+1	; 0x01
    26dc:	fa 81       	ldd	r31, Y+2	; 0x02
    26de:	86 89       	ldd	r24, Z+22	; 0x16
    26e0:	80 93 dc 01 	sts	0x01DC, r24
    26e4:	e9 81       	ldd	r30, Y+1	; 0x01
    26e6:	fa 81       	ldd	r31, Y+2	; 0x02
    26e8:	86 89       	ldd	r24, Z+22	; 0x16
    26ea:	28 2f       	mov	r18, r24
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	c9 01       	movw	r24, r18
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	88 0f       	add	r24, r24
    26f6:	99 1f       	adc	r25, r25
    26f8:	88 0f       	add	r24, r24
    26fa:	99 1f       	adc	r25, r25
    26fc:	82 0f       	add	r24, r18
    26fe:	93 1f       	adc	r25, r19
    2700:	ac 01       	movw	r20, r24
    2702:	4d 51       	subi	r20, 0x1D	; 29
    2704:	5e 4f       	sbci	r21, 0xFE	; 254
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	9c 01       	movw	r18, r24
    270c:	2e 5f       	subi	r18, 0xFE	; 254
    270e:	3f 4f       	sbci	r19, 0xFF	; 255
    2710:	ca 01       	movw	r24, r20
    2712:	b9 01       	movw	r22, r18
    2714:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

		xReturn = pdPASS;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	8b 83       	std	Y+3, r24	; 0x03
    271c:	02 c0       	rjmp	.+4      	; 0x2722 <xCoRoutineCreate+0x114>
	}
	else
	{		
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    271e:	8f ef       	ldi	r24, 0xFF	; 255
    2720:	8b 83       	std	Y+3, r24	; 0x03
	}
	
	return xReturn;	
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2724:	27 96       	adiw	r28, 0x07	; 7
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	de bf       	out	0x3e, r29	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	cd bf       	out	0x3d, r28	; 61
    2730:	cf 91       	pop	r28
    2732:	df 91       	pop	r29
    2734:	08 95       	ret

00002736 <vCoRoutineAddToDelayedList>:
/*-----------------------------------------------------------*/

void vCoRoutineAddToDelayedList( portTickType xTicksToDelay, xList *pxEventList )
{
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	00 d0       	rcall	.+0      	; 0x273c <vCoRoutineAddToDelayedList+0x6>
    273c:	00 d0       	rcall	.+0      	; 0x273e <vCoRoutineAddToDelayedList+0x8>
    273e:	00 d0       	rcall	.+0      	; 0x2740 <vCoRoutineAddToDelayedList+0xa>
    2740:	cd b7       	in	r28, 0x3d	; 61
    2742:	de b7       	in	r29, 0x3e	; 62
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	8b 83       	std	Y+3, r24	; 0x03
    2748:	7e 83       	std	Y+6, r23	; 0x06
    274a:	6d 83       	std	Y+5, r22	; 0x05
portTickType xTimeToWake;

	/* Calculate the time to wake - this may overflow but this is
	not a problem. */
	xTimeToWake = xCoRoutineTickCount + xTicksToDelay;
    274c:	20 91 dd 01 	lds	r18, 0x01DD
    2750:	30 91 de 01 	lds	r19, 0x01DE
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	82 0f       	add	r24, r18
    275a:	93 1f       	adc	r25, r19
    275c:	9a 83       	std	Y+2, r25	; 0x02
    275e:	89 83       	std	Y+1, r24	; 0x01

	/* We must remove ourselves from the ready list before adding
	ourselves to the blocked list as the same list item is used for
	both lists. */
	vListRemove( ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2760:	80 91 da 01 	lds	r24, 0x01DA
    2764:	90 91 db 01 	lds	r25, 0x01DB
    2768:	02 96       	adiw	r24, 0x02	; 2
    276a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentCoRoutine->xGenericListItem ), xTimeToWake );
    276e:	e0 91 da 01 	lds	r30, 0x01DA
    2772:	f0 91 db 01 	lds	r31, 0x01DB
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	93 83       	std	Z+3, r25	; 0x03
    277c:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xCoRoutineTickCount )
    277e:	20 91 dd 01 	lds	r18, 0x01DD
    2782:	30 91 de 01 	lds	r19, 0x01DE
    2786:	89 81       	ldd	r24, Y+1	; 0x01
    2788:	9a 81       	ldd	r25, Y+2	; 0x02
    278a:	82 17       	cp	r24, r18
    278c:	93 07       	cpc	r25, r19
    278e:	70 f4       	brcc	.+28     	; 0x27ac <vCoRoutineAddToDelayedList+0x76>
	{
		/* Wake time has overflowed.  Place this item in the
		overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    2790:	80 91 09 02 	lds	r24, 0x0209
    2794:	90 91 0a 02 	lds	r25, 0x020A
    2798:	20 91 da 01 	lds	r18, 0x01DA
    279c:	30 91 db 01 	lds	r19, 0x01DB
    27a0:	2e 5f       	subi	r18, 0xFE	; 254
    27a2:	3f 4f       	sbci	r19, 0xFF	; 255
    27a4:	b9 01       	movw	r22, r18
    27a6:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>
    27aa:	0d c0       	rjmp	.+26     	; 0x27c6 <vCoRoutineAddToDelayedList+0x90>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the
		current block list. */
		vListInsert( ( xList * ) pxDelayedCoRoutineList, ( xListItem * ) &( pxCurrentCoRoutine->xGenericListItem ) );
    27ac:	80 91 07 02 	lds	r24, 0x0207
    27b0:	90 91 08 02 	lds	r25, 0x0208
    27b4:	20 91 da 01 	lds	r18, 0x01DA
    27b8:	30 91 db 01 	lds	r19, 0x01DB
    27bc:	2e 5f       	subi	r18, 0xFE	; 254
    27be:	3f 4f       	sbci	r19, 0xFF	; 255
    27c0:	b9 01       	movw	r22, r18
    27c2:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>
	}

	if( pxEventList )
    27c6:	8d 81       	ldd	r24, Y+5	; 0x05
    27c8:	9e 81       	ldd	r25, Y+6	; 0x06
    27ca:	00 97       	sbiw	r24, 0x00	; 0
    27cc:	61 f0       	breq	.+24     	; 0x27e6 <vCoRoutineAddToDelayedList+0xb0>
	{
		/* Also add the co-routine to an event list.  If this is done then the
		function must be called with interrupts disabled. */
		vListInsert( pxEventList, &( pxCurrentCoRoutine->xEventListItem ) );
    27ce:	80 91 da 01 	lds	r24, 0x01DA
    27d2:	90 91 db 01 	lds	r25, 0x01DB
    27d6:	9c 01       	movw	r18, r24
    27d8:	24 5f       	subi	r18, 0xF4	; 244
    27da:	3f 4f       	sbci	r19, 0xFF	; 255
    27dc:	8d 81       	ldd	r24, Y+5	; 0x05
    27de:	9e 81       	ldd	r25, Y+6	; 0x06
    27e0:	b9 01       	movw	r22, r18
    27e2:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>
	}
}
    27e6:	26 96       	adiw	r28, 0x06	; 6
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	08 95       	ret

000027f8 <prvCheckPendingReadyList>:
/*-----------------------------------------------------------*/

static void prvCheckPendingReadyList( void )
{
    27f8:	df 93       	push	r29
    27fa:	cf 93       	push	r28
    27fc:	00 d0       	rcall	.+0      	; 0x27fe <prvCheckPendingReadyList+0x6>
    27fe:	cd b7       	in	r28, 0x3d	; 61
    2800:	de b7       	in	r29, 0x3e	; 62
    2802:	3a c0       	rjmp	.+116    	; 0x2878 <prvCheckPendingReadyList+0x80>
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
	{
		corCRCB *pxUnblockedCRCB;

		/* The pending ready list can be accessed by an ISR. */
		portDISABLE_INTERRUPTS();
    2804:	f8 94       	cli
		{	
			pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( (&xPendingReadyCoRoutineList) );			
    2806:	e0 91 10 02 	lds	r30, 0x0210
    280a:	f0 91 11 02 	lds	r31, 0x0211
    280e:	86 81       	ldd	r24, Z+6	; 0x06
    2810:	97 81       	ldd	r25, Z+7	; 0x07
    2812:	9a 83       	std	Y+2, r25	; 0x02
    2814:	89 83       	std	Y+1, r24	; 0x01
			vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
    281a:	0c 96       	adiw	r24, 0x0c	; 12
    281c:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
		}
		portENABLE_INTERRUPTS();
    2820:	78 94       	sei

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	02 96       	adiw	r24, 0x02	; 2
    2828:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
    282c:	e9 81       	ldd	r30, Y+1	; 0x01
    282e:	fa 81       	ldd	r31, Y+2	; 0x02
    2830:	96 89       	ldd	r25, Z+22	; 0x16
    2832:	80 91 dc 01 	lds	r24, 0x01DC
    2836:	89 17       	cp	r24, r25
    2838:	28 f4       	brcc	.+10     	; 0x2844 <prvCheckPendingReadyList+0x4c>
    283a:	e9 81       	ldd	r30, Y+1	; 0x01
    283c:	fa 81       	ldd	r31, Y+2	; 0x02
    283e:	86 89       	ldd	r24, Z+22	; 0x16
    2840:	80 93 dc 01 	sts	0x01DC, r24
    2844:	e9 81       	ldd	r30, Y+1	; 0x01
    2846:	fa 81       	ldd	r31, Y+2	; 0x02
    2848:	86 89       	ldd	r24, Z+22	; 0x16
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	c9 01       	movw	r24, r18
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	88 0f       	add	r24, r24
    285a:	99 1f       	adc	r25, r25
    285c:	82 0f       	add	r24, r18
    285e:	93 1f       	adc	r25, r19
    2860:	ac 01       	movw	r20, r24
    2862:	4d 51       	subi	r20, 0x1D	; 29
    2864:	5e 4f       	sbci	r21, 0xFE	; 254
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	9c 01       	movw	r18, r24
    286c:	2e 5f       	subi	r18, 0xFE	; 254
    286e:	3f 4f       	sbci	r19, 0xFF	; 255
    2870:	ca 01       	movw	r24, r20
    2872:	b9 01       	movw	r22, r18
    2874:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
static void prvCheckPendingReadyList( void )
{
	/* Are there any co-routines waiting to get moved to the ready list?  These
	are co-routines that have been readied by an ISR.  The ISR cannot access
	the	ready lists itself. */
	while( listLIST_IS_EMPTY( &xPendingReadyCoRoutineList ) == pdFALSE )
    2878:	80 91 0b 02 	lds	r24, 0x020B
    287c:	88 23       	and	r24, r24
    287e:	09 f0       	breq	.+2      	; 0x2882 <prvCheckPendingReadyList+0x8a>
    2880:	c1 cf       	rjmp	.-126    	; 0x2804 <prvCheckPendingReadyList+0xc>
		portENABLE_INTERRUPTS();

		vListRemove( &( pxUnblockedCRCB->xGenericListItem ) );
		prvAddCoRoutineToReadyQueue( pxUnblockedCRCB );	
	}
}
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	cf 91       	pop	r28
    2888:	df 91       	pop	r29
    288a:	08 95       	ret

0000288c <prvCheckDelayedList>:
/*-----------------------------------------------------------*/

static void prvCheckDelayedList( void )
{
    288c:	df 93       	push	r29
    288e:	cf 93       	push	r28
    2890:	00 d0       	rcall	.+0      	; 0x2892 <prvCheckDelayedList+0x6>
    2892:	00 d0       	rcall	.+0      	; 0x2894 <prvCheckDelayedList+0x8>
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
    2898:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <xTaskGetTickCount>
    289c:	20 91 df 01 	lds	r18, 0x01DF
    28a0:	30 91 e0 01 	lds	r19, 0x01E0
    28a4:	82 1b       	sub	r24, r18
    28a6:	93 0b       	sbc	r25, r19
    28a8:	90 93 e2 01 	sts	0x01E2, r25
    28ac:	80 93 e1 01 	sts	0x01E1, r24
    28b0:	85 c0       	rjmp	.+266    	; 0x29bc <prvCheckDelayedList+0x130>
	while( xPassedTicks )
	{
		xCoRoutineTickCount++;
    28b2:	80 91 dd 01 	lds	r24, 0x01DD
    28b6:	90 91 de 01 	lds	r25, 0x01DE
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	90 93 de 01 	sts	0x01DE, r25
    28c0:	80 93 dd 01 	sts	0x01DD, r24
		xPassedTicks--;
    28c4:	80 91 e1 01 	lds	r24, 0x01E1
    28c8:	90 91 e2 01 	lds	r25, 0x01E2
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	90 93 e2 01 	sts	0x01E2, r25
    28d2:	80 93 e1 01 	sts	0x01E1, r24

		/* If the tick count has overflowed we need to swap the ready lists. */
		if( xCoRoutineTickCount == 0 )
    28d6:	80 91 dd 01 	lds	r24, 0x01DD
    28da:	90 91 de 01 	lds	r25, 0x01DE
    28de:	00 97       	sbiw	r24, 0x00	; 0
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <prvCheckDelayedList+0x58>
    28e2:	64 c0       	rjmp	.+200    	; 0x29ac <prvCheckDelayedList+0x120>
		{
			xList * pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.  If there are
			any items in pxDelayedCoRoutineList here then there is an error! */
			pxTemp = pxDelayedCoRoutineList;
    28e4:	80 91 07 02 	lds	r24, 0x0207
    28e8:	90 91 08 02 	lds	r25, 0x0208
    28ec:	9a 83       	std	Y+2, r25	; 0x02
    28ee:	89 83       	std	Y+1, r24	; 0x01
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
    28f0:	80 91 09 02 	lds	r24, 0x0209
    28f4:	90 91 0a 02 	lds	r25, 0x020A
    28f8:	90 93 08 02 	sts	0x0208, r25
    28fc:	80 93 07 02 	sts	0x0207, r24
			pxOverflowDelayedCoRoutineList = pxTemp;
    2900:	89 81       	ldd	r24, Y+1	; 0x01
    2902:	9a 81       	ldd	r25, Y+2	; 0x02
    2904:	90 93 0a 02 	sts	0x020A, r25
    2908:	80 93 09 02 	sts	0x0209, r24
    290c:	4f c0       	rjmp	.+158    	; 0x29ac <prvCheckDelayedList+0x120>
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
		{
			pxCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedCoRoutineList );
    290e:	e0 91 07 02 	lds	r30, 0x0207
    2912:	f0 91 08 02 	lds	r31, 0x0208
    2916:	05 80       	ldd	r0, Z+5	; 0x05
    2918:	f6 81       	ldd	r31, Z+6	; 0x06
    291a:	e0 2d       	mov	r30, r0
    291c:	86 81       	ldd	r24, Z+6	; 0x06
    291e:	97 81       	ldd	r25, Z+7	; 0x07
    2920:	9c 83       	std	Y+4, r25	; 0x04
    2922:	8b 83       	std	Y+3, r24	; 0x03

			if( xCoRoutineTickCount < listGET_LIST_ITEM_VALUE( &( pxCRCB->xGenericListItem ) ) )				
    2924:	eb 81       	ldd	r30, Y+3	; 0x03
    2926:	fc 81       	ldd	r31, Y+4	; 0x04
    2928:	22 81       	ldd	r18, Z+2	; 0x02
    292a:	33 81       	ldd	r19, Z+3	; 0x03
    292c:	80 91 dd 01 	lds	r24, 0x01DD
    2930:	90 91 de 01 	lds	r25, 0x01DE
    2934:	82 17       	cp	r24, r18
    2936:	93 07       	cpc	r25, r19
    2938:	08 f4       	brcc	.+2      	; 0x293c <prvCheckDelayedList+0xb0>
    293a:	40 c0       	rjmp	.+128    	; 0x29bc <prvCheckDelayedList+0x130>
			{			
				/* Timeout not yet expired. */																			
				break;																				
			}																						

			portDISABLE_INTERRUPTS();
    293c:	f8 94       	cli
				/* The event could have occurred just before this critical
				section.  If this is the case then the generic list item will
				have been moved to the pending ready list and the following
				line is still valid.  Also the pvContainer parameter will have
				been set to NULL so the following lines are also valid. */
				vListRemove( &( pxCRCB->xGenericListItem ) );											
    293e:	8b 81       	ldd	r24, Y+3	; 0x03
    2940:	9c 81       	ldd	r25, Y+4	; 0x04
    2942:	02 96       	adiw	r24, 0x02	; 2
    2944:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

				/* Is the co-routine waiting on an event also? */												
				if( pxCRCB->xEventListItem.pvContainer )													
    2948:	eb 81       	ldd	r30, Y+3	; 0x03
    294a:	fc 81       	ldd	r31, Y+4	; 0x04
    294c:	84 89       	ldd	r24, Z+20	; 0x14
    294e:	95 89       	ldd	r25, Z+21	; 0x15
    2950:	00 97       	sbiw	r24, 0x00	; 0
    2952:	29 f0       	breq	.+10     	; 0x295e <prvCheckDelayedList+0xd2>
				{															
					vListRemove( &( pxCRCB->xEventListItem ) );											
    2954:	8b 81       	ldd	r24, Y+3	; 0x03
    2956:	9c 81       	ldd	r25, Y+4	; 0x04
    2958:	0c 96       	adiw	r24, 0x0c	; 12
    295a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
				}
			}
			portENABLE_INTERRUPTS();
    295e:	78 94       	sei

			prvAddCoRoutineToReadyQueue( pxCRCB );													
    2960:	eb 81       	ldd	r30, Y+3	; 0x03
    2962:	fc 81       	ldd	r31, Y+4	; 0x04
    2964:	96 89       	ldd	r25, Z+22	; 0x16
    2966:	80 91 dc 01 	lds	r24, 0x01DC
    296a:	89 17       	cp	r24, r25
    296c:	28 f4       	brcc	.+10     	; 0x2978 <prvCheckDelayedList+0xec>
    296e:	eb 81       	ldd	r30, Y+3	; 0x03
    2970:	fc 81       	ldd	r31, Y+4	; 0x04
    2972:	86 89       	ldd	r24, Z+22	; 0x16
    2974:	80 93 dc 01 	sts	0x01DC, r24
    2978:	eb 81       	ldd	r30, Y+3	; 0x03
    297a:	fc 81       	ldd	r31, Y+4	; 0x04
    297c:	86 89       	ldd	r24, Z+22	; 0x16
    297e:	28 2f       	mov	r18, r24
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	c9 01       	movw	r24, r18
    2984:	88 0f       	add	r24, r24
    2986:	99 1f       	adc	r25, r25
    2988:	88 0f       	add	r24, r24
    298a:	99 1f       	adc	r25, r25
    298c:	88 0f       	add	r24, r24
    298e:	99 1f       	adc	r25, r25
    2990:	82 0f       	add	r24, r18
    2992:	93 1f       	adc	r25, r19
    2994:	ac 01       	movw	r20, r24
    2996:	4d 51       	subi	r20, 0x1D	; 29
    2998:	5e 4f       	sbci	r21, 0xFE	; 254
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	9c 01       	movw	r18, r24
    29a0:	2e 5f       	subi	r18, 0xFE	; 254
    29a2:	3f 4f       	sbci	r19, 0xFF	; 255
    29a4:	ca 01       	movw	r24, r20
    29a6:	b9 01       	movw	r22, r18
    29a8:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
			pxDelayedCoRoutineList = pxOverflowDelayedCoRoutineList;
			pxOverflowDelayedCoRoutineList = pxTemp;
		}

		/* See if this tick has made a timeout expire. */
		while( listLIST_IS_EMPTY( pxDelayedCoRoutineList ) == pdFALSE )
    29ac:	e0 91 07 02 	lds	r30, 0x0207
    29b0:	f0 91 08 02 	lds	r31, 0x0208
    29b4:	80 81       	ld	r24, Z
    29b6:	88 23       	and	r24, r24
    29b8:	09 f0       	breq	.+2      	; 0x29bc <prvCheckDelayedList+0x130>
    29ba:	a9 cf       	rjmp	.-174    	; 0x290e <prvCheckDelayedList+0x82>
static void prvCheckDelayedList( void )
{
corCRCB *pxCRCB;

	xPassedTicks = xTaskGetTickCount() - xLastTickCount;
	while( xPassedTicks )
    29bc:	80 91 e1 01 	lds	r24, 0x01E1
    29c0:	90 91 e2 01 	lds	r25, 0x01E2
    29c4:	00 97       	sbiw	r24, 0x00	; 0
    29c6:	09 f0       	breq	.+2      	; 0x29ca <prvCheckDelayedList+0x13e>
    29c8:	74 cf       	rjmp	.-280    	; 0x28b2 <prvCheckDelayedList+0x26>

			prvAddCoRoutineToReadyQueue( pxCRCB );													
		}																									
	}

	xLastTickCount = xCoRoutineTickCount;
    29ca:	80 91 dd 01 	lds	r24, 0x01DD
    29ce:	90 91 de 01 	lds	r25, 0x01DE
    29d2:	90 93 e0 01 	sts	0x01E0, r25
    29d6:	80 93 df 01 	sts	0x01DF, r24
}
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	cf 91       	pop	r28
    29e4:	df 91       	pop	r29
    29e6:	08 95       	ret

000029e8 <vCoRoutineSchedule>:
/*-----------------------------------------------------------*/

void vCoRoutineSchedule( void )
{
    29e8:	df 93       	push	r29
    29ea:	cf 93       	push	r28
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <vCoRoutineSchedule+0x6>
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
	/* See if any co-routines readied by events need moving to the ready lists. */
	prvCheckPendingReadyList();
    29f2:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <prvCheckPendingReadyList>

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();
    29f6:	0e 94 46 14 	call	0x288c	; 0x288c <prvCheckDelayedList>
    29fa:	0a c0       	rjmp	.+20     	; 0x2a10 <vCoRoutineSchedule+0x28>

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
	{
		if( uxTopCoRoutineReadyPriority == 0 )
    29fc:	80 91 dc 01 	lds	r24, 0x01DC
    2a00:	88 23       	and	r24, r24
    2a02:	09 f4       	brne	.+2      	; 0x2a06 <vCoRoutineSchedule+0x1e>
    2a04:	66 c0       	rjmp	.+204    	; 0x2ad2 <vCoRoutineSchedule+0xea>
		{
			/* No more co-routines to check. */
			return;
		}
		--uxTopCoRoutineReadyPriority;
    2a06:	80 91 dc 01 	lds	r24, 0x01DC
    2a0a:	81 50       	subi	r24, 0x01	; 1
    2a0c:	80 93 dc 01 	sts	0x01DC, r24

	/* See if any delayed co-routines have timed out. */
	prvCheckDelayedList();

	/* Find the highest priority queue that contains ready co-routines. */
	while( listLIST_IS_EMPTY( &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) ) )
    2a10:	80 91 dc 01 	lds	r24, 0x01DC
    2a14:	28 2f       	mov	r18, r24
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	c9 01       	movw	r24, r18
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
    2a1e:	88 0f       	add	r24, r24
    2a20:	99 1f       	adc	r25, r25
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	82 0f       	add	r24, r18
    2a28:	93 1f       	adc	r25, r19
    2a2a:	fc 01       	movw	r30, r24
    2a2c:	ed 51       	subi	r30, 0x1D	; 29
    2a2e:	fe 4f       	sbci	r31, 0xFE	; 254
    2a30:	80 81       	ld	r24, Z
    2a32:	88 23       	and	r24, r24
    2a34:	19 f3       	breq	.-58     	; 0x29fc <vCoRoutineSchedule+0x14>
		--uxTopCoRoutineReadyPriority;
	}

	/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the co-routines
	 of the	same priority get an equal share of the processor time. */
	listGET_OWNER_OF_NEXT_ENTRY( pxCurrentCoRoutine, &( pxReadyCoRoutineLists[ uxTopCoRoutineReadyPriority ] ) );
    2a36:	80 91 dc 01 	lds	r24, 0x01DC
    2a3a:	28 2f       	mov	r18, r24
    2a3c:	30 e0       	ldi	r19, 0x00	; 0
    2a3e:	c9 01       	movw	r24, r18
    2a40:	88 0f       	add	r24, r24
    2a42:	99 1f       	adc	r25, r25
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	82 0f       	add	r24, r18
    2a4e:	93 1f       	adc	r25, r19
    2a50:	8d 51       	subi	r24, 0x1D	; 29
    2a52:	9e 4f       	sbci	r25, 0xFE	; 254
    2a54:	9a 83       	std	Y+2, r25	; 0x02
    2a56:	89 83       	std	Y+1, r24	; 0x01
    2a58:	e9 81       	ldd	r30, Y+1	; 0x01
    2a5a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a5c:	01 80       	ldd	r0, Z+1	; 0x01
    2a5e:	f2 81       	ldd	r31, Z+2	; 0x02
    2a60:	e0 2d       	mov	r30, r0
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	93 81       	ldd	r25, Z+3	; 0x03
    2a66:	e9 81       	ldd	r30, Y+1	; 0x01
    2a68:	fa 81       	ldd	r31, Y+2	; 0x02
    2a6a:	92 83       	std	Z+2, r25	; 0x02
    2a6c:	81 83       	std	Z+1, r24	; 0x01
    2a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2a70:	fa 81       	ldd	r31, Y+2	; 0x02
    2a72:	21 81       	ldd	r18, Z+1	; 0x01
    2a74:	32 81       	ldd	r19, Z+2	; 0x02
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	03 96       	adiw	r24, 0x03	; 3
    2a7c:	28 17       	cp	r18, r24
    2a7e:	39 07       	cpc	r19, r25
    2a80:	59 f4       	brne	.+22     	; 0x2a98 <vCoRoutineSchedule+0xb0>
    2a82:	e9 81       	ldd	r30, Y+1	; 0x01
    2a84:	fa 81       	ldd	r31, Y+2	; 0x02
    2a86:	01 80       	ldd	r0, Z+1	; 0x01
    2a88:	f2 81       	ldd	r31, Z+2	; 0x02
    2a8a:	e0 2d       	mov	r30, r0
    2a8c:	82 81       	ldd	r24, Z+2	; 0x02
    2a8e:	93 81       	ldd	r25, Z+3	; 0x03
    2a90:	e9 81       	ldd	r30, Y+1	; 0x01
    2a92:	fa 81       	ldd	r31, Y+2	; 0x02
    2a94:	92 83       	std	Z+2, r25	; 0x02
    2a96:	81 83       	std	Z+1, r24	; 0x01
    2a98:	e9 81       	ldd	r30, Y+1	; 0x01
    2a9a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a9c:	01 80       	ldd	r0, Z+1	; 0x01
    2a9e:	f2 81       	ldd	r31, Z+2	; 0x02
    2aa0:	e0 2d       	mov	r30, r0
    2aa2:	86 81       	ldd	r24, Z+6	; 0x06
    2aa4:	97 81       	ldd	r25, Z+7	; 0x07
    2aa6:	90 93 db 01 	sts	0x01DB, r25
    2aaa:	80 93 da 01 	sts	0x01DA, r24

	/* Call the co-routine. */
	( pxCurrentCoRoutine->pxCoRoutineFunction )( pxCurrentCoRoutine, pxCurrentCoRoutine->uxIndex );
    2aae:	e0 91 da 01 	lds	r30, 0x01DA
    2ab2:	f0 91 db 01 	lds	r31, 0x01DB
    2ab6:	40 81       	ld	r20, Z
    2ab8:	51 81       	ldd	r21, Z+1	; 0x01
    2aba:	80 91 da 01 	lds	r24, 0x01DA
    2abe:	90 91 db 01 	lds	r25, 0x01DB
    2ac2:	e0 91 da 01 	lds	r30, 0x01DA
    2ac6:	f0 91 db 01 	lds	r31, 0x01DB
    2aca:	27 89       	ldd	r18, Z+23	; 0x17
    2acc:	62 2f       	mov	r22, r18
    2ace:	fa 01       	movw	r30, r20
    2ad0:	09 95       	icall

	return;
}
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	cf 91       	pop	r28
    2ad8:	df 91       	pop	r29
    2ada:	08 95       	ret

00002adc <prvInitialiseCoRoutineLists>:
/*-----------------------------------------------------------*/

static void prvInitialiseCoRoutineLists( void )
{
    2adc:	df 93       	push	r29
    2ade:	cf 93       	push	r28
    2ae0:	0f 92       	push	r0
    2ae2:	cd b7       	in	r28, 0x3d	; 61
    2ae4:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2ae6:	19 82       	std	Y+1, r1	; 0x01
    2ae8:	13 c0       	rjmp	.+38     	; 0x2b10 <prvInitialiseCoRoutineLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
    2aea:	89 81       	ldd	r24, Y+1	; 0x01
    2aec:	28 2f       	mov	r18, r24
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	c9 01       	movw	r24, r18
    2af2:	88 0f       	add	r24, r24
    2af4:	99 1f       	adc	r25, r25
    2af6:	88 0f       	add	r24, r24
    2af8:	99 1f       	adc	r25, r25
    2afa:	88 0f       	add	r24, r24
    2afc:	99 1f       	adc	r25, r25
    2afe:	82 0f       	add	r24, r18
    2b00:	93 1f       	adc	r25, r19
    2b02:	8d 51       	subi	r24, 0x1D	; 29
    2b04:	9e 4f       	sbci	r25, 0xFE	; 254
    2b06:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

static void prvInitialiseCoRoutineLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = 0; uxPriority < configMAX_CO_ROUTINE_PRIORITIES; uxPriority++ )
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	8f 5f       	subi	r24, 0xFF	; 255
    2b0e:	89 83       	std	Y+1, r24	; 0x01
    2b10:	89 81       	ldd	r24, Y+1	; 0x01
    2b12:	82 30       	cpi	r24, 0x02	; 2
    2b14:	50 f3       	brcs	.-44     	; 0x2aea <prvInitialiseCoRoutineLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyCoRoutineLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedCoRoutineList1 );
    2b16:	85 ef       	ldi	r24, 0xF5	; 245
    2b18:	91 e0       	ldi	r25, 0x01	; 1
    2b1a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedCoRoutineList2 );
    2b1e:	8e ef       	ldi	r24, 0xFE	; 254
    2b20:	91 e0       	ldi	r25, 0x01	; 1
    2b22:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyCoRoutineList );
    2b26:	8b e0       	ldi	r24, 0x0B	; 11
    2b28:	92 e0       	ldi	r25, 0x02	; 2
    2b2a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

	/* Start with pxDelayedCoRoutineList using list1 and the
	pxOverflowDelayedCoRoutineList using list2. */
	pxDelayedCoRoutineList = &xDelayedCoRoutineList1;
    2b2e:	85 ef       	ldi	r24, 0xF5	; 245
    2b30:	91 e0       	ldi	r25, 0x01	; 1
    2b32:	90 93 08 02 	sts	0x0208, r25
    2b36:	80 93 07 02 	sts	0x0207, r24
	pxOverflowDelayedCoRoutineList = &xDelayedCoRoutineList2;
    2b3a:	8e ef       	ldi	r24, 0xFE	; 254
    2b3c:	91 e0       	ldi	r25, 0x01	; 1
    2b3e:	90 93 0a 02 	sts	0x020A, r25
    2b42:	80 93 09 02 	sts	0x0209, r24
}
    2b46:	0f 90       	pop	r0
    2b48:	cf 91       	pop	r28
    2b4a:	df 91       	pop	r29
    2b4c:	08 95       	ret

00002b4e <xCoRoutineRemoveFromEventList>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xCoRoutineRemoveFromEventList( const xList *pxEventList )
{
    2b4e:	df 93       	push	r29
    2b50:	cf 93       	push	r28
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <xCoRoutineRemoveFromEventList+0x6>
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <xCoRoutineRemoveFromEventList+0x8>
    2b56:	0f 92       	push	r0
    2b58:	cd b7       	in	r28, 0x3d	; 61
    2b5a:	de b7       	in	r29, 0x3e	; 62
    2b5c:	9d 83       	std	Y+5, r25	; 0x05
    2b5e:	8c 83       	std	Y+4, r24	; 0x04
signed portBASE_TYPE xReturn;

	/* This function is called from within an interrupt.  It can only access
	event lists and the pending ready list.  This function assumes that a
	check has already been made to ensure pxEventList is not empty. */
	pxUnblockedCRCB = ( corCRCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    2b60:	ec 81       	ldd	r30, Y+4	; 0x04
    2b62:	fd 81       	ldd	r31, Y+5	; 0x05
    2b64:	05 80       	ldd	r0, Z+5	; 0x05
    2b66:	f6 81       	ldd	r31, Z+6	; 0x06
    2b68:	e0 2d       	mov	r30, r0
    2b6a:	86 81       	ldd	r24, Z+6	; 0x06
    2b6c:	97 81       	ldd	r25, Z+7	; 0x07
    2b6e:	9b 83       	std	Y+3, r25	; 0x03
    2b70:	8a 83       	std	Y+2, r24	; 0x02
	vListRemove( &( pxUnblockedCRCB->xEventListItem ) );
    2b72:	8a 81       	ldd	r24, Y+2	; 0x02
    2b74:	9b 81       	ldd	r25, Y+3	; 0x03
    2b76:	0c 96       	adiw	r24, 0x0c	; 12
    2b78:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
	vListInsertEnd( ( xList * ) &( xPendingReadyCoRoutineList ), &( pxUnblockedCRCB->xEventListItem ) );
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b80:	9c 01       	movw	r18, r24
    2b82:	24 5f       	subi	r18, 0xF4	; 244
    2b84:	3f 4f       	sbci	r19, 0xFF	; 255
    2b86:	8b e0       	ldi	r24, 0x0B	; 11
    2b88:	92 e0       	ldi	r25, 0x02	; 2
    2b8a:	b9 01       	movw	r22, r18
    2b8c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

	if( pxUnblockedCRCB->uxPriority >= pxCurrentCoRoutine->uxPriority )
    2b90:	ea 81       	ldd	r30, Y+2	; 0x02
    2b92:	fb 81       	ldd	r31, Y+3	; 0x03
    2b94:	96 89       	ldd	r25, Z+22	; 0x16
    2b96:	e0 91 da 01 	lds	r30, 0x01DA
    2b9a:	f0 91 db 01 	lds	r31, 0x01DB
    2b9e:	86 89       	ldd	r24, Z+22	; 0x16
    2ba0:	98 17       	cp	r25, r24
    2ba2:	18 f0       	brcs	.+6      	; 0x2baa <xCoRoutineRemoveFromEventList+0x5c>
	{
		xReturn = pdTRUE;
    2ba4:	81 e0       	ldi	r24, 0x01	; 1
    2ba6:	89 83       	std	Y+1, r24	; 0x01
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <xCoRoutineRemoveFromEventList+0x5e>
	}
	else
	{
		xReturn = pdFALSE;
    2baa:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bae:	0f 90       	pop	r0
    2bb0:	0f 90       	pop	r0
    2bb2:	0f 90       	pop	r0
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	cf 91       	pop	r28
    2bba:	df 91       	pop	r29
    2bbc:	08 95       	ret

00002bbe <pvPortMalloc>:

static size_t xNextFreeByte = ( size_t ) 0;
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    2bbe:	df 93       	push	r29
    2bc0:	cf 93       	push	r28
    2bc2:	00 d0       	rcall	.+0      	; 0x2bc4 <pvPortMalloc+0x6>
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <pvPortMalloc+0x8>
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	9c 83       	std	Y+4, r25	; 0x04
    2bcc:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL; 
    2bce:	1a 82       	std	Y+2, r1	; 0x02
    2bd0:	19 82       	std	Y+1, r1	; 0x01
			/* Byte alignment required. */
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	#endif

	vTaskSuspendAll();
    2bd2:	0e 94 3c 21 	call	0x4278	; 0x4278 <vTaskSuspendAll>
	{
		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configTOTAL_HEAP_SIZE ) &&
    2bd6:	80 91 14 02 	lds	r24, 0x0214
    2bda:	90 91 15 02 	lds	r25, 0x0215
    2bde:	2b 81       	ldd	r18, Y+3	; 0x03
    2be0:	3c 81       	ldd	r19, Y+4	; 0x04
    2be2:	82 0f       	add	r24, r18
    2be4:	93 1f       	adc	r25, r19
    2be6:	22 e0       	ldi	r18, 0x02	; 2
    2be8:	88 35       	cpi	r24, 0x58	; 88
    2bea:	92 07       	cpc	r25, r18
    2bec:	18 f5       	brcc	.+70     	; 0x2c34 <pvPortMalloc+0x76>
    2bee:	20 91 14 02 	lds	r18, 0x0214
    2bf2:	30 91 15 02 	lds	r19, 0x0215
    2bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    2bfa:	28 0f       	add	r18, r24
    2bfc:	39 1f       	adc	r19, r25
    2bfe:	80 91 14 02 	lds	r24, 0x0214
    2c02:	90 91 15 02 	lds	r25, 0x0215
    2c06:	82 17       	cp	r24, r18
    2c08:	93 07       	cpc	r25, r19
    2c0a:	a0 f4       	brcc	.+40     	; 0x2c34 <pvPortMalloc+0x76>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = &( xHeap.ucHeap[ xNextFreeByte ] );
    2c0c:	80 91 14 02 	lds	r24, 0x0214
    2c10:	90 91 15 02 	lds	r25, 0x0215
    2c14:	8a 5e       	subi	r24, 0xEA	; 234
    2c16:	9d 4f       	sbci	r25, 0xFD	; 253
    2c18:	9a 83       	std	Y+2, r25	; 0x02
    2c1a:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;			
    2c1c:	20 91 14 02 	lds	r18, 0x0214
    2c20:	30 91 15 02 	lds	r19, 0x0215
    2c24:	8b 81       	ldd	r24, Y+3	; 0x03
    2c26:	9c 81       	ldd	r25, Y+4	; 0x04
    2c28:	82 0f       	add	r24, r18
    2c2a:	93 1f       	adc	r25, r19
    2c2c:	90 93 15 02 	sts	0x0215, r25
    2c30:	80 93 14 02 	sts	0x0214, r24
		}	
	}
	xTaskResumeAll();
    2c34:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif	

	return pvReturn;
    2c38:	89 81       	ldd	r24, Y+1	; 0x01
    2c3a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2c3c:	0f 90       	pop	r0
    2c3e:	0f 90       	pop	r0
    2c40:	0f 90       	pop	r0
    2c42:	0f 90       	pop	r0
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	08 95       	ret

00002c4a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	00 d0       	rcall	.+0      	; 0x2c50 <vPortFree+0x6>
    2c50:	cd b7       	in	r28, 0x3d	; 61
    2c52:	de b7       	in	r29, 0x3e	; 62
    2c54:	9a 83       	std	Y+2, r25	; 0x02
    2c56:	89 83       	std	Y+1, r24	; 0x01
	/* Memory cannot be freed using this scheme.  See heap_2.c and heap_3.c 
	for alternative implementations, and the memory management pages of 
	http://www.FreeRTOS.org for more information. */
	( void ) pv;
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	cf 91       	pop	r28
    2c5e:	df 91       	pop	r29
    2c60:	08 95       	ret

00002c62 <vPortInitialiseBlocks>:
/*-----------------------------------------------------------*/

void vPortInitialiseBlocks( void )
{
    2c62:	df 93       	push	r29
    2c64:	cf 93       	push	r28
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
	/* Only required when static memory is not cleared. */
	xNextFreeByte = ( size_t ) 0;
    2c6a:	10 92 15 02 	sts	0x0215, r1
    2c6e:	10 92 14 02 	sts	0x0214, r1
}
    2c72:	cf 91       	pop	r28
    2c74:	df 91       	pop	r29
    2c76:	08 95       	ret

00002c78 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
    2c78:	df 93       	push	r29
    2c7a:	cf 93       	push	r28
    2c7c:	cd b7       	in	r28, 0x3d	; 61
    2c7e:	de b7       	in	r29, 0x3e	; 62
	return ( configTOTAL_HEAP_SIZE - xNextFreeByte );
    2c80:	20 91 14 02 	lds	r18, 0x0214
    2c84:	30 91 15 02 	lds	r19, 0x0215
    2c88:	88 e5       	ldi	r24, 0x58	; 88
    2c8a:	92 e0       	ldi	r25, 0x02	; 2
    2c8c:	82 1b       	sub	r24, r18
    2c8e:	93 0b       	sbc	r25, r19
}
    2c90:	cf 91       	pop	r28
    2c92:	df 91       	pop	r29
    2c94:	08 95       	ret

00002c96 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( xList *pxList )
{
    2c96:	df 93       	push	r29
    2c98:	cf 93       	push	r28
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <vListInitialise+0x6>
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	9a 83       	std	Y+2, r25	; 0x02
    2ca2:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ca8:	03 96       	adiw	r24, 0x03	; 3
    2caa:	e9 81       	ldd	r30, Y+1	; 0x01
    2cac:	fa 81       	ldd	r31, Y+2	; 0x02
    2cae:	92 83       	std	Z+2, r25	; 0x02
    2cb0:	81 83       	std	Z+1, r24	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    2cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb6:	8f ef       	ldi	r24, 0xFF	; 255
    2cb8:	9f ef       	ldi	r25, 0xFF	; 255
    2cba:	94 83       	std	Z+4, r25	; 0x04
    2cbc:	83 83       	std	Z+3, r24	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
    2cbe:	89 81       	ldd	r24, Y+1	; 0x01
    2cc0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc2:	03 96       	adiw	r24, 0x03	; 3
    2cc4:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc6:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc8:	96 83       	std	Z+6, r25	; 0x06
    2cca:	85 83       	std	Z+5, r24	; 0x05
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd0:	03 96       	adiw	r24, 0x03	; 3
    2cd2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd4:	fa 81       	ldd	r31, Y+2	; 0x02
    2cd6:	90 87       	std	Z+8, r25	; 0x08
    2cd8:	87 83       	std	Z+7, r24	; 0x07

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
    2cda:	e9 81       	ldd	r30, Y+1	; 0x01
    2cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    2cde:	10 82       	st	Z, r1
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	00 d0       	rcall	.+0      	; 0x2cf0 <vListInitialiseItem+0x6>
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	9a 83       	std	Y+2, r25	; 0x02
    2cf6:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    2cf8:	e9 81       	ldd	r30, Y+1	; 0x01
    2cfa:	fa 81       	ldd	r31, Y+2	; 0x02
    2cfc:	11 86       	std	Z+9, r1	; 0x09
    2cfe:	10 86       	std	Z+8, r1	; 0x08
}
    2d00:	0f 90       	pop	r0
    2d02:	0f 90       	pop	r0
    2d04:	cf 91       	pop	r28
    2d06:	df 91       	pop	r29
    2d08:	08 95       	ret

00002d0a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( xList *pxList, xListItem *pxNewListItem )
{
    2d0a:	df 93       	push	r29
    2d0c:	cf 93       	push	r28
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <vListInsertEnd+0x6>
    2d10:	00 d0       	rcall	.+0      	; 0x2d12 <vListInsertEnd+0x8>
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <vListInsertEnd+0xa>
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	9c 83       	std	Y+4, r25	; 0x04
    2d1a:	8b 83       	std	Y+3, r24	; 0x03
    2d1c:	7e 83       	std	Y+6, r23	; 0x06
    2d1e:	6d 83       	std	Y+5, r22	; 0x05

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
    2d20:	eb 81       	ldd	r30, Y+3	; 0x03
    2d22:	fc 81       	ldd	r31, Y+4	; 0x04
    2d24:	81 81       	ldd	r24, Z+1	; 0x01
    2d26:	92 81       	ldd	r25, Z+2	; 0x02
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01

	pxNewListItem->pxNext = pxIndex->pxNext;
    2d2c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d2e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d30:	82 81       	ldd	r24, Z+2	; 0x02
    2d32:	93 81       	ldd	r25, Z+3	; 0x03
    2d34:	ed 81       	ldd	r30, Y+5	; 0x05
    2d36:	fe 81       	ldd	r31, Y+6	; 0x06
    2d38:	93 83       	std	Z+3, r25	; 0x03
    2d3a:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxPrevious = pxList->pxIndex;
    2d3c:	eb 81       	ldd	r30, Y+3	; 0x03
    2d3e:	fc 81       	ldd	r31, Y+4	; 0x04
    2d40:	81 81       	ldd	r24, Z+1	; 0x01
    2d42:	92 81       	ldd	r25, Z+2	; 0x02
    2d44:	ed 81       	ldd	r30, Y+5	; 0x05
    2d46:	fe 81       	ldd	r31, Y+6	; 0x06
    2d48:	95 83       	std	Z+5, r25	; 0x05
    2d4a:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2d4c:	e9 81       	ldd	r30, Y+1	; 0x01
    2d4e:	fa 81       	ldd	r31, Y+2	; 0x02
    2d50:	02 80       	ldd	r0, Z+2	; 0x02
    2d52:	f3 81       	ldd	r31, Z+3	; 0x03
    2d54:	e0 2d       	mov	r30, r0
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	95 83       	std	Z+5, r25	; 0x05
    2d5c:	84 83       	std	Z+4, r24	; 0x04
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
    2d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d60:	9e 81       	ldd	r25, Y+6	; 0x06
    2d62:	e9 81       	ldd	r30, Y+1	; 0x01
    2d64:	fa 81       	ldd	r31, Y+2	; 0x02
    2d66:	93 83       	std	Z+3, r25	; 0x03
    2d68:	82 83       	std	Z+2, r24	; 0x02
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
    2d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d6e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d70:	fc 81       	ldd	r31, Y+4	; 0x04
    2d72:	92 83       	std	Z+2, r25	; 0x02
    2d74:	81 83       	std	Z+1, r24	; 0x01

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2d76:	ed 81       	ldd	r30, Y+5	; 0x05
    2d78:	fe 81       	ldd	r31, Y+6	; 0x06
    2d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2d7e:	91 87       	std	Z+9, r25	; 0x09
    2d80:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2d82:	eb 81       	ldd	r30, Y+3	; 0x03
    2d84:	fc 81       	ldd	r31, Y+4	; 0x04
    2d86:	80 81       	ld	r24, Z
    2d88:	8f 5f       	subi	r24, 0xFF	; 255
    2d8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2d8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2d8e:	80 83       	st	Z, r24
}
    2d90:	26 96       	adiw	r28, 0x06	; 6
    2d92:	0f b6       	in	r0, 0x3f	; 63
    2d94:	f8 94       	cli
    2d96:	de bf       	out	0x3e, r29	; 62
    2d98:	0f be       	out	0x3f, r0	; 63
    2d9a:	cd bf       	out	0x3d, r28	; 61
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	28 97       	sbiw	r28, 0x08	; 8
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	f8 94       	cli
    2db0:	de bf       	out	0x3e, r29	; 62
    2db2:	0f be       	out	0x3f, r0	; 63
    2db4:	cd bf       	out	0x3d, r28	; 61
    2db6:	9e 83       	std	Y+6, r25	; 0x06
    2db8:	8d 83       	std	Y+5, r24	; 0x05
    2dba:	78 87       	std	Y+8, r23	; 0x08
    2dbc:	6f 83       	std	Y+7, r22	; 0x07
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
    2dbe:	ef 81       	ldd	r30, Y+7	; 0x07
    2dc0:	f8 85       	ldd	r31, Y+8	; 0x08
    2dc2:	80 81       	ld	r24, Z
    2dc4:	91 81       	ldd	r25, Z+1	; 0x01
    2dc6:	9a 83       	std	Y+2, r25	; 0x02
    2dc8:	89 83       	std	Y+1, r24	; 0x01
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    2dca:	89 81       	ldd	r24, Y+1	; 0x01
    2dcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2dce:	2f ef       	ldi	r18, 0xFF	; 255
    2dd0:	8f 3f       	cpi	r24, 0xFF	; 255
    2dd2:	92 07       	cpc	r25, r18
    2dd4:	39 f4       	brne	.+14     	; 0x2de4 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    2dd6:	ed 81       	ldd	r30, Y+5	; 0x05
    2dd8:	fe 81       	ldd	r31, Y+6	; 0x06
    2dda:	87 81       	ldd	r24, Z+7	; 0x07
    2ddc:	90 85       	ldd	r25, Z+8	; 0x08
    2dde:	9c 83       	std	Y+4, r25	; 0x04
    2de0:	8b 83       	std	Y+3, r24	; 0x03
    2de2:	18 c0       	rjmp	.+48     	; 0x2e14 <vListInsert+0x72>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/
		
		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
    2de4:	8d 81       	ldd	r24, Y+5	; 0x05
    2de6:	9e 81       	ldd	r25, Y+6	; 0x06
    2de8:	03 96       	adiw	r24, 0x03	; 3
    2dea:	9c 83       	std	Y+4, r25	; 0x04
    2dec:	8b 83       	std	Y+3, r24	; 0x03
    2dee:	06 c0       	rjmp	.+12     	; 0x2dfc <vListInsert+0x5a>
    2df0:	eb 81       	ldd	r30, Y+3	; 0x03
    2df2:	fc 81       	ldd	r31, Y+4	; 0x04
    2df4:	82 81       	ldd	r24, Z+2	; 0x02
    2df6:	93 81       	ldd	r25, Z+3	; 0x03
    2df8:	9c 83       	std	Y+4, r25	; 0x04
    2dfa:	8b 83       	std	Y+3, r24	; 0x03
    2dfc:	eb 81       	ldd	r30, Y+3	; 0x03
    2dfe:	fc 81       	ldd	r31, Y+4	; 0x04
    2e00:	02 80       	ldd	r0, Z+2	; 0x02
    2e02:	f3 81       	ldd	r31, Z+3	; 0x03
    2e04:	e0 2d       	mov	r30, r0
    2e06:	20 81       	ld	r18, Z
    2e08:	31 81       	ldd	r19, Z+1	; 0x01
    2e0a:	89 81       	ldd	r24, Y+1	; 0x01
    2e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e0e:	82 17       	cp	r24, r18
    2e10:	93 07       	cpc	r25, r19
    2e12:	70 f7       	brcc	.-36     	; 0x2df0 <vListInsert+0x4e>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    2e14:	eb 81       	ldd	r30, Y+3	; 0x03
    2e16:	fc 81       	ldd	r31, Y+4	; 0x04
    2e18:	82 81       	ldd	r24, Z+2	; 0x02
    2e1a:	93 81       	ldd	r25, Z+3	; 0x03
    2e1c:	ef 81       	ldd	r30, Y+7	; 0x07
    2e1e:	f8 85       	ldd	r31, Y+8	; 0x08
    2e20:	93 83       	std	Z+3, r25	; 0x03
    2e22:	82 83       	std	Z+2, r24	; 0x02
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
    2e24:	ef 81       	ldd	r30, Y+7	; 0x07
    2e26:	f8 85       	ldd	r31, Y+8	; 0x08
    2e28:	02 80       	ldd	r0, Z+2	; 0x02
    2e2a:	f3 81       	ldd	r31, Z+3	; 0x03
    2e2c:	e0 2d       	mov	r30, r0
    2e2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2e30:	98 85       	ldd	r25, Y+8	; 0x08
    2e32:	95 83       	std	Z+5, r25	; 0x05
    2e34:	84 83       	std	Z+4, r24	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    2e36:	ef 81       	ldd	r30, Y+7	; 0x07
    2e38:	f8 85       	ldd	r31, Y+8	; 0x08
    2e3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3c:	9c 81       	ldd	r25, Y+4	; 0x04
    2e3e:	95 83       	std	Z+5, r25	; 0x05
    2e40:	84 83       	std	Z+4, r24	; 0x04
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
    2e42:	8f 81       	ldd	r24, Y+7	; 0x07
    2e44:	98 85       	ldd	r25, Y+8	; 0x08
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	93 83       	std	Z+3, r25	; 0x03
    2e4c:	82 83       	std	Z+2, r24	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    2e4e:	ef 81       	ldd	r30, Y+7	; 0x07
    2e50:	f8 85       	ldd	r31, Y+8	; 0x08
    2e52:	8d 81       	ldd	r24, Y+5	; 0x05
    2e54:	9e 81       	ldd	r25, Y+6	; 0x06
    2e56:	91 87       	std	Z+9, r25	; 0x09
    2e58:	80 87       	std	Z+8, r24	; 0x08

	( pxList->uxNumberOfItems )++;
    2e5a:	ed 81       	ldd	r30, Y+5	; 0x05
    2e5c:	fe 81       	ldd	r31, Y+6	; 0x06
    2e5e:	80 81       	ld	r24, Z
    2e60:	8f 5f       	subi	r24, 0xFF	; 255
    2e62:	ed 81       	ldd	r30, Y+5	; 0x05
    2e64:	fe 81       	ldd	r31, Y+6	; 0x06
    2e66:	80 83       	st	Z, r24
}
    2e68:	28 96       	adiw	r28, 0x08	; 8
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	de bf       	out	0x3e, r29	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	cd bf       	out	0x3d, r28	; 61
    2e74:	cf 91       	pop	r28
    2e76:	df 91       	pop	r29
    2e78:	08 95       	ret

00002e7a <vListRemove>:
/*-----------------------------------------------------------*/

void vListRemove( xListItem *pxItemToRemove )
{
    2e7a:	df 93       	push	r29
    2e7c:	cf 93       	push	r28
    2e7e:	00 d0       	rcall	.+0      	; 0x2e80 <vListRemove+0x6>
    2e80:	00 d0       	rcall	.+0      	; 0x2e82 <vListRemove+0x8>
    2e82:	cd b7       	in	r28, 0x3d	; 61
    2e84:	de b7       	in	r29, 0x3e	; 62
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    2e8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e8e:	a2 81       	ldd	r26, Z+2	; 0x02
    2e90:	b3 81       	ldd	r27, Z+3	; 0x03
    2e92:	eb 81       	ldd	r30, Y+3	; 0x03
    2e94:	fc 81       	ldd	r31, Y+4	; 0x04
    2e96:	84 81       	ldd	r24, Z+4	; 0x04
    2e98:	95 81       	ldd	r25, Z+5	; 0x05
    2e9a:	15 96       	adiw	r26, 0x05	; 5
    2e9c:	9c 93       	st	X, r25
    2e9e:	8e 93       	st	-X, r24
    2ea0:	14 97       	sbiw	r26, 0x04	; 4
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    2ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    2ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    2ea6:	a4 81       	ldd	r26, Z+4	; 0x04
    2ea8:	b5 81       	ldd	r27, Z+5	; 0x05
    2eaa:	eb 81       	ldd	r30, Y+3	; 0x03
    2eac:	fc 81       	ldd	r31, Y+4	; 0x04
    2eae:	82 81       	ldd	r24, Z+2	; 0x02
    2eb0:	93 81       	ldd	r25, Z+3	; 0x03
    2eb2:	13 96       	adiw	r26, 0x03	; 3
    2eb4:	9c 93       	st	X, r25
    2eb6:	8e 93       	st	-X, r24
    2eb8:	12 97       	sbiw	r26, 0x02	; 2
	
	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
    2eba:	eb 81       	ldd	r30, Y+3	; 0x03
    2ebc:	fc 81       	ldd	r31, Y+4	; 0x04
    2ebe:	80 85       	ldd	r24, Z+8	; 0x08
    2ec0:	91 85       	ldd	r25, Z+9	; 0x09
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    2ec6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eca:	21 81       	ldd	r18, Z+1	; 0x01
    2ecc:	32 81       	ldd	r19, Z+2	; 0x02
    2ece:	8b 81       	ldd	r24, Y+3	; 0x03
    2ed0:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed2:	28 17       	cp	r18, r24
    2ed4:	39 07       	cpc	r19, r25
    2ed6:	41 f4       	brne	.+16     	; 0x2ee8 <vListRemove+0x6e>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    2ed8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eda:	fc 81       	ldd	r31, Y+4	; 0x04
    2edc:	84 81       	ldd	r24, Z+4	; 0x04
    2ede:	95 81       	ldd	r25, Z+5	; 0x05
    2ee0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee4:	92 83       	std	Z+2, r25	; 0x02
    2ee6:	81 83       	std	Z+1, r24	; 0x01
	}

	pxItemToRemove->pvContainer = NULL;
    2ee8:	eb 81       	ldd	r30, Y+3	; 0x03
    2eea:	fc 81       	ldd	r31, Y+4	; 0x04
    2eec:	11 86       	std	Z+9, r1	; 0x09
    2eee:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    2ef0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ef4:	80 81       	ld	r24, Z
    2ef6:	81 50       	subi	r24, 0x01	; 1
    2ef8:	e9 81       	ldd	r30, Y+1	; 0x01
    2efa:	fa 81       	ldd	r31, Y+2	; 0x02
    2efc:	80 83       	st	Z, r24
}
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <pxPortInitialiseStack>:

/* 
 * See header file for description. 
 */
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	cd b7       	in	r28, 0x3d	; 61
    2f12:	de b7       	in	r29, 0x3e	; 62
    2f14:	28 97       	sbiw	r28, 0x08	; 8
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	f8 94       	cli
    2f1a:	de bf       	out	0x3e, r29	; 62
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	cd bf       	out	0x3d, r28	; 61
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
    2f24:	7e 83       	std	Y+6, r23	; 0x06
    2f26:	6d 83       	std	Y+5, r22	; 0x05
    2f28:	58 87       	std	Y+8, r21	; 0x08
    2f2a:	4f 83       	std	Y+7, r20	; 0x07
unsigned short usAddress;

	/* Place a few bytes of known values on the bottom of the stack. 
	This is just useful for debugging. */

	*pxTopOfStack = 0x11;
    2f2c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f2e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f30:	81 e1       	ldi	r24, 0x11	; 17
    2f32:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f34:	8b 81       	ldd	r24, Y+3	; 0x03
    2f36:	9c 81       	ldd	r25, Y+4	; 0x04
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	9c 83       	std	Y+4, r25	; 0x04
    2f3c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x22;
    2f3e:	eb 81       	ldd	r30, Y+3	; 0x03
    2f40:	fc 81       	ldd	r31, Y+4	; 0x04
    2f42:	82 e2       	ldi	r24, 0x22	; 34
    2f44:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f46:	8b 81       	ldd	r24, Y+3	; 0x03
    2f48:	9c 81       	ldd	r25, Y+4	; 0x04
    2f4a:	01 97       	sbiw	r24, 0x01	; 1
    2f4c:	9c 83       	std	Y+4, r25	; 0x04
    2f4e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = 0x33;
    2f50:	eb 81       	ldd	r30, Y+3	; 0x03
    2f52:	fc 81       	ldd	r31, Y+4	; 0x04
    2f54:	83 e3       	ldi	r24, 0x33	; 51
    2f56:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f58:	8b 81       	ldd	r24, Y+3	; 0x03
    2f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03

	/*lint -e950 -e611 -e923 Lint doesn't like this much - but nothing I can do about it. */

	/* The start of the task code will be popped off the stack last, so place
	it on first. */
	usAddress = ( unsigned short ) pxCode;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	9a 83       	std	Y+2, r25	; 0x02
    2f68:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2f6a:	89 81       	ldd	r24, Y+1	; 0x01
    2f6c:	eb 81       	ldd	r30, Y+3	; 0x03
    2f6e:	fc 81       	ldd	r31, Y+4	; 0x04
    2f70:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f72:	8b 81       	ldd	r24, Y+3	; 0x03
    2f74:	9c 81       	ldd	r25, Y+4	; 0x04
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	9c 83       	std	Y+4, r25	; 0x04
    2f7a:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    2f7c:	89 81       	ldd	r24, Y+1	; 0x01
    2f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f80:	89 2f       	mov	r24, r25
    2f82:	99 27       	eor	r25, r25
    2f84:	9a 83       	std	Y+2, r25	; 0x02
    2f86:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    2f88:	89 81       	ldd	r24, Y+1	; 0x01
    2f8a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f8c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f8e:	80 83       	st	Z, r24
	pxTopOfStack--;
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	9c 81       	ldd	r25, Y+4	; 0x04
    2f94:	01 97       	sbiw	r24, 0x01	; 1
    2f96:	9c 83       	std	Y+4, r25	; 0x04
    2f98:	8b 83       	std	Y+3, r24	; 0x03

	/* Next simulate the stack as if after a call to portSAVE_CONTEXT().  
	portSAVE_CONTEXT places the flags on the stack immediately after r0
	to ensure the interrupts get disabled as soon as possible, and so ensuring
	the stack use is minimal should a context switch interrupt occur. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R0 */
    2f9a:	eb 81       	ldd	r30, Y+3	; 0x03
    2f9c:	fc 81       	ldd	r31, Y+4	; 0x04
    2f9e:	10 82       	st	Z, r1
	pxTopOfStack--;
    2fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa2:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa4:	01 97       	sbiw	r24, 0x01	; 1
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = portFLAGS_INT_ENABLED;
    2faa:	eb 81       	ldd	r30, Y+3	; 0x03
    2fac:	fc 81       	ldd	r31, Y+4	; 0x04
    2fae:	80 e8       	ldi	r24, 0x80	; 128
    2fb0:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fb2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	9c 83       	std	Y+4, r25	; 0x04
    2fba:	8b 83       	std	Y+3, r24	; 0x03


	/* Now the remaining registers.   The compiler expects R1 to be 0. */
	*pxTopOfStack = ( portSTACK_TYPE ) 0x00;	/* R1 */
    2fbc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fbe:	fc 81       	ldd	r31, Y+4	; 0x04
    2fc0:	10 82       	st	Z, r1
	pxTopOfStack--;
    2fc2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fc4:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x02;	/* R2 */
    2fcc:	eb 81       	ldd	r30, Y+3	; 0x03
    2fce:	fc 81       	ldd	r31, Y+4	; 0x04
    2fd0:	82 e0       	ldi	r24, 0x02	; 2
    2fd2:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	9c 83       	std	Y+4, r25	; 0x04
    2fdc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x03;	/* R3 */
    2fde:	eb 81       	ldd	r30, Y+3	; 0x03
    2fe0:	fc 81       	ldd	r31, Y+4	; 0x04
    2fe2:	83 e0       	ldi	r24, 0x03	; 3
    2fe4:	80 83       	st	Z, r24
	pxTopOfStack--;
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	9c 83       	std	Y+4, r25	; 0x04
    2fee:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x04;	/* R4 */
    2ff0:	eb 81       	ldd	r30, Y+3	; 0x03
    2ff2:	fc 81       	ldd	r31, Y+4	; 0x04
    2ff4:	84 e0       	ldi	r24, 0x04	; 4
    2ff6:	80 83       	st	Z, r24
	pxTopOfStack--;
    2ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	9c 83       	std	Y+4, r25	; 0x04
    3000:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x05;	/* R5 */
    3002:	eb 81       	ldd	r30, Y+3	; 0x03
    3004:	fc 81       	ldd	r31, Y+4	; 0x04
    3006:	85 e0       	ldi	r24, 0x05	; 5
    3008:	80 83       	st	Z, r24
	pxTopOfStack--;
    300a:	8b 81       	ldd	r24, Y+3	; 0x03
    300c:	9c 81       	ldd	r25, Y+4	; 0x04
    300e:	01 97       	sbiw	r24, 0x01	; 1
    3010:	9c 83       	std	Y+4, r25	; 0x04
    3012:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x06;	/* R6 */
    3014:	eb 81       	ldd	r30, Y+3	; 0x03
    3016:	fc 81       	ldd	r31, Y+4	; 0x04
    3018:	86 e0       	ldi	r24, 0x06	; 6
    301a:	80 83       	st	Z, r24
	pxTopOfStack--;
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	9c 81       	ldd	r25, Y+4	; 0x04
    3020:	01 97       	sbiw	r24, 0x01	; 1
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x07;	/* R7 */
    3026:	eb 81       	ldd	r30, Y+3	; 0x03
    3028:	fc 81       	ldd	r31, Y+4	; 0x04
    302a:	87 e0       	ldi	r24, 0x07	; 7
    302c:	80 83       	st	Z, r24
	pxTopOfStack--;
    302e:	8b 81       	ldd	r24, Y+3	; 0x03
    3030:	9c 81       	ldd	r25, Y+4	; 0x04
    3032:	01 97       	sbiw	r24, 0x01	; 1
    3034:	9c 83       	std	Y+4, r25	; 0x04
    3036:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x08;	/* R8 */
    3038:	eb 81       	ldd	r30, Y+3	; 0x03
    303a:	fc 81       	ldd	r31, Y+4	; 0x04
    303c:	88 e0       	ldi	r24, 0x08	; 8
    303e:	80 83       	st	Z, r24
	pxTopOfStack--;
    3040:	8b 81       	ldd	r24, Y+3	; 0x03
    3042:	9c 81       	ldd	r25, Y+4	; 0x04
    3044:	01 97       	sbiw	r24, 0x01	; 1
    3046:	9c 83       	std	Y+4, r25	; 0x04
    3048:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x09;	/* R9 */
    304a:	eb 81       	ldd	r30, Y+3	; 0x03
    304c:	fc 81       	ldd	r31, Y+4	; 0x04
    304e:	89 e0       	ldi	r24, 0x09	; 9
    3050:	80 83       	st	Z, r24
	pxTopOfStack--;
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	9c 81       	ldd	r25, Y+4	; 0x04
    3056:	01 97       	sbiw	r24, 0x01	; 1
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x10;	/* R10 */
    305c:	eb 81       	ldd	r30, Y+3	; 0x03
    305e:	fc 81       	ldd	r31, Y+4	; 0x04
    3060:	80 e1       	ldi	r24, 0x10	; 16
    3062:	80 83       	st	Z, r24
	pxTopOfStack--;
    3064:	8b 81       	ldd	r24, Y+3	; 0x03
    3066:	9c 81       	ldd	r25, Y+4	; 0x04
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	9c 83       	std	Y+4, r25	; 0x04
    306c:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x11;	/* R11 */
    306e:	eb 81       	ldd	r30, Y+3	; 0x03
    3070:	fc 81       	ldd	r31, Y+4	; 0x04
    3072:	81 e1       	ldi	r24, 0x11	; 17
    3074:	80 83       	st	Z, r24
	pxTopOfStack--;
    3076:	8b 81       	ldd	r24, Y+3	; 0x03
    3078:	9c 81       	ldd	r25, Y+4	; 0x04
    307a:	01 97       	sbiw	r24, 0x01	; 1
    307c:	9c 83       	std	Y+4, r25	; 0x04
    307e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x12;	/* R12 */
    3080:	eb 81       	ldd	r30, Y+3	; 0x03
    3082:	fc 81       	ldd	r31, Y+4	; 0x04
    3084:	82 e1       	ldi	r24, 0x12	; 18
    3086:	80 83       	st	Z, r24
	pxTopOfStack--;
    3088:	8b 81       	ldd	r24, Y+3	; 0x03
    308a:	9c 81       	ldd	r25, Y+4	; 0x04
    308c:	01 97       	sbiw	r24, 0x01	; 1
    308e:	9c 83       	std	Y+4, r25	; 0x04
    3090:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x13;	/* R13 */
    3092:	eb 81       	ldd	r30, Y+3	; 0x03
    3094:	fc 81       	ldd	r31, Y+4	; 0x04
    3096:	83 e1       	ldi	r24, 0x13	; 19
    3098:	80 83       	st	Z, r24
	pxTopOfStack--;
    309a:	8b 81       	ldd	r24, Y+3	; 0x03
    309c:	9c 81       	ldd	r25, Y+4	; 0x04
    309e:	01 97       	sbiw	r24, 0x01	; 1
    30a0:	9c 83       	std	Y+4, r25	; 0x04
    30a2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x14;	/* R14 */
    30a4:	eb 81       	ldd	r30, Y+3	; 0x03
    30a6:	fc 81       	ldd	r31, Y+4	; 0x04
    30a8:	84 e1       	ldi	r24, 0x14	; 20
    30aa:	80 83       	st	Z, r24
	pxTopOfStack--;
    30ac:	8b 81       	ldd	r24, Y+3	; 0x03
    30ae:	9c 81       	ldd	r25, Y+4	; 0x04
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	9c 83       	std	Y+4, r25	; 0x04
    30b4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x15;	/* R15 */
    30b6:	eb 81       	ldd	r30, Y+3	; 0x03
    30b8:	fc 81       	ldd	r31, Y+4	; 0x04
    30ba:	85 e1       	ldi	r24, 0x15	; 21
    30bc:	80 83       	st	Z, r24
	pxTopOfStack--;
    30be:	8b 81       	ldd	r24, Y+3	; 0x03
    30c0:	9c 81       	ldd	r25, Y+4	; 0x04
    30c2:	01 97       	sbiw	r24, 0x01	; 1
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x16;	/* R16 */
    30c8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ca:	fc 81       	ldd	r31, Y+4	; 0x04
    30cc:	86 e1       	ldi	r24, 0x16	; 22
    30ce:	80 83       	st	Z, r24
	pxTopOfStack--;
    30d0:	8b 81       	ldd	r24, Y+3	; 0x03
    30d2:	9c 81       	ldd	r25, Y+4	; 0x04
    30d4:	01 97       	sbiw	r24, 0x01	; 1
    30d6:	9c 83       	std	Y+4, r25	; 0x04
    30d8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x17;	/* R17 */
    30da:	eb 81       	ldd	r30, Y+3	; 0x03
    30dc:	fc 81       	ldd	r31, Y+4	; 0x04
    30de:	87 e1       	ldi	r24, 0x17	; 23
    30e0:	80 83       	st	Z, r24
	pxTopOfStack--;
    30e2:	8b 81       	ldd	r24, Y+3	; 0x03
    30e4:	9c 81       	ldd	r25, Y+4	; 0x04
    30e6:	01 97       	sbiw	r24, 0x01	; 1
    30e8:	9c 83       	std	Y+4, r25	; 0x04
    30ea:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x18;	/* R18 */
    30ec:	eb 81       	ldd	r30, Y+3	; 0x03
    30ee:	fc 81       	ldd	r31, Y+4	; 0x04
    30f0:	88 e1       	ldi	r24, 0x18	; 24
    30f2:	80 83       	st	Z, r24
	pxTopOfStack--;
    30f4:	8b 81       	ldd	r24, Y+3	; 0x03
    30f6:	9c 81       	ldd	r25, Y+4	; 0x04
    30f8:	01 97       	sbiw	r24, 0x01	; 1
    30fa:	9c 83       	std	Y+4, r25	; 0x04
    30fc:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x19;	/* R19 */
    30fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3100:	fc 81       	ldd	r31, Y+4	; 0x04
    3102:	89 e1       	ldi	r24, 0x19	; 25
    3104:	80 83       	st	Z, r24
	pxTopOfStack--;
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	01 97       	sbiw	r24, 0x01	; 1
    310c:	9c 83       	std	Y+4, r25	; 0x04
    310e:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x20;	/* R20 */
    3110:	eb 81       	ldd	r30, Y+3	; 0x03
    3112:	fc 81       	ldd	r31, Y+4	; 0x04
    3114:	80 e2       	ldi	r24, 0x20	; 32
    3116:	80 83       	st	Z, r24
	pxTopOfStack--;
    3118:	8b 81       	ldd	r24, Y+3	; 0x03
    311a:	9c 81       	ldd	r25, Y+4	; 0x04
    311c:	01 97       	sbiw	r24, 0x01	; 1
    311e:	9c 83       	std	Y+4, r25	; 0x04
    3120:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x21;	/* R21 */
    3122:	eb 81       	ldd	r30, Y+3	; 0x03
    3124:	fc 81       	ldd	r31, Y+4	; 0x04
    3126:	81 e2       	ldi	r24, 0x21	; 33
    3128:	80 83       	st	Z, r24
	pxTopOfStack--;
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	9c 81       	ldd	r25, Y+4	; 0x04
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	9c 83       	std	Y+4, r25	; 0x04
    3132:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x22;	/* R22 */
    3134:	eb 81       	ldd	r30, Y+3	; 0x03
    3136:	fc 81       	ldd	r31, Y+4	; 0x04
    3138:	82 e2       	ldi	r24, 0x22	; 34
    313a:	80 83       	st	Z, r24
	pxTopOfStack--;
    313c:	8b 81       	ldd	r24, Y+3	; 0x03
    313e:	9c 81       	ldd	r25, Y+4	; 0x04
    3140:	01 97       	sbiw	r24, 0x01	; 1
    3142:	9c 83       	std	Y+4, r25	; 0x04
    3144:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x23;	/* R23 */
    3146:	eb 81       	ldd	r30, Y+3	; 0x03
    3148:	fc 81       	ldd	r31, Y+4	; 0x04
    314a:	83 e2       	ldi	r24, 0x23	; 35
    314c:	80 83       	st	Z, r24
	pxTopOfStack--;
    314e:	8b 81       	ldd	r24, Y+3	; 0x03
    3150:	9c 81       	ldd	r25, Y+4	; 0x04
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	9c 83       	std	Y+4, r25	; 0x04
    3156:	8b 83       	std	Y+3, r24	; 0x03

	/* Place the parameter on the stack in the expected location. */
	usAddress = ( unsigned short ) pvParameters;
    3158:	8f 81       	ldd	r24, Y+7	; 0x07
    315a:	98 85       	ldd	r25, Y+8	; 0x08
    315c:	9a 83       	std	Y+2, r25	; 0x02
    315e:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    3160:	89 81       	ldd	r24, Y+1	; 0x01
    3162:	eb 81       	ldd	r30, Y+3	; 0x03
    3164:	fc 81       	ldd	r31, Y+4	; 0x04
    3166:	80 83       	st	Z, r24
	pxTopOfStack--;
    3168:	8b 81       	ldd	r24, Y+3	; 0x03
    316a:	9c 81       	ldd	r25, Y+4	; 0x04
    316c:	01 97       	sbiw	r24, 0x01	; 1
    316e:	9c 83       	std	Y+4, r25	; 0x04
    3170:	8b 83       	std	Y+3, r24	; 0x03

	usAddress >>= 8;
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	89 2f       	mov	r24, r25
    3178:	99 27       	eor	r25, r25
    317a:	9a 83       	std	Y+2, r25	; 0x02
    317c:	89 83       	std	Y+1, r24	; 0x01
	*pxTopOfStack = ( portSTACK_TYPE ) ( usAddress & ( unsigned short ) 0x00ff );
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	eb 81       	ldd	r30, Y+3	; 0x03
    3182:	fc 81       	ldd	r31, Y+4	; 0x04
    3184:	80 83       	st	Z, r24
	pxTopOfStack--;
    3186:	8b 81       	ldd	r24, Y+3	; 0x03
    3188:	9c 81       	ldd	r25, Y+4	; 0x04
    318a:	01 97       	sbiw	r24, 0x01	; 1
    318c:	9c 83       	std	Y+4, r25	; 0x04
    318e:	8b 83       	std	Y+3, r24	; 0x03

	*pxTopOfStack = ( portSTACK_TYPE ) 0x26;	/* R26 X */
    3190:	eb 81       	ldd	r30, Y+3	; 0x03
    3192:	fc 81       	ldd	r31, Y+4	; 0x04
    3194:	86 e2       	ldi	r24, 0x26	; 38
    3196:	80 83       	st	Z, r24
	pxTopOfStack--;
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	01 97       	sbiw	r24, 0x01	; 1
    319e:	9c 83       	std	Y+4, r25	; 0x04
    31a0:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x27;	/* R27 */
    31a2:	eb 81       	ldd	r30, Y+3	; 0x03
    31a4:	fc 81       	ldd	r31, Y+4	; 0x04
    31a6:	87 e2       	ldi	r24, 0x27	; 39
    31a8:	80 83       	st	Z, r24
	pxTopOfStack--;
    31aa:	8b 81       	ldd	r24, Y+3	; 0x03
    31ac:	9c 81       	ldd	r25, Y+4	; 0x04
    31ae:	01 97       	sbiw	r24, 0x01	; 1
    31b0:	9c 83       	std	Y+4, r25	; 0x04
    31b2:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x28;	/* R28 Y */
    31b4:	eb 81       	ldd	r30, Y+3	; 0x03
    31b6:	fc 81       	ldd	r31, Y+4	; 0x04
    31b8:	88 e2       	ldi	r24, 0x28	; 40
    31ba:	80 83       	st	Z, r24
	pxTopOfStack--;
    31bc:	8b 81       	ldd	r24, Y+3	; 0x03
    31be:	9c 81       	ldd	r25, Y+4	; 0x04
    31c0:	01 97       	sbiw	r24, 0x01	; 1
    31c2:	9c 83       	std	Y+4, r25	; 0x04
    31c4:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x29;	/* R29 */
    31c6:	eb 81       	ldd	r30, Y+3	; 0x03
    31c8:	fc 81       	ldd	r31, Y+4	; 0x04
    31ca:	89 e2       	ldi	r24, 0x29	; 41
    31cc:	80 83       	st	Z, r24
	pxTopOfStack--;
    31ce:	8b 81       	ldd	r24, Y+3	; 0x03
    31d0:	9c 81       	ldd	r25, Y+4	; 0x04
    31d2:	01 97       	sbiw	r24, 0x01	; 1
    31d4:	9c 83       	std	Y+4, r25	; 0x04
    31d6:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x30;	/* R30 Z */
    31d8:	eb 81       	ldd	r30, Y+3	; 0x03
    31da:	fc 81       	ldd	r31, Y+4	; 0x04
    31dc:	80 e3       	ldi	r24, 0x30	; 48
    31de:	80 83       	st	Z, r24
	pxTopOfStack--;
    31e0:	8b 81       	ldd	r24, Y+3	; 0x03
    31e2:	9c 81       	ldd	r25, Y+4	; 0x04
    31e4:	01 97       	sbiw	r24, 0x01	; 1
    31e6:	9c 83       	std	Y+4, r25	; 0x04
    31e8:	8b 83       	std	Y+3, r24	; 0x03
	*pxTopOfStack = ( portSTACK_TYPE ) 0x031;	/* R31 */
    31ea:	eb 81       	ldd	r30, Y+3	; 0x03
    31ec:	fc 81       	ldd	r31, Y+4	; 0x04
    31ee:	81 e3       	ldi	r24, 0x31	; 49
    31f0:	80 83       	st	Z, r24
	pxTopOfStack--;
    31f2:	8b 81       	ldd	r24, Y+3	; 0x03
    31f4:	9c 81       	ldd	r25, Y+4	; 0x04
    31f6:	01 97       	sbiw	r24, 0x01	; 1
    31f8:	9c 83       	std	Y+4, r25	; 0x04
    31fa:	8b 83       	std	Y+3, r24	; 0x03

	/*lint +e950 +e611 +e923 */

	return pxTopOfStack;
    31fc:	8b 81       	ldd	r24, Y+3	; 0x03
    31fe:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3200:	28 96       	adiw	r28, 0x08	; 8
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	cf 91       	pop	r28
    320e:	df 91       	pop	r29
    3210:	08 95       	ret

00003212 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

portBASE_TYPE xPortStartScheduler( void )
{
    3212:	df 93       	push	r29
    3214:	cf 93       	push	r28
    3216:	cd b7       	in	r28, 0x3d	; 61
    3218:	de b7       	in	r29, 0x3e	; 62
	/* Setup the hardware to generate the tick. */
	prvSetupTimerInterrupt();
    321a:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <prvSetupTimerInterrupt>

	/* Restore the context of the first task that is going to run. */
	portRESTORE_CONTEXT();
    321e:	a0 91 6e 04 	lds	r26, 0x046E
    3222:	b0 91 6f 04 	lds	r27, 0x046F
    3226:	cd 91       	ld	r28, X+
    3228:	cd bf       	out	0x3d, r28	; 61
    322a:	dd 91       	ld	r29, X+
    322c:	de bf       	out	0x3e, r29	; 62
    322e:	ff 91       	pop	r31
    3230:	ef 91       	pop	r30
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	bf 91       	pop	r27
    3238:	af 91       	pop	r26
    323a:	9f 91       	pop	r25
    323c:	8f 91       	pop	r24
    323e:	7f 91       	pop	r23
    3240:	6f 91       	pop	r22
    3242:	5f 91       	pop	r21
    3244:	4f 91       	pop	r20
    3246:	3f 91       	pop	r19
    3248:	2f 91       	pop	r18
    324a:	1f 91       	pop	r17
    324c:	0f 91       	pop	r16
    324e:	ff 90       	pop	r15
    3250:	ef 90       	pop	r14
    3252:	df 90       	pop	r13
    3254:	cf 90       	pop	r12
    3256:	bf 90       	pop	r11
    3258:	af 90       	pop	r10
    325a:	9f 90       	pop	r9
    325c:	8f 90       	pop	r8
    325e:	7f 90       	pop	r7
    3260:	6f 90       	pop	r6
    3262:	5f 90       	pop	r5
    3264:	4f 90       	pop	r4
    3266:	3f 90       	pop	r3
    3268:	2f 90       	pop	r2
    326a:	1f 90       	pop	r1
    326c:	0f 90       	pop	r0
    326e:	0f be       	out	0x3f, r0	; 63
    3270:	0f 90       	pop	r0

	/* Simulate a function call end as generated by the compiler.  We will now
	jump to the start of the task the context of which we have just restored. */
	asm volatile ( "ret" );
    3272:	08 95       	ret

	/* Should not get here. */
	return pdTRUE;
    3274:	81 e0       	ldi	r24, 0x01	; 1
}
    3276:	cf 91       	pop	r28
    3278:	df 91       	pop	r29
    327a:	08 95       	ret

0000327c <vPortEndScheduler>:
/*-----------------------------------------------------------*/

void vPortEndScheduler( void )
{
    327c:	df 93       	push	r29
    327e:	cf 93       	push	r28
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    328a:	0f 92       	push	r0
    328c:	0f b6       	in	r0, 0x3f	; 63
    328e:	f8 94       	cli
    3290:	0f 92       	push	r0
    3292:	1f 92       	push	r1
    3294:	11 24       	eor	r1, r1
    3296:	2f 92       	push	r2
    3298:	3f 92       	push	r3
    329a:	4f 92       	push	r4
    329c:	5f 92       	push	r5
    329e:	6f 92       	push	r6
    32a0:	7f 92       	push	r7
    32a2:	8f 92       	push	r8
    32a4:	9f 92       	push	r9
    32a6:	af 92       	push	r10
    32a8:	bf 92       	push	r11
    32aa:	cf 92       	push	r12
    32ac:	df 92       	push	r13
    32ae:	ef 92       	push	r14
    32b0:	ff 92       	push	r15
    32b2:	0f 93       	push	r16
    32b4:	1f 93       	push	r17
    32b6:	2f 93       	push	r18
    32b8:	3f 93       	push	r19
    32ba:	4f 93       	push	r20
    32bc:	5f 93       	push	r21
    32be:	6f 93       	push	r22
    32c0:	7f 93       	push	r23
    32c2:	8f 93       	push	r24
    32c4:	9f 93       	push	r25
    32c6:	af 93       	push	r26
    32c8:	bf 93       	push	r27
    32ca:	cf 93       	push	r28
    32cc:	df 93       	push	r29
    32ce:	ef 93       	push	r30
    32d0:	ff 93       	push	r31
    32d2:	a0 91 6e 04 	lds	r26, 0x046E
    32d6:	b0 91 6f 04 	lds	r27, 0x046F
    32da:	0d b6       	in	r0, 0x3d	; 61
    32dc:	0d 92       	st	X+, r0
    32de:	0e b6       	in	r0, 0x3e	; 62
    32e0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    32e2:	0e 94 da 22 	call	0x45b4	; 0x45b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    32e6:	a0 91 6e 04 	lds	r26, 0x046E
    32ea:	b0 91 6f 04 	lds	r27, 0x046F
    32ee:	cd 91       	ld	r28, X+
    32f0:	cd bf       	out	0x3d, r28	; 61
    32f2:	dd 91       	ld	r29, X+
    32f4:	de bf       	out	0x3e, r29	; 62
    32f6:	ff 91       	pop	r31
    32f8:	ef 91       	pop	r30
    32fa:	df 91       	pop	r29
    32fc:	cf 91       	pop	r28
    32fe:	bf 91       	pop	r27
    3300:	af 91       	pop	r26
    3302:	9f 91       	pop	r25
    3304:	8f 91       	pop	r24
    3306:	7f 91       	pop	r23
    3308:	6f 91       	pop	r22
    330a:	5f 91       	pop	r21
    330c:	4f 91       	pop	r20
    330e:	3f 91       	pop	r19
    3310:	2f 91       	pop	r18
    3312:	1f 91       	pop	r17
    3314:	0f 91       	pop	r16
    3316:	ff 90       	pop	r15
    3318:	ef 90       	pop	r14
    331a:	df 90       	pop	r13
    331c:	cf 90       	pop	r12
    331e:	bf 90       	pop	r11
    3320:	af 90       	pop	r10
    3322:	9f 90       	pop	r9
    3324:	8f 90       	pop	r8
    3326:	7f 90       	pop	r7
    3328:	6f 90       	pop	r6
    332a:	5f 90       	pop	r5
    332c:	4f 90       	pop	r4
    332e:	3f 90       	pop	r3
    3330:	2f 90       	pop	r2
    3332:	1f 90       	pop	r1
    3334:	0f 90       	pop	r0
    3336:	0f be       	out	0x3f, r0	; 63
    3338:	0f 90       	pop	r0

	asm volatile ( "ret" );
    333a:	08 95       	ret

0000333c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    333c:	0f 92       	push	r0
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	f8 94       	cli
    3342:	0f 92       	push	r0
    3344:	1f 92       	push	r1
    3346:	11 24       	eor	r1, r1
    3348:	2f 92       	push	r2
    334a:	3f 92       	push	r3
    334c:	4f 92       	push	r4
    334e:	5f 92       	push	r5
    3350:	6f 92       	push	r6
    3352:	7f 92       	push	r7
    3354:	8f 92       	push	r8
    3356:	9f 92       	push	r9
    3358:	af 92       	push	r10
    335a:	bf 92       	push	r11
    335c:	cf 92       	push	r12
    335e:	df 92       	push	r13
    3360:	ef 92       	push	r14
    3362:	ff 92       	push	r15
    3364:	0f 93       	push	r16
    3366:	1f 93       	push	r17
    3368:	2f 93       	push	r18
    336a:	3f 93       	push	r19
    336c:	4f 93       	push	r20
    336e:	5f 93       	push	r21
    3370:	6f 93       	push	r22
    3372:	7f 93       	push	r23
    3374:	8f 93       	push	r24
    3376:	9f 93       	push	r25
    3378:	af 93       	push	r26
    337a:	bf 93       	push	r27
    337c:	cf 93       	push	r28
    337e:	df 93       	push	r29
    3380:	ef 93       	push	r30
    3382:	ff 93       	push	r31
    3384:	a0 91 6e 04 	lds	r26, 0x046E
    3388:	b0 91 6f 04 	lds	r27, 0x046F
    338c:	0d b6       	in	r0, 0x3d	; 61
    338e:	0d 92       	st	X+, r0
    3390:	0e b6       	in	r0, 0x3e	; 62
    3392:	0d 92       	st	X+, r0
	vTaskIncrementTick();
    3394:	0e 94 05 22 	call	0x440a	; 0x440a <vTaskIncrementTick>
	vTaskSwitchContext();
    3398:	0e 94 da 22 	call	0x45b4	; 0x45b4 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    339c:	a0 91 6e 04 	lds	r26, 0x046E
    33a0:	b0 91 6f 04 	lds	r27, 0x046F
    33a4:	cd 91       	ld	r28, X+
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	dd 91       	ld	r29, X+
    33aa:	de bf       	out	0x3e, r29	; 62
    33ac:	ff 91       	pop	r31
    33ae:	ef 91       	pop	r30
    33b0:	df 91       	pop	r29
    33b2:	cf 91       	pop	r28
    33b4:	bf 91       	pop	r27
    33b6:	af 91       	pop	r26
    33b8:	9f 91       	pop	r25
    33ba:	8f 91       	pop	r24
    33bc:	7f 91       	pop	r23
    33be:	6f 91       	pop	r22
    33c0:	5f 91       	pop	r21
    33c2:	4f 91       	pop	r20
    33c4:	3f 91       	pop	r19
    33c6:	2f 91       	pop	r18
    33c8:	1f 91       	pop	r17
    33ca:	0f 91       	pop	r16
    33cc:	ff 90       	pop	r15
    33ce:	ef 90       	pop	r14
    33d0:	df 90       	pop	r13
    33d2:	cf 90       	pop	r12
    33d4:	bf 90       	pop	r11
    33d6:	af 90       	pop	r10
    33d8:	9f 90       	pop	r9
    33da:	8f 90       	pop	r8
    33dc:	7f 90       	pop	r7
    33de:	6f 90       	pop	r6
    33e0:	5f 90       	pop	r5
    33e2:	4f 90       	pop	r4
    33e4:	3f 90       	pop	r3
    33e6:	2f 90       	pop	r2
    33e8:	1f 90       	pop	r1
    33ea:	0f 90       	pop	r0
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	0f 90       	pop	r0

	asm volatile ( "ret" );
    33f0:	08 95       	ret

000033f2 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    33f2:	df 93       	push	r29
    33f4:	cf 93       	push	r28
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <prvSetupTimerInterrupt+0x6>
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <prvSetupTimerInterrupt+0x8>
    33fa:	00 d0       	rcall	.+0      	; 0x33fc <prvSetupTimerInterrupt+0xa>
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
unsigned char ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    3400:	80 e4       	ldi	r24, 0x40	; 64
    3402:	9f e1       	ldi	r25, 0x1F	; 31
    3404:	a0 e0       	ldi	r26, 0x00	; 0
    3406:	b0 e0       	ldi	r27, 0x00	; 0
    3408:	8b 83       	std	Y+3, r24	; 0x03
    340a:	9c 83       	std	Y+4, r25	; 0x04
    340c:	ad 83       	std	Y+5, r26	; 0x05
    340e:	be 83       	std	Y+6, r27	; 0x06

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    3410:	8b 81       	ldd	r24, Y+3	; 0x03
    3412:	9c 81       	ldd	r25, Y+4	; 0x04
    3414:	ad 81       	ldd	r26, Y+5	; 0x05
    3416:	be 81       	ldd	r27, Y+6	; 0x06
    3418:	68 94       	set
    341a:	15 f8       	bld	r1, 5
    341c:	b6 95       	lsr	r27
    341e:	a7 95       	ror	r26
    3420:	97 95       	ror	r25
    3422:	87 95       	ror	r24
    3424:	16 94       	lsr	r1
    3426:	d1 f7       	brne	.-12     	; 0x341c <prvSetupTimerInterrupt+0x2a>
    3428:	8b 83       	std	Y+3, r24	; 0x03
    342a:	9c 83       	std	Y+4, r25	; 0x04
    342c:	ad 83       	std	Y+5, r26	; 0x05
    342e:	be 83       	std	Y+6, r27	; 0x06

	/* Adjust for correct value. */
	ulCompareMatch -= ( unsigned long ) 1;
    3430:	8b 81       	ldd	r24, Y+3	; 0x03
    3432:	9c 81       	ldd	r25, Y+4	; 0x04
    3434:	ad 81       	ldd	r26, Y+5	; 0x05
    3436:	be 81       	ldd	r27, Y+6	; 0x06
    3438:	01 97       	sbiw	r24, 0x01	; 1
    343a:	a1 09       	sbc	r26, r1
    343c:	b1 09       	sbc	r27, r1
    343e:	8b 83       	std	Y+3, r24	; 0x03
    3440:	9c 83       	std	Y+4, r25	; 0x04
    3442:	ad 83       	std	Y+5, r26	; 0x05
    3444:	be 83       	std	Y+6, r27	; 0x06

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    3446:	8b 81       	ldd	r24, Y+3	; 0x03
    3448:	89 83       	std	Y+1, r24	; 0x01
	ulCompareMatch >>= 8;
    344a:	8b 81       	ldd	r24, Y+3	; 0x03
    344c:	9c 81       	ldd	r25, Y+4	; 0x04
    344e:	ad 81       	ldd	r26, Y+5	; 0x05
    3450:	be 81       	ldd	r27, Y+6	; 0x06
    3452:	89 2f       	mov	r24, r25
    3454:	9a 2f       	mov	r25, r26
    3456:	ab 2f       	mov	r26, r27
    3458:	bb 27       	eor	r27, r27
    345a:	8b 83       	std	Y+3, r24	; 0x03
    345c:	9c 83       	std	Y+4, r25	; 0x04
    345e:	ad 83       	std	Y+5, r26	; 0x05
    3460:	be 83       	std	Y+6, r27	; 0x06
	ucHighByte = ( unsigned char ) ( ulCompareMatch & ( unsigned long ) 0xff );
    3462:	8b 81       	ldd	r24, Y+3	; 0x03
    3464:	8a 83       	std	Y+2, r24	; 0x02
	OCR1AH = ucHighByte;
    3466:	eb e4       	ldi	r30, 0x4B	; 75
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	8a 81       	ldd	r24, Y+2	; 0x02
    346c:	80 83       	st	Z, r24
	OCR1AL = ucLowByte;
    346e:	ea e4       	ldi	r30, 0x4A	; 74
    3470:	f0 e0       	ldi	r31, 0x00	; 0
    3472:	89 81       	ldd	r24, Y+1	; 0x01
    3474:	80 83       	st	Z, r24

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    3476:	8b e0       	ldi	r24, 0x0B	; 11
    3478:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B = ucLowByte;
    347a:	ee e4       	ldi	r30, 0x4E	; 78
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	89 81       	ldd	r24, Y+1	; 0x01
    3480:	80 83       	st	Z, r24

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK;
    3482:	e9 e5       	ldi	r30, 0x59	; 89
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	80 81       	ld	r24, Z
    3488:	89 83       	std	Y+1, r24	; 0x01
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    348a:	89 81       	ldd	r24, Y+1	; 0x01
    348c:	80 61       	ori	r24, 0x10	; 16
    348e:	89 83       	std	Y+1, r24	; 0x01
	TIMSK = ucLowByte;
    3490:	e9 e5       	ldi	r30, 0x59	; 89
    3492:	f0 e0       	ldi	r31, 0x00	; 0
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	80 83       	st	Z, r24
}
    3498:	26 96       	adiw	r28, 0x06	; 6
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <__vector_7>:
	 * tick count.  We don't need to switch context, this can only be done by
	 * manual calls to taskYIELD();
	 */
	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal ) );
	void SIG_OUTPUT_COMPARE1A( void )
	{
    34aa:	1f 92       	push	r1
    34ac:	0f 92       	push	r0
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	0f 92       	push	r0
    34b2:	11 24       	eor	r1, r1
    34b4:	2f 93       	push	r18
    34b6:	3f 93       	push	r19
    34b8:	4f 93       	push	r20
    34ba:	5f 93       	push	r21
    34bc:	6f 93       	push	r22
    34be:	7f 93       	push	r23
    34c0:	8f 93       	push	r24
    34c2:	9f 93       	push	r25
    34c4:	af 93       	push	r26
    34c6:	bf 93       	push	r27
    34c8:	ef 93       	push	r30
    34ca:	ff 93       	push	r31
    34cc:	df 93       	push	r29
    34ce:	cf 93       	push	r28
    34d0:	cd b7       	in	r28, 0x3d	; 61
    34d2:	de b7       	in	r29, 0x3e	; 62
		vTaskIncrementTick();
    34d4:	0e 94 05 22 	call	0x440a	; 0x440a <vTaskIncrementTick>
	}
    34d8:	cf 91       	pop	r28
    34da:	df 91       	pop	r29
    34dc:	ff 91       	pop	r31
    34de:	ef 91       	pop	r30
    34e0:	bf 91       	pop	r27
    34e2:	af 91       	pop	r26
    34e4:	9f 91       	pop	r25
    34e6:	8f 91       	pop	r24
    34e8:	7f 91       	pop	r23
    34ea:	6f 91       	pop	r22
    34ec:	5f 91       	pop	r21
    34ee:	4f 91       	pop	r20
    34f0:	3f 91       	pop	r19
    34f2:	2f 91       	pop	r18
    34f4:	0f 90       	pop	r0
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	0f 90       	pop	r0
    34fa:	1f 90       	pop	r1
    34fc:	18 95       	reti

000034fe <xQueueCreate>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

xQueueHandle xQueueCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize )
{
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	28 97       	sbiw	r28, 0x08	; 8
    3508:	0f b6       	in	r0, 0x3f	; 63
    350a:	f8 94       	cli
    350c:	de bf       	out	0x3e, r29	; 62
    350e:	0f be       	out	0x3f, r0	; 63
    3510:	cd bf       	out	0x3d, r28	; 61
    3512:	8f 83       	std	Y+7, r24	; 0x07
    3514:	68 87       	std	Y+8, r22	; 0x08
xQUEUE *pxNewQueue;
size_t xQueueSizeInBytes;
xQueueHandle xReturn = NULL;
    3516:	1a 82       	std	Y+2, r1	; 0x02
    3518:	19 82       	std	Y+1, r1	; 0x01

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
    351a:	8f 81       	ldd	r24, Y+7	; 0x07
    351c:	88 23       	and	r24, r24
    351e:	09 f4       	brne	.+2      	; 0x3522 <xQueueCreate+0x24>
    3520:	8c c0       	rjmp	.+280    	; 0x363a <xQueueCreate+0x13c>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
    3522:	8f e1       	ldi	r24, 0x1F	; 31
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    352a:	9e 83       	std	Y+6, r25	; 0x06
    352c:	8d 83       	std	Y+5, r24	; 0x05
		if( pxNewQueue != NULL )
    352e:	8d 81       	ldd	r24, Y+5	; 0x05
    3530:	9e 81       	ldd	r25, Y+6	; 0x06
    3532:	00 97       	sbiw	r24, 0x00	; 0
    3534:	09 f4       	brne	.+2      	; 0x3538 <xQueueCreate+0x3a>
    3536:	81 c0       	rjmp	.+258    	; 0x363a <xQueueCreate+0x13c>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
    3538:	8f 81       	ldd	r24, Y+7	; 0x07
    353a:	28 2f       	mov	r18, r24
    353c:	30 e0       	ldi	r19, 0x00	; 0
    353e:	88 85       	ldd	r24, Y+8	; 0x08
    3540:	88 2f       	mov	r24, r24
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	ac 01       	movw	r20, r24
    3546:	24 9f       	mul	r18, r20
    3548:	c0 01       	movw	r24, r0
    354a:	25 9f       	mul	r18, r21
    354c:	90 0d       	add	r25, r0
    354e:	34 9f       	mul	r19, r20
    3550:	90 0d       	add	r25, r0
    3552:	11 24       	eor	r1, r1
    3554:	01 96       	adiw	r24, 0x01	; 1
    3556:	9c 83       	std	Y+4, r25	; 0x04
    3558:	8b 83       	std	Y+3, r24	; 0x03

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
    355a:	8b 81       	ldd	r24, Y+3	; 0x03
    355c:	9c 81       	ldd	r25, Y+4	; 0x04
    355e:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    3562:	ed 81       	ldd	r30, Y+5	; 0x05
    3564:	fe 81       	ldd	r31, Y+6	; 0x06
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	80 83       	st	Z, r24
			if( pxNewQueue->pcHead != NULL )
    356a:	ed 81       	ldd	r30, Y+5	; 0x05
    356c:	fe 81       	ldd	r31, Y+6	; 0x06
    356e:	80 81       	ld	r24, Z
    3570:	91 81       	ldd	r25, Z+1	; 0x01
    3572:	00 97       	sbiw	r24, 0x00	; 0
    3574:	09 f4       	brne	.+2      	; 0x3578 <xQueueCreate+0x7a>
    3576:	5d c0       	rjmp	.+186    	; 0x3632 <xQueueCreate+0x134>
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->pcTail = pxNewQueue->pcHead + ( uxQueueLength * uxItemSize );
    3578:	ed 81       	ldd	r30, Y+5	; 0x05
    357a:	fe 81       	ldd	r31, Y+6	; 0x06
    357c:	40 81       	ld	r20, Z
    357e:	51 81       	ldd	r21, Z+1	; 0x01
    3580:	8f 81       	ldd	r24, Y+7	; 0x07
    3582:	28 2f       	mov	r18, r24
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	88 85       	ldd	r24, Y+8	; 0x08
    3588:	88 2f       	mov	r24, r24
    358a:	90 e0       	ldi	r25, 0x00	; 0
    358c:	bc 01       	movw	r22, r24
    358e:	26 9f       	mul	r18, r22
    3590:	c0 01       	movw	r24, r0
    3592:	27 9f       	mul	r18, r23
    3594:	90 0d       	add	r25, r0
    3596:	36 9f       	mul	r19, r22
    3598:	90 0d       	add	r25, r0
    359a:	11 24       	eor	r1, r1
    359c:	84 0f       	add	r24, r20
    359e:	95 1f       	adc	r25, r21
    35a0:	ed 81       	ldd	r30, Y+5	; 0x05
    35a2:	fe 81       	ldd	r31, Y+6	; 0x06
    35a4:	93 83       	std	Z+3, r25	; 0x03
    35a6:	82 83       	std	Z+2, r24	; 0x02
				pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
    35a8:	ed 81       	ldd	r30, Y+5	; 0x05
    35aa:	fe 81       	ldd	r31, Y+6	; 0x06
    35ac:	12 8e       	std	Z+26, r1	; 0x1a
				pxNewQueue->pcWriteTo = pxNewQueue->pcHead;
    35ae:	ed 81       	ldd	r30, Y+5	; 0x05
    35b0:	fe 81       	ldd	r31, Y+6	; 0x06
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	ed 81       	ldd	r30, Y+5	; 0x05
    35b8:	fe 81       	ldd	r31, Y+6	; 0x06
    35ba:	95 83       	std	Z+5, r25	; 0x05
    35bc:	84 83       	std	Z+4, r24	; 0x04
				pxNewQueue->pcReadFrom = pxNewQueue->pcHead + ( ( uxQueueLength - ( unsigned portBASE_TYPE ) 1U ) * uxItemSize );
    35be:	ed 81       	ldd	r30, Y+5	; 0x05
    35c0:	fe 81       	ldd	r31, Y+6	; 0x06
    35c2:	40 81       	ld	r20, Z
    35c4:	51 81       	ldd	r21, Z+1	; 0x01
    35c6:	8f 81       	ldd	r24, Y+7	; 0x07
    35c8:	88 2f       	mov	r24, r24
    35ca:	90 e0       	ldi	r25, 0x00	; 0
    35cc:	9c 01       	movw	r18, r24
    35ce:	21 50       	subi	r18, 0x01	; 1
    35d0:	30 40       	sbci	r19, 0x00	; 0
    35d2:	88 85       	ldd	r24, Y+8	; 0x08
    35d4:	88 2f       	mov	r24, r24
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	bc 01       	movw	r22, r24
    35da:	26 9f       	mul	r18, r22
    35dc:	c0 01       	movw	r24, r0
    35de:	27 9f       	mul	r18, r23
    35e0:	90 0d       	add	r25, r0
    35e2:	36 9f       	mul	r19, r22
    35e4:	90 0d       	add	r25, r0
    35e6:	11 24       	eor	r1, r1
    35e8:	84 0f       	add	r24, r20
    35ea:	95 1f       	adc	r25, r21
    35ec:	ed 81       	ldd	r30, Y+5	; 0x05
    35ee:	fe 81       	ldd	r31, Y+6	; 0x06
    35f0:	97 83       	std	Z+7, r25	; 0x07
    35f2:	86 83       	std	Z+6, r24	; 0x06
				pxNewQueue->uxLength = uxQueueLength;
    35f4:	ed 81       	ldd	r30, Y+5	; 0x05
    35f6:	fe 81       	ldd	r31, Y+6	; 0x06
    35f8:	8f 81       	ldd	r24, Y+7	; 0x07
    35fa:	83 8f       	std	Z+27, r24	; 0x1b
				pxNewQueue->uxItemSize = uxItemSize;
    35fc:	ed 81       	ldd	r30, Y+5	; 0x05
    35fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3600:	88 85       	ldd	r24, Y+8	; 0x08
    3602:	84 8f       	std	Z+28, r24	; 0x1c
				pxNewQueue->xRxLock = queueUNLOCKED;
    3604:	ed 81       	ldd	r30, Y+5	; 0x05
    3606:	fe 81       	ldd	r31, Y+6	; 0x06
    3608:	8f ef       	ldi	r24, 0xFF	; 255
    360a:	85 8f       	std	Z+29, r24	; 0x1d
				pxNewQueue->xTxLock = queueUNLOCKED;
    360c:	ed 81       	ldd	r30, Y+5	; 0x05
    360e:	fe 81       	ldd	r31, Y+6	; 0x06
    3610:	8f ef       	ldi	r24, 0xFF	; 255
    3612:	86 8f       	std	Z+30, r24	; 0x1e

				/* Likewise ensure the event queues start with the correct state. */
				vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
    3614:	8d 81       	ldd	r24, Y+5	; 0x05
    3616:	9e 81       	ldd	r25, Y+6	; 0x06
    3618:	08 96       	adiw	r24, 0x08	; 8
    361a:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
				vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
    361e:	8d 81       	ldd	r24, Y+5	; 0x05
    3620:	9e 81       	ldd	r25, Y+6	; 0x06
    3622:	41 96       	adiw	r24, 0x11	; 17
    3624:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

				traceQUEUE_CREATE( pxNewQueue );
				xReturn = pxNewQueue;
    3628:	8d 81       	ldd	r24, Y+5	; 0x05
    362a:	9e 81       	ldd	r25, Y+6	; 0x06
    362c:	9a 83       	std	Y+2, r25	; 0x02
    362e:	89 83       	std	Y+1, r24	; 0x01
    3630:	04 c0       	rjmp	.+8      	; 0x363a <xQueueCreate+0x13c>
			}
			else
			{
				traceQUEUE_CREATE_FAILED();
				vPortFree( pxNewQueue );
    3632:	8d 81       	ldd	r24, Y+5	; 0x05
    3634:	9e 81       	ldd	r25, Y+6	; 0x06
    3636:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
		}
	}

	configASSERT( xReturn );

	return xReturn;
    363a:	89 81       	ldd	r24, Y+1	; 0x01
    363c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    363e:	28 96       	adiw	r28, 0x08	; 8
    3640:	0f b6       	in	r0, 0x3f	; 63
    3642:	f8 94       	cli
    3644:	de bf       	out	0x3e, r29	; 62
    3646:	0f be       	out	0x3f, r0	; 63
    3648:	cd bf       	out	0x3d, r28	; 61
    364a:	cf 91       	pop	r28
    364c:	df 91       	pop	r29
    364e:	08 95       	ret

00003650 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
    3650:	df 93       	push	r29
    3652:	cf 93       	push	r28
    3654:	cd b7       	in	r28, 0x3d	; 61
    3656:	de b7       	in	r29, 0x3e	; 62
    3658:	2c 97       	sbiw	r28, 0x0c	; 12
    365a:	0f b6       	in	r0, 0x3f	; 63
    365c:	f8 94       	cli
    365e:	de bf       	out	0x3e, r29	; 62
    3660:	0f be       	out	0x3f, r0	; 63
    3662:	cd bf       	out	0x3d, r28	; 61
    3664:	9e 83       	std	Y+6, r25	; 0x06
    3666:	8d 83       	std	Y+5, r24	; 0x05
    3668:	78 87       	std	Y+8, r23	; 0x08
    366a:	6f 83       	std	Y+7, r22	; 0x07
    366c:	5a 87       	std	Y+10, r21	; 0x0a
    366e:	49 87       	std	Y+9, r20	; 0x09
    3670:	2b 87       	std	Y+11, r18	; 0x0b
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3672:	19 82       	std	Y+1, r1	; 0x01
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
    3674:	0f b6       	in	r0, 0x3f	; 63
    3676:	f8 94       	cli
    3678:	0f 92       	push	r0
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    367a:	ed 81       	ldd	r30, Y+5	; 0x05
    367c:	fe 81       	ldd	r31, Y+6	; 0x06
    367e:	92 8d       	ldd	r25, Z+26	; 0x1a
    3680:	ed 81       	ldd	r30, Y+5	; 0x05
    3682:	fe 81       	ldd	r31, Y+6	; 0x06
    3684:	83 8d       	ldd	r24, Z+27	; 0x1b
    3686:	98 17       	cp	r25, r24
    3688:	d8 f4       	brcc	.+54     	; 0x36c0 <xQueueGenericSend+0x70>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    368a:	8d 81       	ldd	r24, Y+5	; 0x05
    368c:	9e 81       	ldd	r25, Y+6	; 0x06
    368e:	2f 81       	ldd	r18, Y+7	; 0x07
    3690:	38 85       	ldd	r19, Y+8	; 0x08
    3692:	b9 01       	movw	r22, r18
    3694:	4b 85       	ldd	r20, Y+11	; 0x0b
    3696:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <prvCopyDataToQueue>

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    369a:	ed 81       	ldd	r30, Y+5	; 0x05
    369c:	fe 81       	ldd	r31, Y+6	; 0x06
    369e:	81 89       	ldd	r24, Z+17	; 0x11
    36a0:	88 23       	and	r24, r24
    36a2:	49 f0       	breq	.+18     	; 0x36b6 <xQueueGenericSend+0x66>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
    36a4:	8d 81       	ldd	r24, Y+5	; 0x05
    36a6:	9e 81       	ldd	r25, Y+6	; 0x06
    36a8:	41 96       	adiw	r24, 0x11	; 17
    36aa:	0e 94 76 23 	call	0x46ec	; 0x46ec <xTaskRemoveFromEventList>
    36ae:	81 30       	cpi	r24, 0x01	; 1
    36b0:	11 f4       	brne	.+4      	; 0x36b6 <xQueueGenericSend+0x66>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
    36b2:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
					}
				}

				taskEXIT_CRITICAL();
    36b6:	0f 90       	pop	r0
    36b8:	0f be       	out	0x3f, r0	; 63

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	8c 87       	std	Y+12, r24	; 0x0c
    36be:	5c c0       	rjmp	.+184    	; 0x3778 <xQueueGenericSend+0x128>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    36c0:	89 85       	ldd	r24, Y+9	; 0x09
    36c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    36c4:	00 97       	sbiw	r24, 0x00	; 0
    36c6:	21 f4       	brne	.+8      	; 0x36d0 <xQueueGenericSend+0x80>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    36c8:	0f 90       	pop	r0
    36ca:	0f be       	out	0x3f, r0	; 63

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
    36cc:	1c 86       	std	Y+12, r1	; 0x0c
    36ce:	54 c0       	rjmp	.+168    	; 0x3778 <xQueueGenericSend+0x128>
				}
				else if( xEntryTimeSet == pdFALSE )
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	88 23       	and	r24, r24
    36d4:	31 f4       	brne	.+12     	; 0x36e2 <xQueueGenericSend+0x92>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    36d6:	ce 01       	movw	r24, r28
    36d8:	02 96       	adiw	r24, 0x02	; 2
    36da:	0e 94 de 23 	call	0x47bc	; 0x47bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    36de:	81 e0       	ldi	r24, 0x01	; 1
    36e0:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
		taskEXIT_CRITICAL();
    36e2:	0f 90       	pop	r0
    36e4:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    36e6:	0e 94 3c 21 	call	0x4278	; 0x4278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    36ea:	0f b6       	in	r0, 0x3f	; 63
    36ec:	f8 94       	cli
    36ee:	0f 92       	push	r0
    36f0:	ed 81       	ldd	r30, Y+5	; 0x05
    36f2:	fe 81       	ldd	r31, Y+6	; 0x06
    36f4:	85 8d       	ldd	r24, Z+29	; 0x1d
    36f6:	8f 3f       	cpi	r24, 0xFF	; 255
    36f8:	19 f4       	brne	.+6      	; 0x3700 <xQueueGenericSend+0xb0>
    36fa:	ed 81       	ldd	r30, Y+5	; 0x05
    36fc:	fe 81       	ldd	r31, Y+6	; 0x06
    36fe:	15 8e       	std	Z+29, r1	; 0x1d
    3700:	ed 81       	ldd	r30, Y+5	; 0x05
    3702:	fe 81       	ldd	r31, Y+6	; 0x06
    3704:	86 8d       	ldd	r24, Z+30	; 0x1e
    3706:	8f 3f       	cpi	r24, 0xFF	; 255
    3708:	19 f4       	brne	.+6      	; 0x3710 <xQueueGenericSend+0xc0>
    370a:	ed 81       	ldd	r30, Y+5	; 0x05
    370c:	fe 81       	ldd	r31, Y+6	; 0x06
    370e:	16 8e       	std	Z+30, r1	; 0x1e
    3710:	0f 90       	pop	r0
    3712:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    3714:	ce 01       	movw	r24, r28
    3716:	02 96       	adiw	r24, 0x02	; 2
    3718:	9e 01       	movw	r18, r28
    371a:	27 5f       	subi	r18, 0xF7	; 247
    371c:	3f 4f       	sbci	r19, 0xFF	; 255
    371e:	b9 01       	movw	r22, r18
    3720:	0e 94 f7 23 	call	0x47ee	; 0x47ee <xTaskCheckForTimeOut>
    3724:	88 23       	and	r24, r24
    3726:	09 f5       	brne	.+66     	; 0x376a <xQueueGenericSend+0x11a>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
    3728:	8d 81       	ldd	r24, Y+5	; 0x05
    372a:	9e 81       	ldd	r25, Y+6	; 0x06
    372c:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <prvIsQueueFull>
    3730:	88 23       	and	r24, r24
    3732:	a1 f0       	breq	.+40     	; 0x375c <xQueueGenericSend+0x10c>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
    3734:	8d 81       	ldd	r24, Y+5	; 0x05
    3736:	9e 81       	ldd	r25, Y+6	; 0x06
    3738:	08 96       	adiw	r24, 0x08	; 8
    373a:	29 85       	ldd	r18, Y+9	; 0x09
    373c:	3a 85       	ldd	r19, Y+10	; 0x0a
    373e:	b9 01       	movw	r22, r18
    3740:	0e 94 40 23 	call	0x4680	; 0x4680 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
    3744:	8d 81       	ldd	r24, Y+5	; 0x05
    3746:	9e 81       	ldd	r25, Y+6	; 0x06
    3748:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
    374c:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>
    3750:	88 23       	and	r24, r24
    3752:	09 f0       	breq	.+2      	; 0x3756 <xQueueGenericSend+0x106>
    3754:	8f cf       	rjmp	.-226    	; 0x3674 <xQueueGenericSend+0x24>
				{
					portYIELD_WITHIN_API();
    3756:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
    375a:	8c cf       	rjmp	.-232    	; 0x3674 <xQueueGenericSend+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    375c:	8d 81       	ldd	r24, Y+5	; 0x05
    375e:	9e 81       	ldd	r25, Y+6	; 0x06
    3760:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    3764:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>
    3768:	85 cf       	rjmp	.-246    	; 0x3674 <xQueueGenericSend+0x24>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
    376a:	8d 81       	ldd	r24, Y+5	; 0x05
    376c:	9e 81       	ldd	r25, Y+6	; 0x06
    376e:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    3772:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
    3776:	1c 86       	std	Y+12, r1	; 0x0c
    3778:	8c 85       	ldd	r24, Y+12	; 0x0c
		}
	}
}
    377a:	2c 96       	adiw	r28, 0x0c	; 12
    377c:	0f b6       	in	r0, 0x3f	; 63
    377e:	f8 94       	cli
    3780:	de bf       	out	0x3e, r29	; 62
    3782:	0f be       	out	0x3f, r0	; 63
    3784:	cd bf       	out	0x3d, r28	; 61
    3786:	cf 91       	pop	r28
    3788:	df 91       	pop	r29
    378a:	08 95       	ret

0000378c <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
    378c:	df 93       	push	r29
    378e:	cf 93       	push	r28
    3790:	cd b7       	in	r28, 0x3d	; 61
    3792:	de b7       	in	r29, 0x3e	; 62
    3794:	29 97       	sbiw	r28, 0x09	; 9
    3796:	0f b6       	in	r0, 0x3f	; 63
    3798:	f8 94       	cli
    379a:	de bf       	out	0x3e, r29	; 62
    379c:	0f be       	out	0x3f, r0	; 63
    379e:	cd bf       	out	0x3d, r28	; 61
    37a0:	9c 83       	std	Y+4, r25	; 0x04
    37a2:	8b 83       	std	Y+3, r24	; 0x03
    37a4:	7e 83       	std	Y+6, r23	; 0x06
    37a6:	6d 83       	std	Y+5, r22	; 0x05
    37a8:	58 87       	std	Y+8, r21	; 0x08
    37aa:	4f 83       	std	Y+7, r20	; 0x07
    37ac:	29 87       	std	Y+9, r18	; 0x09
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    37ae:	19 82       	std	Y+1, r1	; 0x01
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
    37b0:	eb 81       	ldd	r30, Y+3	; 0x03
    37b2:	fc 81       	ldd	r31, Y+4	; 0x04
    37b4:	92 8d       	ldd	r25, Z+26	; 0x1a
    37b6:	eb 81       	ldd	r30, Y+3	; 0x03
    37b8:	fc 81       	ldd	r31, Y+4	; 0x04
    37ba:	83 8d       	ldd	r24, Z+27	; 0x1b
    37bc:	98 17       	cp	r25, r24
    37be:	40 f5       	brcc	.+80     	; 0x3810 <xQueueGenericSendFromISR+0x84>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
    37c0:	8b 81       	ldd	r24, Y+3	; 0x03
    37c2:	9c 81       	ldd	r25, Y+4	; 0x04
    37c4:	2d 81       	ldd	r18, Y+5	; 0x05
    37c6:	3e 81       	ldd	r19, Y+6	; 0x06
    37c8:	b9 01       	movw	r22, r18
    37ca:	49 85       	ldd	r20, Y+9	; 0x09
    37cc:	0e 94 63 1d 	call	0x3ac6	; 0x3ac6 <prvCopyDataToQueue>

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
    37d0:	eb 81       	ldd	r30, Y+3	; 0x03
    37d2:	fc 81       	ldd	r31, Y+4	; 0x04
    37d4:	86 8d       	ldd	r24, Z+30	; 0x1e
    37d6:	8f 3f       	cpi	r24, 0xFF	; 255
    37d8:	89 f4       	brne	.+34     	; 0x37fc <xQueueGenericSendFromISR+0x70>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    37da:	eb 81       	ldd	r30, Y+3	; 0x03
    37dc:	fc 81       	ldd	r31, Y+4	; 0x04
    37de:	81 89       	ldd	r24, Z+17	; 0x11
    37e0:	88 23       	and	r24, r24
    37e2:	99 f0       	breq	.+38     	; 0x380a <xQueueGenericSendFromISR+0x7e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	9c 81       	ldd	r25, Y+4	; 0x04
    37e8:	41 96       	adiw	r24, 0x11	; 17
    37ea:	0e 94 76 23 	call	0x46ec	; 0x46ec <xTaskRemoveFromEventList>
    37ee:	88 23       	and	r24, r24
    37f0:	61 f0       	breq	.+24     	; 0x380a <xQueueGenericSendFromISR+0x7e>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						*pxHigherPriorityTaskWoken = pdTRUE;
    37f2:	ef 81       	ldd	r30, Y+7	; 0x07
    37f4:	f8 85       	ldd	r31, Y+8	; 0x08
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	80 83       	st	Z, r24
    37fa:	07 c0       	rjmp	.+14     	; 0x380a <xQueueGenericSendFromISR+0x7e>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
    37fc:	eb 81       	ldd	r30, Y+3	; 0x03
    37fe:	fc 81       	ldd	r31, Y+4	; 0x04
    3800:	86 8d       	ldd	r24, Z+30	; 0x1e
    3802:	8f 5f       	subi	r24, 0xFF	; 255
    3804:	eb 81       	ldd	r30, Y+3	; 0x03
    3806:	fc 81       	ldd	r31, Y+4	; 0x04
    3808:	86 8f       	std	Z+30, r24	; 0x1e
			}

			xReturn = pdPASS;
    380a:	81 e0       	ldi	r24, 0x01	; 1
    380c:	8a 83       	std	Y+2, r24	; 0x02
    380e:	01 c0       	rjmp	.+2      	; 0x3812 <xQueueGenericSendFromISR+0x86>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
    3810:	1a 82       	std	Y+2, r1	; 0x02
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3812:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3814:	29 96       	adiw	r28, 0x09	; 9
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	cf 91       	pop	r28
    3822:	df 91       	pop	r29
    3824:	08 95       	ret

00003826 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
    3826:	df 93       	push	r29
    3828:	cf 93       	push	r28
    382a:	cd b7       	in	r28, 0x3d	; 61
    382c:	de b7       	in	r29, 0x3e	; 62
    382e:	2e 97       	sbiw	r28, 0x0e	; 14
    3830:	0f b6       	in	r0, 0x3f	; 63
    3832:	f8 94       	cli
    3834:	de bf       	out	0x3e, r29	; 62
    3836:	0f be       	out	0x3f, r0	; 63
    3838:	cd bf       	out	0x3d, r28	; 61
    383a:	98 87       	std	Y+8, r25	; 0x08
    383c:	8f 83       	std	Y+7, r24	; 0x07
    383e:	7a 87       	std	Y+10, r23	; 0x0a
    3840:	69 87       	std	Y+9, r22	; 0x09
    3842:	5c 87       	std	Y+12, r21	; 0x0c
    3844:	4b 87       	std	Y+11, r20	; 0x0b
    3846:	2d 87       	std	Y+13, r18	; 0x0d
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
    3848:	1b 82       	std	Y+3, r1	; 0x03
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
    384a:	0f b6       	in	r0, 0x3f	; 63
    384c:	f8 94       	cli
    384e:	0f 92       	push	r0
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    3850:	ef 81       	ldd	r30, Y+7	; 0x07
    3852:	f8 85       	ldd	r31, Y+8	; 0x08
    3854:	82 8d       	ldd	r24, Z+26	; 0x1a
    3856:	88 23       	and	r24, r24
    3858:	09 f4       	brne	.+2      	; 0x385c <xQueueGenericReceive+0x36>
    385a:	3f c0       	rjmp	.+126    	; 0x38da <xQueueGenericReceive+0xb4>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
    385c:	ef 81       	ldd	r30, Y+7	; 0x07
    385e:	f8 85       	ldd	r31, Y+8	; 0x08
    3860:	86 81       	ldd	r24, Z+6	; 0x06
    3862:	97 81       	ldd	r25, Z+7	; 0x07
    3864:	9a 83       	std	Y+2, r25	; 0x02
    3866:	89 83       	std	Y+1, r24	; 0x01

				prvCopyDataFromQueue( pxQueue, pvBuffer );
    3868:	8f 81       	ldd	r24, Y+7	; 0x07
    386a:	98 85       	ldd	r25, Y+8	; 0x08
    386c:	29 85       	ldd	r18, Y+9	; 0x09
    386e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3870:	b9 01       	movw	r22, r18
    3872:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
    3876:	8d 85       	ldd	r24, Y+13	; 0x0d
    3878:	88 23       	and	r24, r24
    387a:	b1 f4       	brne	.+44     	; 0x38a8 <xQueueGenericReceive+0x82>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
    387c:	ef 81       	ldd	r30, Y+7	; 0x07
    387e:	f8 85       	ldd	r31, Y+8	; 0x08
    3880:	82 8d       	ldd	r24, Z+26	; 0x1a
    3882:	81 50       	subi	r24, 0x01	; 1
    3884:	ef 81       	ldd	r30, Y+7	; 0x07
    3886:	f8 85       	ldd	r31, Y+8	; 0x08
    3888:	82 8f       	std	Z+26, r24	; 0x1a
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    388a:	ef 81       	ldd	r30, Y+7	; 0x07
    388c:	f8 85       	ldd	r31, Y+8	; 0x08
    388e:	80 85       	ldd	r24, Z+8	; 0x08
    3890:	88 23       	and	r24, r24
    3892:	f1 f0       	breq	.+60     	; 0x38d0 <xQueueGenericReceive+0xaa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
    3894:	8f 81       	ldd	r24, Y+7	; 0x07
    3896:	98 85       	ldd	r25, Y+8	; 0x08
    3898:	08 96       	adiw	r24, 0x08	; 8
    389a:	0e 94 76 23 	call	0x46ec	; 0x46ec <xTaskRemoveFromEventList>
    389e:	81 30       	cpi	r24, 0x01	; 1
    38a0:	b9 f4       	brne	.+46     	; 0x38d0 <xQueueGenericReceive+0xaa>
						{
							portYIELD_WITHIN_API();
    38a2:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
    38a6:	14 c0       	rjmp	.+40     	; 0x38d0 <xQueueGenericReceive+0xaa>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
    38a8:	ef 81       	ldd	r30, Y+7	; 0x07
    38aa:	f8 85       	ldd	r31, Y+8	; 0x08
    38ac:	89 81       	ldd	r24, Y+1	; 0x01
    38ae:	9a 81       	ldd	r25, Y+2	; 0x02
    38b0:	97 83       	std	Z+7, r25	; 0x07
    38b2:	86 83       	std	Z+6, r24	; 0x06

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    38b4:	ef 81       	ldd	r30, Y+7	; 0x07
    38b6:	f8 85       	ldd	r31, Y+8	; 0x08
    38b8:	81 89       	ldd	r24, Z+17	; 0x11
    38ba:	88 23       	and	r24, r24
    38bc:	49 f0       	breq	.+18     	; 0x38d0 <xQueueGenericReceive+0xaa>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    38be:	8f 81       	ldd	r24, Y+7	; 0x07
    38c0:	98 85       	ldd	r25, Y+8	; 0x08
    38c2:	41 96       	adiw	r24, 0x11	; 17
    38c4:	0e 94 76 23 	call	0x46ec	; 0x46ec <xTaskRemoveFromEventList>
    38c8:	88 23       	and	r24, r24
    38ca:	11 f0       	breq	.+4      	; 0x38d0 <xQueueGenericReceive+0xaa>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
    38cc:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
						}
					}

				}

				taskEXIT_CRITICAL();
    38d0:	0f 90       	pop	r0
    38d2:	0f be       	out	0x3f, r0	; 63
				return pdPASS;
    38d4:	81 e0       	ldi	r24, 0x01	; 1
    38d6:	8e 87       	std	Y+14, r24	; 0x0e
    38d8:	5c c0       	rjmp	.+184    	; 0x3992 <xQueueGenericReceive+0x16c>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
    38da:	8b 85       	ldd	r24, Y+11	; 0x0b
    38dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    38de:	00 97       	sbiw	r24, 0x00	; 0
    38e0:	21 f4       	brne	.+8      	; 0x38ea <xQueueGenericReceive+0xc4>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
    38e2:	0f 90       	pop	r0
    38e4:	0f be       	out	0x3f, r0	; 63
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
    38e6:	1e 86       	std	Y+14, r1	; 0x0e
    38e8:	54 c0       	rjmp	.+168    	; 0x3992 <xQueueGenericReceive+0x16c>
				}
				else if( xEntryTimeSet == pdFALSE )
    38ea:	8b 81       	ldd	r24, Y+3	; 0x03
    38ec:	88 23       	and	r24, r24
    38ee:	31 f4       	brne	.+12     	; 0x38fc <xQueueGenericReceive+0xd6>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
    38f0:	ce 01       	movw	r24, r28
    38f2:	04 96       	adiw	r24, 0x04	; 4
    38f4:	0e 94 de 23 	call	0x47bc	; 0x47bc <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	8b 83       	std	Y+3, r24	; 0x03
				}
			}
		}
		taskEXIT_CRITICAL();
    38fc:	0f 90       	pop	r0
    38fe:	0f be       	out	0x3f, r0	; 63

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
    3900:	0e 94 3c 21 	call	0x4278	; 0x4278 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	0f 92       	push	r0
    390a:	ef 81       	ldd	r30, Y+7	; 0x07
    390c:	f8 85       	ldd	r31, Y+8	; 0x08
    390e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3910:	8f 3f       	cpi	r24, 0xFF	; 255
    3912:	19 f4       	brne	.+6      	; 0x391a <xQueueGenericReceive+0xf4>
    3914:	ef 81       	ldd	r30, Y+7	; 0x07
    3916:	f8 85       	ldd	r31, Y+8	; 0x08
    3918:	15 8e       	std	Z+29, r1	; 0x1d
    391a:	ef 81       	ldd	r30, Y+7	; 0x07
    391c:	f8 85       	ldd	r31, Y+8	; 0x08
    391e:	86 8d       	ldd	r24, Z+30	; 0x1e
    3920:	8f 3f       	cpi	r24, 0xFF	; 255
    3922:	19 f4       	brne	.+6      	; 0x392a <xQueueGenericReceive+0x104>
    3924:	ef 81       	ldd	r30, Y+7	; 0x07
    3926:	f8 85       	ldd	r31, Y+8	; 0x08
    3928:	16 8e       	std	Z+30, r1	; 0x1e
    392a:	0f 90       	pop	r0
    392c:	0f be       	out	0x3f, r0	; 63

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
    392e:	ce 01       	movw	r24, r28
    3930:	04 96       	adiw	r24, 0x04	; 4
    3932:	9e 01       	movw	r18, r28
    3934:	25 5f       	subi	r18, 0xF5	; 245
    3936:	3f 4f       	sbci	r19, 0xFF	; 255
    3938:	b9 01       	movw	r22, r18
    393a:	0e 94 f7 23 	call	0x47ee	; 0x47ee <xTaskCheckForTimeOut>
    393e:	88 23       	and	r24, r24
    3940:	09 f5       	brne	.+66     	; 0x3984 <xQueueGenericReceive+0x15e>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
    3942:	8f 81       	ldd	r24, Y+7	; 0x07
    3944:	98 85       	ldd	r25, Y+8	; 0x08
    3946:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <prvIsQueueEmpty>
    394a:	88 23       	and	r24, r24
    394c:	a1 f0       	breq	.+40     	; 0x3976 <xQueueGenericReceive+0x150>
						portEXIT_CRITICAL();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
    394e:	8f 81       	ldd	r24, Y+7	; 0x07
    3950:	98 85       	ldd	r25, Y+8	; 0x08
    3952:	41 96       	adiw	r24, 0x11	; 17
    3954:	2b 85       	ldd	r18, Y+11	; 0x0b
    3956:	3c 85       	ldd	r19, Y+12	; 0x0c
    3958:	b9 01       	movw	r22, r18
    395a:	0e 94 40 23 	call	0x4680	; 0x4680 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
    395e:	8f 81       	ldd	r24, Y+7	; 0x07
    3960:	98 85       	ldd	r25, Y+8	; 0x08
    3962:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
    3966:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>
    396a:	88 23       	and	r24, r24
    396c:	09 f0       	breq	.+2      	; 0x3970 <xQueueGenericReceive+0x14a>
    396e:	6d cf       	rjmp	.-294    	; 0x384a <xQueueGenericReceive+0x24>
				{
					portYIELD_WITHIN_API();
    3970:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
    3974:	6a cf       	rjmp	.-300    	; 0x384a <xQueueGenericReceive+0x24>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
    3976:	8f 81       	ldd	r24, Y+7	; 0x07
    3978:	98 85       	ldd	r25, Y+8	; 0x08
    397a:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <prvUnlockQueue>
				( void ) xTaskResumeAll();
    397e:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>
    3982:	63 cf       	rjmp	.-314    	; 0x384a <xQueueGenericReceive+0x24>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
    3984:	8f 81       	ldd	r24, Y+7	; 0x07
    3986:	98 85       	ldd	r25, Y+8	; 0x08
    3988:	0e 94 40 1e 	call	0x3c80	; 0x3c80 <prvUnlockQueue>
			( void ) xTaskResumeAll();
    398c:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
    3990:	1e 86       	std	Y+14, r1	; 0x0e
    3992:	8e 85       	ldd	r24, Y+14	; 0x0e
		}
	}
}
    3994:	2e 96       	adiw	r28, 0x0e	; 14
    3996:	0f b6       	in	r0, 0x3f	; 63
    3998:	f8 94       	cli
    399a:	de bf       	out	0x3e, r29	; 62
    399c:	0f be       	out	0x3f, r0	; 63
    399e:	cd bf       	out	0x3d, r28	; 61
    39a0:	cf 91       	pop	r28
    39a2:	df 91       	pop	r29
    39a4:	08 95       	ret

000039a6 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueReceiveFromISR( xQueueHandle pxQueue, void * const pvBuffer, signed portBASE_TYPE *pxTaskWoken )
{
    39a6:	df 93       	push	r29
    39a8:	cf 93       	push	r28
    39aa:	cd b7       	in	r28, 0x3d	; 61
    39ac:	de b7       	in	r29, 0x3e	; 62
    39ae:	28 97       	sbiw	r28, 0x08	; 8
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	de bf       	out	0x3e, r29	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	cd bf       	out	0x3d, r28	; 61
    39ba:	9c 83       	std	Y+4, r25	; 0x04
    39bc:	8b 83       	std	Y+3, r24	; 0x03
    39be:	7e 83       	std	Y+6, r23	; 0x06
    39c0:	6d 83       	std	Y+5, r22	; 0x05
    39c2:	58 87       	std	Y+8, r21	; 0x08
    39c4:	4f 83       	std	Y+7, r20	; 0x07

	configASSERT( pxQueue );
	configASSERT( pxTaskWoken );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    39c6:	19 82       	std	Y+1, r1	; 0x01
	{
		/* We cannot block from an ISR, so check there is data available. */
		if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
    39c8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ca:	fc 81       	ldd	r31, Y+4	; 0x04
    39cc:	82 8d       	ldd	r24, Z+26	; 0x1a
    39ce:	88 23       	and	r24, r24
    39d0:	71 f1       	breq	.+92     	; 0x3a2e <xQueueReceiveFromISR+0x88>
		{
			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
    39d2:	8b 81       	ldd	r24, Y+3	; 0x03
    39d4:	9c 81       	ldd	r25, Y+4	; 0x04
    39d6:	2d 81       	ldd	r18, Y+5	; 0x05
    39d8:	3e 81       	ldd	r19, Y+6	; 0x06
    39da:	b9 01       	movw	r22, r18
    39dc:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <prvCopyDataFromQueue>
			--( pxQueue->uxMessagesWaiting );
    39e0:	eb 81       	ldd	r30, Y+3	; 0x03
    39e2:	fc 81       	ldd	r31, Y+4	; 0x04
    39e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    39e6:	81 50       	subi	r24, 0x01	; 1
    39e8:	eb 81       	ldd	r30, Y+3	; 0x03
    39ea:	fc 81       	ldd	r31, Y+4	; 0x04
    39ec:	82 8f       	std	Z+26, r24	; 0x1a

			/* If the queue is locked we will not modify the event list.  Instead
			we update the lock count so the task that unlocks the queue will know
			that an ISR has removed data while the queue was locked. */
			if( pxQueue->xRxLock == queueUNLOCKED )
    39ee:	eb 81       	ldd	r30, Y+3	; 0x03
    39f0:	fc 81       	ldd	r31, Y+4	; 0x04
    39f2:	85 8d       	ldd	r24, Z+29	; 0x1d
    39f4:	8f 3f       	cpi	r24, 0xFF	; 255
    39f6:	89 f4       	brne	.+34     	; 0x3a1a <xQueueReceiveFromISR+0x74>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    39f8:	eb 81       	ldd	r30, Y+3	; 0x03
    39fa:	fc 81       	ldd	r31, Y+4	; 0x04
    39fc:	80 85       	ldd	r24, Z+8	; 0x08
    39fe:	88 23       	and	r24, r24
    3a00:	99 f0       	breq	.+38     	; 0x3a28 <xQueueReceiveFromISR+0x82>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3a02:	8b 81       	ldd	r24, Y+3	; 0x03
    3a04:	9c 81       	ldd	r25, Y+4	; 0x04
    3a06:	08 96       	adiw	r24, 0x08	; 8
    3a08:	0e 94 76 23 	call	0x46ec	; 0x46ec <xTaskRemoveFromEventList>
    3a0c:	88 23       	and	r24, r24
    3a0e:	61 f0       	breq	.+24     	; 0x3a28 <xQueueReceiveFromISR+0x82>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						*pxTaskWoken = pdTRUE;
    3a10:	ef 81       	ldd	r30, Y+7	; 0x07
    3a12:	f8 85       	ldd	r31, Y+8	; 0x08
    3a14:	81 e0       	ldi	r24, 0x01	; 1
    3a16:	80 83       	st	Z, r24
    3a18:	07 c0       	rjmp	.+14     	; 0x3a28 <xQueueReceiveFromISR+0x82>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				++( pxQueue->xRxLock );
    3a1a:	eb 81       	ldd	r30, Y+3	; 0x03
    3a1c:	fc 81       	ldd	r31, Y+4	; 0x04
    3a1e:	85 8d       	ldd	r24, Z+29	; 0x1d
    3a20:	8f 5f       	subi	r24, 0xFF	; 255
    3a22:	eb 81       	ldd	r30, Y+3	; 0x03
    3a24:	fc 81       	ldd	r31, Y+4	; 0x04
    3a26:	85 8f       	std	Z+29, r24	; 0x1d
			}

			xReturn = pdPASS;
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	8a 83       	std	Y+2, r24	; 0x02
    3a2c:	01 c0       	rjmp	.+2      	; 0x3a30 <xQueueReceiveFromISR+0x8a>
		}
		else
		{
			xReturn = pdFAIL;
    3a2e:	1a 82       	std	Y+2, r1	; 0x02
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    3a30:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a32:	28 96       	adiw	r28, 0x08	; 8
    3a34:	0f b6       	in	r0, 0x3f	; 63
    3a36:	f8 94       	cli
    3a38:	de bf       	out	0x3e, r29	; 62
    3a3a:	0f be       	out	0x3f, r0	; 63
    3a3c:	cd bf       	out	0x3d, r28	; 61
    3a3e:	cf 91       	pop	r28
    3a40:	df 91       	pop	r29
    3a42:	08 95       	ret

00003a44 <uxQueueMessagesWaiting>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaiting( const xQueueHandle pxQueue )
{
    3a44:	df 93       	push	r29
    3a46:	cf 93       	push	r28
    3a48:	00 d0       	rcall	.+0      	; 0x3a4a <uxQueueMessagesWaiting+0x6>
    3a4a:	0f 92       	push	r0
    3a4c:	cd b7       	in	r28, 0x3d	; 61
    3a4e:	de b7       	in	r29, 0x3e	; 62
    3a50:	9b 83       	std	Y+3, r25	; 0x03
    3a52:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	taskENTER_CRITICAL();
    3a54:	0f b6       	in	r0, 0x3f	; 63
    3a56:	f8 94       	cli
    3a58:	0f 92       	push	r0
		uxReturn = pxQueue->uxMessagesWaiting;
    3a5a:	ea 81       	ldd	r30, Y+2	; 0x02
    3a5c:	fb 81       	ldd	r31, Y+3	; 0x03
    3a5e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a60:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3a62:	0f 90       	pop	r0
    3a64:	0f be       	out	0x3f, r0	; 63

	return uxReturn;
    3a66:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a68:	0f 90       	pop	r0
    3a6a:	0f 90       	pop	r0
    3a6c:	0f 90       	pop	r0
    3a6e:	cf 91       	pop	r28
    3a70:	df 91       	pop	r29
    3a72:	08 95       	ret

00003a74 <uxQueueMessagesWaitingFromISR>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxQueueMessagesWaitingFromISR( const xQueueHandle pxQueue )
{
    3a74:	df 93       	push	r29
    3a76:	cf 93       	push	r28
    3a78:	00 d0       	rcall	.+0      	; 0x3a7a <uxQueueMessagesWaitingFromISR+0x6>
    3a7a:	0f 92       	push	r0
    3a7c:	cd b7       	in	r28, 0x3d	; 61
    3a7e:	de b7       	in	r29, 0x3e	; 62
    3a80:	9b 83       	std	Y+3, r25	; 0x03
    3a82:	8a 83       	std	Y+2, r24	; 0x02
unsigned portBASE_TYPE uxReturn;

	configASSERT( pxQueue );

	uxReturn = pxQueue->uxMessagesWaiting;
    3a84:	ea 81       	ldd	r30, Y+2	; 0x02
    3a86:	fb 81       	ldd	r31, Y+3	; 0x03
    3a88:	82 8d       	ldd	r24, Z+26	; 0x1a
    3a8a:	89 83       	std	Y+1, r24	; 0x01

	return uxReturn;
    3a8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3a8e:	0f 90       	pop	r0
    3a90:	0f 90       	pop	r0
    3a92:	0f 90       	pop	r0
    3a94:	cf 91       	pop	r28
    3a96:	df 91       	pop	r29
    3a98:	08 95       	ret

00003a9a <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( xQueueHandle pxQueue )
{
    3a9a:	df 93       	push	r29
    3a9c:	cf 93       	push	r28
    3a9e:	00 d0       	rcall	.+0      	; 0x3aa0 <vQueueDelete+0x6>
    3aa0:	cd b7       	in	r28, 0x3d	; 61
    3aa2:	de b7       	in	r29, 0x3e	; 62
    3aa4:	9a 83       	std	Y+2, r25	; 0x02
    3aa6:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxQueue );

	traceQUEUE_DELETE( pxQueue );
	vQueueUnregisterQueue( pxQueue );
	vPortFree( pxQueue->pcHead );
    3aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    3aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    3aac:	80 81       	ld	r24, Z
    3aae:	91 81       	ldd	r25, Z+1	; 0x01
    3ab0:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
	vPortFree( pxQueue );
    3ab4:	89 81       	ldd	r24, Y+1	; 0x01
    3ab6:	9a 81       	ldd	r25, Y+2	; 0x02
    3ab8:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
}
    3abc:	0f 90       	pop	r0
    3abe:	0f 90       	pop	r0
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	08 95       	ret

00003ac6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
    3ac6:	df 93       	push	r29
    3ac8:	cf 93       	push	r28
    3aca:	00 d0       	rcall	.+0      	; 0x3acc <prvCopyDataToQueue+0x6>
    3acc:	00 d0       	rcall	.+0      	; 0x3ace <prvCopyDataToQueue+0x8>
    3ace:	0f 92       	push	r0
    3ad0:	cd b7       	in	r28, 0x3d	; 61
    3ad2:	de b7       	in	r29, 0x3e	; 62
    3ad4:	9a 83       	std	Y+2, r25	; 0x02
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	7c 83       	std	Y+4, r23	; 0x04
    3ada:	6b 83       	std	Y+3, r22	; 0x03
    3adc:	4d 83       	std	Y+5, r20	; 0x05
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
    3ade:	e9 81       	ldd	r30, Y+1	; 0x01
    3ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ae2:	84 8d       	ldd	r24, Z+28	; 0x1c
    3ae4:	88 23       	and	r24, r24
    3ae6:	09 f4       	brne	.+2      	; 0x3aea <prvCopyDataToQueue+0x24>
    3ae8:	74 c0       	rjmp	.+232    	; 0x3bd2 <prvCopyDataToQueue+0x10c>
				pxQueue->pxMutexHolder = NULL;
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
    3aea:	8d 81       	ldd	r24, Y+5	; 0x05
    3aec:	88 23       	and	r24, r24
    3aee:	99 f5       	brne	.+102    	; 0x3b56 <prvCopyDataToQueue+0x90>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3af0:	e9 81       	ldd	r30, Y+1	; 0x01
    3af2:	fa 81       	ldd	r31, Y+2	; 0x02
    3af4:	64 81       	ldd	r22, Z+4	; 0x04
    3af6:	75 81       	ldd	r23, Z+5	; 0x05
    3af8:	e9 81       	ldd	r30, Y+1	; 0x01
    3afa:	fa 81       	ldd	r31, Y+2	; 0x02
    3afc:	84 8d       	ldd	r24, Z+28	; 0x1c
    3afe:	48 2f       	mov	r20, r24
    3b00:	50 e0       	ldi	r21, 0x00	; 0
    3b02:	2b 81       	ldd	r18, Y+3	; 0x03
    3b04:	3c 81       	ldd	r19, Y+4	; 0x04
    3b06:	cb 01       	movw	r24, r22
    3b08:	b9 01       	movw	r22, r18
    3b0a:	0e 94 5f 38 	call	0x70be	; 0x70be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    3b0e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b10:	fa 81       	ldd	r31, Y+2	; 0x02
    3b12:	24 81       	ldd	r18, Z+4	; 0x04
    3b14:	35 81       	ldd	r19, Z+5	; 0x05
    3b16:	e9 81       	ldd	r30, Y+1	; 0x01
    3b18:	fa 81       	ldd	r31, Y+2	; 0x02
    3b1a:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b1c:	88 2f       	mov	r24, r24
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	82 0f       	add	r24, r18
    3b22:	93 1f       	adc	r25, r19
    3b24:	e9 81       	ldd	r30, Y+1	; 0x01
    3b26:	fa 81       	ldd	r31, Y+2	; 0x02
    3b28:	95 83       	std	Z+5, r25	; 0x05
    3b2a:	84 83       	std	Z+4, r24	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
    3b2c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b2e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b30:	24 81       	ldd	r18, Z+4	; 0x04
    3b32:	35 81       	ldd	r19, Z+5	; 0x05
    3b34:	e9 81       	ldd	r30, Y+1	; 0x01
    3b36:	fa 81       	ldd	r31, Y+2	; 0x02
    3b38:	82 81       	ldd	r24, Z+2	; 0x02
    3b3a:	93 81       	ldd	r25, Z+3	; 0x03
    3b3c:	28 17       	cp	r18, r24
    3b3e:	39 07       	cpc	r19, r25
    3b40:	08 f4       	brcc	.+2      	; 0x3b44 <prvCopyDataToQueue+0x7e>
    3b42:	47 c0       	rjmp	.+142    	; 0x3bd2 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    3b44:	e9 81       	ldd	r30, Y+1	; 0x01
    3b46:	fa 81       	ldd	r31, Y+2	; 0x02
    3b48:	80 81       	ld	r24, Z
    3b4a:	91 81       	ldd	r25, Z+1	; 0x01
    3b4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b50:	95 83       	std	Z+5, r25	; 0x05
    3b52:	84 83       	std	Z+4, r24	; 0x04
    3b54:	3e c0       	rjmp	.+124    	; 0x3bd2 <prvCopyDataToQueue+0x10c>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
    3b56:	e9 81       	ldd	r30, Y+1	; 0x01
    3b58:	fa 81       	ldd	r31, Y+2	; 0x02
    3b5a:	66 81       	ldd	r22, Z+6	; 0x06
    3b5c:	77 81       	ldd	r23, Z+7	; 0x07
    3b5e:	e9 81       	ldd	r30, Y+1	; 0x01
    3b60:	fa 81       	ldd	r31, Y+2	; 0x02
    3b62:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b64:	48 2f       	mov	r20, r24
    3b66:	50 e0       	ldi	r21, 0x00	; 0
    3b68:	2b 81       	ldd	r18, Y+3	; 0x03
    3b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    3b6c:	cb 01       	movw	r24, r22
    3b6e:	b9 01       	movw	r22, r18
    3b70:	0e 94 5f 38 	call	0x70be	; 0x70be <memcpy>
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
    3b74:	e9 81       	ldd	r30, Y+1	; 0x01
    3b76:	fa 81       	ldd	r31, Y+2	; 0x02
    3b78:	26 81       	ldd	r18, Z+6	; 0x06
    3b7a:	37 81       	ldd	r19, Z+7	; 0x07
    3b7c:	e9 81       	ldd	r30, Y+1	; 0x01
    3b7e:	fa 81       	ldd	r31, Y+2	; 0x02
    3b80:	84 8d       	ldd	r24, Z+28	; 0x1c
    3b82:	88 2f       	mov	r24, r24
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	90 95       	com	r25
    3b88:	81 95       	neg	r24
    3b8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3b8c:	82 0f       	add	r24, r18
    3b8e:	93 1f       	adc	r25, r19
    3b90:	e9 81       	ldd	r30, Y+1	; 0x01
    3b92:	fa 81       	ldd	r31, Y+2	; 0x02
    3b94:	97 83       	std	Z+7, r25	; 0x07
    3b96:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
    3b98:	e9 81       	ldd	r30, Y+1	; 0x01
    3b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    3b9c:	26 81       	ldd	r18, Z+6	; 0x06
    3b9e:	37 81       	ldd	r19, Z+7	; 0x07
    3ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    3ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    3ba4:	80 81       	ld	r24, Z
    3ba6:	91 81       	ldd	r25, Z+1	; 0x01
    3ba8:	28 17       	cp	r18, r24
    3baa:	39 07       	cpc	r19, r25
    3bac:	90 f4       	brcc	.+36     	; 0x3bd2 <prvCopyDataToQueue+0x10c>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    3bae:	e9 81       	ldd	r30, Y+1	; 0x01
    3bb0:	fa 81       	ldd	r31, Y+2	; 0x02
    3bb2:	22 81       	ldd	r18, Z+2	; 0x02
    3bb4:	33 81       	ldd	r19, Z+3	; 0x03
    3bb6:	e9 81       	ldd	r30, Y+1	; 0x01
    3bb8:	fa 81       	ldd	r31, Y+2	; 0x02
    3bba:	84 8d       	ldd	r24, Z+28	; 0x1c
    3bbc:	88 2f       	mov	r24, r24
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	90 95       	com	r25
    3bc2:	81 95       	neg	r24
    3bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc6:	82 0f       	add	r24, r18
    3bc8:	93 1f       	adc	r25, r19
    3bca:	e9 81       	ldd	r30, Y+1	; 0x01
    3bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bce:	97 83       	std	Z+7, r25	; 0x07
    3bd0:	86 83       	std	Z+6, r24	; 0x06
		}
	}

	++( pxQueue->uxMessagesWaiting );
    3bd2:	e9 81       	ldd	r30, Y+1	; 0x01
    3bd4:	fa 81       	ldd	r31, Y+2	; 0x02
    3bd6:	82 8d       	ldd	r24, Z+26	; 0x1a
    3bd8:	8f 5f       	subi	r24, 0xFF	; 255
    3bda:	e9 81       	ldd	r30, Y+1	; 0x01
    3bdc:	fa 81       	ldd	r31, Y+2	; 0x02
    3bde:	82 8f       	std	Z+26, r24	; 0x1a
}
    3be0:	0f 90       	pop	r0
    3be2:	0f 90       	pop	r0
    3be4:	0f 90       	pop	r0
    3be6:	0f 90       	pop	r0
    3be8:	0f 90       	pop	r0
    3bea:	cf 91       	pop	r28
    3bec:	df 91       	pop	r29
    3bee:	08 95       	ret

00003bf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
    3bf0:	df 93       	push	r29
    3bf2:	cf 93       	push	r28
    3bf4:	00 d0       	rcall	.+0      	; 0x3bf6 <prvCopyDataFromQueue+0x6>
    3bf6:	00 d0       	rcall	.+0      	; 0x3bf8 <prvCopyDataFromQueue+0x8>
    3bf8:	cd b7       	in	r28, 0x3d	; 61
    3bfa:	de b7       	in	r29, 0x3e	; 62
    3bfc:	9a 83       	std	Y+2, r25	; 0x02
    3bfe:	89 83       	std	Y+1, r24	; 0x01
    3c00:	7c 83       	std	Y+4, r23	; 0x04
    3c02:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
    3c04:	e9 81       	ldd	r30, Y+1	; 0x01
    3c06:	fa 81       	ldd	r31, Y+2	; 0x02
    3c08:	80 81       	ld	r24, Z
    3c0a:	91 81       	ldd	r25, Z+1	; 0x01
    3c0c:	00 97       	sbiw	r24, 0x00	; 0
    3c0e:	89 f1       	breq	.+98     	; 0x3c72 <prvCopyDataFromQueue+0x82>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
    3c10:	e9 81       	ldd	r30, Y+1	; 0x01
    3c12:	fa 81       	ldd	r31, Y+2	; 0x02
    3c14:	26 81       	ldd	r18, Z+6	; 0x06
    3c16:	37 81       	ldd	r19, Z+7	; 0x07
    3c18:	e9 81       	ldd	r30, Y+1	; 0x01
    3c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    3c1c:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c1e:	88 2f       	mov	r24, r24
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	82 0f       	add	r24, r18
    3c24:	93 1f       	adc	r25, r19
    3c26:	e9 81       	ldd	r30, Y+1	; 0x01
    3c28:	fa 81       	ldd	r31, Y+2	; 0x02
    3c2a:	97 83       	std	Z+7, r25	; 0x07
    3c2c:	86 83       	std	Z+6, r24	; 0x06
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
    3c2e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c30:	fa 81       	ldd	r31, Y+2	; 0x02
    3c32:	26 81       	ldd	r18, Z+6	; 0x06
    3c34:	37 81       	ldd	r19, Z+7	; 0x07
    3c36:	e9 81       	ldd	r30, Y+1	; 0x01
    3c38:	fa 81       	ldd	r31, Y+2	; 0x02
    3c3a:	82 81       	ldd	r24, Z+2	; 0x02
    3c3c:	93 81       	ldd	r25, Z+3	; 0x03
    3c3e:	28 17       	cp	r18, r24
    3c40:	39 07       	cpc	r19, r25
    3c42:	40 f0       	brcs	.+16     	; 0x3c54 <prvCopyDataFromQueue+0x64>
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
    3c44:	e9 81       	ldd	r30, Y+1	; 0x01
    3c46:	fa 81       	ldd	r31, Y+2	; 0x02
    3c48:	80 81       	ld	r24, Z
    3c4a:	91 81       	ldd	r25, Z+1	; 0x01
    3c4c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c4e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c50:	97 83       	std	Z+7, r25	; 0x07
    3c52:	86 83       	std	Z+6, r24	; 0x06
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
    3c54:	e9 81       	ldd	r30, Y+1	; 0x01
    3c56:	fa 81       	ldd	r31, Y+2	; 0x02
    3c58:	46 81       	ldd	r20, Z+6	; 0x06
    3c5a:	57 81       	ldd	r21, Z+7	; 0x07
    3c5c:	e9 81       	ldd	r30, Y+1	; 0x01
    3c5e:	fa 81       	ldd	r31, Y+2	; 0x02
    3c60:	84 8d       	ldd	r24, Z+28	; 0x1c
    3c62:	28 2f       	mov	r18, r24
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	8b 81       	ldd	r24, Y+3	; 0x03
    3c68:	9c 81       	ldd	r25, Y+4	; 0x04
    3c6a:	ba 01       	movw	r22, r20
    3c6c:	a9 01       	movw	r20, r18
    3c6e:	0e 94 5f 38 	call	0x70be	; 0x70be <memcpy>
	}
}
    3c72:	0f 90       	pop	r0
    3c74:	0f 90       	pop	r0
    3c76:	0f 90       	pop	r0
    3c78:	0f 90       	pop	r0
    3c7a:	cf 91       	pop	r28
    3c7c:	df 91       	pop	r29
    3c7e:	08 95       	ret

00003c80 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	00 d0       	rcall	.+0      	; 0x3c86 <prvUnlockQueue+0x6>
    3c86:	cd b7       	in	r28, 0x3d	; 61
    3c88:	de b7       	in	r29, 0x3e	; 62
    3c8a:	9a 83       	std	Y+2, r25	; 0x02
    3c8c:	89 83       	std	Y+1, r24	; 0x01

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	0f 92       	push	r0
    3c94:	15 c0       	rjmp	.+42     	; 0x3cc0 <prvUnlockQueue+0x40>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    3c96:	e9 81       	ldd	r30, Y+1	; 0x01
    3c98:	fa 81       	ldd	r31, Y+2	; 0x02
    3c9a:	81 89       	ldd	r24, Z+17	; 0x11
    3c9c:	88 23       	and	r24, r24
    3c9e:	a9 f0       	breq	.+42     	; 0x3cca <prvUnlockQueue+0x4a>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    3ca0:	89 81       	ldd	r24, Y+1	; 0x01
    3ca2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ca4:	41 96       	adiw	r24, 0x11	; 17
    3ca6:	0e 94 76 23 	call	0x46ec	; 0x46ec <xTaskRemoveFromEventList>
    3caa:	88 23       	and	r24, r24
    3cac:	11 f0       	breq	.+4      	; 0x3cb2 <prvUnlockQueue+0x32>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
    3cae:	0e 94 54 24 	call	0x48a8	; 0x48a8 <vTaskMissedYield>
				}

				--( pxQueue->xTxLock );
    3cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    3cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    3cb6:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cb8:	81 50       	subi	r24, 0x01	; 1
    3cba:	e9 81       	ldd	r30, Y+1	; 0x01
    3cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cbe:	86 8f       	std	Z+30, r24	; 0x1e
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
    3cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    3cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    3cc4:	86 8d       	ldd	r24, Z+30	; 0x1e
    3cc6:	18 16       	cp	r1, r24
    3cc8:	34 f3       	brlt	.-52     	; 0x3c96 <prvUnlockQueue+0x16>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
    3cca:	e9 81       	ldd	r30, Y+1	; 0x01
    3ccc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cce:	8f ef       	ldi	r24, 0xFF	; 255
    3cd0:	86 8f       	std	Z+30, r24	; 0x1e
	}
	taskEXIT_CRITICAL();
    3cd2:	0f 90       	pop	r0
    3cd4:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    3cd6:	0f b6       	in	r0, 0x3f	; 63
    3cd8:	f8 94       	cli
    3cda:	0f 92       	push	r0
    3cdc:	15 c0       	rjmp	.+42     	; 0x3d08 <prvUnlockQueue+0x88>
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    3cde:	e9 81       	ldd	r30, Y+1	; 0x01
    3ce0:	fa 81       	ldd	r31, Y+2	; 0x02
    3ce2:	80 85       	ldd	r24, Z+8	; 0x08
    3ce4:	88 23       	and	r24, r24
    3ce6:	a9 f0       	breq	.+42     	; 0x3d12 <prvUnlockQueue+0x92>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	9a 81       	ldd	r25, Y+2	; 0x02
    3cec:	08 96       	adiw	r24, 0x08	; 8
    3cee:	0e 94 76 23 	call	0x46ec	; 0x46ec <xTaskRemoveFromEventList>
    3cf2:	88 23       	and	r24, r24
    3cf4:	11 f0       	breq	.+4      	; 0x3cfa <prvUnlockQueue+0x7a>
				{
					vTaskMissedYield();
    3cf6:	0e 94 54 24 	call	0x48a8	; 0x48a8 <vTaskMissedYield>
				}

				--( pxQueue->xRxLock );
    3cfa:	e9 81       	ldd	r30, Y+1	; 0x01
    3cfc:	fa 81       	ldd	r31, Y+2	; 0x02
    3cfe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d00:	81 50       	subi	r24, 0x01	; 1
    3d02:	e9 81       	ldd	r30, Y+1	; 0x01
    3d04:	fa 81       	ldd	r31, Y+2	; 0x02
    3d06:	85 8f       	std	Z+29, r24	; 0x1d
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
    3d08:	e9 81       	ldd	r30, Y+1	; 0x01
    3d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    3d0c:	85 8d       	ldd	r24, Z+29	; 0x1d
    3d0e:	18 16       	cp	r1, r24
    3d10:	34 f3       	brlt	.-52     	; 0x3cde <prvUnlockQueue+0x5e>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
    3d12:	e9 81       	ldd	r30, Y+1	; 0x01
    3d14:	fa 81       	ldd	r31, Y+2	; 0x02
    3d16:	8f ef       	ldi	r24, 0xFF	; 255
    3d18:	85 8f       	std	Z+29, r24	; 0x1d
	}
	taskEXIT_CRITICAL();
    3d1a:	0f 90       	pop	r0
    3d1c:	0f be       	out	0x3f, r0	; 63
}
    3d1e:	0f 90       	pop	r0
    3d20:	0f 90       	pop	r0
    3d22:	cf 91       	pop	r28
    3d24:	df 91       	pop	r29
    3d26:	08 95       	ret

00003d28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
    3d28:	df 93       	push	r29
    3d2a:	cf 93       	push	r28
    3d2c:	00 d0       	rcall	.+0      	; 0x3d2e <prvIsQueueEmpty+0x6>
    3d2e:	0f 92       	push	r0
    3d30:	cd b7       	in	r28, 0x3d	; 61
    3d32:	de b7       	in	r29, 0x3e	; 62
    3d34:	9b 83       	std	Y+3, r25	; 0x03
    3d36:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3d38:	0f b6       	in	r0, 0x3f	; 63
    3d3a:	f8 94       	cli
    3d3c:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3d3e:	ea 81       	ldd	r30, Y+2	; 0x02
    3d40:	fb 81       	ldd	r31, Y+3	; 0x03
    3d42:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d44:	19 82       	std	Y+1, r1	; 0x01
    3d46:	88 23       	and	r24, r24
    3d48:	11 f4       	brne	.+4      	; 0x3d4e <prvIsQueueEmpty+0x26>
    3d4a:	81 e0       	ldi	r24, 0x01	; 1
    3d4c:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3d4e:	0f 90       	pop	r0
    3d50:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3d52:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d54:	0f 90       	pop	r0
    3d56:	0f 90       	pop	r0
    3d58:	0f 90       	pop	r0
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	08 95       	ret

00003d60 <xQueueIsQueueEmptyFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueEmptyFromISR( const xQueueHandle pxQueue )
{
    3d60:	df 93       	push	r29
    3d62:	cf 93       	push	r28
    3d64:	00 d0       	rcall	.+0      	; 0x3d66 <xQueueIsQueueEmptyFromISR+0x6>
    3d66:	0f 92       	push	r0
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    3d6c:	9b 83       	std	Y+3, r25	; 0x03
    3d6e:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
    3d70:	ea 81       	ldd	r30, Y+2	; 0x02
    3d72:	fb 81       	ldd	r31, Y+3	; 0x03
    3d74:	82 8d       	ldd	r24, Z+26	; 0x1a
    3d76:	19 82       	std	Y+1, r1	; 0x01
    3d78:	88 23       	and	r24, r24
    3d7a:	11 f4       	brne	.+4      	; 0x3d80 <xQueueIsQueueEmptyFromISR+0x20>
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3d80:	89 81       	ldd	r24, Y+1	; 0x01
}
    3d82:	0f 90       	pop	r0
    3d84:	0f 90       	pop	r0
    3d86:	0f 90       	pop	r0
    3d88:	cf 91       	pop	r28
    3d8a:	df 91       	pop	r29
    3d8c:	08 95       	ret

00003d8e <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
    3d8e:	df 93       	push	r29
    3d90:	cf 93       	push	r28
    3d92:	00 d0       	rcall	.+0      	; 0x3d94 <prvIsQueueFull+0x6>
    3d94:	0f 92       	push	r0
    3d96:	cd b7       	in	r28, 0x3d	; 61
    3d98:	de b7       	in	r29, 0x3e	; 62
    3d9a:	9b 83       	std	Y+3, r25	; 0x03
    3d9c:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
    3d9e:	0f b6       	in	r0, 0x3f	; 63
    3da0:	f8 94       	cli
    3da2:	0f 92       	push	r0
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3da4:	ea 81       	ldd	r30, Y+2	; 0x02
    3da6:	fb 81       	ldd	r31, Y+3	; 0x03
    3da8:	92 8d       	ldd	r25, Z+26	; 0x1a
    3daa:	ea 81       	ldd	r30, Y+2	; 0x02
    3dac:	fb 81       	ldd	r31, Y+3	; 0x03
    3dae:	83 8d       	ldd	r24, Z+27	; 0x1b
    3db0:	19 82       	std	Y+1, r1	; 0x01
    3db2:	98 17       	cp	r25, r24
    3db4:	11 f4       	brne	.+4      	; 0x3dba <prvIsQueueFull+0x2c>
    3db6:	81 e0       	ldi	r24, 0x01	; 1
    3db8:	89 83       	std	Y+1, r24	; 0x01
	taskEXIT_CRITICAL();
    3dba:	0f 90       	pop	r0
    3dbc:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    3dbe:	89 81       	ldd	r24, Y+1	; 0x01
}
    3dc0:	0f 90       	pop	r0
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	cf 91       	pop	r28
    3dc8:	df 91       	pop	r29
    3dca:	08 95       	ret

00003dcc <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueIsQueueFullFromISR( const xQueueHandle pxQueue )
{
    3dcc:	df 93       	push	r29
    3dce:	cf 93       	push	r28
    3dd0:	00 d0       	rcall	.+0      	; 0x3dd2 <xQueueIsQueueFullFromISR+0x6>
    3dd2:	0f 92       	push	r0
    3dd4:	cd b7       	in	r28, 0x3d	; 61
    3dd6:	de b7       	in	r29, 0x3e	; 62
    3dd8:	9b 83       	std	Y+3, r25	; 0x03
    3dda:	8a 83       	std	Y+2, r24	; 0x02
signed portBASE_TYPE xReturn;

	configASSERT( pxQueue );
	xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
    3ddc:	ea 81       	ldd	r30, Y+2	; 0x02
    3dde:	fb 81       	ldd	r31, Y+3	; 0x03
    3de0:	92 8d       	ldd	r25, Z+26	; 0x1a
    3de2:	ea 81       	ldd	r30, Y+2	; 0x02
    3de4:	fb 81       	ldd	r31, Y+3	; 0x03
    3de6:	83 8d       	ldd	r24, Z+27	; 0x1b
    3de8:	19 82       	std	Y+1, r1	; 0x01
    3dea:	98 17       	cp	r25, r24
    3dec:	11 f4       	brne	.+4      	; 0x3df2 <xQueueIsQueueFullFromISR+0x26>
    3dee:	81 e0       	ldi	r24, 0x01	; 1
    3df0:	89 83       	std	Y+1, r24	; 0x01

	return xReturn;
    3df2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3df4:	0f 90       	pop	r0
    3df6:	0f 90       	pop	r0
    3df8:	0f 90       	pop	r0
    3dfa:	cf 91       	pop	r28
    3dfc:	df 91       	pop	r29
    3dfe:	08 95       	ret

00003e00 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
    3e00:	af 92       	push	r10
    3e02:	bf 92       	push	r11
    3e04:	cf 92       	push	r12
    3e06:	df 92       	push	r13
    3e08:	ef 92       	push	r14
    3e0a:	ff 92       	push	r15
    3e0c:	0f 93       	push	r16
    3e0e:	1f 93       	push	r17
    3e10:	df 93       	push	r29
    3e12:	cf 93       	push	r28
    3e14:	cd b7       	in	r28, 0x3d	; 61
    3e16:	de b7       	in	r29, 0x3e	; 62
    3e18:	64 97       	sbiw	r28, 0x14	; 20
    3e1a:	0f b6       	in	r0, 0x3f	; 63
    3e1c:	f8 94       	cli
    3e1e:	de bf       	out	0x3e, r29	; 62
    3e20:	0f be       	out	0x3f, r0	; 63
    3e22:	cd bf       	out	0x3d, r28	; 61
    3e24:	9f 83       	std	Y+7, r25	; 0x07
    3e26:	8e 83       	std	Y+6, r24	; 0x06
    3e28:	79 87       	std	Y+9, r23	; 0x09
    3e2a:	68 87       	std	Y+8, r22	; 0x08
    3e2c:	5b 87       	std	Y+11, r21	; 0x0b
    3e2e:	4a 87       	std	Y+10, r20	; 0x0a
    3e30:	3d 87       	std	Y+13, r19	; 0x0d
    3e32:	2c 87       	std	Y+12, r18	; 0x0c
    3e34:	0e 87       	std	Y+14, r16	; 0x0e
    3e36:	f8 8a       	std	Y+16, r15	; 0x10
    3e38:	ef 86       	std	Y+15, r14	; 0x0f
    3e3a:	da 8a       	std	Y+18, r13	; 0x12
    3e3c:	c9 8a       	std	Y+17, r12	; 0x11
    3e3e:	bc 8a       	std	Y+20, r11	; 0x14
    3e40:	ab 8a       	std	Y+19, r10	; 0x13
	configASSERT( pxTaskCode );
	configASSERT( ( uxPriority < configMAX_PRIORITIES ) );

	/* Allocate the memory required by the TCB and stack for the new task,
	checking that the allocation was successful. */
	pxNewTCB = prvAllocateTCBAndStack( usStackDepth, puxStackBuffer );
    3e42:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e44:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e46:	29 89       	ldd	r18, Y+17	; 0x11
    3e48:	3a 89       	ldd	r19, Y+18	; 0x12
    3e4a:	b9 01       	movw	r22, r18
    3e4c:	0e 94 85 25 	call	0x4b0a	; 0x4b0a <prvAllocateTCBAndStack>
    3e50:	9c 83       	std	Y+4, r25	; 0x04
    3e52:	8b 83       	std	Y+3, r24	; 0x03

	if( pxNewTCB != NULL )
    3e54:	8b 81       	ldd	r24, Y+3	; 0x03
    3e56:	9c 81       	ldd	r25, Y+4	; 0x04
    3e58:	00 97       	sbiw	r24, 0x00	; 0
    3e5a:	09 f4       	brne	.+2      	; 0x3e5e <xTaskGenericCreate+0x5e>
    3e5c:	99 c0       	rjmp	.+306    	; 0x3f90 <xTaskGenericCreate+0x190>
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
    3e5e:	eb 81       	ldd	r30, Y+3	; 0x03
    3e60:	fc 81       	ldd	r31, Y+4	; 0x04
    3e62:	27 89       	ldd	r18, Z+23	; 0x17
    3e64:	30 8d       	ldd	r19, Z+24	; 0x18
    3e66:	8a 85       	ldd	r24, Y+10	; 0x0a
    3e68:	9b 85       	ldd	r25, Y+11	; 0x0b
    3e6a:	01 97       	sbiw	r24, 0x01	; 1
    3e6c:	82 0f       	add	r24, r18
    3e6e:	93 1f       	adc	r25, r19
    3e70:	9a 83       	std	Y+2, r25	; 0x02
    3e72:	89 83       	std	Y+1, r24	; 0x01
			pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( usStackDepth - 1 );
		}
		#endif

		/* Setup the newly allocated TCB with the initial state of the task. */
		prvInitialiseTCBVariables( pxNewTCB, pcName, uxPriority, xRegions, usStackDepth );
    3e74:	8b 81       	ldd	r24, Y+3	; 0x03
    3e76:	9c 81       	ldd	r25, Y+4	; 0x04
    3e78:	28 85       	ldd	r18, Y+8	; 0x08
    3e7a:	39 85       	ldd	r19, Y+9	; 0x09
    3e7c:	eb 89       	ldd	r30, Y+19	; 0x13
    3e7e:	fc 89       	ldd	r31, Y+20	; 0x14
    3e80:	aa 85       	ldd	r26, Y+10	; 0x0a
    3e82:	bb 85       	ldd	r27, Y+11	; 0x0b
    3e84:	b9 01       	movw	r22, r18
    3e86:	4e 85       	ldd	r20, Y+14	; 0x0e
    3e88:	9f 01       	movw	r18, r30
    3e8a:	8d 01       	movw	r16, r26
    3e8c:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <prvInitialiseTCBVariables>
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
    3e90:	89 81       	ldd	r24, Y+1	; 0x01
    3e92:	9a 81       	ldd	r25, Y+2	; 0x02
    3e94:	2e 81       	ldd	r18, Y+6	; 0x06
    3e96:	3f 81       	ldd	r19, Y+7	; 0x07
    3e98:	4c 85       	ldd	r20, Y+12	; 0x0c
    3e9a:	5d 85       	ldd	r21, Y+13	; 0x0d
    3e9c:	b9 01       	movw	r22, r18
    3e9e:	0e 94 86 17 	call	0x2f0c	; 0x2f0c <pxPortInitialiseStack>
    3ea2:	eb 81       	ldd	r30, Y+3	; 0x03
    3ea4:	fc 81       	ldd	r31, Y+4	; 0x04
    3ea6:	91 83       	std	Z+1, r25	; 0x01
    3ea8:	80 83       	st	Z, r24
		#endif

		/* Check the alignment of the initialised stack. */
		configASSERT( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );

		if( ( void * ) pxCreatedTask != NULL )
    3eaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3eac:	98 89       	ldd	r25, Y+16	; 0x10
    3eae:	00 97       	sbiw	r24, 0x00	; 0
    3eb0:	31 f0       	breq	.+12     	; 0x3ebe <xTaskGenericCreate+0xbe>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
    3eb2:	ef 85       	ldd	r30, Y+15	; 0x0f
    3eb4:	f8 89       	ldd	r31, Y+16	; 0x10
    3eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3eba:	91 83       	std	Z+1, r25	; 0x01
    3ebc:	80 83       	st	Z, r24
		}
		
		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
    3ebe:	0f b6       	in	r0, 0x3f	; 63
    3ec0:	f8 94       	cli
    3ec2:	0f 92       	push	r0
		{
			uxCurrentNumberOfTasks++;
    3ec4:	80 91 71 04 	lds	r24, 0x0471
    3ec8:	8f 5f       	subi	r24, 0xFF	; 255
    3eca:	80 93 71 04 	sts	0x0471, r24
			if( pxCurrentTCB == NULL )
    3ece:	80 91 6e 04 	lds	r24, 0x046E
    3ed2:	90 91 6f 04 	lds	r25, 0x046F
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	69 f4       	brne	.+26     	; 0x3ef4 <xTaskGenericCreate+0xf4>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
    3eda:	8b 81       	ldd	r24, Y+3	; 0x03
    3edc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ede:	90 93 6f 04 	sts	0x046F, r25
    3ee2:	80 93 6e 04 	sts	0x046E, r24

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
    3ee6:	80 91 71 04 	lds	r24, 0x0471
    3eea:	81 30       	cpi	r24, 0x01	; 1
    3eec:	a9 f4       	brne	.+42     	; 0x3f18 <xTaskGenericCreate+0x118>
				{
					/* This is the first task to be created so do the preliminary
					initialisation required.  We will not recover if this call
					fails, but we will report the failure. */
					prvInitialiseTaskLists();
    3eee:	0e 94 c1 24 	call	0x4982	; 0x4982 <prvInitialiseTaskLists>
    3ef2:	12 c0       	rjmp	.+36     	; 0x3f18 <xTaskGenericCreate+0x118>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
    3ef4:	80 91 76 04 	lds	r24, 0x0476
    3ef8:	88 23       	and	r24, r24
    3efa:	71 f4       	brne	.+28     	; 0x3f18 <xTaskGenericCreate+0x118>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
    3efc:	e0 91 6e 04 	lds	r30, 0x046E
    3f00:	f0 91 6f 04 	lds	r31, 0x046F
    3f04:	96 89       	ldd	r25, Z+22	; 0x16
    3f06:	8e 85       	ldd	r24, Y+14	; 0x0e
    3f08:	89 17       	cp	r24, r25
    3f0a:	30 f0       	brcs	.+12     	; 0x3f18 <xTaskGenericCreate+0x118>
					{
						pxCurrentTCB = pxNewTCB;
    3f0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3f10:	90 93 6f 04 	sts	0x046F, r25
    3f14:	80 93 6e 04 	sts	0x046E, r24
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
    3f18:	eb 81       	ldd	r30, Y+3	; 0x03
    3f1a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f1c:	96 89       	ldd	r25, Z+22	; 0x16
    3f1e:	80 91 74 04 	lds	r24, 0x0474
    3f22:	89 17       	cp	r24, r25
    3f24:	28 f4       	brcc	.+10     	; 0x3f30 <xTaskGenericCreate+0x130>
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
    3f26:	eb 81       	ldd	r30, Y+3	; 0x03
    3f28:	fc 81       	ldd	r31, Y+4	; 0x04
    3f2a:	86 89       	ldd	r24, Z+22	; 0x16
    3f2c:	80 93 74 04 	sts	0x0474, r24
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
			}
			#endif
			uxTaskNumber++;
    3f30:	80 91 7b 04 	lds	r24, 0x047B
    3f34:	8f 5f       	subi	r24, 0xFF	; 255
    3f36:	80 93 7b 04 	sts	0x047B, r24

			prvAddTaskToReadyQueue( pxNewTCB );
    3f3a:	eb 81       	ldd	r30, Y+3	; 0x03
    3f3c:	fc 81       	ldd	r31, Y+4	; 0x04
    3f3e:	96 89       	ldd	r25, Z+22	; 0x16
    3f40:	80 91 75 04 	lds	r24, 0x0475
    3f44:	89 17       	cp	r24, r25
    3f46:	28 f4       	brcc	.+10     	; 0x3f52 <xTaskGenericCreate+0x152>
    3f48:	eb 81       	ldd	r30, Y+3	; 0x03
    3f4a:	fc 81       	ldd	r31, Y+4	; 0x04
    3f4c:	86 89       	ldd	r24, Z+22	; 0x16
    3f4e:	80 93 75 04 	sts	0x0475, r24
    3f52:	eb 81       	ldd	r30, Y+3	; 0x03
    3f54:	fc 81       	ldd	r31, Y+4	; 0x04
    3f56:	86 89       	ldd	r24, Z+22	; 0x16
    3f58:	28 2f       	mov	r18, r24
    3f5a:	30 e0       	ldi	r19, 0x00	; 0
    3f5c:	c9 01       	movw	r24, r18
    3f5e:	88 0f       	add	r24, r24
    3f60:	99 1f       	adc	r25, r25
    3f62:	88 0f       	add	r24, r24
    3f64:	99 1f       	adc	r25, r25
    3f66:	88 0f       	add	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	82 0f       	add	r24, r18
    3f6c:	93 1f       	adc	r25, r19
    3f6e:	ac 01       	movw	r20, r24
    3f70:	44 58       	subi	r20, 0x84	; 132
    3f72:	5b 4f       	sbci	r21, 0xFB	; 251
    3f74:	8b 81       	ldd	r24, Y+3	; 0x03
    3f76:	9c 81       	ldd	r25, Y+4	; 0x04
    3f78:	9c 01       	movw	r18, r24
    3f7a:	2e 5f       	subi	r18, 0xFE	; 254
    3f7c:	3f 4f       	sbci	r19, 0xFF	; 255
    3f7e:	ca 01       	movw	r24, r20
    3f80:	b9 01       	movw	r22, r18
    3f82:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

			xReturn = pdPASS;
    3f86:	81 e0       	ldi	r24, 0x01	; 1
    3f88:	8d 83       	std	Y+5, r24	; 0x05
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
    3f8a:	0f 90       	pop	r0
    3f8c:	0f be       	out	0x3f, r0	; 63
    3f8e:	02 c0       	rjmp	.+4      	; 0x3f94 <xTaskGenericCreate+0x194>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
    3f90:	8f ef       	ldi	r24, 0xFF	; 255
    3f92:	8d 83       	std	Y+5, r24	; 0x05
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
    3f94:	8d 81       	ldd	r24, Y+5	; 0x05
    3f96:	81 30       	cpi	r24, 0x01	; 1
    3f98:	71 f4       	brne	.+28     	; 0x3fb6 <xTaskGenericCreate+0x1b6>
	{
		if( xSchedulerRunning != pdFALSE )
    3f9a:	80 91 76 04 	lds	r24, 0x0476
    3f9e:	88 23       	and	r24, r24
    3fa0:	51 f0       	breq	.+20     	; 0x3fb6 <xTaskGenericCreate+0x1b6>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
    3fa2:	e0 91 6e 04 	lds	r30, 0x046E
    3fa6:	f0 91 6f 04 	lds	r31, 0x046F
    3faa:	96 89       	ldd	r25, Z+22	; 0x16
    3fac:	8e 85       	ldd	r24, Y+14	; 0x0e
    3fae:	98 17       	cp	r25, r24
    3fb0:	10 f4       	brcc	.+4      	; 0x3fb6 <xTaskGenericCreate+0x1b6>
			{
				portYIELD_WITHIN_API();
    3fb2:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
			}
		}
	}

	return xReturn;
    3fb6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3fb8:	64 96       	adiw	r28, 0x14	; 20
    3fba:	0f b6       	in	r0, 0x3f	; 63
    3fbc:	f8 94       	cli
    3fbe:	de bf       	out	0x3e, r29	; 62
    3fc0:	0f be       	out	0x3f, r0	; 63
    3fc2:	cd bf       	out	0x3d, r28	; 61
    3fc4:	cf 91       	pop	r28
    3fc6:	df 91       	pop	r29
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	df 90       	pop	r13
    3fd2:	cf 90       	pop	r12
    3fd4:	bf 90       	pop	r11
    3fd6:	af 90       	pop	r10
    3fd8:	08 95       	ret

00003fda <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( xTaskHandle pxTaskToDelete )
	{
    3fda:	df 93       	push	r29
    3fdc:	cf 93       	push	r28
    3fde:	00 d0       	rcall	.+0      	; 0x3fe0 <vTaskDelete+0x6>
    3fe0:	00 d0       	rcall	.+0      	; 0x3fe2 <vTaskDelete+0x8>
    3fe2:	00 d0       	rcall	.+0      	; 0x3fe4 <vTaskDelete+0xa>
    3fe4:	cd b7       	in	r28, 0x3d	; 61
    3fe6:	de b7       	in	r29, 0x3e	; 62
    3fe8:	9c 83       	std	Y+4, r25	; 0x04
    3fea:	8b 83       	std	Y+3, r24	; 0x03
	tskTCB *pxTCB;

		taskENTER_CRITICAL();
    3fec:	0f b6       	in	r0, 0x3f	; 63
    3fee:	f8 94       	cli
    3ff0:	0f 92       	push	r0
		{
			/* Ensure a yield is performed if the current task is being
			deleted. */
			if( pxTaskToDelete == pxCurrentTCB )
    3ff2:	20 91 6e 04 	lds	r18, 0x046E
    3ff6:	30 91 6f 04 	lds	r19, 0x046F
    3ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    3ffc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ffe:	82 17       	cp	r24, r18
    4000:	93 07       	cpc	r25, r19
    4002:	11 f4       	brne	.+4      	; 0x4008 <vTaskDelete+0x2e>
			{
				pxTaskToDelete = NULL;
    4004:	1c 82       	std	Y+4, r1	; 0x04
    4006:	1b 82       	std	Y+3, r1	; 0x03
			}

			/* If null is passed in here then we are deleting ourselves. */
			pxTCB = prvGetTCBFromHandle( pxTaskToDelete );
    4008:	8b 81       	ldd	r24, Y+3	; 0x03
    400a:	9c 81       	ldd	r25, Y+4	; 0x04
    400c:	00 97       	sbiw	r24, 0x00	; 0
    400e:	39 f4       	brne	.+14     	; 0x401e <vTaskDelete+0x44>
    4010:	80 91 6e 04 	lds	r24, 0x046E
    4014:	90 91 6f 04 	lds	r25, 0x046F
    4018:	9e 83       	std	Y+6, r25	; 0x06
    401a:	8d 83       	std	Y+5, r24	; 0x05
    401c:	04 c0       	rjmp	.+8      	; 0x4026 <vTaskDelete+0x4c>
    401e:	8b 81       	ldd	r24, Y+3	; 0x03
    4020:	9c 81       	ldd	r25, Y+4	; 0x04
    4022:	9e 83       	std	Y+6, r25	; 0x06
    4024:	8d 83       	std	Y+5, r24	; 0x05
    4026:	8d 81       	ldd	r24, Y+5	; 0x05
    4028:	9e 81       	ldd	r25, Y+6	; 0x06
    402a:	9a 83       	std	Y+2, r25	; 0x02
    402c:	89 83       	std	Y+1, r24	; 0x01

			/* Remove task from the ready list and place in the	termination list.
			This will stop the task from be scheduled.  The idle task will check
			the termination list and free up any memory allocated by the
			scheduler for the TCB and stack. */
			vListRemove( &( pxTCB->xGenericListItem ) );
    402e:	89 81       	ldd	r24, Y+1	; 0x01
    4030:	9a 81       	ldd	r25, Y+2	; 0x02
    4032:	02 96       	adiw	r24, 0x02	; 2
    4034:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

			/* Is the task waiting on an event also? */
			if( pxTCB->xEventListItem.pvContainer != NULL )
    4038:	e9 81       	ldd	r30, Y+1	; 0x01
    403a:	fa 81       	ldd	r31, Y+2	; 0x02
    403c:	84 89       	ldd	r24, Z+20	; 0x14
    403e:	95 89       	ldd	r25, Z+21	; 0x15
    4040:	00 97       	sbiw	r24, 0x00	; 0
    4042:	29 f0       	breq	.+10     	; 0x404e <vTaskDelete+0x74>
			{
				vListRemove( &( pxTCB->xEventListItem ) );
    4044:	89 81       	ldd	r24, Y+1	; 0x01
    4046:	9a 81       	ldd	r25, Y+2	; 0x02
    4048:	0c 96       	adiw	r24, 0x0c	; 12
    404a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
			}

			vListInsertEnd( ( xList * ) &xTasksWaitingTermination, &( pxTCB->xGenericListItem ) );
    404e:	89 81       	ldd	r24, Y+1	; 0x01
    4050:	9a 81       	ldd	r25, Y+2	; 0x02
    4052:	9c 01       	movw	r18, r24
    4054:	2e 5f       	subi	r18, 0xFE	; 254
    4056:	3f 4f       	sbci	r19, 0xFF	; 255
    4058:	8c ee       	ldi	r24, 0xEC	; 236
    405a:	94 e0       	ldi	r25, 0x04	; 4
    405c:	b9 01       	movw	r22, r18
    405e:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

			/* Increment the ucTasksDeleted variable so the idle task knows
			there is a task that has been deleted and that it should therefore
			check the xTasksWaitingTermination list. */
			++uxTasksDeleted;
    4062:	80 91 70 04 	lds	r24, 0x0470
    4066:	8f 5f       	subi	r24, 0xFF	; 255
    4068:	80 93 70 04 	sts	0x0470, r24

			/* Increment the uxTaskNumberVariable also so kernel aware debuggers
			can detect that the task lists need re-generating. */
			uxTaskNumber++;
    406c:	80 91 7b 04 	lds	r24, 0x047B
    4070:	8f 5f       	subi	r24, 0xFF	; 255
    4072:	80 93 7b 04 	sts	0x047B, r24

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
    4076:	0f 90       	pop	r0
    4078:	0f be       	out	0x3f, r0	; 63

		/* Force a reschedule if we have just deleted the current task. */
		if( xSchedulerRunning != pdFALSE )
    407a:	80 91 76 04 	lds	r24, 0x0476
    407e:	88 23       	and	r24, r24
    4080:	31 f0       	breq	.+12     	; 0x408e <vTaskDelete+0xb4>
		{
			if( ( void * ) pxTaskToDelete == NULL )
    4082:	8b 81       	ldd	r24, Y+3	; 0x03
    4084:	9c 81       	ldd	r25, Y+4	; 0x04
    4086:	00 97       	sbiw	r24, 0x00	; 0
    4088:	11 f4       	brne	.+4      	; 0x408e <vTaskDelete+0xb4>
			{
				portYIELD_WITHIN_API();
    408a:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
			}
		}
	}
    408e:	26 96       	adiw	r28, 0x06	; 6
    4090:	0f b6       	in	r0, 0x3f	; 63
    4092:	f8 94       	cli
    4094:	de bf       	out	0x3e, r29	; 62
    4096:	0f be       	out	0x3f, r0	; 63
    4098:	cd bf       	out	0x3d, r28	; 61
    409a:	cf 91       	pop	r28
    409c:	df 91       	pop	r29
    409e:	08 95       	ret

000040a0 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
    40a0:	df 93       	push	r29
    40a2:	cf 93       	push	r28
    40a4:	cd b7       	in	r28, 0x3d	; 61
    40a6:	de b7       	in	r29, 0x3e	; 62
    40a8:	28 97       	sbiw	r28, 0x08	; 8
    40aa:	0f b6       	in	r0, 0x3f	; 63
    40ac:	f8 94       	cli
    40ae:	de bf       	out	0x3e, r29	; 62
    40b0:	0f be       	out	0x3f, r0	; 63
    40b2:	cd bf       	out	0x3d, r28	; 61
    40b4:	9e 83       	std	Y+6, r25	; 0x06
    40b6:	8d 83       	std	Y+5, r24	; 0x05
    40b8:	78 87       	std	Y+8, r23	; 0x08
    40ba:	6f 83       	std	Y+7, r22	; 0x07
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;
    40bc:	19 82       	std	Y+1, r1	; 0x01

		configASSERT( pxPreviousWakeTime );
		configASSERT( ( xTimeIncrement > 0U ) );

		vTaskSuspendAll();
    40be:	0e 94 3c 21 	call	0x4278	; 0x4278 <vTaskSuspendAll>
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
    40c2:	ed 81       	ldd	r30, Y+5	; 0x05
    40c4:	fe 81       	ldd	r31, Y+6	; 0x06
    40c6:	20 81       	ld	r18, Z
    40c8:	31 81       	ldd	r19, Z+1	; 0x01
    40ca:	8f 81       	ldd	r24, Y+7	; 0x07
    40cc:	98 85       	ldd	r25, Y+8	; 0x08
    40ce:	82 0f       	add	r24, r18
    40d0:	93 1f       	adc	r25, r19
    40d2:	9c 83       	std	Y+4, r25	; 0x04
    40d4:	8b 83       	std	Y+3, r24	; 0x03

			if( xTickCount < *pxPreviousWakeTime )
    40d6:	ed 81       	ldd	r30, Y+5	; 0x05
    40d8:	fe 81       	ldd	r31, Y+6	; 0x06
    40da:	20 81       	ld	r18, Z
    40dc:	31 81       	ldd	r19, Z+1	; 0x01
    40de:	80 91 72 04 	lds	r24, 0x0472
    40e2:	90 91 73 04 	lds	r25, 0x0473
    40e6:	82 17       	cp	r24, r18
    40e8:	93 07       	cpc	r25, r19
    40ea:	a8 f4       	brcc	.+42     	; 0x4116 <vTaskDelayUntil+0x76>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
    40ec:	ed 81       	ldd	r30, Y+5	; 0x05
    40ee:	fe 81       	ldd	r31, Y+6	; 0x06
    40f0:	20 81       	ld	r18, Z
    40f2:	31 81       	ldd	r19, Z+1	; 0x01
    40f4:	8b 81       	ldd	r24, Y+3	; 0x03
    40f6:	9c 81       	ldd	r25, Y+4	; 0x04
    40f8:	82 17       	cp	r24, r18
    40fa:	93 07       	cpc	r25, r19
    40fc:	00 f5       	brcc	.+64     	; 0x413e <vTaskDelayUntil+0x9e>
    40fe:	20 91 72 04 	lds	r18, 0x0472
    4102:	30 91 73 04 	lds	r19, 0x0473
    4106:	8b 81       	ldd	r24, Y+3	; 0x03
    4108:	9c 81       	ldd	r25, Y+4	; 0x04
    410a:	28 17       	cp	r18, r24
    410c:	39 07       	cpc	r19, r25
    410e:	b8 f4       	brcc	.+46     	; 0x413e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    4110:	81 e0       	ldi	r24, 0x01	; 1
    4112:	89 83       	std	Y+1, r24	; 0x01
    4114:	14 c0       	rjmp	.+40     	; 0x413e <vTaskDelayUntil+0x9e>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
    4116:	ed 81       	ldd	r30, Y+5	; 0x05
    4118:	fe 81       	ldd	r31, Y+6	; 0x06
    411a:	20 81       	ld	r18, Z
    411c:	31 81       	ldd	r19, Z+1	; 0x01
    411e:	8b 81       	ldd	r24, Y+3	; 0x03
    4120:	9c 81       	ldd	r25, Y+4	; 0x04
    4122:	82 17       	cp	r24, r18
    4124:	93 07       	cpc	r25, r19
    4126:	48 f0       	brcs	.+18     	; 0x413a <vTaskDelayUntil+0x9a>
    4128:	20 91 72 04 	lds	r18, 0x0472
    412c:	30 91 73 04 	lds	r19, 0x0473
    4130:	8b 81       	ldd	r24, Y+3	; 0x03
    4132:	9c 81       	ldd	r25, Y+4	; 0x04
    4134:	28 17       	cp	r18, r24
    4136:	39 07       	cpc	r19, r25
    4138:	10 f4       	brcc	.+4      	; 0x413e <vTaskDelayUntil+0x9e>
				{
					xShouldDelay = pdTRUE;
    413a:	81 e0       	ldi	r24, 0x01	; 1
    413c:	89 83       	std	Y+1, r24	; 0x01
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
    413e:	ed 81       	ldd	r30, Y+5	; 0x05
    4140:	fe 81       	ldd	r31, Y+6	; 0x06
    4142:	8b 81       	ldd	r24, Y+3	; 0x03
    4144:	9c 81       	ldd	r25, Y+4	; 0x04
    4146:	91 83       	std	Z+1, r25	; 0x01
    4148:	80 83       	st	Z, r24

			if( xShouldDelay != pdFALSE )
    414a:	89 81       	ldd	r24, Y+1	; 0x01
    414c:	88 23       	and	r24, r24
    414e:	59 f0       	breq	.+22     	; 0x4166 <vTaskDelayUntil+0xc6>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4150:	80 91 6e 04 	lds	r24, 0x046E
    4154:	90 91 6f 04 	lds	r25, 0x046F
    4158:	02 96       	adiw	r24, 0x02	; 2
    415a:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    415e:	8b 81       	ldd	r24, Y+3	; 0x03
    4160:	9c 81       	ldd	r25, Y+4	; 0x04
    4162:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <prvAddCurrentTaskToDelayedList>
			}
		}
		xAlreadyYielded = xTaskResumeAll();
    4166:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>
    416a:	8a 83       	std	Y+2, r24	; 0x02

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    416c:	8a 81       	ldd	r24, Y+2	; 0x02
    416e:	88 23       	and	r24, r24
    4170:	11 f4       	brne	.+4      	; 0x4176 <vTaskDelayUntil+0xd6>
		{
			portYIELD_WITHIN_API();
    4172:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
		}
	}
    4176:	28 96       	adiw	r28, 0x08	; 8
    4178:	0f b6       	in	r0, 0x3f	; 63
    417a:	f8 94       	cli
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	cd bf       	out	0x3d, r28	; 61
    4182:	cf 91       	pop	r28
    4184:	df 91       	pop	r29
    4186:	08 95       	ret

00004188 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( portTickType xTicksToDelay )
	{
    4188:	df 93       	push	r29
    418a:	cf 93       	push	r28
    418c:	00 d0       	rcall	.+0      	; 0x418e <vTaskDelay+0x6>
    418e:	00 d0       	rcall	.+0      	; 0x4190 <vTaskDelay+0x8>
    4190:	0f 92       	push	r0
    4192:	cd b7       	in	r28, 0x3d	; 61
    4194:	de b7       	in	r29, 0x3e	; 62
    4196:	9d 83       	std	Y+5, r25	; 0x05
    4198:	8c 83       	std	Y+4, r24	; 0x04
	portTickType xTimeToWake;
	signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    419a:	19 82       	std	Y+1, r1	; 0x01

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( portTickType ) 0U )
    419c:	8c 81       	ldd	r24, Y+4	; 0x04
    419e:	9d 81       	ldd	r25, Y+5	; 0x05
    41a0:	00 97       	sbiw	r24, 0x00	; 0
    41a2:	d1 f0       	breq	.+52     	; 0x41d8 <vTaskDelay+0x50>
		{
			vTaskSuspendAll();
    41a4:	0e 94 3c 21 	call	0x4278	; 0x4278 <vTaskSuspendAll>
				This task cannot be in an event list as it is the currently
				executing task. */

				/* Calculate the time to wake - this may overflow but this is
				not a problem. */
				xTimeToWake = xTickCount + xTicksToDelay;
    41a8:	20 91 72 04 	lds	r18, 0x0472
    41ac:	30 91 73 04 	lds	r19, 0x0473
    41b0:	8c 81       	ldd	r24, Y+4	; 0x04
    41b2:	9d 81       	ldd	r25, Y+5	; 0x05
    41b4:	82 0f       	add	r24, r18
    41b6:	93 1f       	adc	r25, r19
    41b8:	9b 83       	std	Y+3, r25	; 0x03
    41ba:	8a 83       	std	Y+2, r24	; 0x02

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    41bc:	80 91 6e 04 	lds	r24, 0x046E
    41c0:	90 91 6f 04 	lds	r25, 0x046F
    41c4:	02 96       	adiw	r24, 0x02	; 2
    41c6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
				prvAddCurrentTaskToDelayedList( xTimeToWake );
    41ca:	8a 81       	ldd	r24, Y+2	; 0x02
    41cc:	9b 81       	ldd	r25, Y+3	; 0x03
    41ce:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
    41d2:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>
    41d6:	89 83       	std	Y+1, r24	; 0x01
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
    41d8:	89 81       	ldd	r24, Y+1	; 0x01
    41da:	88 23       	and	r24, r24
    41dc:	11 f4       	brne	.+4      	; 0x41e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
    41de:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
		}
	}
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	0f 90       	pop	r0
    41ec:	cf 91       	pop	r28
    41ee:	df 91       	pop	r29
    41f0:	08 95       	ret

000041f2 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
    41f2:	af 92       	push	r10
    41f4:	bf 92       	push	r11
    41f6:	cf 92       	push	r12
    41f8:	df 92       	push	r13
    41fa:	ef 92       	push	r14
    41fc:	ff 92       	push	r15
    41fe:	0f 93       	push	r16
    4200:	df 93       	push	r29
    4202:	cf 93       	push	r28
    4204:	0f 92       	push	r0
    4206:	cd b7       	in	r28, 0x3d	; 61
    4208:	de b7       	in	r29, 0x3e	; 62
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
    420a:	20 e6       	ldi	r18, 0x60	; 96
    420c:	30 e0       	ldi	r19, 0x00	; 0
    420e:	8e e5       	ldi	r24, 0x5E	; 94
    4210:	94 e2       	ldi	r25, 0x24	; 36
    4212:	b9 01       	movw	r22, r18
    4214:	45 e5       	ldi	r20, 0x55	; 85
    4216:	50 e0       	ldi	r21, 0x00	; 0
    4218:	20 e0       	ldi	r18, 0x00	; 0
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	00 e0       	ldi	r16, 0x00	; 0
    421e:	ee 24       	eor	r14, r14
    4220:	ff 24       	eor	r15, r15
    4222:	cc 24       	eor	r12, r12
    4224:	dd 24       	eor	r13, r13
    4226:	aa 24       	eor	r10, r10
    4228:	bb 24       	eor	r11, r11
    422a:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <xTaskGenericCreate>
    422e:	89 83       	std	Y+1, r24	; 0x01
			xReturn = xTimerCreateTimerTask();
		}
	}
	#endif

	if( xReturn == pdPASS )
    4230:	89 81       	ldd	r24, Y+1	; 0x01
    4232:	81 30       	cpi	r24, 0x01	; 1
    4234:	51 f4       	brne	.+20     	; 0x424a <vTaskStartScheduler+0x58>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
    4236:	f8 94       	cli

		xSchedulerRunning = pdTRUE;
    4238:	81 e0       	ldi	r24, 0x01	; 1
    423a:	80 93 76 04 	sts	0x0476, r24
		xTickCount = ( portTickType ) 0U;
    423e:	10 92 73 04 	sts	0x0473, r1
    4242:	10 92 72 04 	sts	0x0472, r1
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
		
		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
    4246:	0e 94 09 19 	call	0x3212	; 0x3212 <xPortStartScheduler>
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
}
    424a:	0f 90       	pop	r0
    424c:	cf 91       	pop	r28
    424e:	df 91       	pop	r29
    4250:	0f 91       	pop	r16
    4252:	ff 90       	pop	r15
    4254:	ef 90       	pop	r14
    4256:	df 90       	pop	r13
    4258:	cf 90       	pop	r12
    425a:	bf 90       	pop	r11
    425c:	af 90       	pop	r10
    425e:	08 95       	ret

00004260 <vTaskEndScheduler>:
/*-----------------------------------------------------------*/

void vTaskEndScheduler( void )
{
    4260:	df 93       	push	r29
    4262:	cf 93       	push	r28
    4264:	cd b7       	in	r28, 0x3d	; 61
    4266:	de b7       	in	r29, 0x3e	; 62
	/* Stop the scheduler interrupts and call the portable scheduler end
	routine so the original ISRs can be restored if necessary.  The port
	layer must ensure interrupts enable	bit is left in the correct state. */
	portDISABLE_INTERRUPTS();
    4268:	f8 94       	cli
	xSchedulerRunning = pdFALSE;
    426a:	10 92 76 04 	sts	0x0476, r1
	vPortEndScheduler();
    426e:	0e 94 3e 19 	call	0x327c	; 0x327c <vPortEndScheduler>
}
    4272:	cf 91       	pop	r28
    4274:	df 91       	pop	r29
    4276:	08 95       	ret

00004278 <vTaskSuspendAll>:
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
    4278:	df 93       	push	r29
    427a:	cf 93       	push	r28
    427c:	cd b7       	in	r28, 0x3d	; 61
    427e:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
    4280:	80 91 77 04 	lds	r24, 0x0477
    4284:	8f 5f       	subi	r24, 0xFF	; 255
    4286:	80 93 77 04 	sts	0x0477, r24
}
    428a:	cf 91       	pop	r28
    428c:	df 91       	pop	r29
    428e:	08 95       	ret

00004290 <xTaskResumeAll>:
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
    4290:	df 93       	push	r29
    4292:	cf 93       	push	r28
    4294:	00 d0       	rcall	.+0      	; 0x4296 <xTaskResumeAll+0x6>
    4296:	00 d0       	rcall	.+0      	; 0x4298 <xTaskResumeAll+0x8>
    4298:	cd b7       	in	r28, 0x3d	; 61
    429a:	de b7       	in	r29, 0x3e	; 62
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
    429c:	1a 82       	std	Y+2, r1	; 0x02
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
    429e:	0f b6       	in	r0, 0x3f	; 63
    42a0:	f8 94       	cli
    42a2:	0f 92       	push	r0
	{
		--uxSchedulerSuspended;
    42a4:	80 91 77 04 	lds	r24, 0x0477
    42a8:	81 50       	subi	r24, 0x01	; 1
    42aa:	80 93 77 04 	sts	0x0477, r24

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    42ae:	80 91 77 04 	lds	r24, 0x0477
    42b2:	88 23       	and	r24, r24
    42b4:	09 f0       	breq	.+2      	; 0x42b8 <xTaskResumeAll+0x28>
    42b6:	6a c0       	rjmp	.+212    	; 0x438c <xTaskResumeAll+0xfc>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
    42b8:	80 91 71 04 	lds	r24, 0x0471
    42bc:	88 23       	and	r24, r24
    42be:	09 f4       	brne	.+2      	; 0x42c2 <xTaskResumeAll+0x32>
    42c0:	65 c0       	rjmp	.+202    	; 0x438c <xTaskResumeAll+0xfc>
			{
				portBASE_TYPE xYieldRequired = pdFALSE;
    42c2:	19 82       	std	Y+1, r1	; 0x01
    42c4:	41 c0       	rjmp	.+130    	; 0x4348 <xTaskResumeAll+0xb8>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
    42c6:	e0 91 e8 04 	lds	r30, 0x04E8
    42ca:	f0 91 e9 04 	lds	r31, 0x04E9
    42ce:	86 81       	ldd	r24, Z+6	; 0x06
    42d0:	97 81       	ldd	r25, Z+7	; 0x07
    42d2:	9c 83       	std	Y+4, r25	; 0x04
    42d4:	8b 83       	std	Y+3, r24	; 0x03
					vListRemove( &( pxTCB->xEventListItem ) );
    42d6:	8b 81       	ldd	r24, Y+3	; 0x03
    42d8:	9c 81       	ldd	r25, Y+4	; 0x04
    42da:	0c 96       	adiw	r24, 0x0c	; 12
    42dc:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
					vListRemove( &( pxTCB->xGenericListItem ) );
    42e0:	8b 81       	ldd	r24, Y+3	; 0x03
    42e2:	9c 81       	ldd	r25, Y+4	; 0x04
    42e4:	02 96       	adiw	r24, 0x02	; 2
    42e6:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
					prvAddTaskToReadyQueue( pxTCB );
    42ea:	eb 81       	ldd	r30, Y+3	; 0x03
    42ec:	fc 81       	ldd	r31, Y+4	; 0x04
    42ee:	96 89       	ldd	r25, Z+22	; 0x16
    42f0:	80 91 75 04 	lds	r24, 0x0475
    42f4:	89 17       	cp	r24, r25
    42f6:	28 f4       	brcc	.+10     	; 0x4302 <xTaskResumeAll+0x72>
    42f8:	eb 81       	ldd	r30, Y+3	; 0x03
    42fa:	fc 81       	ldd	r31, Y+4	; 0x04
    42fc:	86 89       	ldd	r24, Z+22	; 0x16
    42fe:	80 93 75 04 	sts	0x0475, r24
    4302:	eb 81       	ldd	r30, Y+3	; 0x03
    4304:	fc 81       	ldd	r31, Y+4	; 0x04
    4306:	86 89       	ldd	r24, Z+22	; 0x16
    4308:	28 2f       	mov	r18, r24
    430a:	30 e0       	ldi	r19, 0x00	; 0
    430c:	c9 01       	movw	r24, r18
    430e:	88 0f       	add	r24, r24
    4310:	99 1f       	adc	r25, r25
    4312:	88 0f       	add	r24, r24
    4314:	99 1f       	adc	r25, r25
    4316:	88 0f       	add	r24, r24
    4318:	99 1f       	adc	r25, r25
    431a:	82 0f       	add	r24, r18
    431c:	93 1f       	adc	r25, r19
    431e:	84 58       	subi	r24, 0x84	; 132
    4320:	9b 4f       	sbci	r25, 0xFB	; 251
    4322:	2b 81       	ldd	r18, Y+3	; 0x03
    4324:	3c 81       	ldd	r19, Y+4	; 0x04
    4326:	2e 5f       	subi	r18, 0xFE	; 254
    4328:	3f 4f       	sbci	r19, 0xFF	; 255
    432a:	b9 01       	movw	r22, r18
    432c:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
    4330:	eb 81       	ldd	r30, Y+3	; 0x03
    4332:	fc 81       	ldd	r31, Y+4	; 0x04
    4334:	96 89       	ldd	r25, Z+22	; 0x16
    4336:	e0 91 6e 04 	lds	r30, 0x046E
    433a:	f0 91 6f 04 	lds	r31, 0x046F
    433e:	86 89       	ldd	r24, Z+22	; 0x16
    4340:	98 17       	cp	r25, r24
    4342:	10 f0       	brcs	.+4      	; 0x4348 <xTaskResumeAll+0xb8>
					{
						xYieldRequired = pdTRUE;
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	89 83       	std	Y+1, r24	; 0x01
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
    4348:	80 91 e3 04 	lds	r24, 0x04E3
    434c:	88 23       	and	r24, r24
    434e:	09 f0       	breq	.+2      	; 0x4352 <xTaskResumeAll+0xc2>
    4350:	ba cf       	rjmp	.-140    	; 0x42c6 <xTaskResumeAll+0x36>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    4352:	80 91 78 04 	lds	r24, 0x0478
    4356:	88 23       	and	r24, r24
    4358:	61 f0       	breq	.+24     	; 0x4372 <xTaskResumeAll+0xe2>
    435a:	07 c0       	rjmp	.+14     	; 0x436a <xTaskResumeAll+0xda>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
    435c:	0e 94 05 22 	call	0x440a	; 0x440a <vTaskIncrementTick>
						--uxMissedTicks;
    4360:	80 91 78 04 	lds	r24, 0x0478
    4364:	81 50       	subi	r24, 0x01	; 1
    4366:	80 93 78 04 	sts	0x0478, r24
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
    436a:	80 91 78 04 	lds	r24, 0x0478
    436e:	88 23       	and	r24, r24
    4370:	a9 f7       	brne	.-22     	; 0x435c <xTaskResumeAll+0xcc>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
    4372:	89 81       	ldd	r24, Y+1	; 0x01
    4374:	81 30       	cpi	r24, 0x01	; 1
    4376:	21 f0       	breq	.+8      	; 0x4380 <xTaskResumeAll+0xf0>
    4378:	80 91 79 04 	lds	r24, 0x0479
    437c:	81 30       	cpi	r24, 0x01	; 1
    437e:	31 f4       	brne	.+12     	; 0x438c <xTaskResumeAll+0xfc>
				{
					xAlreadyYielded = pdTRUE;
    4380:	81 e0       	ldi	r24, 0x01	; 1
    4382:	8a 83       	std	Y+2, r24	; 0x02
					xMissedYield = pdFALSE;
    4384:	10 92 79 04 	sts	0x0479, r1
					portYIELD_WITHIN_API();
    4388:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
				}
			}
		}
	}
	taskEXIT_CRITICAL();
    438c:	0f 90       	pop	r0
    438e:	0f be       	out	0x3f, r0	; 63

	return xAlreadyYielded;
    4390:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4392:	0f 90       	pop	r0
    4394:	0f 90       	pop	r0
    4396:	0f 90       	pop	r0
    4398:	0f 90       	pop	r0
    439a:	cf 91       	pop	r28
    439c:	df 91       	pop	r29
    439e:	08 95       	ret

000043a0 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
    43a0:	df 93       	push	r29
    43a2:	cf 93       	push	r28
    43a4:	00 d0       	rcall	.+0      	; 0x43a6 <xTaskGetTickCount+0x6>
    43a6:	cd b7       	in	r28, 0x3d	; 61
    43a8:	de b7       	in	r29, 0x3e	; 62
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
    43aa:	0f b6       	in	r0, 0x3f	; 63
    43ac:	f8 94       	cli
    43ae:	0f 92       	push	r0
	{
		xTicks = xTickCount;
    43b0:	80 91 72 04 	lds	r24, 0x0472
    43b4:	90 91 73 04 	lds	r25, 0x0473
    43b8:	9a 83       	std	Y+2, r25	; 0x02
    43ba:	89 83       	std	Y+1, r24	; 0x01
	}
	taskEXIT_CRITICAL();
    43bc:	0f 90       	pop	r0
    43be:	0f be       	out	0x3f, r0	; 63

	return xTicks;
    43c0:	89 81       	ldd	r24, Y+1	; 0x01
    43c2:	9a 81       	ldd	r25, Y+2	; 0x02
}
    43c4:	0f 90       	pop	r0
    43c6:	0f 90       	pop	r0
    43c8:	cf 91       	pop	r28
    43ca:	df 91       	pop	r29
    43cc:	08 95       	ret

000043ce <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

portTickType xTaskGetTickCountFromISR( void )
{
    43ce:	df 93       	push	r29
    43d0:	cf 93       	push	r28
    43d2:	00 d0       	rcall	.+0      	; 0x43d4 <xTaskGetTickCountFromISR+0x6>
    43d4:	0f 92       	push	r0
    43d6:	cd b7       	in	r28, 0x3d	; 61
    43d8:	de b7       	in	r29, 0x3e	; 62
portTickType xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
    43da:	19 82       	std	Y+1, r1	; 0x01
	xReturn = xTickCount;
    43dc:	80 91 72 04 	lds	r24, 0x0472
    43e0:	90 91 73 04 	lds	r25, 0x0473
    43e4:	9b 83       	std	Y+3, r25	; 0x03
    43e6:	8a 83       	std	Y+2, r24	; 0x02
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
    43e8:	8a 81       	ldd	r24, Y+2	; 0x02
    43ea:	9b 81       	ldd	r25, Y+3	; 0x03
}
    43ec:	0f 90       	pop	r0
    43ee:	0f 90       	pop	r0
    43f0:	0f 90       	pop	r0
    43f2:	cf 91       	pop	r28
    43f4:	df 91       	pop	r29
    43f6:	08 95       	ret

000043f8 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

unsigned portBASE_TYPE uxTaskGetNumberOfTasks( void )
{
    43f8:	df 93       	push	r29
    43fa:	cf 93       	push	r28
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62
	/* A critical section is not required because the variables are of type
	portBASE_TYPE. */
	return uxCurrentNumberOfTasks;
    4400:	80 91 71 04 	lds	r24, 0x0471
}
    4404:	cf 91       	pop	r28
    4406:	df 91       	pop	r29
    4408:	08 95       	ret

0000440a <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
    440a:	df 93       	push	r29
    440c:	cf 93       	push	r28
    440e:	00 d0       	rcall	.+0      	; 0x4410 <vTaskIncrementTick+0x6>
    4410:	00 d0       	rcall	.+0      	; 0x4412 <vTaskIncrementTick+0x8>
    4412:	00 d0       	rcall	.+0      	; 0x4414 <vTaskIncrementTick+0xa>
    4414:	cd b7       	in	r28, 0x3d	; 61
    4416:	de b7       	in	r29, 0x3e	; 62
tskTCB * pxTCB;

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    4418:	80 91 77 04 	lds	r24, 0x0477
    441c:	88 23       	and	r24, r24
    441e:	09 f0       	breq	.+2      	; 0x4422 <vTaskIncrementTick+0x18>
    4420:	bb c0       	rjmp	.+374    	; 0x4598 <vTaskIncrementTick+0x18e>
	{
		++xTickCount;
    4422:	80 91 72 04 	lds	r24, 0x0472
    4426:	90 91 73 04 	lds	r25, 0x0473
    442a:	01 96       	adiw	r24, 0x01	; 1
    442c:	90 93 73 04 	sts	0x0473, r25
    4430:	80 93 72 04 	sts	0x0472, r24
		if( xTickCount == ( portTickType ) 0U )
    4434:	80 91 72 04 	lds	r24, 0x0472
    4438:	90 91 73 04 	lds	r25, 0x0473
    443c:	00 97       	sbiw	r24, 0x00	; 0
    443e:	d1 f5       	brne	.+116    	; 0x44b4 <vTaskIncrementTick+0xaa>
			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
			
			pxTemp = pxDelayedTaskList;
    4440:	80 91 df 04 	lds	r24, 0x04DF
    4444:	90 91 e0 04 	lds	r25, 0x04E0
    4448:	9c 83       	std	Y+4, r25	; 0x04
    444a:	8b 83       	std	Y+3, r24	; 0x03
			pxDelayedTaskList = pxOverflowDelayedTaskList;
    444c:	80 91 e1 04 	lds	r24, 0x04E1
    4450:	90 91 e2 04 	lds	r25, 0x04E2
    4454:	90 93 e0 04 	sts	0x04E0, r25
    4458:	80 93 df 04 	sts	0x04DF, r24
			pxOverflowDelayedTaskList = pxTemp;
    445c:	8b 81       	ldd	r24, Y+3	; 0x03
    445e:	9c 81       	ldd	r25, Y+4	; 0x04
    4460:	90 93 e2 04 	sts	0x04E2, r25
    4464:	80 93 e1 04 	sts	0x04E1, r24
			xNumOfOverflows++;
    4468:	80 91 7a 04 	lds	r24, 0x047A
    446c:	8f 5f       	subi	r24, 0xFF	; 255
    446e:	80 93 7a 04 	sts	0x047A, r24
	
			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
    4472:	e0 91 df 04 	lds	r30, 0x04DF
    4476:	f0 91 e0 04 	lds	r31, 0x04E0
    447a:	80 81       	ld	r24, Z
    447c:	88 23       	and	r24, r24
    447e:	39 f4       	brne	.+14     	; 0x448e <vTaskIncrementTick+0x84>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the	
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
    4480:	8f ef       	ldi	r24, 0xFF	; 255
    4482:	9f ef       	ldi	r25, 0xFF	; 255
    4484:	90 93 98 01 	sts	0x0198, r25
    4488:	80 93 97 01 	sts	0x0197, r24
    448c:	13 c0       	rjmp	.+38     	; 0x44b4 <vTaskIncrementTick+0xaa>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
    448e:	e0 91 df 04 	lds	r30, 0x04DF
    4492:	f0 91 e0 04 	lds	r31, 0x04E0
    4496:	05 80       	ldd	r0, Z+5	; 0x05
    4498:	f6 81       	ldd	r31, Z+6	; 0x06
    449a:	e0 2d       	mov	r30, r0
    449c:	86 81       	ldd	r24, Z+6	; 0x06
    449e:	97 81       	ldd	r25, Z+7	; 0x07
    44a0:	9e 83       	std	Y+6, r25	; 0x06
    44a2:	8d 83       	std	Y+5, r24	; 0x05
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
    44a4:	ed 81       	ldd	r30, Y+5	; 0x05
    44a6:	fe 81       	ldd	r31, Y+6	; 0x06
    44a8:	82 81       	ldd	r24, Z+2	; 0x02
    44aa:	93 81       	ldd	r25, Z+3	; 0x03
    44ac:	90 93 98 01 	sts	0x0198, r25
    44b0:	80 93 97 01 	sts	0x0197, r24
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
    44b4:	20 91 72 04 	lds	r18, 0x0472
    44b8:	30 91 73 04 	lds	r19, 0x0473
    44bc:	80 91 97 01 	lds	r24, 0x0197
    44c0:	90 91 98 01 	lds	r25, 0x0198
    44c4:	28 17       	cp	r18, r24
    44c6:	39 07       	cpc	r19, r25
    44c8:	08 f4       	brcc	.+2      	; 0x44cc <vTaskIncrementTick+0xc2>
    44ca:	6b c0       	rjmp	.+214    	; 0x45a2 <vTaskIncrementTick+0x198>
    44cc:	e0 91 df 04 	lds	r30, 0x04DF
    44d0:	f0 91 e0 04 	lds	r31, 0x04E0
    44d4:	80 81       	ld	r24, Z
    44d6:	88 23       	and	r24, r24
    44d8:	39 f4       	brne	.+14     	; 0x44e8 <vTaskIncrementTick+0xde>
    44da:	8f ef       	ldi	r24, 0xFF	; 255
    44dc:	9f ef       	ldi	r25, 0xFF	; 255
    44de:	90 93 98 01 	sts	0x0198, r25
    44e2:	80 93 97 01 	sts	0x0197, r24
    44e6:	5d c0       	rjmp	.+186    	; 0x45a2 <vTaskIncrementTick+0x198>
    44e8:	e0 91 df 04 	lds	r30, 0x04DF
    44ec:	f0 91 e0 04 	lds	r31, 0x04E0
    44f0:	05 80       	ldd	r0, Z+5	; 0x05
    44f2:	f6 81       	ldd	r31, Z+6	; 0x06
    44f4:	e0 2d       	mov	r30, r0
    44f6:	86 81       	ldd	r24, Z+6	; 0x06
    44f8:	97 81       	ldd	r25, Z+7	; 0x07
    44fa:	9e 83       	std	Y+6, r25	; 0x06
    44fc:	8d 83       	std	Y+5, r24	; 0x05
    44fe:	ed 81       	ldd	r30, Y+5	; 0x05
    4500:	fe 81       	ldd	r31, Y+6	; 0x06
    4502:	82 81       	ldd	r24, Z+2	; 0x02
    4504:	93 81       	ldd	r25, Z+3	; 0x03
    4506:	9a 83       	std	Y+2, r25	; 0x02
    4508:	89 83       	std	Y+1, r24	; 0x01
    450a:	20 91 72 04 	lds	r18, 0x0472
    450e:	30 91 73 04 	lds	r19, 0x0473
    4512:	89 81       	ldd	r24, Y+1	; 0x01
    4514:	9a 81       	ldd	r25, Y+2	; 0x02
    4516:	28 17       	cp	r18, r24
    4518:	39 07       	cpc	r19, r25
    451a:	38 f4       	brcc	.+14     	; 0x452a <vTaskIncrementTick+0x120>
    451c:	89 81       	ldd	r24, Y+1	; 0x01
    451e:	9a 81       	ldd	r25, Y+2	; 0x02
    4520:	90 93 98 01 	sts	0x0198, r25
    4524:	80 93 97 01 	sts	0x0197, r24
    4528:	3c c0       	rjmp	.+120    	; 0x45a2 <vTaskIncrementTick+0x198>
    452a:	8d 81       	ldd	r24, Y+5	; 0x05
    452c:	9e 81       	ldd	r25, Y+6	; 0x06
    452e:	02 96       	adiw	r24, 0x02	; 2
    4530:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
    4534:	ed 81       	ldd	r30, Y+5	; 0x05
    4536:	fe 81       	ldd	r31, Y+6	; 0x06
    4538:	84 89       	ldd	r24, Z+20	; 0x14
    453a:	95 89       	ldd	r25, Z+21	; 0x15
    453c:	00 97       	sbiw	r24, 0x00	; 0
    453e:	29 f0       	breq	.+10     	; 0x454a <vTaskIncrementTick+0x140>
    4540:	8d 81       	ldd	r24, Y+5	; 0x05
    4542:	9e 81       	ldd	r25, Y+6	; 0x06
    4544:	0c 96       	adiw	r24, 0x0c	; 12
    4546:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
    454a:	ed 81       	ldd	r30, Y+5	; 0x05
    454c:	fe 81       	ldd	r31, Y+6	; 0x06
    454e:	96 89       	ldd	r25, Z+22	; 0x16
    4550:	80 91 75 04 	lds	r24, 0x0475
    4554:	89 17       	cp	r24, r25
    4556:	28 f4       	brcc	.+10     	; 0x4562 <vTaskIncrementTick+0x158>
    4558:	ed 81       	ldd	r30, Y+5	; 0x05
    455a:	fe 81       	ldd	r31, Y+6	; 0x06
    455c:	86 89       	ldd	r24, Z+22	; 0x16
    455e:	80 93 75 04 	sts	0x0475, r24
    4562:	ed 81       	ldd	r30, Y+5	; 0x05
    4564:	fe 81       	ldd	r31, Y+6	; 0x06
    4566:	86 89       	ldd	r24, Z+22	; 0x16
    4568:	28 2f       	mov	r18, r24
    456a:	30 e0       	ldi	r19, 0x00	; 0
    456c:	c9 01       	movw	r24, r18
    456e:	88 0f       	add	r24, r24
    4570:	99 1f       	adc	r25, r25
    4572:	88 0f       	add	r24, r24
    4574:	99 1f       	adc	r25, r25
    4576:	88 0f       	add	r24, r24
    4578:	99 1f       	adc	r25, r25
    457a:	82 0f       	add	r24, r18
    457c:	93 1f       	adc	r25, r19
    457e:	ac 01       	movw	r20, r24
    4580:	44 58       	subi	r20, 0x84	; 132
    4582:	5b 4f       	sbci	r21, 0xFB	; 251
    4584:	8d 81       	ldd	r24, Y+5	; 0x05
    4586:	9e 81       	ldd	r25, Y+6	; 0x06
    4588:	9c 01       	movw	r18, r24
    458a:	2e 5f       	subi	r18, 0xFE	; 254
    458c:	3f 4f       	sbci	r19, 0xFF	; 255
    458e:	ca 01       	movw	r24, r20
    4590:	b9 01       	movw	r22, r18
    4592:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
    4596:	9a cf       	rjmp	.-204    	; 0x44cc <vTaskIncrementTick+0xc2>
	}
	else
	{
		++uxMissedTicks;
    4598:	80 91 78 04 	lds	r24, 0x0478
    459c:	8f 5f       	subi	r24, 0xFF	; 255
    459e:	80 93 78 04 	sts	0x0478, r24
		}
	}
	#endif

	traceTASK_INCREMENT_TICK( xTickCount );
}
    45a2:	26 96       	adiw	r28, 0x06	; 6
    45a4:	0f b6       	in	r0, 0x3f	; 63
    45a6:	f8 94       	cli
    45a8:	de bf       	out	0x3e, r29	; 62
    45aa:	0f be       	out	0x3f, r0	; 63
    45ac:	cd bf       	out	0x3d, r28	; 61
    45ae:	cf 91       	pop	r28
    45b0:	df 91       	pop	r29
    45b2:	08 95       	ret

000045b4 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    45b4:	df 93       	push	r29
    45b6:	cf 93       	push	r28
    45b8:	00 d0       	rcall	.+0      	; 0x45ba <vTaskSwitchContext+0x6>
    45ba:	cd b7       	in	r28, 0x3d	; 61
    45bc:	de b7       	in	r29, 0x3e	; 62
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
    45be:	80 91 77 04 	lds	r24, 0x0477
    45c2:	88 23       	and	r24, r24
    45c4:	49 f0       	breq	.+18     	; 0x45d8 <vTaskSwitchContext+0x24>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
    45c6:	81 e0       	ldi	r24, 0x01	; 1
    45c8:	80 93 79 04 	sts	0x0479, r24
    45cc:	54 c0       	rjmp	.+168    	; 0x4676 <vTaskSwitchContext+0xc2>
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
		{
			configASSERT( uxTopReadyPriority );
			--uxTopReadyPriority;
    45ce:	80 91 75 04 	lds	r24, 0x0475
    45d2:	81 50       	subi	r24, 0x01	; 1
    45d4:	80 93 75 04 	sts	0x0475, r24
	
		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();
	
		/* Find the highest priority queue that contains ready tasks. */
		while( listLIST_IS_EMPTY( &( pxReadyTasksLists[ uxTopReadyPriority ] ) ) )
    45d8:	80 91 75 04 	lds	r24, 0x0475
    45dc:	28 2f       	mov	r18, r24
    45de:	30 e0       	ldi	r19, 0x00	; 0
    45e0:	c9 01       	movw	r24, r18
    45e2:	88 0f       	add	r24, r24
    45e4:	99 1f       	adc	r25, r25
    45e6:	88 0f       	add	r24, r24
    45e8:	99 1f       	adc	r25, r25
    45ea:	88 0f       	add	r24, r24
    45ec:	99 1f       	adc	r25, r25
    45ee:	82 0f       	add	r24, r18
    45f0:	93 1f       	adc	r25, r19
    45f2:	fc 01       	movw	r30, r24
    45f4:	e4 58       	subi	r30, 0x84	; 132
    45f6:	fb 4f       	sbci	r31, 0xFB	; 251
    45f8:	80 81       	ld	r24, Z
    45fa:	88 23       	and	r24, r24
    45fc:	41 f3       	breq	.-48     	; 0x45ce <vTaskSwitchContext+0x1a>
			--uxTopReadyPriority;
		}
	
		/* listGET_OWNER_OF_NEXT_ENTRY walks through the list, so the tasks of the
		same priority get an equal share of the processor time. */
		listGET_OWNER_OF_NEXT_ENTRY( pxCurrentTCB, &( pxReadyTasksLists[ uxTopReadyPriority ] ) );
    45fe:	80 91 75 04 	lds	r24, 0x0475
    4602:	28 2f       	mov	r18, r24
    4604:	30 e0       	ldi	r19, 0x00	; 0
    4606:	c9 01       	movw	r24, r18
    4608:	88 0f       	add	r24, r24
    460a:	99 1f       	adc	r25, r25
    460c:	88 0f       	add	r24, r24
    460e:	99 1f       	adc	r25, r25
    4610:	88 0f       	add	r24, r24
    4612:	99 1f       	adc	r25, r25
    4614:	82 0f       	add	r24, r18
    4616:	93 1f       	adc	r25, r19
    4618:	84 58       	subi	r24, 0x84	; 132
    461a:	9b 4f       	sbci	r25, 0xFB	; 251
    461c:	9a 83       	std	Y+2, r25	; 0x02
    461e:	89 83       	std	Y+1, r24	; 0x01
    4620:	e9 81       	ldd	r30, Y+1	; 0x01
    4622:	fa 81       	ldd	r31, Y+2	; 0x02
    4624:	01 80       	ldd	r0, Z+1	; 0x01
    4626:	f2 81       	ldd	r31, Z+2	; 0x02
    4628:	e0 2d       	mov	r30, r0
    462a:	82 81       	ldd	r24, Z+2	; 0x02
    462c:	93 81       	ldd	r25, Z+3	; 0x03
    462e:	e9 81       	ldd	r30, Y+1	; 0x01
    4630:	fa 81       	ldd	r31, Y+2	; 0x02
    4632:	92 83       	std	Z+2, r25	; 0x02
    4634:	81 83       	std	Z+1, r24	; 0x01
    4636:	e9 81       	ldd	r30, Y+1	; 0x01
    4638:	fa 81       	ldd	r31, Y+2	; 0x02
    463a:	21 81       	ldd	r18, Z+1	; 0x01
    463c:	32 81       	ldd	r19, Z+2	; 0x02
    463e:	89 81       	ldd	r24, Y+1	; 0x01
    4640:	9a 81       	ldd	r25, Y+2	; 0x02
    4642:	03 96       	adiw	r24, 0x03	; 3
    4644:	28 17       	cp	r18, r24
    4646:	39 07       	cpc	r19, r25
    4648:	59 f4       	brne	.+22     	; 0x4660 <vTaskSwitchContext+0xac>
    464a:	e9 81       	ldd	r30, Y+1	; 0x01
    464c:	fa 81       	ldd	r31, Y+2	; 0x02
    464e:	01 80       	ldd	r0, Z+1	; 0x01
    4650:	f2 81       	ldd	r31, Z+2	; 0x02
    4652:	e0 2d       	mov	r30, r0
    4654:	82 81       	ldd	r24, Z+2	; 0x02
    4656:	93 81       	ldd	r25, Z+3	; 0x03
    4658:	e9 81       	ldd	r30, Y+1	; 0x01
    465a:	fa 81       	ldd	r31, Y+2	; 0x02
    465c:	92 83       	std	Z+2, r25	; 0x02
    465e:	81 83       	std	Z+1, r24	; 0x01
    4660:	e9 81       	ldd	r30, Y+1	; 0x01
    4662:	fa 81       	ldd	r31, Y+2	; 0x02
    4664:	01 80       	ldd	r0, Z+1	; 0x01
    4666:	f2 81       	ldd	r31, Z+2	; 0x02
    4668:	e0 2d       	mov	r30, r0
    466a:	86 81       	ldd	r24, Z+6	; 0x06
    466c:	97 81       	ldd	r25, Z+7	; 0x07
    466e:	90 93 6f 04 	sts	0x046F, r25
    4672:	80 93 6e 04 	sts	0x046E, r24
	
		traceTASK_SWITCHED_IN();
		vWriteTraceToBuffer();
	}
}
    4676:	0f 90       	pop	r0
    4678:	0f 90       	pop	r0
    467a:	cf 91       	pop	r28
    467c:	df 91       	pop	r29
    467e:	08 95       	ret

00004680 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
    4680:	df 93       	push	r29
    4682:	cf 93       	push	r28
    4684:	00 d0       	rcall	.+0      	; 0x4686 <vTaskPlaceOnEventList+0x6>
    4686:	00 d0       	rcall	.+0      	; 0x4688 <vTaskPlaceOnEventList+0x8>
    4688:	00 d0       	rcall	.+0      	; 0x468a <vTaskPlaceOnEventList+0xa>
    468a:	cd b7       	in	r28, 0x3d	; 61
    468c:	de b7       	in	r29, 0x3e	; 62
    468e:	9c 83       	std	Y+4, r25	; 0x04
    4690:	8b 83       	std	Y+3, r24	; 0x03
    4692:	7e 83       	std	Y+6, r23	; 0x06
    4694:	6d 83       	std	Y+5, r22	; 0x05
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
    4696:	4b 81       	ldd	r20, Y+3	; 0x03
    4698:	5c 81       	ldd	r21, Y+4	; 0x04
    469a:	80 91 6e 04 	lds	r24, 0x046E
    469e:	90 91 6f 04 	lds	r25, 0x046F
    46a2:	9c 01       	movw	r18, r24
    46a4:	24 5f       	subi	r18, 0xF4	; 244
    46a6:	3f 4f       	sbci	r19, 0xFF	; 255
    46a8:	ca 01       	movw	r24, r20
    46aa:	b9 01       	movw	r22, r18
    46ac:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	vListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    46b0:	80 91 6e 04 	lds	r24, 0x046E
    46b4:	90 91 6f 04 	lds	r25, 0x046F
    46b8:	02 96       	adiw	r24, 0x02	; 2
    46ba:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
	}
	#else
	{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
    46be:	20 91 72 04 	lds	r18, 0x0472
    46c2:	30 91 73 04 	lds	r19, 0x0473
    46c6:	8d 81       	ldd	r24, Y+5	; 0x05
    46c8:	9e 81       	ldd	r25, Y+6	; 0x06
    46ca:	82 0f       	add	r24, r18
    46cc:	93 1f       	adc	r25, r19
    46ce:	9a 83       	std	Y+2, r25	; 0x02
    46d0:	89 83       	std	Y+1, r24	; 0x01
			prvAddCurrentTaskToDelayedList( xTimeToWake );
    46d2:	89 81       	ldd	r24, Y+1	; 0x01
    46d4:	9a 81       	ldd	r25, Y+2	; 0x02
    46d6:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <prvAddCurrentTaskToDelayedList>
	}
	#endif
}
    46da:	26 96       	adiw	r28, 0x06	; 6
    46dc:	0f b6       	in	r0, 0x3f	; 63
    46de:	f8 94       	cli
    46e0:	de bf       	out	0x3e, r29	; 62
    46e2:	0f be       	out	0x3f, r0	; 63
    46e4:	cd bf       	out	0x3d, r28	; 61
    46e6:	cf 91       	pop	r28
    46e8:	df 91       	pop	r29
    46ea:	08 95       	ret

000046ec <xTaskRemoveFromEventList>:
	
#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
    46ec:	df 93       	push	r29
    46ee:	cf 93       	push	r28
    46f0:	00 d0       	rcall	.+0      	; 0x46f2 <xTaskRemoveFromEventList+0x6>
    46f2:	00 d0       	rcall	.+0      	; 0x46f4 <xTaskRemoveFromEventList+0x8>
    46f4:	0f 92       	push	r0
    46f6:	cd b7       	in	r28, 0x3d	; 61
    46f8:	de b7       	in	r29, 0x3e	; 62
    46fa:	9d 83       	std	Y+5, r25	; 0x05
    46fc:	8c 83       	std	Y+4, r24	; 0x04
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.
	
	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
    46fe:	ec 81       	ldd	r30, Y+4	; 0x04
    4700:	fd 81       	ldd	r31, Y+5	; 0x05
    4702:	05 80       	ldd	r0, Z+5	; 0x05
    4704:	f6 81       	ldd	r31, Z+6	; 0x06
    4706:	e0 2d       	mov	r30, r0
    4708:	86 81       	ldd	r24, Z+6	; 0x06
    470a:	97 81       	ldd	r25, Z+7	; 0x07
    470c:	9b 83       	std	Y+3, r25	; 0x03
    470e:	8a 83       	std	Y+2, r24	; 0x02
	configASSERT( pxUnblockedTCB );
	vListRemove( &( pxUnblockedTCB->xEventListItem ) );
    4710:	8a 81       	ldd	r24, Y+2	; 0x02
    4712:	9b 81       	ldd	r25, Y+3	; 0x03
    4714:	0c 96       	adiw	r24, 0x0c	; 12
    4716:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
    471a:	80 91 77 04 	lds	r24, 0x0477
    471e:	88 23       	and	r24, r24
    4720:	61 f5       	brne	.+88     	; 0x477a <xTaskRemoveFromEventList+0x8e>
	{
		vListRemove( &( pxUnblockedTCB->xGenericListItem ) );
    4722:	8a 81       	ldd	r24, Y+2	; 0x02
    4724:	9b 81       	ldd	r25, Y+3	; 0x03
    4726:	02 96       	adiw	r24, 0x02	; 2
    4728:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
		prvAddTaskToReadyQueue( pxUnblockedTCB );
    472c:	ea 81       	ldd	r30, Y+2	; 0x02
    472e:	fb 81       	ldd	r31, Y+3	; 0x03
    4730:	96 89       	ldd	r25, Z+22	; 0x16
    4732:	80 91 75 04 	lds	r24, 0x0475
    4736:	89 17       	cp	r24, r25
    4738:	28 f4       	brcc	.+10     	; 0x4744 <xTaskRemoveFromEventList+0x58>
    473a:	ea 81       	ldd	r30, Y+2	; 0x02
    473c:	fb 81       	ldd	r31, Y+3	; 0x03
    473e:	86 89       	ldd	r24, Z+22	; 0x16
    4740:	80 93 75 04 	sts	0x0475, r24
    4744:	ea 81       	ldd	r30, Y+2	; 0x02
    4746:	fb 81       	ldd	r31, Y+3	; 0x03
    4748:	86 89       	ldd	r24, Z+22	; 0x16
    474a:	28 2f       	mov	r18, r24
    474c:	30 e0       	ldi	r19, 0x00	; 0
    474e:	c9 01       	movw	r24, r18
    4750:	88 0f       	add	r24, r24
    4752:	99 1f       	adc	r25, r25
    4754:	88 0f       	add	r24, r24
    4756:	99 1f       	adc	r25, r25
    4758:	88 0f       	add	r24, r24
    475a:	99 1f       	adc	r25, r25
    475c:	82 0f       	add	r24, r18
    475e:	93 1f       	adc	r25, r19
    4760:	ac 01       	movw	r20, r24
    4762:	44 58       	subi	r20, 0x84	; 132
    4764:	5b 4f       	sbci	r21, 0xFB	; 251
    4766:	8a 81       	ldd	r24, Y+2	; 0x02
    4768:	9b 81       	ldd	r25, Y+3	; 0x03
    476a:	9c 01       	movw	r18, r24
    476c:	2e 5f       	subi	r18, 0xFE	; 254
    476e:	3f 4f       	sbci	r19, 0xFF	; 255
    4770:	ca 01       	movw	r24, r20
    4772:	b9 01       	movw	r22, r18
    4774:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
    4778:	0a c0       	rjmp	.+20     	; 0x478e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
    477a:	8a 81       	ldd	r24, Y+2	; 0x02
    477c:	9b 81       	ldd	r25, Y+3	; 0x03
    477e:	9c 01       	movw	r18, r24
    4780:	24 5f       	subi	r18, 0xF4	; 244
    4782:	3f 4f       	sbci	r19, 0xFF	; 255
    4784:	83 ee       	ldi	r24, 0xE3	; 227
    4786:	94 e0       	ldi	r25, 0x04	; 4
    4788:	b9 01       	movw	r22, r18
    478a:	0e 94 85 16 	call	0x2d0a	; 0x2d0a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
    478e:	ea 81       	ldd	r30, Y+2	; 0x02
    4790:	fb 81       	ldd	r31, Y+3	; 0x03
    4792:	96 89       	ldd	r25, Z+22	; 0x16
    4794:	e0 91 6e 04 	lds	r30, 0x046E
    4798:	f0 91 6f 04 	lds	r31, 0x046F
    479c:	86 89       	ldd	r24, Z+22	; 0x16
    479e:	98 17       	cp	r25, r24
    47a0:	18 f0       	brcs	.+6      	; 0x47a8 <xTaskRemoveFromEventList+0xbc>
	{
		/* Return true if the task removed from the event list has
		a higher priority than the calling task.  This allows
		the calling task to know if it should force a context
		switch now. */
		xReturn = pdTRUE;
    47a2:	81 e0       	ldi	r24, 0x01	; 1
    47a4:	89 83       	std	Y+1, r24	; 0x01
    47a6:	01 c0       	rjmp	.+2      	; 0x47aa <xTaskRemoveFromEventList+0xbe>
	}
	else
	{
		xReturn = pdFALSE;
    47a8:	19 82       	std	Y+1, r1	; 0x01
	}

	return xReturn;
    47aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    47ac:	0f 90       	pop	r0
    47ae:	0f 90       	pop	r0
    47b0:	0f 90       	pop	r0
    47b2:	0f 90       	pop	r0
    47b4:	0f 90       	pop	r0
    47b6:	cf 91       	pop	r28
    47b8:	df 91       	pop	r29
    47ba:	08 95       	ret

000047bc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
    47bc:	df 93       	push	r29
    47be:	cf 93       	push	r28
    47c0:	00 d0       	rcall	.+0      	; 0x47c2 <vTaskSetTimeOutState+0x6>
    47c2:	cd b7       	in	r28, 0x3d	; 61
    47c4:	de b7       	in	r29, 0x3e	; 62
    47c6:	9a 83       	std	Y+2, r25	; 0x02
    47c8:	89 83       	std	Y+1, r24	; 0x01
	configASSERT( pxTimeOut );
	pxTimeOut->xOverflowCount = xNumOfOverflows;
    47ca:	80 91 7a 04 	lds	r24, 0x047A
    47ce:	e9 81       	ldd	r30, Y+1	; 0x01
    47d0:	fa 81       	ldd	r31, Y+2	; 0x02
    47d2:	80 83       	st	Z, r24
	pxTimeOut->xTimeOnEntering = xTickCount;
    47d4:	80 91 72 04 	lds	r24, 0x0472
    47d8:	90 91 73 04 	lds	r25, 0x0473
    47dc:	e9 81       	ldd	r30, Y+1	; 0x01
    47de:	fa 81       	ldd	r31, Y+2	; 0x02
    47e0:	92 83       	std	Z+2, r25	; 0x02
    47e2:	81 83       	std	Z+1, r24	; 0x01
}
    47e4:	0f 90       	pop	r0
    47e6:	0f 90       	pop	r0
    47e8:	cf 91       	pop	r28
    47ea:	df 91       	pop	r29
    47ec:	08 95       	ret

000047ee <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
    47ee:	df 93       	push	r29
    47f0:	cf 93       	push	r28
    47f2:	00 d0       	rcall	.+0      	; 0x47f4 <xTaskCheckForTimeOut+0x6>
    47f4:	00 d0       	rcall	.+0      	; 0x47f6 <xTaskCheckForTimeOut+0x8>
    47f6:	0f 92       	push	r0
    47f8:	cd b7       	in	r28, 0x3d	; 61
    47fa:	de b7       	in	r29, 0x3e	; 62
    47fc:	9b 83       	std	Y+3, r25	; 0x03
    47fe:	8a 83       	std	Y+2, r24	; 0x02
    4800:	7d 83       	std	Y+5, r23	; 0x05
    4802:	6c 83       	std	Y+4, r22	; 0x04
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
	configASSERT( pxTicksToWait );

	taskENTER_CRITICAL();
    4804:	0f b6       	in	r0, 0x3f	; 63
    4806:	f8 94       	cli
    4808:	0f 92       	push	r0
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
    480a:	ea 81       	ldd	r30, Y+2	; 0x02
    480c:	fb 81       	ldd	r31, Y+3	; 0x03
    480e:	90 81       	ld	r25, Z
    4810:	80 91 7a 04 	lds	r24, 0x047A
    4814:	98 17       	cp	r25, r24
    4816:	71 f0       	breq	.+28     	; 0x4834 <xTaskCheckForTimeOut+0x46>
    4818:	ea 81       	ldd	r30, Y+2	; 0x02
    481a:	fb 81       	ldd	r31, Y+3	; 0x03
    481c:	21 81       	ldd	r18, Z+1	; 0x01
    481e:	32 81       	ldd	r19, Z+2	; 0x02
    4820:	80 91 72 04 	lds	r24, 0x0472
    4824:	90 91 73 04 	lds	r25, 0x0473
    4828:	82 17       	cp	r24, r18
    482a:	93 07       	cpc	r25, r19
    482c:	18 f0       	brcs	.+6      	; 0x4834 <xTaskCheckForTimeOut+0x46>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
    482e:	81 e0       	ldi	r24, 0x01	; 1
    4830:	89 83       	std	Y+1, r24	; 0x01
    4832:	2f c0       	rjmp	.+94     	; 0x4892 <xTaskCheckForTimeOut+0xa4>
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
    4834:	20 91 72 04 	lds	r18, 0x0472
    4838:	30 91 73 04 	lds	r19, 0x0473
    483c:	ea 81       	ldd	r30, Y+2	; 0x02
    483e:	fb 81       	ldd	r31, Y+3	; 0x03
    4840:	81 81       	ldd	r24, Z+1	; 0x01
    4842:	92 81       	ldd	r25, Z+2	; 0x02
    4844:	28 1b       	sub	r18, r24
    4846:	39 0b       	sbc	r19, r25
    4848:	ec 81       	ldd	r30, Y+4	; 0x04
    484a:	fd 81       	ldd	r31, Y+5	; 0x05
    484c:	80 81       	ld	r24, Z
    484e:	91 81       	ldd	r25, Z+1	; 0x01
    4850:	28 17       	cp	r18, r24
    4852:	39 07       	cpc	r19, r25
    4854:	e0 f4       	brcc	.+56     	; 0x488e <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
    4856:	ec 81       	ldd	r30, Y+4	; 0x04
    4858:	fd 81       	ldd	r31, Y+5	; 0x05
    485a:	40 81       	ld	r20, Z
    485c:	51 81       	ldd	r21, Z+1	; 0x01
    485e:	ea 81       	ldd	r30, Y+2	; 0x02
    4860:	fb 81       	ldd	r31, Y+3	; 0x03
    4862:	21 81       	ldd	r18, Z+1	; 0x01
    4864:	32 81       	ldd	r19, Z+2	; 0x02
    4866:	80 91 72 04 	lds	r24, 0x0472
    486a:	90 91 73 04 	lds	r25, 0x0473
    486e:	b9 01       	movw	r22, r18
    4870:	68 1b       	sub	r22, r24
    4872:	79 0b       	sbc	r23, r25
    4874:	cb 01       	movw	r24, r22
    4876:	84 0f       	add	r24, r20
    4878:	95 1f       	adc	r25, r21
    487a:	ec 81       	ldd	r30, Y+4	; 0x04
    487c:	fd 81       	ldd	r31, Y+5	; 0x05
    487e:	91 83       	std	Z+1, r25	; 0x01
    4880:	80 83       	st	Z, r24
			vTaskSetTimeOutState( pxTimeOut );
    4882:	8a 81       	ldd	r24, Y+2	; 0x02
    4884:	9b 81       	ldd	r25, Y+3	; 0x03
    4886:	0e 94 de 23 	call	0x47bc	; 0x47bc <vTaskSetTimeOutState>
			xReturn = pdFALSE;
    488a:	19 82       	std	Y+1, r1	; 0x01
    488c:	02 c0       	rjmp	.+4      	; 0x4892 <xTaskCheckForTimeOut+0xa4>
		}
		else
		{
			xReturn = pdTRUE;
    488e:	81 e0       	ldi	r24, 0x01	; 1
    4890:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    4892:	0f 90       	pop	r0
    4894:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    4896:	89 81       	ldd	r24, Y+1	; 0x01
}
    4898:	0f 90       	pop	r0
    489a:	0f 90       	pop	r0
    489c:	0f 90       	pop	r0
    489e:	0f 90       	pop	r0
    48a0:	0f 90       	pop	r0
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	08 95       	ret

000048a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
    48a8:	df 93       	push	r29
    48aa:	cf 93       	push	r28
    48ac:	cd b7       	in	r28, 0x3d	; 61
    48ae:	de b7       	in	r29, 0x3e	; 62
	xMissedYield = pdTRUE;
    48b0:	81 e0       	ldi	r24, 0x01	; 1
    48b2:	80 93 79 04 	sts	0x0479, r24
}
    48b6:	cf 91       	pop	r28
    48b8:	df 91       	pop	r29
    48ba:	08 95       	ret

000048bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
    48bc:	df 93       	push	r29
    48be:	cf 93       	push	r28
    48c0:	00 d0       	rcall	.+0      	; 0x48c2 <prvIdleTask+0x6>
    48c2:	cd b7       	in	r28, 0x3d	; 61
    48c4:	de b7       	in	r29, 0x3e	; 62
    48c6:	9a 83       	std	Y+2, r25	; 0x02
    48c8:	89 83       	std	Y+1, r24	; 0x01
	( void ) pvParameters;

	for( ;; )
	{
		/* See if any tasks have been deleted. */
		prvCheckTasksWaitingTermination();
    48ca:	0e 94 fe 24 	call	0x49fc	; 0x49fc <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
    48ce:	0e 94 45 19 	call	0x328a	; 0x328a <vPortYield>
    48d2:	fb cf       	rjmp	.-10     	; 0x48ca <prvIdleTask+0xe>

000048d4 <prvInitialiseTCBVariables>:
 *----------------------------------------------------------*/



static void prvInitialiseTCBVariables( tskTCB *pxTCB, const signed char * const pcName, unsigned portBASE_TYPE uxPriority, const xMemoryRegion * const xRegions, unsigned short usStackDepth )
{
    48d4:	0f 93       	push	r16
    48d6:	1f 93       	push	r17
    48d8:	df 93       	push	r29
    48da:	cf 93       	push	r28
    48dc:	cd b7       	in	r28, 0x3d	; 61
    48de:	de b7       	in	r29, 0x3e	; 62
    48e0:	29 97       	sbiw	r28, 0x09	; 9
    48e2:	0f b6       	in	r0, 0x3f	; 63
    48e4:	f8 94       	cli
    48e6:	de bf       	out	0x3e, r29	; 62
    48e8:	0f be       	out	0x3f, r0	; 63
    48ea:	cd bf       	out	0x3d, r28	; 61
    48ec:	9a 83       	std	Y+2, r25	; 0x02
    48ee:	89 83       	std	Y+1, r24	; 0x01
    48f0:	7c 83       	std	Y+4, r23	; 0x04
    48f2:	6b 83       	std	Y+3, r22	; 0x03
    48f4:	4d 83       	std	Y+5, r20	; 0x05
    48f6:	3f 83       	std	Y+7, r19	; 0x07
    48f8:	2e 83       	std	Y+6, r18	; 0x06
    48fa:	19 87       	std	Y+9, r17	; 0x09
    48fc:	08 87       	std	Y+8, r16	; 0x08
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
    48fe:	89 81       	ldd	r24, Y+1	; 0x01
    4900:	9a 81       	ldd	r25, Y+2	; 0x02
    4902:	49 96       	adiw	r24, 0x19	; 25
    4904:	2b 81       	ldd	r18, Y+3	; 0x03
    4906:	3c 81       	ldd	r19, Y+4	; 0x04
    4908:	b9 01       	movw	r22, r18
    490a:	48 e0       	ldi	r20, 0x08	; 8
    490c:	50 e0       	ldi	r21, 0x00	; 0
    490e:	0e 94 6f 38 	call	0x70de	; 0x70de <strncpy>
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
    4912:	e9 81       	ldd	r30, Y+1	; 0x01
    4914:	fa 81       	ldd	r31, Y+2	; 0x02
    4916:	10 a2       	std	Z+32, r1	; 0x20

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= configMAX_PRIORITIES )
    4918:	8d 81       	ldd	r24, Y+5	; 0x05
    491a:	89 30       	cpi	r24, 0x09	; 9
    491c:	10 f0       	brcs	.+4      	; 0x4922 <prvInitialiseTCBVariables+0x4e>
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
    491e:	88 e0       	ldi	r24, 0x08	; 8
    4920:	8d 83       	std	Y+5, r24	; 0x05
	}

	pxTCB->uxPriority = uxPriority;
    4922:	e9 81       	ldd	r30, Y+1	; 0x01
    4924:	fa 81       	ldd	r31, Y+2	; 0x02
    4926:	8d 81       	ldd	r24, Y+5	; 0x05
    4928:	86 8b       	std	Z+22, r24	; 0x16
	{
		pxTCB->uxBasePriority = uxPriority;
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
    492a:	89 81       	ldd	r24, Y+1	; 0x01
    492c:	9a 81       	ldd	r25, Y+2	; 0x02
    492e:	02 96       	adiw	r24, 0x02	; 2
    4930:	0e 94 75 16 	call	0x2cea	; 0x2cea <vListInitialiseItem>
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
    4934:	89 81       	ldd	r24, Y+1	; 0x01
    4936:	9a 81       	ldd	r25, Y+2	; 0x02
    4938:	0c 96       	adiw	r24, 0x0c	; 12
    493a:	0e 94 75 16 	call	0x2cea	; 0x2cea <vListInitialiseItem>

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
    493e:	e9 81       	ldd	r30, Y+1	; 0x01
    4940:	fa 81       	ldd	r31, Y+2	; 0x02
    4942:	89 81       	ldd	r24, Y+1	; 0x01
    4944:	9a 81       	ldd	r25, Y+2	; 0x02
    4946:	91 87       	std	Z+9, r25	; 0x09
    4948:	80 87       	std	Z+8, r24	; 0x08

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
    494a:	8d 81       	ldd	r24, Y+5	; 0x05
    494c:	28 2f       	mov	r18, r24
    494e:	30 e0       	ldi	r19, 0x00	; 0
    4950:	89 e0       	ldi	r24, 0x09	; 9
    4952:	90 e0       	ldi	r25, 0x00	; 0
    4954:	82 1b       	sub	r24, r18
    4956:	93 0b       	sbc	r25, r19
    4958:	e9 81       	ldd	r30, Y+1	; 0x01
    495a:	fa 81       	ldd	r31, Y+2	; 0x02
    495c:	95 87       	std	Z+13, r25	; 0x0d
    495e:	84 87       	std	Z+12, r24	; 0x0c
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
    4960:	e9 81       	ldd	r30, Y+1	; 0x01
    4962:	fa 81       	ldd	r31, Y+2	; 0x02
    4964:	89 81       	ldd	r24, Y+1	; 0x01
    4966:	9a 81       	ldd	r25, Y+2	; 0x02
    4968:	93 8b       	std	Z+19, r25	; 0x13
    496a:	82 8b       	std	Z+18, r24	; 0x12
	{
		( void ) xRegions;
		( void ) usStackDepth;
	}
	#endif
}
    496c:	29 96       	adiw	r28, 0x09	; 9
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	f8 94       	cli
    4972:	de bf       	out	0x3e, r29	; 62
    4974:	0f be       	out	0x3f, r0	; 63
    4976:	cd bf       	out	0x3d, r28	; 61
    4978:	cf 91       	pop	r28
    497a:	df 91       	pop	r29
    497c:	1f 91       	pop	r17
    497e:	0f 91       	pop	r16
    4980:	08 95       	ret

00004982 <prvInitialiseTaskLists>:
	}
	/*-----------------------------------------------------------*/
#endif

static void prvInitialiseTaskLists( void )
{
    4982:	df 93       	push	r29
    4984:	cf 93       	push	r28
    4986:	0f 92       	push	r0
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    498c:	19 82       	std	Y+1, r1	; 0x01
    498e:	13 c0       	rjmp	.+38     	; 0x49b6 <prvInitialiseTaskLists+0x34>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
    4990:	89 81       	ldd	r24, Y+1	; 0x01
    4992:	28 2f       	mov	r18, r24
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	c9 01       	movw	r24, r18
    4998:	88 0f       	add	r24, r24
    499a:	99 1f       	adc	r25, r25
    499c:	88 0f       	add	r24, r24
    499e:	99 1f       	adc	r25, r25
    49a0:	88 0f       	add	r24, r24
    49a2:	99 1f       	adc	r25, r25
    49a4:	82 0f       	add	r24, r18
    49a6:	93 1f       	adc	r25, r19
    49a8:	84 58       	subi	r24, 0x84	; 132
    49aa:	9b 4f       	sbci	r25, 0xFB	; 251
    49ac:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
    49b0:	89 81       	ldd	r24, Y+1	; 0x01
    49b2:	8f 5f       	subi	r24, 0xFF	; 255
    49b4:	89 83       	std	Y+1, r24	; 0x01
    49b6:	89 81       	ldd	r24, Y+1	; 0x01
    49b8:	89 30       	cpi	r24, 0x09	; 9
    49ba:	50 f3       	brcs	.-44     	; 0x4990 <prvInitialiseTaskLists+0xe>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
    49bc:	8d ec       	ldi	r24, 0xCD	; 205
    49be:	94 e0       	ldi	r25, 0x04	; 4
    49c0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
    49c4:	86 ed       	ldi	r24, 0xD6	; 214
    49c6:	94 e0       	ldi	r25, 0x04	; 4
    49c8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	vListInitialise( ( xList * ) &xPendingReadyList );
    49cc:	83 ee       	ldi	r24, 0xE3	; 227
    49ce:	94 e0       	ldi	r25, 0x04	; 4
    49d0:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
    49d4:	8c ee       	ldi	r24, 0xEC	; 236
    49d6:	94 e0       	ldi	r25, 0x04	; 4
    49d8:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vListInitialise>
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
    49dc:	8d ec       	ldi	r24, 0xCD	; 205
    49de:	94 e0       	ldi	r25, 0x04	; 4
    49e0:	90 93 e0 04 	sts	0x04E0, r25
    49e4:	80 93 df 04 	sts	0x04DF, r24
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
    49e8:	86 ed       	ldi	r24, 0xD6	; 214
    49ea:	94 e0       	ldi	r25, 0x04	; 4
    49ec:	90 93 e2 04 	sts	0x04E2, r25
    49f0:	80 93 e1 04 	sts	0x04E1, r24
}
    49f4:	0f 90       	pop	r0
    49f6:	cf 91       	pop	r28
    49f8:	df 91       	pop	r29
    49fa:	08 95       	ret

000049fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
    49fc:	df 93       	push	r29
    49fe:	cf 93       	push	r28
    4a00:	00 d0       	rcall	.+0      	; 0x4a02 <prvCheckTasksWaitingTermination+0x6>
    4a02:	0f 92       	push	r0
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		if( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
    4a08:	80 91 70 04 	lds	r24, 0x0470
    4a0c:	88 23       	and	r24, r24
    4a0e:	71 f1       	breq	.+92     	; 0x4a6c <prvCheckTasksWaitingTermination+0x70>
		{
			vTaskSuspendAll();
    4a10:	0e 94 3c 21 	call	0x4278	; 0x4278 <vTaskSuspendAll>
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
    4a14:	80 91 ec 04 	lds	r24, 0x04EC
    4a18:	1b 82       	std	Y+3, r1	; 0x03
    4a1a:	88 23       	and	r24, r24
    4a1c:	11 f4       	brne	.+4      	; 0x4a22 <prvCheckTasksWaitingTermination+0x26>
    4a1e:	81 e0       	ldi	r24, 0x01	; 1
    4a20:	8b 83       	std	Y+3, r24	; 0x03
			xTaskResumeAll();
    4a22:	0e 94 48 21 	call	0x4290	; 0x4290 <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
    4a26:	8b 81       	ldd	r24, Y+3	; 0x03
    4a28:	88 23       	and	r24, r24
    4a2a:	01 f5       	brne	.+64     	; 0x4a6c <prvCheckTasksWaitingTermination+0x70>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
    4a2c:	0f b6       	in	r0, 0x3f	; 63
    4a2e:	f8 94       	cli
    4a30:	0f 92       	push	r0
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
    4a32:	e0 91 f1 04 	lds	r30, 0x04F1
    4a36:	f0 91 f2 04 	lds	r31, 0x04F2
    4a3a:	86 81       	ldd	r24, Z+6	; 0x06
    4a3c:	97 81       	ldd	r25, Z+7	; 0x07
    4a3e:	9a 83       	std	Y+2, r25	; 0x02
    4a40:	89 83       	std	Y+1, r24	; 0x01
					vListRemove( &( pxTCB->xGenericListItem ) );
    4a42:	89 81       	ldd	r24, Y+1	; 0x01
    4a44:	9a 81       	ldd	r25, Y+2	; 0x02
    4a46:	02 96       	adiw	r24, 0x02	; 2
    4a48:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <vListRemove>
					--uxCurrentNumberOfTasks;
    4a4c:	80 91 71 04 	lds	r24, 0x0471
    4a50:	81 50       	subi	r24, 0x01	; 1
    4a52:	80 93 71 04 	sts	0x0471, r24
					--uxTasksDeleted;
    4a56:	80 91 70 04 	lds	r24, 0x0470
    4a5a:	81 50       	subi	r24, 0x01	; 1
    4a5c:	80 93 70 04 	sts	0x0470, r24
				}
				taskEXIT_CRITICAL();
    4a60:	0f 90       	pop	r0
    4a62:	0f be       	out	0x3f, r0	; 63

				prvDeleteTCB( pxTCB );
    4a64:	89 81       	ldd	r24, Y+1	; 0x01
    4a66:	9a 81       	ldd	r25, Y+2	; 0x02
    4a68:	0e 94 d5 25 	call	0x4baa	; 0x4baa <prvDeleteTCB>
			}
		}
	}
	#endif
}
    4a6c:	0f 90       	pop	r0
    4a6e:	0f 90       	pop	r0
    4a70:	0f 90       	pop	r0
    4a72:	cf 91       	pop	r28
    4a74:	df 91       	pop	r29
    4a76:	08 95       	ret

00004a78 <prvAddCurrentTaskToDelayedList>:
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
    4a78:	df 93       	push	r29
    4a7a:	cf 93       	push	r28
    4a7c:	00 d0       	rcall	.+0      	; 0x4a7e <prvAddCurrentTaskToDelayedList+0x6>
    4a7e:	cd b7       	in	r28, 0x3d	; 61
    4a80:	de b7       	in	r29, 0x3e	; 62
    4a82:	9a 83       	std	Y+2, r25	; 0x02
    4a84:	89 83       	std	Y+1, r24	; 0x01
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
    4a86:	e0 91 6e 04 	lds	r30, 0x046E
    4a8a:	f0 91 6f 04 	lds	r31, 0x046F
    4a8e:	89 81       	ldd	r24, Y+1	; 0x01
    4a90:	9a 81       	ldd	r25, Y+2	; 0x02
    4a92:	93 83       	std	Z+3, r25	; 0x03
    4a94:	82 83       	std	Z+2, r24	; 0x02

	if( xTimeToWake < xTickCount )
    4a96:	20 91 72 04 	lds	r18, 0x0472
    4a9a:	30 91 73 04 	lds	r19, 0x0473
    4a9e:	89 81       	ldd	r24, Y+1	; 0x01
    4aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4aa2:	82 17       	cp	r24, r18
    4aa4:	93 07       	cpc	r25, r19
    4aa6:	70 f4       	brcc	.+28     	; 0x4ac4 <prvAddCurrentTaskToDelayedList+0x4c>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4aa8:	80 91 e1 04 	lds	r24, 0x04E1
    4aac:	90 91 e2 04 	lds	r25, 0x04E2
    4ab0:	20 91 6e 04 	lds	r18, 0x046E
    4ab4:	30 91 6f 04 	lds	r19, 0x046F
    4ab8:	2e 5f       	subi	r18, 0xFE	; 254
    4aba:	3f 4f       	sbci	r19, 0xFF	; 255
    4abc:	b9 01       	movw	r22, r18
    4abe:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>
    4ac2:	1e c0       	rjmp	.+60     	; 0x4b00 <prvAddCurrentTaskToDelayedList+0x88>
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
    4ac4:	40 91 df 04 	lds	r20, 0x04DF
    4ac8:	50 91 e0 04 	lds	r21, 0x04E0
    4acc:	80 91 6e 04 	lds	r24, 0x046E
    4ad0:	90 91 6f 04 	lds	r25, 0x046F
    4ad4:	9c 01       	movw	r18, r24
    4ad6:	2e 5f       	subi	r18, 0xFE	; 254
    4ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    4ada:	ca 01       	movw	r24, r20
    4adc:	b9 01       	movw	r22, r18
    4ade:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <vListInsert>

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
    4ae2:	20 91 97 01 	lds	r18, 0x0197
    4ae6:	30 91 98 01 	lds	r19, 0x0198
    4aea:	89 81       	ldd	r24, Y+1	; 0x01
    4aec:	9a 81       	ldd	r25, Y+2	; 0x02
    4aee:	82 17       	cp	r24, r18
    4af0:	93 07       	cpc	r25, r19
    4af2:	30 f4       	brcc	.+12     	; 0x4b00 <prvAddCurrentTaskToDelayedList+0x88>
		{
			xNextTaskUnblockTime = xTimeToWake;
    4af4:	89 81       	ldd	r24, Y+1	; 0x01
    4af6:	9a 81       	ldd	r25, Y+2	; 0x02
    4af8:	90 93 98 01 	sts	0x0198, r25
    4afc:	80 93 97 01 	sts	0x0197, r24
		}
	}
}
    4b00:	0f 90       	pop	r0
    4b02:	0f 90       	pop	r0
    4b04:	cf 91       	pop	r28
    4b06:	df 91       	pop	r29
    4b08:	08 95       	ret

00004b0a <prvAllocateTCBAndStack>:
/*-----------------------------------------------------------*/

static tskTCB *prvAllocateTCBAndStack( unsigned short usStackDepth, portSTACK_TYPE *puxStackBuffer )
{
    4b0a:	df 93       	push	r29
    4b0c:	cf 93       	push	r28
    4b0e:	cd b7       	in	r28, 0x3d	; 61
    4b10:	de b7       	in	r29, 0x3e	; 62
    4b12:	28 97       	sbiw	r28, 0x08	; 8
    4b14:	0f b6       	in	r0, 0x3f	; 63
    4b16:	f8 94       	cli
    4b18:	de bf       	out	0x3e, r29	; 62
    4b1a:	0f be       	out	0x3f, r0	; 63
    4b1c:	cd bf       	out	0x3d, r28	; 61
    4b1e:	9c 83       	std	Y+4, r25	; 0x04
    4b20:	8b 83       	std	Y+3, r24	; 0x03
    4b22:	7e 83       	std	Y+6, r23	; 0x06
    4b24:	6d 83       	std	Y+5, r22	; 0x05
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
    4b26:	81 e2       	ldi	r24, 0x21	; 33
    4b28:	90 e0       	ldi	r25, 0x00	; 0
    4b2a:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    4b2e:	9a 83       	std	Y+2, r25	; 0x02
    4b30:	89 83       	std	Y+1, r24	; 0x01

	if( pxNewTCB != NULL )
    4b32:	89 81       	ldd	r24, Y+1	; 0x01
    4b34:	9a 81       	ldd	r25, Y+2	; 0x02
    4b36:	00 97       	sbiw	r24, 0x00	; 0
    4b38:	69 f1       	breq	.+90     	; 0x4b94 <prvAllocateTCBAndStack+0x8a>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
    4b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    4b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    4b3e:	00 97       	sbiw	r24, 0x00	; 0
    4b40:	39 f4       	brne	.+14     	; 0x4b50 <prvAllocateTCBAndStack+0x46>
    4b42:	8b 81       	ldd	r24, Y+3	; 0x03
    4b44:	9c 81       	ldd	r25, Y+4	; 0x04
    4b46:	0e 94 df 15 	call	0x2bbe	; 0x2bbe <pvPortMalloc>
    4b4a:	98 87       	std	Y+8, r25	; 0x08
    4b4c:	8f 83       	std	Y+7, r24	; 0x07
    4b4e:	04 c0       	rjmp	.+8      	; 0x4b58 <prvAllocateTCBAndStack+0x4e>
    4b50:	8d 81       	ldd	r24, Y+5	; 0x05
    4b52:	9e 81       	ldd	r25, Y+6	; 0x06
    4b54:	98 87       	std	Y+8, r25	; 0x08
    4b56:	8f 83       	std	Y+7, r24	; 0x07
    4b58:	e9 81       	ldd	r30, Y+1	; 0x01
    4b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    4b5c:	8f 81       	ldd	r24, Y+7	; 0x07
    4b5e:	98 85       	ldd	r25, Y+8	; 0x08
    4b60:	90 8f       	std	Z+24, r25	; 0x18
    4b62:	87 8b       	std	Z+23, r24	; 0x17

		if( pxNewTCB->pxStack == NULL )
    4b64:	e9 81       	ldd	r30, Y+1	; 0x01
    4b66:	fa 81       	ldd	r31, Y+2	; 0x02
    4b68:	87 89       	ldd	r24, Z+23	; 0x17
    4b6a:	90 8d       	ldd	r25, Z+24	; 0x18
    4b6c:	00 97       	sbiw	r24, 0x00	; 0
    4b6e:	39 f4       	brne	.+14     	; 0x4b7e <prvAllocateTCBAndStack+0x74>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
    4b70:	89 81       	ldd	r24, Y+1	; 0x01
    4b72:	9a 81       	ldd	r25, Y+2	; 0x02
    4b74:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
			pxNewTCB = NULL;
    4b78:	1a 82       	std	Y+2, r1	; 0x02
    4b7a:	19 82       	std	Y+1, r1	; 0x01
    4b7c:	0b c0       	rjmp	.+22     	; 0x4b94 <prvAllocateTCBAndStack+0x8a>
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
    4b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    4b80:	fa 81       	ldd	r31, Y+2	; 0x02
    4b82:	87 89       	ldd	r24, Z+23	; 0x17
    4b84:	90 8d       	ldd	r25, Z+24	; 0x18
    4b86:	2b 81       	ldd	r18, Y+3	; 0x03
    4b88:	3c 81       	ldd	r19, Y+4	; 0x04
    4b8a:	65 ea       	ldi	r22, 0xA5	; 165
    4b8c:	70 e0       	ldi	r23, 0x00	; 0
    4b8e:	a9 01       	movw	r20, r18
    4b90:	0e 94 68 38 	call	0x70d0	; 0x70d0 <memset>
		}
	}

	return pxNewTCB;
    4b94:	89 81       	ldd	r24, Y+1	; 0x01
    4b96:	9a 81       	ldd	r25, Y+2	; 0x02
}
    4b98:	28 96       	adiw	r28, 0x08	; 8
    4b9a:	0f b6       	in	r0, 0x3f	; 63
    4b9c:	f8 94       	cli
    4b9e:	de bf       	out	0x3e, r29	; 62
    4ba0:	0f be       	out	0x3f, r0	; 63
    4ba2:	cd bf       	out	0x3d, r28	; 61
    4ba4:	cf 91       	pop	r28
    4ba6:	df 91       	pop	r29
    4ba8:	08 95       	ret

00004baa <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( tskTCB *pxTCB )
	{
    4baa:	df 93       	push	r29
    4bac:	cf 93       	push	r28
    4bae:	00 d0       	rcall	.+0      	; 0x4bb0 <prvDeleteTCB+0x6>
    4bb0:	cd b7       	in	r28, 0x3d	; 61
    4bb2:	de b7       	in	r29, 0x3e	; 62
    4bb4:	9a 83       	std	Y+2, r25	; 0x02
    4bb6:	89 83       	std	Y+1, r24	; 0x01
		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
    4bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    4bba:	fa 81       	ldd	r31, Y+2	; 0x02
    4bbc:	87 89       	ldd	r24, Z+23	; 0x17
    4bbe:	90 8d       	ldd	r25, Z+24	; 0x18
    4bc0:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
		vPortFree( pxTCB );
    4bc4:	89 81       	ldd	r24, Y+1	; 0x01
    4bc6:	9a 81       	ldd	r25, Y+2	; 0x02
    4bc8:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <vPortFree>
	}
    4bcc:	0f 90       	pop	r0
    4bce:	0f 90       	pop	r0
    4bd0:	cf 91       	pop	r28
    4bd2:	df 91       	pop	r29
    4bd4:	08 95       	ret

00004bd6 <DIO_enumSetPinDirection>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Direction --> Pin Direction [ DIO_PIN_OUTPUT , DIO_PIN_INPUT ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    4bd6:	df 93       	push	r29
    4bd8:	cf 93       	push	r28
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
    4bde:	28 97       	sbiw	r28, 0x08	; 8
    4be0:	0f b6       	in	r0, 0x3f	; 63
    4be2:	f8 94       	cli
    4be4:	de bf       	out	0x3e, r29	; 62
    4be6:	0f be       	out	0x3f, r0	; 63
    4be8:	cd bf       	out	0x3d, r28	; 61
    4bea:	8a 83       	std	Y+2, r24	; 0x02
    4bec:	6b 83       	std	Y+3, r22	; 0x03
    4bee:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    4bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    4bf6:	84 30       	cpi	r24, 0x04	; 4
    4bf8:	08 f0       	brcs	.+2      	; 0x4bfc <DIO_enumSetPinDirection+0x26>
    4bfa:	f1 c0       	rjmp	.+482    	; 0x4dde <DIO_enumSetPinDirection+0x208>
    4bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfe:	88 30       	cpi	r24, 0x08	; 8
    4c00:	08 f0       	brcs	.+2      	; 0x4c04 <DIO_enumSetPinDirection+0x2e>
    4c02:	ed c0       	rjmp	.+474    	; 0x4dde <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    4c04:	8c 81       	ldd	r24, Y+4	; 0x04
    4c06:	81 30       	cpi	r24, 0x01	; 1
    4c08:	09 f0       	breq	.+2      	; 0x4c0c <DIO_enumSetPinDirection+0x36>
    4c0a:	6f c0       	rjmp	.+222    	; 0x4cea <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    4c0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c0e:	28 2f       	mov	r18, r24
    4c10:	30 e0       	ldi	r19, 0x00	; 0
    4c12:	38 87       	std	Y+8, r19	; 0x08
    4c14:	2f 83       	std	Y+7, r18	; 0x07
    4c16:	8f 81       	ldd	r24, Y+7	; 0x07
    4c18:	98 85       	ldd	r25, Y+8	; 0x08
    4c1a:	81 30       	cpi	r24, 0x01	; 1
    4c1c:	91 05       	cpc	r25, r1
    4c1e:	49 f1       	breq	.+82     	; 0x4c72 <DIO_enumSetPinDirection+0x9c>
    4c20:	2f 81       	ldd	r18, Y+7	; 0x07
    4c22:	38 85       	ldd	r19, Y+8	; 0x08
    4c24:	22 30       	cpi	r18, 0x02	; 2
    4c26:	31 05       	cpc	r19, r1
    4c28:	2c f4       	brge	.+10     	; 0x4c34 <DIO_enumSetPinDirection+0x5e>
    4c2a:	8f 81       	ldd	r24, Y+7	; 0x07
    4c2c:	98 85       	ldd	r25, Y+8	; 0x08
    4c2e:	00 97       	sbiw	r24, 0x00	; 0
    4c30:	61 f0       	breq	.+24     	; 0x4c4a <DIO_enumSetPinDirection+0x74>
    4c32:	d6 c0       	rjmp	.+428    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
    4c34:	2f 81       	ldd	r18, Y+7	; 0x07
    4c36:	38 85       	ldd	r19, Y+8	; 0x08
    4c38:	22 30       	cpi	r18, 0x02	; 2
    4c3a:	31 05       	cpc	r19, r1
    4c3c:	71 f1       	breq	.+92     	; 0x4c9a <DIO_enumSetPinDirection+0xc4>
    4c3e:	8f 81       	ldd	r24, Y+7	; 0x07
    4c40:	98 85       	ldd	r25, Y+8	; 0x08
    4c42:	83 30       	cpi	r24, 0x03	; 3
    4c44:	91 05       	cpc	r25, r1
    4c46:	e9 f1       	breq	.+122    	; 0x4cc2 <DIO_enumSetPinDirection+0xec>
    4c48:	cb c0       	rjmp	.+406    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    4c4a:	aa e3       	ldi	r26, 0x3A	; 58
    4c4c:	b0 e0       	ldi	r27, 0x00	; 0
    4c4e:	ea e3       	ldi	r30, 0x3A	; 58
    4c50:	f0 e0       	ldi	r31, 0x00	; 0
    4c52:	80 81       	ld	r24, Z
    4c54:	48 2f       	mov	r20, r24
    4c56:	8b 81       	ldd	r24, Y+3	; 0x03
    4c58:	28 2f       	mov	r18, r24
    4c5a:	30 e0       	ldi	r19, 0x00	; 0
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	90 e0       	ldi	r25, 0x00	; 0
    4c60:	02 2e       	mov	r0, r18
    4c62:	02 c0       	rjmp	.+4      	; 0x4c68 <DIO_enumSetPinDirection+0x92>
    4c64:	88 0f       	add	r24, r24
    4c66:	99 1f       	adc	r25, r25
    4c68:	0a 94       	dec	r0
    4c6a:	e2 f7       	brpl	.-8      	; 0x4c64 <DIO_enumSetPinDirection+0x8e>
    4c6c:	84 2b       	or	r24, r20
    4c6e:	8c 93       	st	X, r24
    4c70:	b7 c0       	rjmp	.+366    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    4c72:	a7 e3       	ldi	r26, 0x37	; 55
    4c74:	b0 e0       	ldi	r27, 0x00	; 0
    4c76:	e7 e3       	ldi	r30, 0x37	; 55
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	80 81       	ld	r24, Z
    4c7c:	48 2f       	mov	r20, r24
    4c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    4c80:	28 2f       	mov	r18, r24
    4c82:	30 e0       	ldi	r19, 0x00	; 0
    4c84:	81 e0       	ldi	r24, 0x01	; 1
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	02 2e       	mov	r0, r18
    4c8a:	02 c0       	rjmp	.+4      	; 0x4c90 <DIO_enumSetPinDirection+0xba>
    4c8c:	88 0f       	add	r24, r24
    4c8e:	99 1f       	adc	r25, r25
    4c90:	0a 94       	dec	r0
    4c92:	e2 f7       	brpl	.-8      	; 0x4c8c <DIO_enumSetPinDirection+0xb6>
    4c94:	84 2b       	or	r24, r20
    4c96:	8c 93       	st	X, r24
    4c98:	a3 c0       	rjmp	.+326    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    4c9a:	a4 e3       	ldi	r26, 0x34	; 52
    4c9c:	b0 e0       	ldi	r27, 0x00	; 0
    4c9e:	e4 e3       	ldi	r30, 0x34	; 52
    4ca0:	f0 e0       	ldi	r31, 0x00	; 0
    4ca2:	80 81       	ld	r24, Z
    4ca4:	48 2f       	mov	r20, r24
    4ca6:	8b 81       	ldd	r24, Y+3	; 0x03
    4ca8:	28 2f       	mov	r18, r24
    4caa:	30 e0       	ldi	r19, 0x00	; 0
    4cac:	81 e0       	ldi	r24, 0x01	; 1
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	02 2e       	mov	r0, r18
    4cb2:	02 c0       	rjmp	.+4      	; 0x4cb8 <DIO_enumSetPinDirection+0xe2>
    4cb4:	88 0f       	add	r24, r24
    4cb6:	99 1f       	adc	r25, r25
    4cb8:	0a 94       	dec	r0
    4cba:	e2 f7       	brpl	.-8      	; 0x4cb4 <DIO_enumSetPinDirection+0xde>
    4cbc:	84 2b       	or	r24, r20
    4cbe:	8c 93       	st	X, r24
    4cc0:	8f c0       	rjmp	.+286    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    4cc2:	a1 e3       	ldi	r26, 0x31	; 49
    4cc4:	b0 e0       	ldi	r27, 0x00	; 0
    4cc6:	e1 e3       	ldi	r30, 0x31	; 49
    4cc8:	f0 e0       	ldi	r31, 0x00	; 0
    4cca:	80 81       	ld	r24, Z
    4ccc:	48 2f       	mov	r20, r24
    4cce:	8b 81       	ldd	r24, Y+3	; 0x03
    4cd0:	28 2f       	mov	r18, r24
    4cd2:	30 e0       	ldi	r19, 0x00	; 0
    4cd4:	81 e0       	ldi	r24, 0x01	; 1
    4cd6:	90 e0       	ldi	r25, 0x00	; 0
    4cd8:	02 2e       	mov	r0, r18
    4cda:	02 c0       	rjmp	.+4      	; 0x4ce0 <DIO_enumSetPinDirection+0x10a>
    4cdc:	88 0f       	add	r24, r24
    4cde:	99 1f       	adc	r25, r25
    4ce0:	0a 94       	dec	r0
    4ce2:	e2 f7       	brpl	.-8      	; 0x4cdc <DIO_enumSetPinDirection+0x106>
    4ce4:	84 2b       	or	r24, r20
    4ce6:	8c 93       	st	X, r24
    4ce8:	7b c0       	rjmp	.+246    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    4cea:	8c 81       	ldd	r24, Y+4	; 0x04
    4cec:	88 23       	and	r24, r24
    4cee:	09 f0       	breq	.+2      	; 0x4cf2 <DIO_enumSetPinDirection+0x11c>
    4cf0:	74 c0       	rjmp	.+232    	; 0x4dda <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    4cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf4:	28 2f       	mov	r18, r24
    4cf6:	30 e0       	ldi	r19, 0x00	; 0
    4cf8:	3e 83       	std	Y+6, r19	; 0x06
    4cfa:	2d 83       	std	Y+5, r18	; 0x05
    4cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    4cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    4d00:	81 30       	cpi	r24, 0x01	; 1
    4d02:	91 05       	cpc	r25, r1
    4d04:	59 f1       	breq	.+86     	; 0x4d5c <DIO_enumSetPinDirection+0x186>
    4d06:	2d 81       	ldd	r18, Y+5	; 0x05
    4d08:	3e 81       	ldd	r19, Y+6	; 0x06
    4d0a:	22 30       	cpi	r18, 0x02	; 2
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	2c f4       	brge	.+10     	; 0x4d1a <DIO_enumSetPinDirection+0x144>
    4d10:	8d 81       	ldd	r24, Y+5	; 0x05
    4d12:	9e 81       	ldd	r25, Y+6	; 0x06
    4d14:	00 97       	sbiw	r24, 0x00	; 0
    4d16:	69 f0       	breq	.+26     	; 0x4d32 <DIO_enumSetPinDirection+0x15c>
    4d18:	63 c0       	rjmp	.+198    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
    4d1a:	2d 81       	ldd	r18, Y+5	; 0x05
    4d1c:	3e 81       	ldd	r19, Y+6	; 0x06
    4d1e:	22 30       	cpi	r18, 0x02	; 2
    4d20:	31 05       	cpc	r19, r1
    4d22:	89 f1       	breq	.+98     	; 0x4d86 <DIO_enumSetPinDirection+0x1b0>
    4d24:	8d 81       	ldd	r24, Y+5	; 0x05
    4d26:	9e 81       	ldd	r25, Y+6	; 0x06
    4d28:	83 30       	cpi	r24, 0x03	; 3
    4d2a:	91 05       	cpc	r25, r1
    4d2c:	09 f4       	brne	.+2      	; 0x4d30 <DIO_enumSetPinDirection+0x15a>
    4d2e:	40 c0       	rjmp	.+128    	; 0x4db0 <DIO_enumSetPinDirection+0x1da>
    4d30:	57 c0       	rjmp	.+174    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    4d32:	aa e3       	ldi	r26, 0x3A	; 58
    4d34:	b0 e0       	ldi	r27, 0x00	; 0
    4d36:	ea e3       	ldi	r30, 0x3A	; 58
    4d38:	f0 e0       	ldi	r31, 0x00	; 0
    4d3a:	80 81       	ld	r24, Z
    4d3c:	48 2f       	mov	r20, r24
    4d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    4d40:	28 2f       	mov	r18, r24
    4d42:	30 e0       	ldi	r19, 0x00	; 0
    4d44:	81 e0       	ldi	r24, 0x01	; 1
    4d46:	90 e0       	ldi	r25, 0x00	; 0
    4d48:	02 2e       	mov	r0, r18
    4d4a:	02 c0       	rjmp	.+4      	; 0x4d50 <DIO_enumSetPinDirection+0x17a>
    4d4c:	88 0f       	add	r24, r24
    4d4e:	99 1f       	adc	r25, r25
    4d50:	0a 94       	dec	r0
    4d52:	e2 f7       	brpl	.-8      	; 0x4d4c <DIO_enumSetPinDirection+0x176>
    4d54:	80 95       	com	r24
    4d56:	84 23       	and	r24, r20
    4d58:	8c 93       	st	X, r24
    4d5a:	42 c0       	rjmp	.+132    	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    4d5c:	a7 e3       	ldi	r26, 0x37	; 55
    4d5e:	b0 e0       	ldi	r27, 0x00	; 0
    4d60:	e7 e3       	ldi	r30, 0x37	; 55
    4d62:	f0 e0       	ldi	r31, 0x00	; 0
    4d64:	80 81       	ld	r24, Z
    4d66:	48 2f       	mov	r20, r24
    4d68:	8b 81       	ldd	r24, Y+3	; 0x03
    4d6a:	28 2f       	mov	r18, r24
    4d6c:	30 e0       	ldi	r19, 0x00	; 0
    4d6e:	81 e0       	ldi	r24, 0x01	; 1
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	02 2e       	mov	r0, r18
    4d74:	02 c0       	rjmp	.+4      	; 0x4d7a <DIO_enumSetPinDirection+0x1a4>
    4d76:	88 0f       	add	r24, r24
    4d78:	99 1f       	adc	r25, r25
    4d7a:	0a 94       	dec	r0
    4d7c:	e2 f7       	brpl	.-8      	; 0x4d76 <DIO_enumSetPinDirection+0x1a0>
    4d7e:	80 95       	com	r24
    4d80:	84 23       	and	r24, r20
    4d82:	8c 93       	st	X, r24
    4d84:	2d c0       	rjmp	.+90     	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    4d86:	a4 e3       	ldi	r26, 0x34	; 52
    4d88:	b0 e0       	ldi	r27, 0x00	; 0
    4d8a:	e4 e3       	ldi	r30, 0x34	; 52
    4d8c:	f0 e0       	ldi	r31, 0x00	; 0
    4d8e:	80 81       	ld	r24, Z
    4d90:	48 2f       	mov	r20, r24
    4d92:	8b 81       	ldd	r24, Y+3	; 0x03
    4d94:	28 2f       	mov	r18, r24
    4d96:	30 e0       	ldi	r19, 0x00	; 0
    4d98:	81 e0       	ldi	r24, 0x01	; 1
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	02 2e       	mov	r0, r18
    4d9e:	02 c0       	rjmp	.+4      	; 0x4da4 <DIO_enumSetPinDirection+0x1ce>
    4da0:	88 0f       	add	r24, r24
    4da2:	99 1f       	adc	r25, r25
    4da4:	0a 94       	dec	r0
    4da6:	e2 f7       	brpl	.-8      	; 0x4da0 <DIO_enumSetPinDirection+0x1ca>
    4da8:	80 95       	com	r24
    4daa:	84 23       	and	r24, r20
    4dac:	8c 93       	st	X, r24
    4dae:	18 c0       	rjmp	.+48     	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    4db0:	a1 e3       	ldi	r26, 0x31	; 49
    4db2:	b0 e0       	ldi	r27, 0x00	; 0
    4db4:	e1 e3       	ldi	r30, 0x31	; 49
    4db6:	f0 e0       	ldi	r31, 0x00	; 0
    4db8:	80 81       	ld	r24, Z
    4dba:	48 2f       	mov	r20, r24
    4dbc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dbe:	28 2f       	mov	r18, r24
    4dc0:	30 e0       	ldi	r19, 0x00	; 0
    4dc2:	81 e0       	ldi	r24, 0x01	; 1
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	02 2e       	mov	r0, r18
    4dc8:	02 c0       	rjmp	.+4      	; 0x4dce <DIO_enumSetPinDirection+0x1f8>
    4dca:	88 0f       	add	r24, r24
    4dcc:	99 1f       	adc	r25, r25
    4dce:	0a 94       	dec	r0
    4dd0:	e2 f7       	brpl	.-8      	; 0x4dca <DIO_enumSetPinDirection+0x1f4>
    4dd2:	80 95       	com	r24
    4dd4:	84 23       	and	r24, r20
    4dd6:	8c 93       	st	X, r24
    4dd8:	03 c0       	rjmp	.+6      	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    4dda:	19 82       	std	Y+1, r1	; 0x01
    4ddc:	01 c0       	rjmp	.+2      	; 0x4de0 <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    4dde:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    4de0:	89 81       	ldd	r24, Y+1	; 0x01

}
    4de2:	28 96       	adiw	r28, 0x08	; 8
    4de4:	0f b6       	in	r0, 0x3f	; 63
    4de6:	f8 94       	cli
    4de8:	de bf       	out	0x3e, r29	; 62
    4dea:	0f be       	out	0x3f, r0	; 63
    4dec:	cd bf       	out	0x3d, r28	; 61
    4dee:	cf 91       	pop	r28
    4df0:	df 91       	pop	r29
    4df2:	08 95       	ret

00004df4 <DIO_enumSetPinValue>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
  	  =>Copy_u8Value --> Pin Direction [ DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    4df4:	df 93       	push	r29
    4df6:	cf 93       	push	r28
    4df8:	cd b7       	in	r28, 0x3d	; 61
    4dfa:	de b7       	in	r29, 0x3e	; 62
    4dfc:	28 97       	sbiw	r28, 0x08	; 8
    4dfe:	0f b6       	in	r0, 0x3f	; 63
    4e00:	f8 94       	cli
    4e02:	de bf       	out	0x3e, r29	; 62
    4e04:	0f be       	out	0x3f, r0	; 63
    4e06:	cd bf       	out	0x3d, r28	; 61
    4e08:	8a 83       	std	Y+2, r24	; 0x02
    4e0a:	6b 83       	std	Y+3, r22	; 0x03
    4e0c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    4e12:	8a 81       	ldd	r24, Y+2	; 0x02
    4e14:	84 30       	cpi	r24, 0x04	; 4
    4e16:	08 f0       	brcs	.+2      	; 0x4e1a <DIO_enumSetPinValue+0x26>
    4e18:	f1 c0       	rjmp	.+482    	; 0x4ffc <DIO_enumSetPinValue+0x208>
    4e1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4e1c:	88 30       	cpi	r24, 0x08	; 8
    4e1e:	08 f0       	brcs	.+2      	; 0x4e22 <DIO_enumSetPinValue+0x2e>
    4e20:	ed c0       	rjmp	.+474    	; 0x4ffc <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    4e22:	8c 81       	ldd	r24, Y+4	; 0x04
    4e24:	81 30       	cpi	r24, 0x01	; 1
    4e26:	09 f0       	breq	.+2      	; 0x4e2a <DIO_enumSetPinValue+0x36>
    4e28:	6f c0       	rjmp	.+222    	; 0x4f08 <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    4e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2c:	28 2f       	mov	r18, r24
    4e2e:	30 e0       	ldi	r19, 0x00	; 0
    4e30:	38 87       	std	Y+8, r19	; 0x08
    4e32:	2f 83       	std	Y+7, r18	; 0x07
    4e34:	8f 81       	ldd	r24, Y+7	; 0x07
    4e36:	98 85       	ldd	r25, Y+8	; 0x08
    4e38:	81 30       	cpi	r24, 0x01	; 1
    4e3a:	91 05       	cpc	r25, r1
    4e3c:	49 f1       	breq	.+82     	; 0x4e90 <DIO_enumSetPinValue+0x9c>
    4e3e:	2f 81       	ldd	r18, Y+7	; 0x07
    4e40:	38 85       	ldd	r19, Y+8	; 0x08
    4e42:	22 30       	cpi	r18, 0x02	; 2
    4e44:	31 05       	cpc	r19, r1
    4e46:	2c f4       	brge	.+10     	; 0x4e52 <DIO_enumSetPinValue+0x5e>
    4e48:	8f 81       	ldd	r24, Y+7	; 0x07
    4e4a:	98 85       	ldd	r25, Y+8	; 0x08
    4e4c:	00 97       	sbiw	r24, 0x00	; 0
    4e4e:	61 f0       	breq	.+24     	; 0x4e68 <DIO_enumSetPinValue+0x74>
    4e50:	d6 c0       	rjmp	.+428    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
    4e52:	2f 81       	ldd	r18, Y+7	; 0x07
    4e54:	38 85       	ldd	r19, Y+8	; 0x08
    4e56:	22 30       	cpi	r18, 0x02	; 2
    4e58:	31 05       	cpc	r19, r1
    4e5a:	71 f1       	breq	.+92     	; 0x4eb8 <DIO_enumSetPinValue+0xc4>
    4e5c:	8f 81       	ldd	r24, Y+7	; 0x07
    4e5e:	98 85       	ldd	r25, Y+8	; 0x08
    4e60:	83 30       	cpi	r24, 0x03	; 3
    4e62:	91 05       	cpc	r25, r1
    4e64:	e9 f1       	breq	.+122    	; 0x4ee0 <DIO_enumSetPinValue+0xec>
    4e66:	cb c0       	rjmp	.+406    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    4e68:	ab e3       	ldi	r26, 0x3B	; 59
    4e6a:	b0 e0       	ldi	r27, 0x00	; 0
    4e6c:	eb e3       	ldi	r30, 0x3B	; 59
    4e6e:	f0 e0       	ldi	r31, 0x00	; 0
    4e70:	80 81       	ld	r24, Z
    4e72:	48 2f       	mov	r20, r24
    4e74:	8b 81       	ldd	r24, Y+3	; 0x03
    4e76:	28 2f       	mov	r18, r24
    4e78:	30 e0       	ldi	r19, 0x00	; 0
    4e7a:	81 e0       	ldi	r24, 0x01	; 1
    4e7c:	90 e0       	ldi	r25, 0x00	; 0
    4e7e:	02 2e       	mov	r0, r18
    4e80:	02 c0       	rjmp	.+4      	; 0x4e86 <DIO_enumSetPinValue+0x92>
    4e82:	88 0f       	add	r24, r24
    4e84:	99 1f       	adc	r25, r25
    4e86:	0a 94       	dec	r0
    4e88:	e2 f7       	brpl	.-8      	; 0x4e82 <DIO_enumSetPinValue+0x8e>
    4e8a:	84 2b       	or	r24, r20
    4e8c:	8c 93       	st	X, r24
    4e8e:	b7 c0       	rjmp	.+366    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    4e90:	a8 e3       	ldi	r26, 0x38	; 56
    4e92:	b0 e0       	ldi	r27, 0x00	; 0
    4e94:	e8 e3       	ldi	r30, 0x38	; 56
    4e96:	f0 e0       	ldi	r31, 0x00	; 0
    4e98:	80 81       	ld	r24, Z
    4e9a:	48 2f       	mov	r20, r24
    4e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e9e:	28 2f       	mov	r18, r24
    4ea0:	30 e0       	ldi	r19, 0x00	; 0
    4ea2:	81 e0       	ldi	r24, 0x01	; 1
    4ea4:	90 e0       	ldi	r25, 0x00	; 0
    4ea6:	02 2e       	mov	r0, r18
    4ea8:	02 c0       	rjmp	.+4      	; 0x4eae <DIO_enumSetPinValue+0xba>
    4eaa:	88 0f       	add	r24, r24
    4eac:	99 1f       	adc	r25, r25
    4eae:	0a 94       	dec	r0
    4eb0:	e2 f7       	brpl	.-8      	; 0x4eaa <DIO_enumSetPinValue+0xb6>
    4eb2:	84 2b       	or	r24, r20
    4eb4:	8c 93       	st	X, r24
    4eb6:	a3 c0       	rjmp	.+326    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    4eb8:	a5 e3       	ldi	r26, 0x35	; 53
    4eba:	b0 e0       	ldi	r27, 0x00	; 0
    4ebc:	e5 e3       	ldi	r30, 0x35	; 53
    4ebe:	f0 e0       	ldi	r31, 0x00	; 0
    4ec0:	80 81       	ld	r24, Z
    4ec2:	48 2f       	mov	r20, r24
    4ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ec6:	28 2f       	mov	r18, r24
    4ec8:	30 e0       	ldi	r19, 0x00	; 0
    4eca:	81 e0       	ldi	r24, 0x01	; 1
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	02 2e       	mov	r0, r18
    4ed0:	02 c0       	rjmp	.+4      	; 0x4ed6 <DIO_enumSetPinValue+0xe2>
    4ed2:	88 0f       	add	r24, r24
    4ed4:	99 1f       	adc	r25, r25
    4ed6:	0a 94       	dec	r0
    4ed8:	e2 f7       	brpl	.-8      	; 0x4ed2 <DIO_enumSetPinValue+0xde>
    4eda:	84 2b       	or	r24, r20
    4edc:	8c 93       	st	X, r24
    4ede:	8f c0       	rjmp	.+286    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    4ee0:	a2 e3       	ldi	r26, 0x32	; 50
    4ee2:	b0 e0       	ldi	r27, 0x00	; 0
    4ee4:	e2 e3       	ldi	r30, 0x32	; 50
    4ee6:	f0 e0       	ldi	r31, 0x00	; 0
    4ee8:	80 81       	ld	r24, Z
    4eea:	48 2f       	mov	r20, r24
    4eec:	8b 81       	ldd	r24, Y+3	; 0x03
    4eee:	28 2f       	mov	r18, r24
    4ef0:	30 e0       	ldi	r19, 0x00	; 0
    4ef2:	81 e0       	ldi	r24, 0x01	; 1
    4ef4:	90 e0       	ldi	r25, 0x00	; 0
    4ef6:	02 2e       	mov	r0, r18
    4ef8:	02 c0       	rjmp	.+4      	; 0x4efe <DIO_enumSetPinValue+0x10a>
    4efa:	88 0f       	add	r24, r24
    4efc:	99 1f       	adc	r25, r25
    4efe:	0a 94       	dec	r0
    4f00:	e2 f7       	brpl	.-8      	; 0x4efa <DIO_enumSetPinValue+0x106>
    4f02:	84 2b       	or	r24, r20
    4f04:	8c 93       	st	X, r24
    4f06:	7b c0       	rjmp	.+246    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    4f08:	8c 81       	ldd	r24, Y+4	; 0x04
    4f0a:	88 23       	and	r24, r24
    4f0c:	09 f0       	breq	.+2      	; 0x4f10 <DIO_enumSetPinValue+0x11c>
    4f0e:	74 c0       	rjmp	.+232    	; 0x4ff8 <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    4f10:	8a 81       	ldd	r24, Y+2	; 0x02
    4f12:	28 2f       	mov	r18, r24
    4f14:	30 e0       	ldi	r19, 0x00	; 0
    4f16:	3e 83       	std	Y+6, r19	; 0x06
    4f18:	2d 83       	std	Y+5, r18	; 0x05
    4f1a:	8d 81       	ldd	r24, Y+5	; 0x05
    4f1c:	9e 81       	ldd	r25, Y+6	; 0x06
    4f1e:	81 30       	cpi	r24, 0x01	; 1
    4f20:	91 05       	cpc	r25, r1
    4f22:	59 f1       	breq	.+86     	; 0x4f7a <DIO_enumSetPinValue+0x186>
    4f24:	2d 81       	ldd	r18, Y+5	; 0x05
    4f26:	3e 81       	ldd	r19, Y+6	; 0x06
    4f28:	22 30       	cpi	r18, 0x02	; 2
    4f2a:	31 05       	cpc	r19, r1
    4f2c:	2c f4       	brge	.+10     	; 0x4f38 <DIO_enumSetPinValue+0x144>
    4f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    4f30:	9e 81       	ldd	r25, Y+6	; 0x06
    4f32:	00 97       	sbiw	r24, 0x00	; 0
    4f34:	69 f0       	breq	.+26     	; 0x4f50 <DIO_enumSetPinValue+0x15c>
    4f36:	63 c0       	rjmp	.+198    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
    4f38:	2d 81       	ldd	r18, Y+5	; 0x05
    4f3a:	3e 81       	ldd	r19, Y+6	; 0x06
    4f3c:	22 30       	cpi	r18, 0x02	; 2
    4f3e:	31 05       	cpc	r19, r1
    4f40:	89 f1       	breq	.+98     	; 0x4fa4 <DIO_enumSetPinValue+0x1b0>
    4f42:	8d 81       	ldd	r24, Y+5	; 0x05
    4f44:	9e 81       	ldd	r25, Y+6	; 0x06
    4f46:	83 30       	cpi	r24, 0x03	; 3
    4f48:	91 05       	cpc	r25, r1
    4f4a:	09 f4       	brne	.+2      	; 0x4f4e <DIO_enumSetPinValue+0x15a>
    4f4c:	40 c0       	rjmp	.+128    	; 0x4fce <DIO_enumSetPinValue+0x1da>
    4f4e:	57 c0       	rjmp	.+174    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    4f50:	ab e3       	ldi	r26, 0x3B	; 59
    4f52:	b0 e0       	ldi	r27, 0x00	; 0
    4f54:	eb e3       	ldi	r30, 0x3B	; 59
    4f56:	f0 e0       	ldi	r31, 0x00	; 0
    4f58:	80 81       	ld	r24, Z
    4f5a:	48 2f       	mov	r20, r24
    4f5c:	8b 81       	ldd	r24, Y+3	; 0x03
    4f5e:	28 2f       	mov	r18, r24
    4f60:	30 e0       	ldi	r19, 0x00	; 0
    4f62:	81 e0       	ldi	r24, 0x01	; 1
    4f64:	90 e0       	ldi	r25, 0x00	; 0
    4f66:	02 2e       	mov	r0, r18
    4f68:	02 c0       	rjmp	.+4      	; 0x4f6e <DIO_enumSetPinValue+0x17a>
    4f6a:	88 0f       	add	r24, r24
    4f6c:	99 1f       	adc	r25, r25
    4f6e:	0a 94       	dec	r0
    4f70:	e2 f7       	brpl	.-8      	; 0x4f6a <DIO_enumSetPinValue+0x176>
    4f72:	80 95       	com	r24
    4f74:	84 23       	and	r24, r20
    4f76:	8c 93       	st	X, r24
    4f78:	42 c0       	rjmp	.+132    	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    4f7a:	a8 e3       	ldi	r26, 0x38	; 56
    4f7c:	b0 e0       	ldi	r27, 0x00	; 0
    4f7e:	e8 e3       	ldi	r30, 0x38	; 56
    4f80:	f0 e0       	ldi	r31, 0x00	; 0
    4f82:	80 81       	ld	r24, Z
    4f84:	48 2f       	mov	r20, r24
    4f86:	8b 81       	ldd	r24, Y+3	; 0x03
    4f88:	28 2f       	mov	r18, r24
    4f8a:	30 e0       	ldi	r19, 0x00	; 0
    4f8c:	81 e0       	ldi	r24, 0x01	; 1
    4f8e:	90 e0       	ldi	r25, 0x00	; 0
    4f90:	02 2e       	mov	r0, r18
    4f92:	02 c0       	rjmp	.+4      	; 0x4f98 <DIO_enumSetPinValue+0x1a4>
    4f94:	88 0f       	add	r24, r24
    4f96:	99 1f       	adc	r25, r25
    4f98:	0a 94       	dec	r0
    4f9a:	e2 f7       	brpl	.-8      	; 0x4f94 <DIO_enumSetPinValue+0x1a0>
    4f9c:	80 95       	com	r24
    4f9e:	84 23       	and	r24, r20
    4fa0:	8c 93       	st	X, r24
    4fa2:	2d c0       	rjmp	.+90     	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    4fa4:	a5 e3       	ldi	r26, 0x35	; 53
    4fa6:	b0 e0       	ldi	r27, 0x00	; 0
    4fa8:	e5 e3       	ldi	r30, 0x35	; 53
    4faa:	f0 e0       	ldi	r31, 0x00	; 0
    4fac:	80 81       	ld	r24, Z
    4fae:	48 2f       	mov	r20, r24
    4fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    4fb2:	28 2f       	mov	r18, r24
    4fb4:	30 e0       	ldi	r19, 0x00	; 0
    4fb6:	81 e0       	ldi	r24, 0x01	; 1
    4fb8:	90 e0       	ldi	r25, 0x00	; 0
    4fba:	02 2e       	mov	r0, r18
    4fbc:	02 c0       	rjmp	.+4      	; 0x4fc2 <DIO_enumSetPinValue+0x1ce>
    4fbe:	88 0f       	add	r24, r24
    4fc0:	99 1f       	adc	r25, r25
    4fc2:	0a 94       	dec	r0
    4fc4:	e2 f7       	brpl	.-8      	; 0x4fbe <DIO_enumSetPinValue+0x1ca>
    4fc6:	80 95       	com	r24
    4fc8:	84 23       	and	r24, r20
    4fca:	8c 93       	st	X, r24
    4fcc:	18 c0       	rjmp	.+48     	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    4fce:	a2 e3       	ldi	r26, 0x32	; 50
    4fd0:	b0 e0       	ldi	r27, 0x00	; 0
    4fd2:	e2 e3       	ldi	r30, 0x32	; 50
    4fd4:	f0 e0       	ldi	r31, 0x00	; 0
    4fd6:	80 81       	ld	r24, Z
    4fd8:	48 2f       	mov	r20, r24
    4fda:	8b 81       	ldd	r24, Y+3	; 0x03
    4fdc:	28 2f       	mov	r18, r24
    4fde:	30 e0       	ldi	r19, 0x00	; 0
    4fe0:	81 e0       	ldi	r24, 0x01	; 1
    4fe2:	90 e0       	ldi	r25, 0x00	; 0
    4fe4:	02 2e       	mov	r0, r18
    4fe6:	02 c0       	rjmp	.+4      	; 0x4fec <DIO_enumSetPinValue+0x1f8>
    4fe8:	88 0f       	add	r24, r24
    4fea:	99 1f       	adc	r25, r25
    4fec:	0a 94       	dec	r0
    4fee:	e2 f7       	brpl	.-8      	; 0x4fe8 <DIO_enumSetPinValue+0x1f4>
    4ff0:	80 95       	com	r24
    4ff2:	84 23       	and	r24, r20
    4ff4:	8c 93       	st	X, r24
    4ff6:	03 c0       	rjmp	.+6      	; 0x4ffe <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    4ff8:	19 82       	std	Y+1, r1	; 0x01
    4ffa:	01 c0       	rjmp	.+2      	; 0x4ffe <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    4ffc:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    4ffe:	89 81       	ldd	r24, Y+1	; 0x01

}
    5000:	28 96       	adiw	r28, 0x08	; 8
    5002:	0f b6       	in	r0, 0x3f	; 63
    5004:	f8 94       	cli
    5006:	de bf       	out	0x3e, r29	; 62
    5008:	0f be       	out	0x3f, r0	; 63
    500a:	cd bf       	out	0x3d, r28	; 61
    500c:	cf 91       	pop	r28
    500e:	df 91       	pop	r29
    5010:	08 95       	ret

00005012 <DIO_enumGetPinValue>:
  	  => *Copy_PtrData  --> pointer to recieve the pin value
 * return : its status and recieve Pin Value in pointer
 */

DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    5012:	df 93       	push	r29
    5014:	cf 93       	push	r28
    5016:	cd b7       	in	r28, 0x3d	; 61
    5018:	de b7       	in	r29, 0x3e	; 62
    501a:	27 97       	sbiw	r28, 0x07	; 7
    501c:	0f b6       	in	r0, 0x3f	; 63
    501e:	f8 94       	cli
    5020:	de bf       	out	0x3e, r29	; 62
    5022:	0f be       	out	0x3f, r0	; 63
    5024:	cd bf       	out	0x3d, r28	; 61
    5026:	8a 83       	std	Y+2, r24	; 0x02
    5028:	6b 83       	std	Y+3, r22	; 0x03
    502a:	5d 83       	std	Y+5, r21	; 0x05
    502c:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    5032:	8a 81       	ldd	r24, Y+2	; 0x02
    5034:	84 30       	cpi	r24, 0x04	; 4
    5036:	08 f0       	brcs	.+2      	; 0x503a <DIO_enumGetPinValue+0x28>
    5038:	a6 c0       	rjmp	.+332    	; 0x5186 <DIO_enumGetPinValue+0x174>
    503a:	8b 81       	ldd	r24, Y+3	; 0x03
    503c:	88 30       	cpi	r24, 0x08	; 8
    503e:	08 f0       	brcs	.+2      	; 0x5042 <DIO_enumGetPinValue+0x30>
    5040:	a2 c0       	rjmp	.+324    	; 0x5186 <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    5042:	8a 81       	ldd	r24, Y+2	; 0x02
    5044:	28 2f       	mov	r18, r24
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	3f 83       	std	Y+7, r19	; 0x07
    504a:	2e 83       	std	Y+6, r18	; 0x06
    504c:	4e 81       	ldd	r20, Y+6	; 0x06
    504e:	5f 81       	ldd	r21, Y+7	; 0x07
    5050:	41 30       	cpi	r20, 0x01	; 1
    5052:	51 05       	cpc	r21, r1
    5054:	c1 f1       	breq	.+112    	; 0x50c6 <DIO_enumGetPinValue+0xb4>
    5056:	8e 81       	ldd	r24, Y+6	; 0x06
    5058:	9f 81       	ldd	r25, Y+7	; 0x07
    505a:	82 30       	cpi	r24, 0x02	; 2
    505c:	91 05       	cpc	r25, r1
    505e:	34 f4       	brge	.+12     	; 0x506c <DIO_enumGetPinValue+0x5a>
    5060:	2e 81       	ldd	r18, Y+6	; 0x06
    5062:	3f 81       	ldd	r19, Y+7	; 0x07
    5064:	21 15       	cp	r18, r1
    5066:	31 05       	cpc	r19, r1
    5068:	71 f0       	breq	.+28     	; 0x5086 <DIO_enumGetPinValue+0x74>
    506a:	8e c0       	rjmp	.+284    	; 0x5188 <DIO_enumGetPinValue+0x176>
    506c:	4e 81       	ldd	r20, Y+6	; 0x06
    506e:	5f 81       	ldd	r21, Y+7	; 0x07
    5070:	42 30       	cpi	r20, 0x02	; 2
    5072:	51 05       	cpc	r21, r1
    5074:	09 f4       	brne	.+2      	; 0x5078 <DIO_enumGetPinValue+0x66>
    5076:	47 c0       	rjmp	.+142    	; 0x5106 <DIO_enumGetPinValue+0xf4>
    5078:	8e 81       	ldd	r24, Y+6	; 0x06
    507a:	9f 81       	ldd	r25, Y+7	; 0x07
    507c:	83 30       	cpi	r24, 0x03	; 3
    507e:	91 05       	cpc	r25, r1
    5080:	09 f4       	brne	.+2      	; 0x5084 <DIO_enumGetPinValue+0x72>
    5082:	61 c0       	rjmp	.+194    	; 0x5146 <DIO_enumGetPinValue+0x134>
    5084:	81 c0       	rjmp	.+258    	; 0x5188 <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    5086:	e9 e3       	ldi	r30, 0x39	; 57
    5088:	f0 e0       	ldi	r31, 0x00	; 0
    508a:	80 81       	ld	r24, Z
    508c:	48 2f       	mov	r20, r24
    508e:	50 e0       	ldi	r21, 0x00	; 0
    5090:	8b 81       	ldd	r24, Y+3	; 0x03
    5092:	28 2f       	mov	r18, r24
    5094:	30 e0       	ldi	r19, 0x00	; 0
    5096:	81 e0       	ldi	r24, 0x01	; 1
    5098:	90 e0       	ldi	r25, 0x00	; 0
    509a:	02 c0       	rjmp	.+4      	; 0x50a0 <DIO_enumGetPinValue+0x8e>
    509c:	88 0f       	add	r24, r24
    509e:	99 1f       	adc	r25, r25
    50a0:	2a 95       	dec	r18
    50a2:	e2 f7       	brpl	.-8      	; 0x509c <DIO_enumGetPinValue+0x8a>
    50a4:	9a 01       	movw	r18, r20
    50a6:	28 23       	and	r18, r24
    50a8:	39 23       	and	r19, r25
    50aa:	8b 81       	ldd	r24, Y+3	; 0x03
    50ac:	88 2f       	mov	r24, r24
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	a9 01       	movw	r20, r18
    50b2:	02 c0       	rjmp	.+4      	; 0x50b8 <DIO_enumGetPinValue+0xa6>
    50b4:	55 95       	asr	r21
    50b6:	47 95       	ror	r20
    50b8:	8a 95       	dec	r24
    50ba:	e2 f7       	brpl	.-8      	; 0x50b4 <DIO_enumGetPinValue+0xa2>
    50bc:	ca 01       	movw	r24, r20
    50be:	ec 81       	ldd	r30, Y+4	; 0x04
    50c0:	fd 81       	ldd	r31, Y+5	; 0x05
    50c2:	80 83       	st	Z, r24
    50c4:	61 c0       	rjmp	.+194    	; 0x5188 <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    50c6:	e6 e3       	ldi	r30, 0x36	; 54
    50c8:	f0 e0       	ldi	r31, 0x00	; 0
    50ca:	80 81       	ld	r24, Z
    50cc:	48 2f       	mov	r20, r24
    50ce:	50 e0       	ldi	r21, 0x00	; 0
    50d0:	8b 81       	ldd	r24, Y+3	; 0x03
    50d2:	28 2f       	mov	r18, r24
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	81 e0       	ldi	r24, 0x01	; 1
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	02 c0       	rjmp	.+4      	; 0x50e0 <DIO_enumGetPinValue+0xce>
    50dc:	88 0f       	add	r24, r24
    50de:	99 1f       	adc	r25, r25
    50e0:	2a 95       	dec	r18
    50e2:	e2 f7       	brpl	.-8      	; 0x50dc <DIO_enumGetPinValue+0xca>
    50e4:	9a 01       	movw	r18, r20
    50e6:	28 23       	and	r18, r24
    50e8:	39 23       	and	r19, r25
    50ea:	8b 81       	ldd	r24, Y+3	; 0x03
    50ec:	88 2f       	mov	r24, r24
    50ee:	90 e0       	ldi	r25, 0x00	; 0
    50f0:	a9 01       	movw	r20, r18
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <DIO_enumGetPinValue+0xe6>
    50f4:	55 95       	asr	r21
    50f6:	47 95       	ror	r20
    50f8:	8a 95       	dec	r24
    50fa:	e2 f7       	brpl	.-8      	; 0x50f4 <DIO_enumGetPinValue+0xe2>
    50fc:	ca 01       	movw	r24, r20
    50fe:	ec 81       	ldd	r30, Y+4	; 0x04
    5100:	fd 81       	ldd	r31, Y+5	; 0x05
    5102:	80 83       	st	Z, r24
    5104:	41 c0       	rjmp	.+130    	; 0x5188 <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    5106:	e3 e3       	ldi	r30, 0x33	; 51
    5108:	f0 e0       	ldi	r31, 0x00	; 0
    510a:	80 81       	ld	r24, Z
    510c:	48 2f       	mov	r20, r24
    510e:	50 e0       	ldi	r21, 0x00	; 0
    5110:	8b 81       	ldd	r24, Y+3	; 0x03
    5112:	28 2f       	mov	r18, r24
    5114:	30 e0       	ldi	r19, 0x00	; 0
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	90 e0       	ldi	r25, 0x00	; 0
    511a:	02 c0       	rjmp	.+4      	; 0x5120 <DIO_enumGetPinValue+0x10e>
    511c:	88 0f       	add	r24, r24
    511e:	99 1f       	adc	r25, r25
    5120:	2a 95       	dec	r18
    5122:	e2 f7       	brpl	.-8      	; 0x511c <DIO_enumGetPinValue+0x10a>
    5124:	9a 01       	movw	r18, r20
    5126:	28 23       	and	r18, r24
    5128:	39 23       	and	r19, r25
    512a:	8b 81       	ldd	r24, Y+3	; 0x03
    512c:	88 2f       	mov	r24, r24
    512e:	90 e0       	ldi	r25, 0x00	; 0
    5130:	a9 01       	movw	r20, r18
    5132:	02 c0       	rjmp	.+4      	; 0x5138 <DIO_enumGetPinValue+0x126>
    5134:	55 95       	asr	r21
    5136:	47 95       	ror	r20
    5138:	8a 95       	dec	r24
    513a:	e2 f7       	brpl	.-8      	; 0x5134 <DIO_enumGetPinValue+0x122>
    513c:	ca 01       	movw	r24, r20
    513e:	ec 81       	ldd	r30, Y+4	; 0x04
    5140:	fd 81       	ldd	r31, Y+5	; 0x05
    5142:	80 83       	st	Z, r24
    5144:	21 c0       	rjmp	.+66     	; 0x5188 <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    5146:	e0 e3       	ldi	r30, 0x30	; 48
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	80 81       	ld	r24, Z
    514c:	48 2f       	mov	r20, r24
    514e:	50 e0       	ldi	r21, 0x00	; 0
    5150:	8b 81       	ldd	r24, Y+3	; 0x03
    5152:	28 2f       	mov	r18, r24
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	81 e0       	ldi	r24, 0x01	; 1
    5158:	90 e0       	ldi	r25, 0x00	; 0
    515a:	02 c0       	rjmp	.+4      	; 0x5160 <DIO_enumGetPinValue+0x14e>
    515c:	88 0f       	add	r24, r24
    515e:	99 1f       	adc	r25, r25
    5160:	2a 95       	dec	r18
    5162:	e2 f7       	brpl	.-8      	; 0x515c <DIO_enumGetPinValue+0x14a>
    5164:	9a 01       	movw	r18, r20
    5166:	28 23       	and	r18, r24
    5168:	39 23       	and	r19, r25
    516a:	8b 81       	ldd	r24, Y+3	; 0x03
    516c:	88 2f       	mov	r24, r24
    516e:	90 e0       	ldi	r25, 0x00	; 0
    5170:	a9 01       	movw	r20, r18
    5172:	02 c0       	rjmp	.+4      	; 0x5178 <DIO_enumGetPinValue+0x166>
    5174:	55 95       	asr	r21
    5176:	47 95       	ror	r20
    5178:	8a 95       	dec	r24
    517a:	e2 f7       	brpl	.-8      	; 0x5174 <DIO_enumGetPinValue+0x162>
    517c:	ca 01       	movw	r24, r20
    517e:	ec 81       	ldd	r30, Y+4	; 0x04
    5180:	fd 81       	ldd	r31, Y+5	; 0x05
    5182:	80 83       	st	Z, r24
    5184:	01 c0       	rjmp	.+2      	; 0x5188 <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    5186:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    5188:	89 81       	ldd	r24, Y+1	; 0x01
}
    518a:	27 96       	adiw	r28, 0x07	; 7
    518c:	0f b6       	in	r0, 0x3f	; 63
    518e:	f8 94       	cli
    5190:	de bf       	out	0x3e, r29	; 62
    5192:	0f be       	out	0x3f, r0	; 63
    5194:	cd bf       	out	0x3d, r28	; 61
    5196:	cf 91       	pop	r28
    5198:	df 91       	pop	r29
    519a:	08 95       	ret

0000519c <DIO_enumTogglePinValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA ,	DIO_PORTB , DIO_PORTC , DIO_PORTD ]
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    519c:	df 93       	push	r29
    519e:	cf 93       	push	r28
    51a0:	00 d0       	rcall	.+0      	; 0x51a2 <DIO_enumTogglePinValue+0x6>
    51a2:	00 d0       	rcall	.+0      	; 0x51a4 <DIO_enumTogglePinValue+0x8>
    51a4:	0f 92       	push	r0
    51a6:	cd b7       	in	r28, 0x3d	; 61
    51a8:	de b7       	in	r29, 0x3e	; 62
    51aa:	8a 83       	std	Y+2, r24	; 0x02
    51ac:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    51b2:	8b 81       	ldd	r24, Y+3	; 0x03
    51b4:	88 30       	cpi	r24, 0x08	; 8
    51b6:	08 f0       	brcs	.+2      	; 0x51ba <DIO_enumTogglePinValue+0x1e>
    51b8:	6f c0       	rjmp	.+222    	; 0x5298 <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    51ba:	8a 81       	ldd	r24, Y+2	; 0x02
    51bc:	28 2f       	mov	r18, r24
    51be:	30 e0       	ldi	r19, 0x00	; 0
    51c0:	3d 83       	std	Y+5, r19	; 0x05
    51c2:	2c 83       	std	Y+4, r18	; 0x04
    51c4:	8c 81       	ldd	r24, Y+4	; 0x04
    51c6:	9d 81       	ldd	r25, Y+5	; 0x05
    51c8:	81 30       	cpi	r24, 0x01	; 1
    51ca:	91 05       	cpc	r25, r1
    51cc:	49 f1       	breq	.+82     	; 0x5220 <DIO_enumTogglePinValue+0x84>
    51ce:	2c 81       	ldd	r18, Y+4	; 0x04
    51d0:	3d 81       	ldd	r19, Y+5	; 0x05
    51d2:	22 30       	cpi	r18, 0x02	; 2
    51d4:	31 05       	cpc	r19, r1
    51d6:	2c f4       	brge	.+10     	; 0x51e2 <DIO_enumTogglePinValue+0x46>
    51d8:	8c 81       	ldd	r24, Y+4	; 0x04
    51da:	9d 81       	ldd	r25, Y+5	; 0x05
    51dc:	00 97       	sbiw	r24, 0x00	; 0
    51de:	61 f0       	breq	.+24     	; 0x51f8 <DIO_enumTogglePinValue+0x5c>
    51e0:	5c c0       	rjmp	.+184    	; 0x529a <DIO_enumTogglePinValue+0xfe>
    51e2:	2c 81       	ldd	r18, Y+4	; 0x04
    51e4:	3d 81       	ldd	r19, Y+5	; 0x05
    51e6:	22 30       	cpi	r18, 0x02	; 2
    51e8:	31 05       	cpc	r19, r1
    51ea:	71 f1       	breq	.+92     	; 0x5248 <DIO_enumTogglePinValue+0xac>
    51ec:	8c 81       	ldd	r24, Y+4	; 0x04
    51ee:	9d 81       	ldd	r25, Y+5	; 0x05
    51f0:	83 30       	cpi	r24, 0x03	; 3
    51f2:	91 05       	cpc	r25, r1
    51f4:	e9 f1       	breq	.+122    	; 0x5270 <DIO_enumTogglePinValue+0xd4>
    51f6:	51 c0       	rjmp	.+162    	; 0x529a <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    51f8:	ab e3       	ldi	r26, 0x3B	; 59
    51fa:	b0 e0       	ldi	r27, 0x00	; 0
    51fc:	eb e3       	ldi	r30, 0x3B	; 59
    51fe:	f0 e0       	ldi	r31, 0x00	; 0
    5200:	80 81       	ld	r24, Z
    5202:	48 2f       	mov	r20, r24
    5204:	8b 81       	ldd	r24, Y+3	; 0x03
    5206:	28 2f       	mov	r18, r24
    5208:	30 e0       	ldi	r19, 0x00	; 0
    520a:	81 e0       	ldi	r24, 0x01	; 1
    520c:	90 e0       	ldi	r25, 0x00	; 0
    520e:	02 2e       	mov	r0, r18
    5210:	02 c0       	rjmp	.+4      	; 0x5216 <DIO_enumTogglePinValue+0x7a>
    5212:	88 0f       	add	r24, r24
    5214:	99 1f       	adc	r25, r25
    5216:	0a 94       	dec	r0
    5218:	e2 f7       	brpl	.-8      	; 0x5212 <DIO_enumTogglePinValue+0x76>
    521a:	84 27       	eor	r24, r20
    521c:	8c 93       	st	X, r24
    521e:	3d c0       	rjmp	.+122    	; 0x529a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    5220:	a8 e3       	ldi	r26, 0x38	; 56
    5222:	b0 e0       	ldi	r27, 0x00	; 0
    5224:	e8 e3       	ldi	r30, 0x38	; 56
    5226:	f0 e0       	ldi	r31, 0x00	; 0
    5228:	80 81       	ld	r24, Z
    522a:	48 2f       	mov	r20, r24
    522c:	8b 81       	ldd	r24, Y+3	; 0x03
    522e:	28 2f       	mov	r18, r24
    5230:	30 e0       	ldi	r19, 0x00	; 0
    5232:	81 e0       	ldi	r24, 0x01	; 1
    5234:	90 e0       	ldi	r25, 0x00	; 0
    5236:	02 2e       	mov	r0, r18
    5238:	02 c0       	rjmp	.+4      	; 0x523e <DIO_enumTogglePinValue+0xa2>
    523a:	88 0f       	add	r24, r24
    523c:	99 1f       	adc	r25, r25
    523e:	0a 94       	dec	r0
    5240:	e2 f7       	brpl	.-8      	; 0x523a <DIO_enumTogglePinValue+0x9e>
    5242:	84 27       	eor	r24, r20
    5244:	8c 93       	st	X, r24
    5246:	29 c0       	rjmp	.+82     	; 0x529a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    5248:	a5 e3       	ldi	r26, 0x35	; 53
    524a:	b0 e0       	ldi	r27, 0x00	; 0
    524c:	e5 e3       	ldi	r30, 0x35	; 53
    524e:	f0 e0       	ldi	r31, 0x00	; 0
    5250:	80 81       	ld	r24, Z
    5252:	48 2f       	mov	r20, r24
    5254:	8b 81       	ldd	r24, Y+3	; 0x03
    5256:	28 2f       	mov	r18, r24
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	81 e0       	ldi	r24, 0x01	; 1
    525c:	90 e0       	ldi	r25, 0x00	; 0
    525e:	02 2e       	mov	r0, r18
    5260:	02 c0       	rjmp	.+4      	; 0x5266 <DIO_enumTogglePinValue+0xca>
    5262:	88 0f       	add	r24, r24
    5264:	99 1f       	adc	r25, r25
    5266:	0a 94       	dec	r0
    5268:	e2 f7       	brpl	.-8      	; 0x5262 <DIO_enumTogglePinValue+0xc6>
    526a:	84 27       	eor	r24, r20
    526c:	8c 93       	st	X, r24
    526e:	15 c0       	rjmp	.+42     	; 0x529a <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    5270:	a2 e3       	ldi	r26, 0x32	; 50
    5272:	b0 e0       	ldi	r27, 0x00	; 0
    5274:	e2 e3       	ldi	r30, 0x32	; 50
    5276:	f0 e0       	ldi	r31, 0x00	; 0
    5278:	80 81       	ld	r24, Z
    527a:	48 2f       	mov	r20, r24
    527c:	8b 81       	ldd	r24, Y+3	; 0x03
    527e:	28 2f       	mov	r18, r24
    5280:	30 e0       	ldi	r19, 0x00	; 0
    5282:	81 e0       	ldi	r24, 0x01	; 1
    5284:	90 e0       	ldi	r25, 0x00	; 0
    5286:	02 2e       	mov	r0, r18
    5288:	02 c0       	rjmp	.+4      	; 0x528e <DIO_enumTogglePinValue+0xf2>
    528a:	88 0f       	add	r24, r24
    528c:	99 1f       	adc	r25, r25
    528e:	0a 94       	dec	r0
    5290:	e2 f7       	brpl	.-8      	; 0x528a <DIO_enumTogglePinValue+0xee>
    5292:	84 27       	eor	r24, r20
    5294:	8c 93       	st	X, r24
    5296:	01 c0       	rjmp	.+2      	; 0x529a <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    5298:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    529a:	89 81       	ldd	r24, Y+1	; 0x01
}
    529c:	0f 90       	pop	r0
    529e:	0f 90       	pop	r0
    52a0:	0f 90       	pop	r0
    52a2:	0f 90       	pop	r0
    52a4:	0f 90       	pop	r0
    52a6:	cf 91       	pop	r28
    52a8:	df 91       	pop	r29
    52aa:	08 95       	ret

000052ac <DIO_enumConnectPullup>:
  	  =>Copy_u8PIN  --> Pin Number [ DIO_PIN0 , DIO_PIN1 , DIO_PIN2 , DIO_PIN3 , DIO_PIN4 , DIO_PIN5 , DIO_PIN6 , DIO_PIN7 ]
 	  =>Copy_u8ConnectPullup --> [DIO_PIN_HIGH , DIO_PIN_LOW ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    52ac:	df 93       	push	r29
    52ae:	cf 93       	push	r28
    52b0:	00 d0       	rcall	.+0      	; 0x52b2 <DIO_enumConnectPullup+0x6>
    52b2:	00 d0       	rcall	.+0      	; 0x52b4 <DIO_enumConnectPullup+0x8>
    52b4:	00 d0       	rcall	.+0      	; 0x52b6 <DIO_enumConnectPullup+0xa>
    52b6:	cd b7       	in	r28, 0x3d	; 61
    52b8:	de b7       	in	r29, 0x3e	; 62
    52ba:	8a 83       	std	Y+2, r24	; 0x02
    52bc:	6b 83       	std	Y+3, r22	; 0x03
    52be:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    52c0:	81 e0       	ldi	r24, 0x01	; 1
    52c2:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    52c4:	8a 81       	ldd	r24, Y+2	; 0x02
    52c6:	84 30       	cpi	r24, 0x04	; 4
    52c8:	08 f0       	brcs	.+2      	; 0x52cc <DIO_enumConnectPullup+0x20>
    52ca:	3e c1       	rjmp	.+636    	; 0x5548 <DIO_enumConnectPullup+0x29c>
    52cc:	8b 81       	ldd	r24, Y+3	; 0x03
    52ce:	88 30       	cpi	r24, 0x08	; 8
    52d0:	08 f0       	brcs	.+2      	; 0x52d4 <DIO_enumConnectPullup+0x28>
    52d2:	3a c1       	rjmp	.+628    	; 0x5548 <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    52d4:	8a 81       	ldd	r24, Y+2	; 0x02
    52d6:	28 2f       	mov	r18, r24
    52d8:	30 e0       	ldi	r19, 0x00	; 0
    52da:	3e 83       	std	Y+6, r19	; 0x06
    52dc:	2d 83       	std	Y+5, r18	; 0x05
    52de:	8d 81       	ldd	r24, Y+5	; 0x05
    52e0:	9e 81       	ldd	r25, Y+6	; 0x06
    52e2:	81 30       	cpi	r24, 0x01	; 1
    52e4:	91 05       	cpc	r25, r1
    52e6:	09 f4       	brne	.+2      	; 0x52ea <DIO_enumConnectPullup+0x3e>
    52e8:	5d c0       	rjmp	.+186    	; 0x53a4 <DIO_enumConnectPullup+0xf8>
    52ea:	2d 81       	ldd	r18, Y+5	; 0x05
    52ec:	3e 81       	ldd	r19, Y+6	; 0x06
    52ee:	22 30       	cpi	r18, 0x02	; 2
    52f0:	31 05       	cpc	r19, r1
    52f2:	2c f4       	brge	.+10     	; 0x52fe <DIO_enumConnectPullup+0x52>
    52f4:	8d 81       	ldd	r24, Y+5	; 0x05
    52f6:	9e 81       	ldd	r25, Y+6	; 0x06
    52f8:	00 97       	sbiw	r24, 0x00	; 0
    52fa:	71 f0       	breq	.+28     	; 0x5318 <DIO_enumConnectPullup+0x6c>
    52fc:	26 c1       	rjmp	.+588    	; 0x554a <DIO_enumConnectPullup+0x29e>
    52fe:	2d 81       	ldd	r18, Y+5	; 0x05
    5300:	3e 81       	ldd	r19, Y+6	; 0x06
    5302:	22 30       	cpi	r18, 0x02	; 2
    5304:	31 05       	cpc	r19, r1
    5306:	09 f4       	brne	.+2      	; 0x530a <DIO_enumConnectPullup+0x5e>
    5308:	93 c0       	rjmp	.+294    	; 0x5430 <DIO_enumConnectPullup+0x184>
    530a:	8d 81       	ldd	r24, Y+5	; 0x05
    530c:	9e 81       	ldd	r25, Y+6	; 0x06
    530e:	83 30       	cpi	r24, 0x03	; 3
    5310:	91 05       	cpc	r25, r1
    5312:	09 f4       	brne	.+2      	; 0x5316 <DIO_enumConnectPullup+0x6a>
    5314:	d3 c0       	rjmp	.+422    	; 0x54bc <DIO_enumConnectPullup+0x210>
    5316:	19 c1       	rjmp	.+562    	; 0x554a <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    5318:	8c 81       	ldd	r24, Y+4	; 0x04
    531a:	81 30       	cpi	r24, 0x01	; 1
    531c:	71 f5       	brne	.+92     	; 0x537a <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    531e:	a0 e5       	ldi	r26, 0x50	; 80
    5320:	b0 e0       	ldi	r27, 0x00	; 0
    5322:	e0 e5       	ldi	r30, 0x50	; 80
    5324:	f0 e0       	ldi	r31, 0x00	; 0
    5326:	80 81       	ld	r24, Z
    5328:	8b 7f       	andi	r24, 0xFB	; 251
    532a:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    532c:	aa e3       	ldi	r26, 0x3A	; 58
    532e:	b0 e0       	ldi	r27, 0x00	; 0
    5330:	ea e3       	ldi	r30, 0x3A	; 58
    5332:	f0 e0       	ldi	r31, 0x00	; 0
    5334:	80 81       	ld	r24, Z
    5336:	48 2f       	mov	r20, r24
    5338:	8b 81       	ldd	r24, Y+3	; 0x03
    533a:	28 2f       	mov	r18, r24
    533c:	30 e0       	ldi	r19, 0x00	; 0
    533e:	81 e0       	ldi	r24, 0x01	; 1
    5340:	90 e0       	ldi	r25, 0x00	; 0
    5342:	02 c0       	rjmp	.+4      	; 0x5348 <DIO_enumConnectPullup+0x9c>
    5344:	88 0f       	add	r24, r24
    5346:	99 1f       	adc	r25, r25
    5348:	2a 95       	dec	r18
    534a:	e2 f7       	brpl	.-8      	; 0x5344 <DIO_enumConnectPullup+0x98>
    534c:	80 95       	com	r24
    534e:	84 23       	and	r24, r20
    5350:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    5352:	ab e3       	ldi	r26, 0x3B	; 59
    5354:	b0 e0       	ldi	r27, 0x00	; 0
    5356:	eb e3       	ldi	r30, 0x3B	; 59
    5358:	f0 e0       	ldi	r31, 0x00	; 0
    535a:	80 81       	ld	r24, Z
    535c:	48 2f       	mov	r20, r24
    535e:	8b 81       	ldd	r24, Y+3	; 0x03
    5360:	28 2f       	mov	r18, r24
    5362:	30 e0       	ldi	r19, 0x00	; 0
    5364:	81 e0       	ldi	r24, 0x01	; 1
    5366:	90 e0       	ldi	r25, 0x00	; 0
    5368:	02 2e       	mov	r0, r18
    536a:	02 c0       	rjmp	.+4      	; 0x5370 <DIO_enumConnectPullup+0xc4>
    536c:	88 0f       	add	r24, r24
    536e:	99 1f       	adc	r25, r25
    5370:	0a 94       	dec	r0
    5372:	e2 f7       	brpl	.-8      	; 0x536c <DIO_enumConnectPullup+0xc0>
    5374:	84 2b       	or	r24, r20
    5376:	8c 93       	st	X, r24
    5378:	e8 c0       	rjmp	.+464    	; 0x554a <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    537a:	ab e3       	ldi	r26, 0x3B	; 59
    537c:	b0 e0       	ldi	r27, 0x00	; 0
    537e:	eb e3       	ldi	r30, 0x3B	; 59
    5380:	f0 e0       	ldi	r31, 0x00	; 0
    5382:	80 81       	ld	r24, Z
    5384:	48 2f       	mov	r20, r24
    5386:	8b 81       	ldd	r24, Y+3	; 0x03
    5388:	28 2f       	mov	r18, r24
    538a:	30 e0       	ldi	r19, 0x00	; 0
    538c:	81 e0       	ldi	r24, 0x01	; 1
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	02 2e       	mov	r0, r18
    5392:	02 c0       	rjmp	.+4      	; 0x5398 <DIO_enumConnectPullup+0xec>
    5394:	88 0f       	add	r24, r24
    5396:	99 1f       	adc	r25, r25
    5398:	0a 94       	dec	r0
    539a:	e2 f7       	brpl	.-8      	; 0x5394 <DIO_enumConnectPullup+0xe8>
    539c:	80 95       	com	r24
    539e:	84 23       	and	r24, r20
    53a0:	8c 93       	st	X, r24
    53a2:	d3 c0       	rjmp	.+422    	; 0x554a <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    53a4:	8c 81       	ldd	r24, Y+4	; 0x04
    53a6:	81 30       	cpi	r24, 0x01	; 1
    53a8:	71 f5       	brne	.+92     	; 0x5406 <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    53aa:	a0 e5       	ldi	r26, 0x50	; 80
    53ac:	b0 e0       	ldi	r27, 0x00	; 0
    53ae:	e0 e5       	ldi	r30, 0x50	; 80
    53b0:	f0 e0       	ldi	r31, 0x00	; 0
    53b2:	80 81       	ld	r24, Z
    53b4:	8b 7f       	andi	r24, 0xFB	; 251
    53b6:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    53b8:	a7 e3       	ldi	r26, 0x37	; 55
    53ba:	b0 e0       	ldi	r27, 0x00	; 0
    53bc:	e7 e3       	ldi	r30, 0x37	; 55
    53be:	f0 e0       	ldi	r31, 0x00	; 0
    53c0:	80 81       	ld	r24, Z
    53c2:	48 2f       	mov	r20, r24
    53c4:	8b 81       	ldd	r24, Y+3	; 0x03
    53c6:	28 2f       	mov	r18, r24
    53c8:	30 e0       	ldi	r19, 0x00	; 0
    53ca:	81 e0       	ldi	r24, 0x01	; 1
    53cc:	90 e0       	ldi	r25, 0x00	; 0
    53ce:	02 c0       	rjmp	.+4      	; 0x53d4 <DIO_enumConnectPullup+0x128>
    53d0:	88 0f       	add	r24, r24
    53d2:	99 1f       	adc	r25, r25
    53d4:	2a 95       	dec	r18
    53d6:	e2 f7       	brpl	.-8      	; 0x53d0 <DIO_enumConnectPullup+0x124>
    53d8:	80 95       	com	r24
    53da:	84 23       	and	r24, r20
    53dc:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    53de:	a8 e3       	ldi	r26, 0x38	; 56
    53e0:	b0 e0       	ldi	r27, 0x00	; 0
    53e2:	e8 e3       	ldi	r30, 0x38	; 56
    53e4:	f0 e0       	ldi	r31, 0x00	; 0
    53e6:	80 81       	ld	r24, Z
    53e8:	48 2f       	mov	r20, r24
    53ea:	8b 81       	ldd	r24, Y+3	; 0x03
    53ec:	28 2f       	mov	r18, r24
    53ee:	30 e0       	ldi	r19, 0x00	; 0
    53f0:	81 e0       	ldi	r24, 0x01	; 1
    53f2:	90 e0       	ldi	r25, 0x00	; 0
    53f4:	02 2e       	mov	r0, r18
    53f6:	02 c0       	rjmp	.+4      	; 0x53fc <DIO_enumConnectPullup+0x150>
    53f8:	88 0f       	add	r24, r24
    53fa:	99 1f       	adc	r25, r25
    53fc:	0a 94       	dec	r0
    53fe:	e2 f7       	brpl	.-8      	; 0x53f8 <DIO_enumConnectPullup+0x14c>
    5400:	84 2b       	or	r24, r20
    5402:	8c 93       	st	X, r24
    5404:	a2 c0       	rjmp	.+324    	; 0x554a <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    5406:	a8 e3       	ldi	r26, 0x38	; 56
    5408:	b0 e0       	ldi	r27, 0x00	; 0
    540a:	e8 e3       	ldi	r30, 0x38	; 56
    540c:	f0 e0       	ldi	r31, 0x00	; 0
    540e:	80 81       	ld	r24, Z
    5410:	48 2f       	mov	r20, r24
    5412:	8b 81       	ldd	r24, Y+3	; 0x03
    5414:	28 2f       	mov	r18, r24
    5416:	30 e0       	ldi	r19, 0x00	; 0
    5418:	81 e0       	ldi	r24, 0x01	; 1
    541a:	90 e0       	ldi	r25, 0x00	; 0
    541c:	02 2e       	mov	r0, r18
    541e:	02 c0       	rjmp	.+4      	; 0x5424 <DIO_enumConnectPullup+0x178>
    5420:	88 0f       	add	r24, r24
    5422:	99 1f       	adc	r25, r25
    5424:	0a 94       	dec	r0
    5426:	e2 f7       	brpl	.-8      	; 0x5420 <DIO_enumConnectPullup+0x174>
    5428:	80 95       	com	r24
    542a:	84 23       	and	r24, r20
    542c:	8c 93       	st	X, r24
    542e:	8d c0       	rjmp	.+282    	; 0x554a <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    5430:	8c 81       	ldd	r24, Y+4	; 0x04
    5432:	81 30       	cpi	r24, 0x01	; 1
    5434:	71 f5       	brne	.+92     	; 0x5492 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    5436:	a0 e5       	ldi	r26, 0x50	; 80
    5438:	b0 e0       	ldi	r27, 0x00	; 0
    543a:	e0 e5       	ldi	r30, 0x50	; 80
    543c:	f0 e0       	ldi	r31, 0x00	; 0
    543e:	80 81       	ld	r24, Z
    5440:	8b 7f       	andi	r24, 0xFB	; 251
    5442:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    5444:	a4 e3       	ldi	r26, 0x34	; 52
    5446:	b0 e0       	ldi	r27, 0x00	; 0
    5448:	e4 e3       	ldi	r30, 0x34	; 52
    544a:	f0 e0       	ldi	r31, 0x00	; 0
    544c:	80 81       	ld	r24, Z
    544e:	48 2f       	mov	r20, r24
    5450:	8b 81       	ldd	r24, Y+3	; 0x03
    5452:	28 2f       	mov	r18, r24
    5454:	30 e0       	ldi	r19, 0x00	; 0
    5456:	81 e0       	ldi	r24, 0x01	; 1
    5458:	90 e0       	ldi	r25, 0x00	; 0
    545a:	02 c0       	rjmp	.+4      	; 0x5460 <DIO_enumConnectPullup+0x1b4>
    545c:	88 0f       	add	r24, r24
    545e:	99 1f       	adc	r25, r25
    5460:	2a 95       	dec	r18
    5462:	e2 f7       	brpl	.-8      	; 0x545c <DIO_enumConnectPullup+0x1b0>
    5464:	80 95       	com	r24
    5466:	84 23       	and	r24, r20
    5468:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    546a:	a5 e3       	ldi	r26, 0x35	; 53
    546c:	b0 e0       	ldi	r27, 0x00	; 0
    546e:	e5 e3       	ldi	r30, 0x35	; 53
    5470:	f0 e0       	ldi	r31, 0x00	; 0
    5472:	80 81       	ld	r24, Z
    5474:	48 2f       	mov	r20, r24
    5476:	8b 81       	ldd	r24, Y+3	; 0x03
    5478:	28 2f       	mov	r18, r24
    547a:	30 e0       	ldi	r19, 0x00	; 0
    547c:	81 e0       	ldi	r24, 0x01	; 1
    547e:	90 e0       	ldi	r25, 0x00	; 0
    5480:	02 2e       	mov	r0, r18
    5482:	02 c0       	rjmp	.+4      	; 0x5488 <DIO_enumConnectPullup+0x1dc>
    5484:	88 0f       	add	r24, r24
    5486:	99 1f       	adc	r25, r25
    5488:	0a 94       	dec	r0
    548a:	e2 f7       	brpl	.-8      	; 0x5484 <DIO_enumConnectPullup+0x1d8>
    548c:	84 2b       	or	r24, r20
    548e:	8c 93       	st	X, r24
    5490:	5c c0       	rjmp	.+184    	; 0x554a <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    5492:	a5 e3       	ldi	r26, 0x35	; 53
    5494:	b0 e0       	ldi	r27, 0x00	; 0
    5496:	e5 e3       	ldi	r30, 0x35	; 53
    5498:	f0 e0       	ldi	r31, 0x00	; 0
    549a:	80 81       	ld	r24, Z
    549c:	48 2f       	mov	r20, r24
    549e:	8b 81       	ldd	r24, Y+3	; 0x03
    54a0:	28 2f       	mov	r18, r24
    54a2:	30 e0       	ldi	r19, 0x00	; 0
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	02 2e       	mov	r0, r18
    54aa:	02 c0       	rjmp	.+4      	; 0x54b0 <DIO_enumConnectPullup+0x204>
    54ac:	88 0f       	add	r24, r24
    54ae:	99 1f       	adc	r25, r25
    54b0:	0a 94       	dec	r0
    54b2:	e2 f7       	brpl	.-8      	; 0x54ac <DIO_enumConnectPullup+0x200>
    54b4:	80 95       	com	r24
    54b6:	84 23       	and	r24, r20
    54b8:	8c 93       	st	X, r24
    54ba:	47 c0       	rjmp	.+142    	; 0x554a <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    54bc:	8c 81       	ldd	r24, Y+4	; 0x04
    54be:	81 30       	cpi	r24, 0x01	; 1
    54c0:	71 f5       	brne	.+92     	; 0x551e <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    54c2:	a0 e5       	ldi	r26, 0x50	; 80
    54c4:	b0 e0       	ldi	r27, 0x00	; 0
    54c6:	e0 e5       	ldi	r30, 0x50	; 80
    54c8:	f0 e0       	ldi	r31, 0x00	; 0
    54ca:	80 81       	ld	r24, Z
    54cc:	8b 7f       	andi	r24, 0xFB	; 251
    54ce:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    54d0:	a1 e3       	ldi	r26, 0x31	; 49
    54d2:	b0 e0       	ldi	r27, 0x00	; 0
    54d4:	e1 e3       	ldi	r30, 0x31	; 49
    54d6:	f0 e0       	ldi	r31, 0x00	; 0
    54d8:	80 81       	ld	r24, Z
    54da:	48 2f       	mov	r20, r24
    54dc:	8b 81       	ldd	r24, Y+3	; 0x03
    54de:	28 2f       	mov	r18, r24
    54e0:	30 e0       	ldi	r19, 0x00	; 0
    54e2:	81 e0       	ldi	r24, 0x01	; 1
    54e4:	90 e0       	ldi	r25, 0x00	; 0
    54e6:	02 c0       	rjmp	.+4      	; 0x54ec <DIO_enumConnectPullup+0x240>
    54e8:	88 0f       	add	r24, r24
    54ea:	99 1f       	adc	r25, r25
    54ec:	2a 95       	dec	r18
    54ee:	e2 f7       	brpl	.-8      	; 0x54e8 <DIO_enumConnectPullup+0x23c>
    54f0:	80 95       	com	r24
    54f2:	84 23       	and	r24, r20
    54f4:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    54f6:	a2 e3       	ldi	r26, 0x32	; 50
    54f8:	b0 e0       	ldi	r27, 0x00	; 0
    54fa:	e2 e3       	ldi	r30, 0x32	; 50
    54fc:	f0 e0       	ldi	r31, 0x00	; 0
    54fe:	80 81       	ld	r24, Z
    5500:	48 2f       	mov	r20, r24
    5502:	8b 81       	ldd	r24, Y+3	; 0x03
    5504:	28 2f       	mov	r18, r24
    5506:	30 e0       	ldi	r19, 0x00	; 0
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	90 e0       	ldi	r25, 0x00	; 0
    550c:	02 2e       	mov	r0, r18
    550e:	02 c0       	rjmp	.+4      	; 0x5514 <DIO_enumConnectPullup+0x268>
    5510:	88 0f       	add	r24, r24
    5512:	99 1f       	adc	r25, r25
    5514:	0a 94       	dec	r0
    5516:	e2 f7       	brpl	.-8      	; 0x5510 <DIO_enumConnectPullup+0x264>
    5518:	84 2b       	or	r24, r20
    551a:	8c 93       	st	X, r24
    551c:	16 c0       	rjmp	.+44     	; 0x554a <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    551e:	a2 e3       	ldi	r26, 0x32	; 50
    5520:	b0 e0       	ldi	r27, 0x00	; 0
    5522:	e2 e3       	ldi	r30, 0x32	; 50
    5524:	f0 e0       	ldi	r31, 0x00	; 0
    5526:	80 81       	ld	r24, Z
    5528:	48 2f       	mov	r20, r24
    552a:	8b 81       	ldd	r24, Y+3	; 0x03
    552c:	28 2f       	mov	r18, r24
    552e:	30 e0       	ldi	r19, 0x00	; 0
    5530:	81 e0       	ldi	r24, 0x01	; 1
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	02 2e       	mov	r0, r18
    5536:	02 c0       	rjmp	.+4      	; 0x553c <DIO_enumConnectPullup+0x290>
    5538:	88 0f       	add	r24, r24
    553a:	99 1f       	adc	r25, r25
    553c:	0a 94       	dec	r0
    553e:	e2 f7       	brpl	.-8      	; 0x5538 <DIO_enumConnectPullup+0x28c>
    5540:	80 95       	com	r24
    5542:	84 23       	and	r24, r20
    5544:	8c 93       	st	X, r24
    5546:	01 c0       	rjmp	.+2      	; 0x554a <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    5548:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    554a:	89 81       	ldd	r24, Y+1	; 0x01


}
    554c:	26 96       	adiw	r28, 0x06	; 6
    554e:	0f b6       	in	r0, 0x3f	; 63
    5550:	f8 94       	cli
    5552:	de bf       	out	0x3e, r29	; 62
    5554:	0f be       	out	0x3f, r0	; 63
    5556:	cd bf       	out	0x3d, r28	; 61
    5558:	cf 91       	pop	r28
    555a:	df 91       	pop	r29
    555c:	08 95       	ret

0000555e <DIO_enumSetPortDirection>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Direction  --> Port direction [ DIO_PORT_OUTPUT , DIO_PORT_INPUT ]
 * return :  its status
 */
DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction ) 
{
    555e:	df 93       	push	r29
    5560:	cf 93       	push	r28
    5562:	00 d0       	rcall	.+0      	; 0x5564 <DIO_enumSetPortDirection+0x6>
    5564:	00 d0       	rcall	.+0      	; 0x5566 <DIO_enumSetPortDirection+0x8>
    5566:	0f 92       	push	r0
    5568:	cd b7       	in	r28, 0x3d	; 61
    556a:	de b7       	in	r29, 0x3e	; 62
    556c:	8a 83       	std	Y+2, r24	; 0x02
    556e:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5570:	81 e0       	ldi	r24, 0x01	; 1
    5572:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    5574:	8a 81       	ldd	r24, Y+2	; 0x02
    5576:	84 30       	cpi	r24, 0x04	; 4
    5578:	a8 f5       	brcc	.+106    	; 0x55e4 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    557a:	8a 81       	ldd	r24, Y+2	; 0x02
    557c:	28 2f       	mov	r18, r24
    557e:	30 e0       	ldi	r19, 0x00	; 0
    5580:	3d 83       	std	Y+5, r19	; 0x05
    5582:	2c 83       	std	Y+4, r18	; 0x04
    5584:	8c 81       	ldd	r24, Y+4	; 0x04
    5586:	9d 81       	ldd	r25, Y+5	; 0x05
    5588:	81 30       	cpi	r24, 0x01	; 1
    558a:	91 05       	cpc	r25, r1
    558c:	d1 f0       	breq	.+52     	; 0x55c2 <DIO_enumSetPortDirection+0x64>
    558e:	2c 81       	ldd	r18, Y+4	; 0x04
    5590:	3d 81       	ldd	r19, Y+5	; 0x05
    5592:	22 30       	cpi	r18, 0x02	; 2
    5594:	31 05       	cpc	r19, r1
    5596:	2c f4       	brge	.+10     	; 0x55a2 <DIO_enumSetPortDirection+0x44>
    5598:	8c 81       	ldd	r24, Y+4	; 0x04
    559a:	9d 81       	ldd	r25, Y+5	; 0x05
    559c:	00 97       	sbiw	r24, 0x00	; 0
    559e:	61 f0       	breq	.+24     	; 0x55b8 <DIO_enumSetPortDirection+0x5a>
    55a0:	1f c0       	rjmp	.+62     	; 0x55e0 <DIO_enumSetPortDirection+0x82>
    55a2:	2c 81       	ldd	r18, Y+4	; 0x04
    55a4:	3d 81       	ldd	r19, Y+5	; 0x05
    55a6:	22 30       	cpi	r18, 0x02	; 2
    55a8:	31 05       	cpc	r19, r1
    55aa:	81 f0       	breq	.+32     	; 0x55cc <DIO_enumSetPortDirection+0x6e>
    55ac:	8c 81       	ldd	r24, Y+4	; 0x04
    55ae:	9d 81       	ldd	r25, Y+5	; 0x05
    55b0:	83 30       	cpi	r24, 0x03	; 3
    55b2:	91 05       	cpc	r25, r1
    55b4:	81 f0       	breq	.+32     	; 0x55d6 <DIO_enumSetPortDirection+0x78>
    55b6:	14 c0       	rjmp	.+40     	; 0x55e0 <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    55b8:	ea e3       	ldi	r30, 0x3A	; 58
    55ba:	f0 e0       	ldi	r31, 0x00	; 0
    55bc:	8b 81       	ldd	r24, Y+3	; 0x03
    55be:	80 83       	st	Z, r24
    55c0:	12 c0       	rjmp	.+36     	; 0x55e6 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    55c2:	e7 e3       	ldi	r30, 0x37	; 55
    55c4:	f0 e0       	ldi	r31, 0x00	; 0
    55c6:	8b 81       	ldd	r24, Y+3	; 0x03
    55c8:	80 83       	st	Z, r24
    55ca:	0d c0       	rjmp	.+26     	; 0x55e6 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    55cc:	e4 e3       	ldi	r30, 0x34	; 52
    55ce:	f0 e0       	ldi	r31, 0x00	; 0
    55d0:	8b 81       	ldd	r24, Y+3	; 0x03
    55d2:	80 83       	st	Z, r24
    55d4:	08 c0       	rjmp	.+16     	; 0x55e6 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    55d6:	e1 e3       	ldi	r30, 0x31	; 49
    55d8:	f0 e0       	ldi	r31, 0x00	; 0
    55da:	8b 81       	ldd	r24, Y+3	; 0x03
    55dc:	80 83       	st	Z, r24
    55de:	03 c0       	rjmp	.+6      	; 0x55e6 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    55e0:	19 82       	std	Y+1, r1	; 0x01
    55e2:	01 c0       	rjmp	.+2      	; 0x55e6 <DIO_enumSetPortDirection+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    55e4:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    55e6:	89 81       	ldd	r24, Y+1	; 0x01
}
    55e8:	0f 90       	pop	r0
    55ea:	0f 90       	pop	r0
    55ec:	0f 90       	pop	r0
    55ee:	0f 90       	pop	r0
    55f0:	0f 90       	pop	r0
    55f2:	cf 91       	pop	r28
    55f4:	df 91       	pop	r29
    55f6:	08 95       	ret

000055f8 <DIO_enumSetPortValue>:
  	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  =>Copy_u8Value  --> The Value  [DIO_PORT_HIGH , DIO_PORT_LOW , Another Value]
 * return : its status
 */
DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    55f8:	df 93       	push	r29
    55fa:	cf 93       	push	r28
    55fc:	00 d0       	rcall	.+0      	; 0x55fe <DIO_enumSetPortValue+0x6>
    55fe:	00 d0       	rcall	.+0      	; 0x5600 <DIO_enumSetPortValue+0x8>
    5600:	0f 92       	push	r0
    5602:	cd b7       	in	r28, 0x3d	; 61
    5604:	de b7       	in	r29, 0x3e	; 62
    5606:	8a 83       	std	Y+2, r24	; 0x02
    5608:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    560e:	8a 81       	ldd	r24, Y+2	; 0x02
    5610:	84 30       	cpi	r24, 0x04	; 4
    5612:	a8 f5       	brcc	.+106    	; 0x567e <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    5614:	8a 81       	ldd	r24, Y+2	; 0x02
    5616:	28 2f       	mov	r18, r24
    5618:	30 e0       	ldi	r19, 0x00	; 0
    561a:	3d 83       	std	Y+5, r19	; 0x05
    561c:	2c 83       	std	Y+4, r18	; 0x04
    561e:	8c 81       	ldd	r24, Y+4	; 0x04
    5620:	9d 81       	ldd	r25, Y+5	; 0x05
    5622:	81 30       	cpi	r24, 0x01	; 1
    5624:	91 05       	cpc	r25, r1
    5626:	d1 f0       	breq	.+52     	; 0x565c <DIO_enumSetPortValue+0x64>
    5628:	2c 81       	ldd	r18, Y+4	; 0x04
    562a:	3d 81       	ldd	r19, Y+5	; 0x05
    562c:	22 30       	cpi	r18, 0x02	; 2
    562e:	31 05       	cpc	r19, r1
    5630:	2c f4       	brge	.+10     	; 0x563c <DIO_enumSetPortValue+0x44>
    5632:	8c 81       	ldd	r24, Y+4	; 0x04
    5634:	9d 81       	ldd	r25, Y+5	; 0x05
    5636:	00 97       	sbiw	r24, 0x00	; 0
    5638:	61 f0       	breq	.+24     	; 0x5652 <DIO_enumSetPortValue+0x5a>
    563a:	1f c0       	rjmp	.+62     	; 0x567a <DIO_enumSetPortValue+0x82>
    563c:	2c 81       	ldd	r18, Y+4	; 0x04
    563e:	3d 81       	ldd	r19, Y+5	; 0x05
    5640:	22 30       	cpi	r18, 0x02	; 2
    5642:	31 05       	cpc	r19, r1
    5644:	81 f0       	breq	.+32     	; 0x5666 <DIO_enumSetPortValue+0x6e>
    5646:	8c 81       	ldd	r24, Y+4	; 0x04
    5648:	9d 81       	ldd	r25, Y+5	; 0x05
    564a:	83 30       	cpi	r24, 0x03	; 3
    564c:	91 05       	cpc	r25, r1
    564e:	81 f0       	breq	.+32     	; 0x5670 <DIO_enumSetPortValue+0x78>
    5650:	14 c0       	rjmp	.+40     	; 0x567a <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    5652:	eb e3       	ldi	r30, 0x3B	; 59
    5654:	f0 e0       	ldi	r31, 0x00	; 0
    5656:	8b 81       	ldd	r24, Y+3	; 0x03
    5658:	80 83       	st	Z, r24
    565a:	12 c0       	rjmp	.+36     	; 0x5680 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    565c:	e8 e3       	ldi	r30, 0x38	; 56
    565e:	f0 e0       	ldi	r31, 0x00	; 0
    5660:	8b 81       	ldd	r24, Y+3	; 0x03
    5662:	80 83       	st	Z, r24
    5664:	0d c0       	rjmp	.+26     	; 0x5680 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    5666:	e5 e3       	ldi	r30, 0x35	; 53
    5668:	f0 e0       	ldi	r31, 0x00	; 0
    566a:	8b 81       	ldd	r24, Y+3	; 0x03
    566c:	80 83       	st	Z, r24
    566e:	08 c0       	rjmp	.+16     	; 0x5680 <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    5670:	e2 e3       	ldi	r30, 0x32	; 50
    5672:	f0 e0       	ldi	r31, 0x00	; 0
    5674:	8b 81       	ldd	r24, Y+3	; 0x03
    5676:	80 83       	st	Z, r24
    5678:	03 c0       	rjmp	.+6      	; 0x5680 <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    567a:	19 82       	std	Y+1, r1	; 0x01
    567c:	01 c0       	rjmp	.+2      	; 0x5680 <DIO_enumSetPortValue+0x88>
		}	
	}
	else
	{
		LOC_enumState = DIO_NOK;
    567e:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    5680:	89 81       	ldd	r24, Y+1	; 0x01
}
    5682:	0f 90       	pop	r0
    5684:	0f 90       	pop	r0
    5686:	0f 90       	pop	r0
    5688:	0f 90       	pop	r0
    568a:	0f 90       	pop	r0
    568c:	cf 91       	pop	r28
    568e:	df 91       	pop	r29
    5690:	08 95       	ret

00005692 <DIO_enumTogglePortValue>:
 * Parameters :
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 * return : its status
 */
DIO_ErrorStatus DIO_enumTogglePortValue      (u8 Copy_u8PORT                       )
{
    5692:	df 93       	push	r29
    5694:	cf 93       	push	r28
    5696:	00 d0       	rcall	.+0      	; 0x5698 <DIO_enumTogglePortValue+0x6>
    5698:	00 d0       	rcall	.+0      	; 0x569a <DIO_enumTogglePortValue+0x8>
    569a:	cd b7       	in	r28, 0x3d	; 61
    569c:	de b7       	in	r29, 0x3e	; 62
    569e:	8a 83       	std	Y+2, r24	; 0x02
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    56a0:	81 e0       	ldi	r24, 0x01	; 1
    56a2:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PORT <= DIO_PORTD)
    56a4:	8a 81       	ldd	r24, Y+2	; 0x02
    56a6:	84 30       	cpi	r24, 0x04	; 4
    56a8:	08 f0       	brcs	.+2      	; 0x56ac <DIO_enumTogglePortValue+0x1a>
    56aa:	3f c0       	rjmp	.+126    	; 0x572a <DIO_enumTogglePortValue+0x98>
	{
		switch (Copy_u8PORT)
    56ac:	8a 81       	ldd	r24, Y+2	; 0x02
    56ae:	28 2f       	mov	r18, r24
    56b0:	30 e0       	ldi	r19, 0x00	; 0
    56b2:	3c 83       	std	Y+4, r19	; 0x04
    56b4:	2b 83       	std	Y+3, r18	; 0x03
    56b6:	8b 81       	ldd	r24, Y+3	; 0x03
    56b8:	9c 81       	ldd	r25, Y+4	; 0x04
    56ba:	81 30       	cpi	r24, 0x01	; 1
    56bc:	91 05       	cpc	r25, r1
    56be:	e9 f0       	breq	.+58     	; 0x56fa <DIO_enumTogglePortValue+0x68>
    56c0:	2b 81       	ldd	r18, Y+3	; 0x03
    56c2:	3c 81       	ldd	r19, Y+4	; 0x04
    56c4:	22 30       	cpi	r18, 0x02	; 2
    56c6:	31 05       	cpc	r19, r1
    56c8:	2c f4       	brge	.+10     	; 0x56d4 <DIO_enumTogglePortValue+0x42>
    56ca:	8b 81       	ldd	r24, Y+3	; 0x03
    56cc:	9c 81       	ldd	r25, Y+4	; 0x04
    56ce:	00 97       	sbiw	r24, 0x00	; 0
    56d0:	61 f0       	breq	.+24     	; 0x56ea <DIO_enumTogglePortValue+0x58>
    56d2:	2c c0       	rjmp	.+88     	; 0x572c <DIO_enumTogglePortValue+0x9a>
    56d4:	2b 81       	ldd	r18, Y+3	; 0x03
    56d6:	3c 81       	ldd	r19, Y+4	; 0x04
    56d8:	22 30       	cpi	r18, 0x02	; 2
    56da:	31 05       	cpc	r19, r1
    56dc:	b1 f0       	breq	.+44     	; 0x570a <DIO_enumTogglePortValue+0x78>
    56de:	8b 81       	ldd	r24, Y+3	; 0x03
    56e0:	9c 81       	ldd	r25, Y+4	; 0x04
    56e2:	83 30       	cpi	r24, 0x03	; 3
    56e4:	91 05       	cpc	r25, r1
    56e6:	c9 f0       	breq	.+50     	; 0x571a <DIO_enumTogglePortValue+0x88>
    56e8:	21 c0       	rjmp	.+66     	; 0x572c <DIO_enumTogglePortValue+0x9a>
		{
		case DIO_PORTA : PORTA_Register = ~PORTA_Register ;
    56ea:	ab e3       	ldi	r26, 0x3B	; 59
    56ec:	b0 e0       	ldi	r27, 0x00	; 0
    56ee:	eb e3       	ldi	r30, 0x3B	; 59
    56f0:	f0 e0       	ldi	r31, 0x00	; 0
    56f2:	80 81       	ld	r24, Z
    56f4:	80 95       	com	r24
    56f6:	8c 93       	st	X, r24
    56f8:	19 c0       	rjmp	.+50     	; 0x572c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTB : PORTB_Register = ~PORTB_Register ;
    56fa:	a8 e3       	ldi	r26, 0x38	; 56
    56fc:	b0 e0       	ldi	r27, 0x00	; 0
    56fe:	e8 e3       	ldi	r30, 0x38	; 56
    5700:	f0 e0       	ldi	r31, 0x00	; 0
    5702:	80 81       	ld	r24, Z
    5704:	80 95       	com	r24
    5706:	8c 93       	st	X, r24
    5708:	11 c0       	rjmp	.+34     	; 0x572c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTC : PORTC_Register = ~PORTC_Register ;
    570a:	a5 e3       	ldi	r26, 0x35	; 53
    570c:	b0 e0       	ldi	r27, 0x00	; 0
    570e:	e5 e3       	ldi	r30, 0x35	; 53
    5710:	f0 e0       	ldi	r31, 0x00	; 0
    5712:	80 81       	ld	r24, Z
    5714:	80 95       	com	r24
    5716:	8c 93       	st	X, r24
    5718:	09 c0       	rjmp	.+18     	; 0x572c <DIO_enumTogglePortValue+0x9a>
		break ;
		case DIO_PORTD : PORTD_Register = ~PORTD_Register ;
    571a:	a2 e3       	ldi	r26, 0x32	; 50
    571c:	b0 e0       	ldi	r27, 0x00	; 0
    571e:	e2 e3       	ldi	r30, 0x32	; 50
    5720:	f0 e0       	ldi	r31, 0x00	; 0
    5722:	80 81       	ld	r24, Z
    5724:	80 95       	com	r24
    5726:	8c 93       	st	X, r24
    5728:	01 c0       	rjmp	.+2      	; 0x572c <DIO_enumTogglePortValue+0x9a>
		break ;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    572a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    572c:	89 81       	ldd	r24, Y+1	; 0x01
}
    572e:	0f 90       	pop	r0
    5730:	0f 90       	pop	r0
    5732:	0f 90       	pop	r0
    5734:	0f 90       	pop	r0
    5736:	cf 91       	pop	r28
    5738:	df 91       	pop	r29
    573a:	08 95       	ret

0000573c <DIO_enumGetPortValue>:
 	  =>Copy_u8PORT --> Port Name [ DIO_PORTA , DIO_PORTB , DIO_PORTC , DIO_PORTD ]
 	  => *Copy_PtrData  --> pointer to recieve the port value
 * return : its status and recieve Port Value in pointer
 */
DIO_ErrorStatus   DIO_enumGetPortValue         ( u8 Copy_u8PORT  , u8 * Copy_PtrData )
{
    573c:	df 93       	push	r29
    573e:	cf 93       	push	r28
    5740:	00 d0       	rcall	.+0      	; 0x5742 <DIO_enumGetPortValue+0x6>
    5742:	00 d0       	rcall	.+0      	; 0x5744 <DIO_enumGetPortValue+0x8>
    5744:	00 d0       	rcall	.+0      	; 0x5746 <DIO_enumGetPortValue+0xa>
    5746:	cd b7       	in	r28, 0x3d	; 61
    5748:	de b7       	in	r29, 0x3e	; 62
    574a:	8a 83       	std	Y+2, r24	; 0x02
    574c:	7c 83       	std	Y+4, r23	; 0x04
    574e:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    5750:	81 e0       	ldi	r24, 0x01	; 1
    5752:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    5754:	8a 81       	ldd	r24, Y+2	; 0x02
    5756:	84 30       	cpi	r24, 0x04	; 4
    5758:	e8 f5       	brcc	.+122    	; 0x57d4 <DIO_enumGetPortValue+0x98>
	{
		switch (Copy_u8PORT)
    575a:	8a 81       	ldd	r24, Y+2	; 0x02
    575c:	28 2f       	mov	r18, r24
    575e:	30 e0       	ldi	r19, 0x00	; 0
    5760:	3e 83       	std	Y+6, r19	; 0x06
    5762:	2d 83       	std	Y+5, r18	; 0x05
    5764:	8d 81       	ldd	r24, Y+5	; 0x05
    5766:	9e 81       	ldd	r25, Y+6	; 0x06
    5768:	81 30       	cpi	r24, 0x01	; 1
    576a:	91 05       	cpc	r25, r1
    576c:	e1 f0       	breq	.+56     	; 0x57a6 <DIO_enumGetPortValue+0x6a>
    576e:	2d 81       	ldd	r18, Y+5	; 0x05
    5770:	3e 81       	ldd	r19, Y+6	; 0x06
    5772:	22 30       	cpi	r18, 0x02	; 2
    5774:	31 05       	cpc	r19, r1
    5776:	2c f4       	brge	.+10     	; 0x5782 <DIO_enumGetPortValue+0x46>
    5778:	8d 81       	ldd	r24, Y+5	; 0x05
    577a:	9e 81       	ldd	r25, Y+6	; 0x06
    577c:	00 97       	sbiw	r24, 0x00	; 0
    577e:	61 f0       	breq	.+24     	; 0x5798 <DIO_enumGetPortValue+0x5c>
    5780:	27 c0       	rjmp	.+78     	; 0x57d0 <DIO_enumGetPortValue+0x94>
    5782:	2d 81       	ldd	r18, Y+5	; 0x05
    5784:	3e 81       	ldd	r19, Y+6	; 0x06
    5786:	22 30       	cpi	r18, 0x02	; 2
    5788:	31 05       	cpc	r19, r1
    578a:	a1 f0       	breq	.+40     	; 0x57b4 <DIO_enumGetPortValue+0x78>
    578c:	8d 81       	ldd	r24, Y+5	; 0x05
    578e:	9e 81       	ldd	r25, Y+6	; 0x06
    5790:	83 30       	cpi	r24, 0x03	; 3
    5792:	91 05       	cpc	r25, r1
    5794:	b1 f0       	breq	.+44     	; 0x57c2 <DIO_enumGetPortValue+0x86>
    5796:	1c c0       	rjmp	.+56     	; 0x57d0 <DIO_enumGetPortValue+0x94>
		{
		case DIO_PORTA :
			*Copy_PtrData = PINA_Register  ;
    5798:	e9 e3       	ldi	r30, 0x39	; 57
    579a:	f0 e0       	ldi	r31, 0x00	; 0
    579c:	80 81       	ld	r24, Z
    579e:	eb 81       	ldd	r30, Y+3	; 0x03
    57a0:	fc 81       	ldd	r31, Y+4	; 0x04
    57a2:	80 83       	st	Z, r24
    57a4:	18 c0       	rjmp	.+48     	; 0x57d6 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTB :
			*Copy_PtrData = PINB_Register  ;
    57a6:	e6 e3       	ldi	r30, 0x36	; 54
    57a8:	f0 e0       	ldi	r31, 0x00	; 0
    57aa:	80 81       	ld	r24, Z
    57ac:	eb 81       	ldd	r30, Y+3	; 0x03
    57ae:	fc 81       	ldd	r31, Y+4	; 0x04
    57b0:	80 83       	st	Z, r24
    57b2:	11 c0       	rjmp	.+34     	; 0x57d6 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTC :
			*Copy_PtrData = PINC_Register  ;
    57b4:	e3 e3       	ldi	r30, 0x33	; 51
    57b6:	f0 e0       	ldi	r31, 0x00	; 0
    57b8:	80 81       	ld	r24, Z
    57ba:	eb 81       	ldd	r30, Y+3	; 0x03
    57bc:	fc 81       	ldd	r31, Y+4	; 0x04
    57be:	80 83       	st	Z, r24
    57c0:	0a c0       	rjmp	.+20     	; 0x57d6 <DIO_enumGetPortValue+0x9a>
			break ;
		case DIO_PORTD :
			*Copy_PtrData = PIND_Register  ;
    57c2:	e0 e3       	ldi	r30, 0x30	; 48
    57c4:	f0 e0       	ldi	r31, 0x00	; 0
    57c6:	80 81       	ld	r24, Z
    57c8:	eb 81       	ldd	r30, Y+3	; 0x03
    57ca:	fc 81       	ldd	r31, Y+4	; 0x04
    57cc:	80 83       	st	Z, r24
    57ce:	03 c0       	rjmp	.+6      	; 0x57d6 <DIO_enumGetPortValue+0x9a>
			break ;
		default : LOC_enumState = DIO_NOK ;
    57d0:	19 82       	std	Y+1, r1	; 0x01
    57d2:	01 c0       	rjmp	.+2      	; 0x57d6 <DIO_enumGetPortValue+0x9a>
		break;
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    57d4:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    57d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    57d8:	26 96       	adiw	r28, 0x06	; 6
    57da:	0f b6       	in	r0, 0x3f	; 63
    57dc:	f8 94       	cli
    57de:	de bf       	out	0x3e, r29	; 62
    57e0:	0f be       	out	0x3f, r0	; 63
    57e2:	cd bf       	out	0x3d, r28	; 61
    57e4:	cf 91       	pop	r28
    57e6:	df 91       	pop	r29
    57e8:	08 95       	ret

000057ea <DIO_voidWriteHighNibbles>:
 *Hint1 : High Nibbles = Most Pins [4:7]
 *Hint2 : This Function take the first 4 bits from the value (#) => xxxx#### AND put it in high nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    57ea:	df 93       	push	r29
    57ec:	cf 93       	push	r28
    57ee:	00 d0       	rcall	.+0      	; 0x57f0 <DIO_voidWriteHighNibbles+0x6>
    57f0:	00 d0       	rcall	.+0      	; 0x57f2 <DIO_voidWriteHighNibbles+0x8>
    57f2:	0f 92       	push	r0
    57f4:	cd b7       	in	r28, 0x3d	; 61
    57f6:	de b7       	in	r29, 0x3e	; 62
    57f8:	8a 83       	std	Y+2, r24	; 0x02
    57fa:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    57fc:	81 e0       	ldi	r24, 0x01	; 1
    57fe:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    5800:	8a 81       	ldd	r24, Y+2	; 0x02
    5802:	84 30       	cpi	r24, 0x04	; 4
    5804:	08 f0       	brcs	.+2      	; 0x5808 <DIO_voidWriteHighNibbles+0x1e>
    5806:	63 c0       	rjmp	.+198    	; 0x58ce <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    5808:	8b 81       	ldd	r24, Y+3	; 0x03
    580a:	82 95       	swap	r24
    580c:	80 7f       	andi	r24, 0xF0	; 240
    580e:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    5810:	8a 81       	ldd	r24, Y+2	; 0x02
    5812:	28 2f       	mov	r18, r24
    5814:	30 e0       	ldi	r19, 0x00	; 0
    5816:	3d 83       	std	Y+5, r19	; 0x05
    5818:	2c 83       	std	Y+4, r18	; 0x04
    581a:	8c 81       	ldd	r24, Y+4	; 0x04
    581c:	9d 81       	ldd	r25, Y+5	; 0x05
    581e:	81 30       	cpi	r24, 0x01	; 1
    5820:	91 05       	cpc	r25, r1
    5822:	29 f1       	breq	.+74     	; 0x586e <DIO_voidWriteHighNibbles+0x84>
    5824:	2c 81       	ldd	r18, Y+4	; 0x04
    5826:	3d 81       	ldd	r19, Y+5	; 0x05
    5828:	22 30       	cpi	r18, 0x02	; 2
    582a:	31 05       	cpc	r19, r1
    582c:	2c f4       	brge	.+10     	; 0x5838 <DIO_voidWriteHighNibbles+0x4e>
    582e:	8c 81       	ldd	r24, Y+4	; 0x04
    5830:	9d 81       	ldd	r25, Y+5	; 0x05
    5832:	00 97       	sbiw	r24, 0x00	; 0
    5834:	61 f0       	breq	.+24     	; 0x584e <DIO_voidWriteHighNibbles+0x64>
    5836:	4c c0       	rjmp	.+152    	; 0x58d0 <DIO_voidWriteHighNibbles+0xe6>
    5838:	2c 81       	ldd	r18, Y+4	; 0x04
    583a:	3d 81       	ldd	r19, Y+5	; 0x05
    583c:	22 30       	cpi	r18, 0x02	; 2
    583e:	31 05       	cpc	r19, r1
    5840:	31 f1       	breq	.+76     	; 0x588e <DIO_voidWriteHighNibbles+0xa4>
    5842:	8c 81       	ldd	r24, Y+4	; 0x04
    5844:	9d 81       	ldd	r25, Y+5	; 0x05
    5846:	83 30       	cpi	r24, 0x03	; 3
    5848:	91 05       	cpc	r25, r1
    584a:	89 f1       	breq	.+98     	; 0x58ae <DIO_voidWriteHighNibbles+0xc4>
    584c:	41 c0       	rjmp	.+130    	; 0x58d0 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    584e:	ab e3       	ldi	r26, 0x3B	; 59
    5850:	b0 e0       	ldi	r27, 0x00	; 0
    5852:	eb e3       	ldi	r30, 0x3B	; 59
    5854:	f0 e0       	ldi	r31, 0x00	; 0
    5856:	80 81       	ld	r24, Z
    5858:	8f 70       	andi	r24, 0x0F	; 15
    585a:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    585c:	ab e3       	ldi	r26, 0x3B	; 59
    585e:	b0 e0       	ldi	r27, 0x00	; 0
    5860:	eb e3       	ldi	r30, 0x3B	; 59
    5862:	f0 e0       	ldi	r31, 0x00	; 0
    5864:	90 81       	ld	r25, Z
    5866:	8b 81       	ldd	r24, Y+3	; 0x03
    5868:	89 2b       	or	r24, r25
    586a:	8c 93       	st	X, r24
    586c:	31 c0       	rjmp	.+98     	; 0x58d0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    586e:	a8 e3       	ldi	r26, 0x38	; 56
    5870:	b0 e0       	ldi	r27, 0x00	; 0
    5872:	e8 e3       	ldi	r30, 0x38	; 56
    5874:	f0 e0       	ldi	r31, 0x00	; 0
    5876:	80 81       	ld	r24, Z
    5878:	8f 70       	andi	r24, 0x0F	; 15
    587a:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    587c:	a8 e3       	ldi	r26, 0x38	; 56
    587e:	b0 e0       	ldi	r27, 0x00	; 0
    5880:	e8 e3       	ldi	r30, 0x38	; 56
    5882:	f0 e0       	ldi	r31, 0x00	; 0
    5884:	90 81       	ld	r25, Z
    5886:	8b 81       	ldd	r24, Y+3	; 0x03
    5888:	89 2b       	or	r24, r25
    588a:	8c 93       	st	X, r24
    588c:	21 c0       	rjmp	.+66     	; 0x58d0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    588e:	a5 e3       	ldi	r26, 0x35	; 53
    5890:	b0 e0       	ldi	r27, 0x00	; 0
    5892:	e5 e3       	ldi	r30, 0x35	; 53
    5894:	f0 e0       	ldi	r31, 0x00	; 0
    5896:	80 81       	ld	r24, Z
    5898:	8f 70       	andi	r24, 0x0F	; 15
    589a:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    589c:	a5 e3       	ldi	r26, 0x35	; 53
    589e:	b0 e0       	ldi	r27, 0x00	; 0
    58a0:	e5 e3       	ldi	r30, 0x35	; 53
    58a2:	f0 e0       	ldi	r31, 0x00	; 0
    58a4:	90 81       	ld	r25, Z
    58a6:	8b 81       	ldd	r24, Y+3	; 0x03
    58a8:	89 2b       	or	r24, r25
    58aa:	8c 93       	st	X, r24
    58ac:	11 c0       	rjmp	.+34     	; 0x58d0 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    58ae:	a2 e3       	ldi	r26, 0x32	; 50
    58b0:	b0 e0       	ldi	r27, 0x00	; 0
    58b2:	e2 e3       	ldi	r30, 0x32	; 50
    58b4:	f0 e0       	ldi	r31, 0x00	; 0
    58b6:	80 81       	ld	r24, Z
    58b8:	8f 70       	andi	r24, 0x0F	; 15
    58ba:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    58bc:	a2 e3       	ldi	r26, 0x32	; 50
    58be:	b0 e0       	ldi	r27, 0x00	; 0
    58c0:	e2 e3       	ldi	r30, 0x32	; 50
    58c2:	f0 e0       	ldi	r31, 0x00	; 0
    58c4:	90 81       	ld	r25, Z
    58c6:	8b 81       	ldd	r24, Y+3	; 0x03
    58c8:	89 2b       	or	r24, r25
    58ca:	8c 93       	st	X, r24
    58cc:	01 c0       	rjmp	.+2      	; 0x58d0 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    58ce:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    58d0:	89 81       	ldd	r24, Y+1	; 0x01

}
    58d2:	0f 90       	pop	r0
    58d4:	0f 90       	pop	r0
    58d6:	0f 90       	pop	r0
    58d8:	0f 90       	pop	r0
    58da:	0f 90       	pop	r0
    58dc:	cf 91       	pop	r28
    58de:	df 91       	pop	r29
    58e0:	08 95       	ret

000058e2 <DIO_voidWriteLowNibbles>:
 *Hint1 : Low Nibbles = Least Pins [0:3]
 *Hint2 : This Function also take the first 4 bits from the value (#) => xxxx#### AND put it in low nobbles
 *
 */
DIO_ErrorStatus DIO_voidWriteLowNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    58e2:	df 93       	push	r29
    58e4:	cf 93       	push	r28
    58e6:	00 d0       	rcall	.+0      	; 0x58e8 <DIO_voidWriteLowNibbles+0x6>
    58e8:	00 d0       	rcall	.+0      	; 0x58ea <DIO_voidWriteLowNibbles+0x8>
    58ea:	0f 92       	push	r0
    58ec:	cd b7       	in	r28, 0x3d	; 61
    58ee:	de b7       	in	r29, 0x3e	; 62
    58f0:	8a 83       	std	Y+2, r24	; 0x02
    58f2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    58f4:	81 e0       	ldi	r24, 0x01	; 1
    58f6:	89 83       	std	Y+1, r24	; 0x01


	if ( (Copy_u8PORT <= DIO_PORTD))
    58f8:	8a 81       	ldd	r24, Y+2	; 0x02
    58fa:	84 30       	cpi	r24, 0x04	; 4
    58fc:	08 f0       	brcs	.+2      	; 0x5900 <DIO_voidWriteLowNibbles+0x1e>
    58fe:	62 c0       	rjmp	.+196    	; 0x59c4 <DIO_voidWriteLowNibbles+0xe2>
	{
		Copy_u8value&=0x0f;
    5900:	8b 81       	ldd	r24, Y+3	; 0x03
    5902:	8f 70       	andi	r24, 0x0F	; 15
    5904:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    5906:	8a 81       	ldd	r24, Y+2	; 0x02
    5908:	28 2f       	mov	r18, r24
    590a:	30 e0       	ldi	r19, 0x00	; 0
    590c:	3d 83       	std	Y+5, r19	; 0x05
    590e:	2c 83       	std	Y+4, r18	; 0x04
    5910:	8c 81       	ldd	r24, Y+4	; 0x04
    5912:	9d 81       	ldd	r25, Y+5	; 0x05
    5914:	81 30       	cpi	r24, 0x01	; 1
    5916:	91 05       	cpc	r25, r1
    5918:	29 f1       	breq	.+74     	; 0x5964 <DIO_voidWriteLowNibbles+0x82>
    591a:	2c 81       	ldd	r18, Y+4	; 0x04
    591c:	3d 81       	ldd	r19, Y+5	; 0x05
    591e:	22 30       	cpi	r18, 0x02	; 2
    5920:	31 05       	cpc	r19, r1
    5922:	2c f4       	brge	.+10     	; 0x592e <DIO_voidWriteLowNibbles+0x4c>
    5924:	8c 81       	ldd	r24, Y+4	; 0x04
    5926:	9d 81       	ldd	r25, Y+5	; 0x05
    5928:	00 97       	sbiw	r24, 0x00	; 0
    592a:	61 f0       	breq	.+24     	; 0x5944 <DIO_voidWriteLowNibbles+0x62>
    592c:	4c c0       	rjmp	.+152    	; 0x59c6 <DIO_voidWriteLowNibbles+0xe4>
    592e:	2c 81       	ldd	r18, Y+4	; 0x04
    5930:	3d 81       	ldd	r19, Y+5	; 0x05
    5932:	22 30       	cpi	r18, 0x02	; 2
    5934:	31 05       	cpc	r19, r1
    5936:	31 f1       	breq	.+76     	; 0x5984 <DIO_voidWriteLowNibbles+0xa2>
    5938:	8c 81       	ldd	r24, Y+4	; 0x04
    593a:	9d 81       	ldd	r25, Y+5	; 0x05
    593c:	83 30       	cpi	r24, 0x03	; 3
    593e:	91 05       	cpc	r25, r1
    5940:	89 f1       	breq	.+98     	; 0x59a4 <DIO_voidWriteLowNibbles+0xc2>
    5942:	41 c0       	rjmp	.+130    	; 0x59c6 <DIO_voidWriteLowNibbles+0xe4>
		{
		case DIO_PORTA :
			PORTA_Register &= 0xf0;                 //Set only the high nibble of the port A by the given value
    5944:	ab e3       	ldi	r26, 0x3B	; 59
    5946:	b0 e0       	ldi	r27, 0x00	; 0
    5948:	eb e3       	ldi	r30, 0x3B	; 59
    594a:	f0 e0       	ldi	r31, 0x00	; 0
    594c:	80 81       	ld	r24, Z
    594e:	80 7f       	andi	r24, 0xF0	; 240
    5950:	8c 93       	st	X, r24
			PORTA_Register |= Copy_u8value;
    5952:	ab e3       	ldi	r26, 0x3B	; 59
    5954:	b0 e0       	ldi	r27, 0x00	; 0
    5956:	eb e3       	ldi	r30, 0x3B	; 59
    5958:	f0 e0       	ldi	r31, 0x00	; 0
    595a:	90 81       	ld	r25, Z
    595c:	8b 81       	ldd	r24, Y+3	; 0x03
    595e:	89 2b       	or	r24, r25
    5960:	8c 93       	st	X, r24
    5962:	31 c0       	rjmp	.+98     	; 0x59c6 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTB:
			PORTB_Register &= 0xf0;                 //Set only the high nibble of the port B by the given value
    5964:	a8 e3       	ldi	r26, 0x38	; 56
    5966:	b0 e0       	ldi	r27, 0x00	; 0
    5968:	e8 e3       	ldi	r30, 0x38	; 56
    596a:	f0 e0       	ldi	r31, 0x00	; 0
    596c:	80 81       	ld	r24, Z
    596e:	80 7f       	andi	r24, 0xF0	; 240
    5970:	8c 93       	st	X, r24
			PORTB_Register |= Copy_u8value;
    5972:	a8 e3       	ldi	r26, 0x38	; 56
    5974:	b0 e0       	ldi	r27, 0x00	; 0
    5976:	e8 e3       	ldi	r30, 0x38	; 56
    5978:	f0 e0       	ldi	r31, 0x00	; 0
    597a:	90 81       	ld	r25, Z
    597c:	8b 81       	ldd	r24, Y+3	; 0x03
    597e:	89 2b       	or	r24, r25
    5980:	8c 93       	st	X, r24
    5982:	21 c0       	rjmp	.+66     	; 0x59c6 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTC :
			PORTC_Register &= 0xf0;                 //Set only the high nibble of the port C by the given value
    5984:	a5 e3       	ldi	r26, 0x35	; 53
    5986:	b0 e0       	ldi	r27, 0x00	; 0
    5988:	e5 e3       	ldi	r30, 0x35	; 53
    598a:	f0 e0       	ldi	r31, 0x00	; 0
    598c:	80 81       	ld	r24, Z
    598e:	80 7f       	andi	r24, 0xF0	; 240
    5990:	8c 93       	st	X, r24
			PORTC_Register |= Copy_u8value;
    5992:	a5 e3       	ldi	r26, 0x35	; 53
    5994:	b0 e0       	ldi	r27, 0x00	; 0
    5996:	e5 e3       	ldi	r30, 0x35	; 53
    5998:	f0 e0       	ldi	r31, 0x00	; 0
    599a:	90 81       	ld	r25, Z
    599c:	8b 81       	ldd	r24, Y+3	; 0x03
    599e:	89 2b       	or	r24, r25
    59a0:	8c 93       	st	X, r24
    59a2:	11 c0       	rjmp	.+34     	; 0x59c6 <DIO_voidWriteLowNibbles+0xe4>
			break ;
		case DIO_PORTD:
			PORTD_Register &= 0xf0;                 //Set only the high nibble of the port D by the given value
    59a4:	a2 e3       	ldi	r26, 0x32	; 50
    59a6:	b0 e0       	ldi	r27, 0x00	; 0
    59a8:	e2 e3       	ldi	r30, 0x32	; 50
    59aa:	f0 e0       	ldi	r31, 0x00	; 0
    59ac:	80 81       	ld	r24, Z
    59ae:	80 7f       	andi	r24, 0xF0	; 240
    59b0:	8c 93       	st	X, r24
			PORTD_Register |= Copy_u8value;
    59b2:	a2 e3       	ldi	r26, 0x32	; 50
    59b4:	b0 e0       	ldi	r27, 0x00	; 0
    59b6:	e2 e3       	ldi	r30, 0x32	; 50
    59b8:	f0 e0       	ldi	r31, 0x00	; 0
    59ba:	90 81       	ld	r25, Z
    59bc:	8b 81       	ldd	r24, Y+3	; 0x03
    59be:	89 2b       	or	r24, r25
    59c0:	8c 93       	st	X, r24
    59c2:	01 c0       	rjmp	.+2      	; 0x59c6 <DIO_voidWriteLowNibbles+0xe4>


	}
	else
	{
		LOC_enumState = DIO_NOK;
    59c4:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    59c6:	89 81       	ldd	r24, Y+1	; 0x01

}
    59c8:	0f 90       	pop	r0
    59ca:	0f 90       	pop	r0
    59cc:	0f 90       	pop	r0
    59ce:	0f 90       	pop	r0
    59d0:	0f 90       	pop	r0
    59d2:	cf 91       	pop	r28
    59d4:	df 91       	pop	r29
    59d6:	08 95       	ret

000059d8 <CLCD_voidInit>:
/*
* Breif : This Function Apply initialization sequence for LCD module
* Parameters : nothing
* return : nothing
*/
void CLCD_voidInit        ( void ){
    59d8:	0f 93       	push	r16
    59da:	1f 93       	push	r17
    59dc:	df 93       	push	r29
    59de:	cf 93       	push	r28
    59e0:	cd b7       	in	r28, 0x3d	; 61
    59e2:	de b7       	in	r29, 0x3e	; 62
    59e4:	c6 54       	subi	r28, 0x46	; 70
    59e6:	d0 40       	sbci	r29, 0x00	; 0
    59e8:	0f b6       	in	r0, 0x3f	; 63
    59ea:	f8 94       	cli
    59ec:	de bf       	out	0x3e, r29	; 62
    59ee:	0f be       	out	0x3f, r0	; 63
    59f0:	cd bf       	out	0x3d, r28	; 61
    59f2:	fe 01       	movw	r30, r28
    59f4:	ed 5b       	subi	r30, 0xBD	; 189
    59f6:	ff 4f       	sbci	r31, 0xFF	; 255
    59f8:	80 e0       	ldi	r24, 0x00	; 0
    59fa:	90 e0       	ldi	r25, 0x00	; 0
    59fc:	a8 e4       	ldi	r26, 0x48	; 72
    59fe:	b2 e4       	ldi	r27, 0x42	; 66
    5a00:	80 83       	st	Z, r24
    5a02:	91 83       	std	Z+1, r25	; 0x01
    5a04:	a2 83       	std	Z+2, r26	; 0x02
    5a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5a08:	8e 01       	movw	r16, r28
    5a0a:	01 5c       	subi	r16, 0xC1	; 193
    5a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a0e:	fe 01       	movw	r30, r28
    5a10:	ed 5b       	subi	r30, 0xBD	; 189
    5a12:	ff 4f       	sbci	r31, 0xFF	; 255
    5a14:	60 81       	ld	r22, Z
    5a16:	71 81       	ldd	r23, Z+1	; 0x01
    5a18:	82 81       	ldd	r24, Z+2	; 0x02
    5a1a:	93 81       	ldd	r25, Z+3	; 0x03
    5a1c:	20 e0       	ldi	r18, 0x00	; 0
    5a1e:	30 e0       	ldi	r19, 0x00	; 0
    5a20:	4a ef       	ldi	r20, 0xFA	; 250
    5a22:	54 e4       	ldi	r21, 0x44	; 68
    5a24:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5a28:	dc 01       	movw	r26, r24
    5a2a:	cb 01       	movw	r24, r22
    5a2c:	f8 01       	movw	r30, r16
    5a2e:	80 83       	st	Z, r24
    5a30:	91 83       	std	Z+1, r25	; 0x01
    5a32:	a2 83       	std	Z+2, r26	; 0x02
    5a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5a36:	fe 01       	movw	r30, r28
    5a38:	ff 96       	adiw	r30, 0x3f	; 63
    5a3a:	60 81       	ld	r22, Z
    5a3c:	71 81       	ldd	r23, Z+1	; 0x01
    5a3e:	82 81       	ldd	r24, Z+2	; 0x02
    5a40:	93 81       	ldd	r25, Z+3	; 0x03
    5a42:	20 e0       	ldi	r18, 0x00	; 0
    5a44:	30 e0       	ldi	r19, 0x00	; 0
    5a46:	40 e8       	ldi	r20, 0x80	; 128
    5a48:	5f e3       	ldi	r21, 0x3F	; 63
    5a4a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5a4e:	88 23       	and	r24, r24
    5a50:	2c f4       	brge	.+10     	; 0x5a5c <CLCD_voidInit+0x84>
		__ticks = 1;
    5a52:	81 e0       	ldi	r24, 0x01	; 1
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	9e af       	std	Y+62, r25	; 0x3e
    5a58:	8d af       	std	Y+61, r24	; 0x3d
    5a5a:	46 c0       	rjmp	.+140    	; 0x5ae8 <CLCD_voidInit+0x110>
	else if (__tmp > 65535)
    5a5c:	fe 01       	movw	r30, r28
    5a5e:	ff 96       	adiw	r30, 0x3f	; 63
    5a60:	60 81       	ld	r22, Z
    5a62:	71 81       	ldd	r23, Z+1	; 0x01
    5a64:	82 81       	ldd	r24, Z+2	; 0x02
    5a66:	93 81       	ldd	r25, Z+3	; 0x03
    5a68:	20 e0       	ldi	r18, 0x00	; 0
    5a6a:	3f ef       	ldi	r19, 0xFF	; 255
    5a6c:	4f e7       	ldi	r20, 0x7F	; 127
    5a6e:	57 e4       	ldi	r21, 0x47	; 71
    5a70:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5a74:	18 16       	cp	r1, r24
    5a76:	64 f5       	brge	.+88     	; 0x5ad0 <CLCD_voidInit+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a78:	fe 01       	movw	r30, r28
    5a7a:	ed 5b       	subi	r30, 0xBD	; 189
    5a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7e:	60 81       	ld	r22, Z
    5a80:	71 81       	ldd	r23, Z+1	; 0x01
    5a82:	82 81       	ldd	r24, Z+2	; 0x02
    5a84:	93 81       	ldd	r25, Z+3	; 0x03
    5a86:	20 e0       	ldi	r18, 0x00	; 0
    5a88:	30 e0       	ldi	r19, 0x00	; 0
    5a8a:	40 e2       	ldi	r20, 0x20	; 32
    5a8c:	51 e4       	ldi	r21, 0x41	; 65
    5a8e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5a92:	dc 01       	movw	r26, r24
    5a94:	cb 01       	movw	r24, r22
    5a96:	bc 01       	movw	r22, r24
    5a98:	cd 01       	movw	r24, r26
    5a9a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5a9e:	dc 01       	movw	r26, r24
    5aa0:	cb 01       	movw	r24, r22
    5aa2:	9e af       	std	Y+62, r25	; 0x3e
    5aa4:	8d af       	std	Y+61, r24	; 0x3d
    5aa6:	0f c0       	rjmp	.+30     	; 0x5ac6 <CLCD_voidInit+0xee>
    5aa8:	88 ec       	ldi	r24, 0xC8	; 200
    5aaa:	90 e0       	ldi	r25, 0x00	; 0
    5aac:	9c af       	std	Y+60, r25	; 0x3c
    5aae:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    5ab0:	8b ad       	ldd	r24, Y+59	; 0x3b
    5ab2:	9c ad       	ldd	r25, Y+60	; 0x3c
    5ab4:	01 97       	sbiw	r24, 0x01	; 1
    5ab6:	f1 f7       	brne	.-4      	; 0x5ab4 <CLCD_voidInit+0xdc>
    5ab8:	9c af       	std	Y+60, r25	; 0x3c
    5aba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5abc:	8d ad       	ldd	r24, Y+61	; 0x3d
    5abe:	9e ad       	ldd	r25, Y+62	; 0x3e
    5ac0:	01 97       	sbiw	r24, 0x01	; 1
    5ac2:	9e af       	std	Y+62, r25	; 0x3e
    5ac4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ac6:	8d ad       	ldd	r24, Y+61	; 0x3d
    5ac8:	9e ad       	ldd	r25, Y+62	; 0x3e
    5aca:	00 97       	sbiw	r24, 0x00	; 0
    5acc:	69 f7       	brne	.-38     	; 0x5aa8 <CLCD_voidInit+0xd0>
    5ace:	16 c0       	rjmp	.+44     	; 0x5afc <CLCD_voidInit+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ad0:	fe 01       	movw	r30, r28
    5ad2:	ff 96       	adiw	r30, 0x3f	; 63
    5ad4:	60 81       	ld	r22, Z
    5ad6:	71 81       	ldd	r23, Z+1	; 0x01
    5ad8:	82 81       	ldd	r24, Z+2	; 0x02
    5ada:	93 81       	ldd	r25, Z+3	; 0x03
    5adc:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5ae0:	dc 01       	movw	r26, r24
    5ae2:	cb 01       	movw	r24, r22
    5ae4:	9e af       	std	Y+62, r25	; 0x3e
    5ae6:	8d af       	std	Y+61, r24	; 0x3d
    5ae8:	8d ad       	ldd	r24, Y+61	; 0x3d
    5aea:	9e ad       	ldd	r25, Y+62	; 0x3e
    5aec:	9a af       	std	Y+58, r25	; 0x3a
    5aee:	89 af       	std	Y+57, r24	; 0x39
    5af0:	89 ad       	ldd	r24, Y+57	; 0x39
    5af2:	9a ad       	ldd	r25, Y+58	; 0x3a
    5af4:	01 97       	sbiw	r24, 0x01	; 1
    5af6:	f1 f7       	brne	.-4      	; 0x5af4 <CLCD_voidInit+0x11c>
    5af8:	9a af       	std	Y+58, r25	; 0x3a
    5afa:	89 af       	std	Y+57, r24	; 0x39

	// 1- must wait more than 30 ms before any action (VDD rises to 4.5 v)
	_delay_ms(50);

	// All Pins as OutPut pins
	DIO_enumSetPortDirection ( CLCD_DATA_PORT    , DIO_PORT_OUTPUT           );
    5afc:	81 e0       	ldi	r24, 0x01	; 1
    5afe:	6f ef       	ldi	r22, 0xFF	; 255
    5b00:	0e 94 af 2a 	call	0x555e	; 0x555e <DIO_enumSetPortDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_OUTPUT  );
    5b04:	83 e0       	ldi	r24, 0x03	; 3
    5b06:	60 e0       	ldi	r22, 0x00	; 0
    5b08:	41 e0       	ldi	r20, 0x01	; 1
    5b0a:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_OUTPUT  );
    5b0e:	83 e0       	ldi	r24, 0x03	; 3
    5b10:	61 e0       	ldi	r22, 0x01	; 1
    5b12:	41 e0       	ldi	r20, 0x01	; 1
    5b14:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_OUTPUT  );
    5b18:	83 e0       	ldi	r24, 0x03	; 3
    5b1a:	62 e0       	ldi	r22, 0x02	; 2
    5b1c:	41 e0       	ldi	r20, 0x01	; 1
    5b1e:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <DIO_enumSetPinDirection>

	/* Return cursor to the first position on the first line  */
	CLCD_voidSendCommand(lcd_Home);
    5b22:	82 e0       	ldi	r24, 0x02	; 2
    5b24:	0e 94 09 30 	call	0x6012	; 0x6012 <CLCD_voidSendCommand>
    5b28:	80 e0       	ldi	r24, 0x00	; 0
    5b2a:	90 e0       	ldi	r25, 0x00	; 0
    5b2c:	a0 e8       	ldi	r26, 0x80	; 128
    5b2e:	bf e3       	ldi	r27, 0x3F	; 63
    5b30:	8d ab       	std	Y+53, r24	; 0x35
    5b32:	9e ab       	std	Y+54, r25	; 0x36
    5b34:	af ab       	std	Y+55, r26	; 0x37
    5b36:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b38:	6d a9       	ldd	r22, Y+53	; 0x35
    5b3a:	7e a9       	ldd	r23, Y+54	; 0x36
    5b3c:	8f a9       	ldd	r24, Y+55	; 0x37
    5b3e:	98 ad       	ldd	r25, Y+56	; 0x38
    5b40:	20 e0       	ldi	r18, 0x00	; 0
    5b42:	30 e0       	ldi	r19, 0x00	; 0
    5b44:	4a ef       	ldi	r20, 0xFA	; 250
    5b46:	54 e4       	ldi	r21, 0x44	; 68
    5b48:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5b4c:	dc 01       	movw	r26, r24
    5b4e:	cb 01       	movw	r24, r22
    5b50:	89 ab       	std	Y+49, r24	; 0x31
    5b52:	9a ab       	std	Y+50, r25	; 0x32
    5b54:	ab ab       	std	Y+51, r26	; 0x33
    5b56:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    5b58:	69 a9       	ldd	r22, Y+49	; 0x31
    5b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    5b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    5b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    5b60:	20 e0       	ldi	r18, 0x00	; 0
    5b62:	30 e0       	ldi	r19, 0x00	; 0
    5b64:	40 e8       	ldi	r20, 0x80	; 128
    5b66:	5f e3       	ldi	r21, 0x3F	; 63
    5b68:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5b6c:	88 23       	and	r24, r24
    5b6e:	2c f4       	brge	.+10     	; 0x5b7a <CLCD_voidInit+0x1a2>
		__ticks = 1;
    5b70:	81 e0       	ldi	r24, 0x01	; 1
    5b72:	90 e0       	ldi	r25, 0x00	; 0
    5b74:	98 ab       	std	Y+48, r25	; 0x30
    5b76:	8f a7       	std	Y+47, r24	; 0x2f
    5b78:	3f c0       	rjmp	.+126    	; 0x5bf8 <CLCD_voidInit+0x220>
	else if (__tmp > 65535)
    5b7a:	69 a9       	ldd	r22, Y+49	; 0x31
    5b7c:	7a a9       	ldd	r23, Y+50	; 0x32
    5b7e:	8b a9       	ldd	r24, Y+51	; 0x33
    5b80:	9c a9       	ldd	r25, Y+52	; 0x34
    5b82:	20 e0       	ldi	r18, 0x00	; 0
    5b84:	3f ef       	ldi	r19, 0xFF	; 255
    5b86:	4f e7       	ldi	r20, 0x7F	; 127
    5b88:	57 e4       	ldi	r21, 0x47	; 71
    5b8a:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5b8e:	18 16       	cp	r1, r24
    5b90:	4c f5       	brge	.+82     	; 0x5be4 <CLCD_voidInit+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b92:	6d a9       	ldd	r22, Y+53	; 0x35
    5b94:	7e a9       	ldd	r23, Y+54	; 0x36
    5b96:	8f a9       	ldd	r24, Y+55	; 0x37
    5b98:	98 ad       	ldd	r25, Y+56	; 0x38
    5b9a:	20 e0       	ldi	r18, 0x00	; 0
    5b9c:	30 e0       	ldi	r19, 0x00	; 0
    5b9e:	40 e2       	ldi	r20, 0x20	; 32
    5ba0:	51 e4       	ldi	r21, 0x41	; 65
    5ba2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5ba6:	dc 01       	movw	r26, r24
    5ba8:	cb 01       	movw	r24, r22
    5baa:	bc 01       	movw	r22, r24
    5bac:	cd 01       	movw	r24, r26
    5bae:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5bb2:	dc 01       	movw	r26, r24
    5bb4:	cb 01       	movw	r24, r22
    5bb6:	98 ab       	std	Y+48, r25	; 0x30
    5bb8:	8f a7       	std	Y+47, r24	; 0x2f
    5bba:	0f c0       	rjmp	.+30     	; 0x5bda <CLCD_voidInit+0x202>
    5bbc:	88 ec       	ldi	r24, 0xC8	; 200
    5bbe:	90 e0       	ldi	r25, 0x00	; 0
    5bc0:	9e a7       	std	Y+46, r25	; 0x2e
    5bc2:	8d a7       	std	Y+45, r24	; 0x2d
    5bc4:	8d a5       	ldd	r24, Y+45	; 0x2d
    5bc6:	9e a5       	ldd	r25, Y+46	; 0x2e
    5bc8:	01 97       	sbiw	r24, 0x01	; 1
    5bca:	f1 f7       	brne	.-4      	; 0x5bc8 <CLCD_voidInit+0x1f0>
    5bcc:	9e a7       	std	Y+46, r25	; 0x2e
    5bce:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5bd0:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bd2:	98 a9       	ldd	r25, Y+48	; 0x30
    5bd4:	01 97       	sbiw	r24, 0x01	; 1
    5bd6:	98 ab       	std	Y+48, r25	; 0x30
    5bd8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bda:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bdc:	98 a9       	ldd	r25, Y+48	; 0x30
    5bde:	00 97       	sbiw	r24, 0x00	; 0
    5be0:	69 f7       	brne	.-38     	; 0x5bbc <CLCD_voidInit+0x1e4>
    5be2:	14 c0       	rjmp	.+40     	; 0x5c0c <CLCD_voidInit+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5be4:	69 a9       	ldd	r22, Y+49	; 0x31
    5be6:	7a a9       	ldd	r23, Y+50	; 0x32
    5be8:	8b a9       	ldd	r24, Y+51	; 0x33
    5bea:	9c a9       	ldd	r25, Y+52	; 0x34
    5bec:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5bf0:	dc 01       	movw	r26, r24
    5bf2:	cb 01       	movw	r24, r22
    5bf4:	98 ab       	std	Y+48, r25	; 0x30
    5bf6:	8f a7       	std	Y+47, r24	; 0x2f
    5bf8:	8f a5       	ldd	r24, Y+47	; 0x2f
    5bfa:	98 a9       	ldd	r25, Y+48	; 0x30
    5bfc:	9c a7       	std	Y+44, r25	; 0x2c
    5bfe:	8b a7       	std	Y+43, r24	; 0x2b
    5c00:	8b a5       	ldd	r24, Y+43	; 0x2b
    5c02:	9c a5       	ldd	r25, Y+44	; 0x2c
    5c04:	01 97       	sbiw	r24, 0x01	; 1
    5c06:	f1 f7       	brne	.-4      	; 0x5c04 <CLCD_voidInit+0x22c>
    5c08:	9c a7       	std	Y+44, r25	; 0x2c
    5c0a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	/*FUNCTION SET Command : 2 lines , 5*8 font size */
	CLCD_voidSendCommand( EIGHT_BITS ); // 8 Bit Mode ==> 0x38
    5c0c:	88 e3       	ldi	r24, 0x38	; 56
    5c0e:	0e 94 09 30 	call	0x6012	; 0x6012 <CLCD_voidSendCommand>
    5c12:	80 e0       	ldi	r24, 0x00	; 0
    5c14:	90 e0       	ldi	r25, 0x00	; 0
    5c16:	a0 e8       	ldi	r26, 0x80	; 128
    5c18:	bf e3       	ldi	r27, 0x3F	; 63
    5c1a:	8f a3       	std	Y+39, r24	; 0x27
    5c1c:	98 a7       	std	Y+40, r25	; 0x28
    5c1e:	a9 a7       	std	Y+41, r26	; 0x29
    5c20:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c22:	6f a1       	ldd	r22, Y+39	; 0x27
    5c24:	78 a5       	ldd	r23, Y+40	; 0x28
    5c26:	89 a5       	ldd	r24, Y+41	; 0x29
    5c28:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c2a:	20 e0       	ldi	r18, 0x00	; 0
    5c2c:	30 e0       	ldi	r19, 0x00	; 0
    5c2e:	4a ef       	ldi	r20, 0xFA	; 250
    5c30:	54 e4       	ldi	r21, 0x44	; 68
    5c32:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5c36:	dc 01       	movw	r26, r24
    5c38:	cb 01       	movw	r24, r22
    5c3a:	8b a3       	std	Y+35, r24	; 0x23
    5c3c:	9c a3       	std	Y+36, r25	; 0x24
    5c3e:	ad a3       	std	Y+37, r26	; 0x25
    5c40:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    5c42:	6b a1       	ldd	r22, Y+35	; 0x23
    5c44:	7c a1       	ldd	r23, Y+36	; 0x24
    5c46:	8d a1       	ldd	r24, Y+37	; 0x25
    5c48:	9e a1       	ldd	r25, Y+38	; 0x26
    5c4a:	20 e0       	ldi	r18, 0x00	; 0
    5c4c:	30 e0       	ldi	r19, 0x00	; 0
    5c4e:	40 e8       	ldi	r20, 0x80	; 128
    5c50:	5f e3       	ldi	r21, 0x3F	; 63
    5c52:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5c56:	88 23       	and	r24, r24
    5c58:	2c f4       	brge	.+10     	; 0x5c64 <CLCD_voidInit+0x28c>
		__ticks = 1;
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	90 e0       	ldi	r25, 0x00	; 0
    5c5e:	9a a3       	std	Y+34, r25	; 0x22
    5c60:	89 a3       	std	Y+33, r24	; 0x21
    5c62:	3f c0       	rjmp	.+126    	; 0x5ce2 <CLCD_voidInit+0x30a>
	else if (__tmp > 65535)
    5c64:	6b a1       	ldd	r22, Y+35	; 0x23
    5c66:	7c a1       	ldd	r23, Y+36	; 0x24
    5c68:	8d a1       	ldd	r24, Y+37	; 0x25
    5c6a:	9e a1       	ldd	r25, Y+38	; 0x26
    5c6c:	20 e0       	ldi	r18, 0x00	; 0
    5c6e:	3f ef       	ldi	r19, 0xFF	; 255
    5c70:	4f e7       	ldi	r20, 0x7F	; 127
    5c72:	57 e4       	ldi	r21, 0x47	; 71
    5c74:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5c78:	18 16       	cp	r1, r24
    5c7a:	4c f5       	brge	.+82     	; 0x5cce <CLCD_voidInit+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5c7c:	6f a1       	ldd	r22, Y+39	; 0x27
    5c7e:	78 a5       	ldd	r23, Y+40	; 0x28
    5c80:	89 a5       	ldd	r24, Y+41	; 0x29
    5c82:	9a a5       	ldd	r25, Y+42	; 0x2a
    5c84:	20 e0       	ldi	r18, 0x00	; 0
    5c86:	30 e0       	ldi	r19, 0x00	; 0
    5c88:	40 e2       	ldi	r20, 0x20	; 32
    5c8a:	51 e4       	ldi	r21, 0x41	; 65
    5c8c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5c90:	dc 01       	movw	r26, r24
    5c92:	cb 01       	movw	r24, r22
    5c94:	bc 01       	movw	r22, r24
    5c96:	cd 01       	movw	r24, r26
    5c98:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5c9c:	dc 01       	movw	r26, r24
    5c9e:	cb 01       	movw	r24, r22
    5ca0:	9a a3       	std	Y+34, r25	; 0x22
    5ca2:	89 a3       	std	Y+33, r24	; 0x21
    5ca4:	0f c0       	rjmp	.+30     	; 0x5cc4 <CLCD_voidInit+0x2ec>
    5ca6:	88 ec       	ldi	r24, 0xC8	; 200
    5ca8:	90 e0       	ldi	r25, 0x00	; 0
    5caa:	98 a3       	std	Y+32, r25	; 0x20
    5cac:	8f 8f       	std	Y+31, r24	; 0x1f
    5cae:	8f 8d       	ldd	r24, Y+31	; 0x1f
    5cb0:	98 a1       	ldd	r25, Y+32	; 0x20
    5cb2:	01 97       	sbiw	r24, 0x01	; 1
    5cb4:	f1 f7       	brne	.-4      	; 0x5cb2 <CLCD_voidInit+0x2da>
    5cb6:	98 a3       	std	Y+32, r25	; 0x20
    5cb8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5cba:	89 a1       	ldd	r24, Y+33	; 0x21
    5cbc:	9a a1       	ldd	r25, Y+34	; 0x22
    5cbe:	01 97       	sbiw	r24, 0x01	; 1
    5cc0:	9a a3       	std	Y+34, r25	; 0x22
    5cc2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5cc4:	89 a1       	ldd	r24, Y+33	; 0x21
    5cc6:	9a a1       	ldd	r25, Y+34	; 0x22
    5cc8:	00 97       	sbiw	r24, 0x00	; 0
    5cca:	69 f7       	brne	.-38     	; 0x5ca6 <CLCD_voidInit+0x2ce>
    5ccc:	14 c0       	rjmp	.+40     	; 0x5cf6 <CLCD_voidInit+0x31e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5cce:	6b a1       	ldd	r22, Y+35	; 0x23
    5cd0:	7c a1       	ldd	r23, Y+36	; 0x24
    5cd2:	8d a1       	ldd	r24, Y+37	; 0x25
    5cd4:	9e a1       	ldd	r25, Y+38	; 0x26
    5cd6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5cda:	dc 01       	movw	r26, r24
    5cdc:	cb 01       	movw	r24, r22
    5cde:	9a a3       	std	Y+34, r25	; 0x22
    5ce0:	89 a3       	std	Y+33, r24	; 0x21
    5ce2:	89 a1       	ldd	r24, Y+33	; 0x21
    5ce4:	9a a1       	ldd	r25, Y+34	; 0x22
    5ce6:	9e 8f       	std	Y+30, r25	; 0x1e
    5ce8:	8d 8f       	std	Y+29, r24	; 0x1d
    5cea:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5cec:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5cee:	01 97       	sbiw	r24, 0x01	; 1
    5cf0:	f1 f7       	brne	.-4      	; 0x5cee <CLCD_voidInit+0x316>
    5cf2:	9e 8f       	std	Y+30, r25	; 0x1e
    5cf4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); // wait more than 39 Ms

	/* DISPLAY & Cursor (ON / OFF) Control */
	CLCD_voidSendCommand( lcd_DisplayOn_CursorOff );
    5cf6:	8c e0       	ldi	r24, 0x0C	; 12
    5cf8:	0e 94 09 30 	call	0x6012	; 0x6012 <CLCD_voidSendCommand>
    5cfc:	80 e0       	ldi	r24, 0x00	; 0
    5cfe:	90 e0       	ldi	r25, 0x00	; 0
    5d00:	a0 e8       	ldi	r26, 0x80	; 128
    5d02:	bf e3       	ldi	r27, 0x3F	; 63
    5d04:	89 8f       	std	Y+25, r24	; 0x19
    5d06:	9a 8f       	std	Y+26, r25	; 0x1a
    5d08:	ab 8f       	std	Y+27, r26	; 0x1b
    5d0a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5d0c:	69 8d       	ldd	r22, Y+25	; 0x19
    5d0e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d10:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d12:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d14:	20 e0       	ldi	r18, 0x00	; 0
    5d16:	30 e0       	ldi	r19, 0x00	; 0
    5d18:	4a ef       	ldi	r20, 0xFA	; 250
    5d1a:	54 e4       	ldi	r21, 0x44	; 68
    5d1c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5d20:	dc 01       	movw	r26, r24
    5d22:	cb 01       	movw	r24, r22
    5d24:	8d 8b       	std	Y+21, r24	; 0x15
    5d26:	9e 8b       	std	Y+22, r25	; 0x16
    5d28:	af 8b       	std	Y+23, r26	; 0x17
    5d2a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    5d2c:	6d 89       	ldd	r22, Y+21	; 0x15
    5d2e:	7e 89       	ldd	r23, Y+22	; 0x16
    5d30:	8f 89       	ldd	r24, Y+23	; 0x17
    5d32:	98 8d       	ldd	r25, Y+24	; 0x18
    5d34:	20 e0       	ldi	r18, 0x00	; 0
    5d36:	30 e0       	ldi	r19, 0x00	; 0
    5d38:	40 e8       	ldi	r20, 0x80	; 128
    5d3a:	5f e3       	ldi	r21, 0x3F	; 63
    5d3c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5d40:	88 23       	and	r24, r24
    5d42:	2c f4       	brge	.+10     	; 0x5d4e <CLCD_voidInit+0x376>
		__ticks = 1;
    5d44:	81 e0       	ldi	r24, 0x01	; 1
    5d46:	90 e0       	ldi	r25, 0x00	; 0
    5d48:	9c 8b       	std	Y+20, r25	; 0x14
    5d4a:	8b 8b       	std	Y+19, r24	; 0x13
    5d4c:	3f c0       	rjmp	.+126    	; 0x5dcc <CLCD_voidInit+0x3f4>
	else if (__tmp > 65535)
    5d4e:	6d 89       	ldd	r22, Y+21	; 0x15
    5d50:	7e 89       	ldd	r23, Y+22	; 0x16
    5d52:	8f 89       	ldd	r24, Y+23	; 0x17
    5d54:	98 8d       	ldd	r25, Y+24	; 0x18
    5d56:	20 e0       	ldi	r18, 0x00	; 0
    5d58:	3f ef       	ldi	r19, 0xFF	; 255
    5d5a:	4f e7       	ldi	r20, 0x7F	; 127
    5d5c:	57 e4       	ldi	r21, 0x47	; 71
    5d5e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5d62:	18 16       	cp	r1, r24
    5d64:	4c f5       	brge	.+82     	; 0x5db8 <CLCD_voidInit+0x3e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5d66:	69 8d       	ldd	r22, Y+25	; 0x19
    5d68:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5d6a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5d6c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5d6e:	20 e0       	ldi	r18, 0x00	; 0
    5d70:	30 e0       	ldi	r19, 0x00	; 0
    5d72:	40 e2       	ldi	r20, 0x20	; 32
    5d74:	51 e4       	ldi	r21, 0x41	; 65
    5d76:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5d7a:	dc 01       	movw	r26, r24
    5d7c:	cb 01       	movw	r24, r22
    5d7e:	bc 01       	movw	r22, r24
    5d80:	cd 01       	movw	r24, r26
    5d82:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5d86:	dc 01       	movw	r26, r24
    5d88:	cb 01       	movw	r24, r22
    5d8a:	9c 8b       	std	Y+20, r25	; 0x14
    5d8c:	8b 8b       	std	Y+19, r24	; 0x13
    5d8e:	0f c0       	rjmp	.+30     	; 0x5dae <CLCD_voidInit+0x3d6>
    5d90:	88 ec       	ldi	r24, 0xC8	; 200
    5d92:	90 e0       	ldi	r25, 0x00	; 0
    5d94:	9a 8b       	std	Y+18, r25	; 0x12
    5d96:	89 8b       	std	Y+17, r24	; 0x11
    5d98:	89 89       	ldd	r24, Y+17	; 0x11
    5d9a:	9a 89       	ldd	r25, Y+18	; 0x12
    5d9c:	01 97       	sbiw	r24, 0x01	; 1
    5d9e:	f1 f7       	brne	.-4      	; 0x5d9c <CLCD_voidInit+0x3c4>
    5da0:	9a 8b       	std	Y+18, r25	; 0x12
    5da2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5da4:	8b 89       	ldd	r24, Y+19	; 0x13
    5da6:	9c 89       	ldd	r25, Y+20	; 0x14
    5da8:	01 97       	sbiw	r24, 0x01	; 1
    5daa:	9c 8b       	std	Y+20, r25	; 0x14
    5dac:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5dae:	8b 89       	ldd	r24, Y+19	; 0x13
    5db0:	9c 89       	ldd	r25, Y+20	; 0x14
    5db2:	00 97       	sbiw	r24, 0x00	; 0
    5db4:	69 f7       	brne	.-38     	; 0x5d90 <CLCD_voidInit+0x3b8>
    5db6:	14 c0       	rjmp	.+40     	; 0x5de0 <CLCD_voidInit+0x408>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5db8:	6d 89       	ldd	r22, Y+21	; 0x15
    5dba:	7e 89       	ldd	r23, Y+22	; 0x16
    5dbc:	8f 89       	ldd	r24, Y+23	; 0x17
    5dbe:	98 8d       	ldd	r25, Y+24	; 0x18
    5dc0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5dc4:	dc 01       	movw	r26, r24
    5dc6:	cb 01       	movw	r24, r22
    5dc8:	9c 8b       	std	Y+20, r25	; 0x14
    5dca:	8b 8b       	std	Y+19, r24	; 0x13
    5dcc:	8b 89       	ldd	r24, Y+19	; 0x13
    5dce:	9c 89       	ldd	r25, Y+20	; 0x14
    5dd0:	98 8b       	std	Y+16, r25	; 0x10
    5dd2:	8f 87       	std	Y+15, r24	; 0x0f
    5dd4:	8f 85       	ldd	r24, Y+15	; 0x0f
    5dd6:	98 89       	ldd	r25, Y+16	; 0x10
    5dd8:	01 97       	sbiw	r24, 0x01	; 1
    5dda:	f1 f7       	brne	.-4      	; 0x5dd8 <CLCD_voidInit+0x400>
    5ddc:	98 8b       	std	Y+16, r25	; 0x10
    5dde:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* DISPLAY CLEAR */
	CLCD_voidClearScreen();
    5de0:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <CLCD_voidClearScreen>

	/* ENTRY MODE  SET*/
	CLCD_voidSendCommand( lcd_EntryMode );
    5de4:	86 e0       	ldi	r24, 0x06	; 6
    5de6:	0e 94 09 30 	call	0x6012	; 0x6012 <CLCD_voidSendCommand>
    5dea:	80 e0       	ldi	r24, 0x00	; 0
    5dec:	90 e0       	ldi	r25, 0x00	; 0
    5dee:	a0 e8       	ldi	r26, 0x80	; 128
    5df0:	bf e3       	ldi	r27, 0x3F	; 63
    5df2:	8b 87       	std	Y+11, r24	; 0x0b
    5df4:	9c 87       	std	Y+12, r25	; 0x0c
    5df6:	ad 87       	std	Y+13, r26	; 0x0d
    5df8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dfe:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e00:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e02:	20 e0       	ldi	r18, 0x00	; 0
    5e04:	30 e0       	ldi	r19, 0x00	; 0
    5e06:	4a ef       	ldi	r20, 0xFA	; 250
    5e08:	54 e4       	ldi	r21, 0x44	; 68
    5e0a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5e0e:	dc 01       	movw	r26, r24
    5e10:	cb 01       	movw	r24, r22
    5e12:	8f 83       	std	Y+7, r24	; 0x07
    5e14:	98 87       	std	Y+8, r25	; 0x08
    5e16:	a9 87       	std	Y+9, r26	; 0x09
    5e18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5e1a:	6f 81       	ldd	r22, Y+7	; 0x07
    5e1c:	78 85       	ldd	r23, Y+8	; 0x08
    5e1e:	89 85       	ldd	r24, Y+9	; 0x09
    5e20:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e22:	20 e0       	ldi	r18, 0x00	; 0
    5e24:	30 e0       	ldi	r19, 0x00	; 0
    5e26:	40 e8       	ldi	r20, 0x80	; 128
    5e28:	5f e3       	ldi	r21, 0x3F	; 63
    5e2a:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5e2e:	88 23       	and	r24, r24
    5e30:	2c f4       	brge	.+10     	; 0x5e3c <CLCD_voidInit+0x464>
		__ticks = 1;
    5e32:	81 e0       	ldi	r24, 0x01	; 1
    5e34:	90 e0       	ldi	r25, 0x00	; 0
    5e36:	9e 83       	std	Y+6, r25	; 0x06
    5e38:	8d 83       	std	Y+5, r24	; 0x05
    5e3a:	3f c0       	rjmp	.+126    	; 0x5eba <CLCD_voidInit+0x4e2>
	else if (__tmp > 65535)
    5e3c:	6f 81       	ldd	r22, Y+7	; 0x07
    5e3e:	78 85       	ldd	r23, Y+8	; 0x08
    5e40:	89 85       	ldd	r24, Y+9	; 0x09
    5e42:	9a 85       	ldd	r25, Y+10	; 0x0a
    5e44:	20 e0       	ldi	r18, 0x00	; 0
    5e46:	3f ef       	ldi	r19, 0xFF	; 255
    5e48:	4f e7       	ldi	r20, 0x7F	; 127
    5e4a:	57 e4       	ldi	r21, 0x47	; 71
    5e4c:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5e50:	18 16       	cp	r1, r24
    5e52:	4c f5       	brge	.+82     	; 0x5ea6 <CLCD_voidInit+0x4ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e54:	6b 85       	ldd	r22, Y+11	; 0x0b
    5e56:	7c 85       	ldd	r23, Y+12	; 0x0c
    5e58:	8d 85       	ldd	r24, Y+13	; 0x0d
    5e5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    5e5c:	20 e0       	ldi	r18, 0x00	; 0
    5e5e:	30 e0       	ldi	r19, 0x00	; 0
    5e60:	40 e2       	ldi	r20, 0x20	; 32
    5e62:	51 e4       	ldi	r21, 0x41	; 65
    5e64:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5e68:	dc 01       	movw	r26, r24
    5e6a:	cb 01       	movw	r24, r22
    5e6c:	bc 01       	movw	r22, r24
    5e6e:	cd 01       	movw	r24, r26
    5e70:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5e74:	dc 01       	movw	r26, r24
    5e76:	cb 01       	movw	r24, r22
    5e78:	9e 83       	std	Y+6, r25	; 0x06
    5e7a:	8d 83       	std	Y+5, r24	; 0x05
    5e7c:	0f c0       	rjmp	.+30     	; 0x5e9c <CLCD_voidInit+0x4c4>
    5e7e:	88 ec       	ldi	r24, 0xC8	; 200
    5e80:	90 e0       	ldi	r25, 0x00	; 0
    5e82:	9c 83       	std	Y+4, r25	; 0x04
    5e84:	8b 83       	std	Y+3, r24	; 0x03
    5e86:	8b 81       	ldd	r24, Y+3	; 0x03
    5e88:	9c 81       	ldd	r25, Y+4	; 0x04
    5e8a:	01 97       	sbiw	r24, 0x01	; 1
    5e8c:	f1 f7       	brne	.-4      	; 0x5e8a <CLCD_voidInit+0x4b2>
    5e8e:	9c 83       	std	Y+4, r25	; 0x04
    5e90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5e92:	8d 81       	ldd	r24, Y+5	; 0x05
    5e94:	9e 81       	ldd	r25, Y+6	; 0x06
    5e96:	01 97       	sbiw	r24, 0x01	; 1
    5e98:	9e 83       	std	Y+6, r25	; 0x06
    5e9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    5e9e:	9e 81       	ldd	r25, Y+6	; 0x06
    5ea0:	00 97       	sbiw	r24, 0x00	; 0
    5ea2:	69 f7       	brne	.-38     	; 0x5e7e <CLCD_voidInit+0x4a6>
    5ea4:	14 c0       	rjmp	.+40     	; 0x5ece <CLCD_voidInit+0x4f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5ea6:	6f 81       	ldd	r22, Y+7	; 0x07
    5ea8:	78 85       	ldd	r23, Y+8	; 0x08
    5eaa:	89 85       	ldd	r24, Y+9	; 0x09
    5eac:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eae:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5eb2:	dc 01       	movw	r26, r24
    5eb4:	cb 01       	movw	r24, r22
    5eb6:	9e 83       	std	Y+6, r25	; 0x06
    5eb8:	8d 83       	std	Y+5, r24	; 0x05
    5eba:	8d 81       	ldd	r24, Y+5	; 0x05
    5ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    5ebe:	9a 83       	std	Y+2, r25	; 0x02
    5ec0:	89 83       	std	Y+1, r24	; 0x01
    5ec2:	89 81       	ldd	r24, Y+1	; 0x01
    5ec4:	9a 81       	ldd	r25, Y+2	; 0x02
    5ec6:	01 97       	sbiw	r24, 0x01	; 1
    5ec8:	f1 f7       	brne	.-4      	; 0x5ec6 <CLCD_voidInit+0x4ee>
    5eca:	9a 83       	std	Y+2, r25	; 0x02
    5ecc:	89 83       	std	Y+1, r24	; 0x01
	#endif




}
    5ece:	ca 5b       	subi	r28, 0xBA	; 186
    5ed0:	df 4f       	sbci	r29, 0xFF	; 255
    5ed2:	0f b6       	in	r0, 0x3f	; 63
    5ed4:	f8 94       	cli
    5ed6:	de bf       	out	0x3e, r29	; 62
    5ed8:	0f be       	out	0x3f, r0	; 63
    5eda:	cd bf       	out	0x3d, r28	; 61
    5edc:	cf 91       	pop	r28
    5ede:	df 91       	pop	r29
    5ee0:	1f 91       	pop	r17
    5ee2:	0f 91       	pop	r16
    5ee4:	08 95       	ret

00005ee6 <CLCD_voidSendData>:
* Breif : This Function send data to the port which is defined in config.h
* Parameters :
            => Copy_u8Data --> Data that you want to display (for every pixel )
* return : nothing
*/
void CLCD_voidSendData    ( u8 Copy_u8Data ){
    5ee6:	df 93       	push	r29
    5ee8:	cf 93       	push	r28
    5eea:	cd b7       	in	r28, 0x3d	; 61
    5eec:	de b7       	in	r29, 0x3e	; 62
    5eee:	2f 97       	sbiw	r28, 0x0f	; 15
    5ef0:	0f b6       	in	r0, 0x3f	; 63
    5ef2:	f8 94       	cli
    5ef4:	de bf       	out	0x3e, r29	; 62
    5ef6:	0f be       	out	0x3f, r0	; 63
    5ef8:	cd bf       	out	0x3d, r28	; 61
    5efa:	8f 87       	std	Y+15, r24	; 0x0f

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      8 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#if   CLCD_MODE == 8

	DIO_enumSetPortValue ( CLCD_DATA_PORT    , Copy_u8Data        );
    5efc:	81 e0       	ldi	r24, 0x01	; 1
    5efe:	6f 85       	ldd	r22, Y+15	; 0x0f
    5f00:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <DIO_enumSetPortValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_HIGH );
    5f04:	83 e0       	ldi	r24, 0x03	; 3
    5f06:	60 e0       	ldi	r22, 0x00	; 0
    5f08:	41 e0       	ldi	r20, 0x01	; 1
    5f0a:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <DIO_enumSetPinValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RW , DIO_PIN_LOW  );
    5f0e:	83 e0       	ldi	r24, 0x03	; 3
    5f10:	61 e0       	ldi	r22, 0x01	; 1
    5f12:	40 e0       	ldi	r20, 0x00	; 0
    5f14:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <DIO_enumSetPinValue>
	CLCD_voidSendFallingEdge();
    5f18:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <CLCD_voidSendFallingEdge>
    5f1c:	80 e0       	ldi	r24, 0x00	; 0
    5f1e:	90 e0       	ldi	r25, 0x00	; 0
    5f20:	a0 e8       	ldi	r26, 0x80	; 128
    5f22:	bf e3       	ldi	r27, 0x3F	; 63
    5f24:	8b 87       	std	Y+11, r24	; 0x0b
    5f26:	9c 87       	std	Y+12, r25	; 0x0c
    5f28:	ad 87       	std	Y+13, r26	; 0x0d
    5f2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f30:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f32:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f34:	20 e0       	ldi	r18, 0x00	; 0
    5f36:	30 e0       	ldi	r19, 0x00	; 0
    5f38:	4a ef       	ldi	r20, 0xFA	; 250
    5f3a:	54 e4       	ldi	r21, 0x44	; 68
    5f3c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5f40:	dc 01       	movw	r26, r24
    5f42:	cb 01       	movw	r24, r22
    5f44:	8f 83       	std	Y+7, r24	; 0x07
    5f46:	98 87       	std	Y+8, r25	; 0x08
    5f48:	a9 87       	std	Y+9, r26	; 0x09
    5f4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5f4c:	6f 81       	ldd	r22, Y+7	; 0x07
    5f4e:	78 85       	ldd	r23, Y+8	; 0x08
    5f50:	89 85       	ldd	r24, Y+9	; 0x09
    5f52:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f54:	20 e0       	ldi	r18, 0x00	; 0
    5f56:	30 e0       	ldi	r19, 0x00	; 0
    5f58:	40 e8       	ldi	r20, 0x80	; 128
    5f5a:	5f e3       	ldi	r21, 0x3F	; 63
    5f5c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    5f60:	88 23       	and	r24, r24
    5f62:	2c f4       	brge	.+10     	; 0x5f6e <CLCD_voidSendData+0x88>
		__ticks = 1;
    5f64:	81 e0       	ldi	r24, 0x01	; 1
    5f66:	90 e0       	ldi	r25, 0x00	; 0
    5f68:	9e 83       	std	Y+6, r25	; 0x06
    5f6a:	8d 83       	std	Y+5, r24	; 0x05
    5f6c:	3f c0       	rjmp	.+126    	; 0x5fec <CLCD_voidSendData+0x106>
	else if (__tmp > 65535)
    5f6e:	6f 81       	ldd	r22, Y+7	; 0x07
    5f70:	78 85       	ldd	r23, Y+8	; 0x08
    5f72:	89 85       	ldd	r24, Y+9	; 0x09
    5f74:	9a 85       	ldd	r25, Y+10	; 0x0a
    5f76:	20 e0       	ldi	r18, 0x00	; 0
    5f78:	3f ef       	ldi	r19, 0xFF	; 255
    5f7a:	4f e7       	ldi	r20, 0x7F	; 127
    5f7c:	57 e4       	ldi	r21, 0x47	; 71
    5f7e:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    5f82:	18 16       	cp	r1, r24
    5f84:	4c f5       	brge	.+82     	; 0x5fd8 <CLCD_voidSendData+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5f86:	6b 85       	ldd	r22, Y+11	; 0x0b
    5f88:	7c 85       	ldd	r23, Y+12	; 0x0c
    5f8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    5f8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    5f8e:	20 e0       	ldi	r18, 0x00	; 0
    5f90:	30 e0       	ldi	r19, 0x00	; 0
    5f92:	40 e2       	ldi	r20, 0x20	; 32
    5f94:	51 e4       	ldi	r21, 0x41	; 65
    5f96:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    5f9a:	dc 01       	movw	r26, r24
    5f9c:	cb 01       	movw	r24, r22
    5f9e:	bc 01       	movw	r22, r24
    5fa0:	cd 01       	movw	r24, r26
    5fa2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5fa6:	dc 01       	movw	r26, r24
    5fa8:	cb 01       	movw	r24, r22
    5faa:	9e 83       	std	Y+6, r25	; 0x06
    5fac:	8d 83       	std	Y+5, r24	; 0x05
    5fae:	0f c0       	rjmp	.+30     	; 0x5fce <CLCD_voidSendData+0xe8>
    5fb0:	88 ec       	ldi	r24, 0xC8	; 200
    5fb2:	90 e0       	ldi	r25, 0x00	; 0
    5fb4:	9c 83       	std	Y+4, r25	; 0x04
    5fb6:	8b 83       	std	Y+3, r24	; 0x03
    5fb8:	8b 81       	ldd	r24, Y+3	; 0x03
    5fba:	9c 81       	ldd	r25, Y+4	; 0x04
    5fbc:	01 97       	sbiw	r24, 0x01	; 1
    5fbe:	f1 f7       	brne	.-4      	; 0x5fbc <CLCD_voidSendData+0xd6>
    5fc0:	9c 83       	std	Y+4, r25	; 0x04
    5fc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5fc4:	8d 81       	ldd	r24, Y+5	; 0x05
    5fc6:	9e 81       	ldd	r25, Y+6	; 0x06
    5fc8:	01 97       	sbiw	r24, 0x01	; 1
    5fca:	9e 83       	std	Y+6, r25	; 0x06
    5fcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5fce:	8d 81       	ldd	r24, Y+5	; 0x05
    5fd0:	9e 81       	ldd	r25, Y+6	; 0x06
    5fd2:	00 97       	sbiw	r24, 0x00	; 0
    5fd4:	69 f7       	brne	.-38     	; 0x5fb0 <CLCD_voidSendData+0xca>
    5fd6:	14 c0       	rjmp	.+40     	; 0x6000 <CLCD_voidSendData+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5fd8:	6f 81       	ldd	r22, Y+7	; 0x07
    5fda:	78 85       	ldd	r23, Y+8	; 0x08
    5fdc:	89 85       	ldd	r24, Y+9	; 0x09
    5fde:	9a 85       	ldd	r25, Y+10	; 0x0a
    5fe0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    5fe4:	dc 01       	movw	r26, r24
    5fe6:	cb 01       	movw	r24, r22
    5fe8:	9e 83       	std	Y+6, r25	; 0x06
    5fea:	8d 83       	std	Y+5, r24	; 0x05
    5fec:	8d 81       	ldd	r24, Y+5	; 0x05
    5fee:	9e 81       	ldd	r25, Y+6	; 0x06
    5ff0:	9a 83       	std	Y+2, r25	; 0x02
    5ff2:	89 83       	std	Y+1, r24	; 0x01
    5ff4:	89 81       	ldd	r24, Y+1	; 0x01
    5ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    5ff8:	01 97       	sbiw	r24, 0x01	; 1
    5ffa:	f1 f7       	brne	.-4      	; 0x5ff8 <CLCD_voidSendData+0x112>
    5ffc:	9a 83       	std	Y+2, r25	; 0x02
    5ffe:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);

}
    6000:	2f 96       	adiw	r28, 0x0f	; 15
    6002:	0f b6       	in	r0, 0x3f	; 63
    6004:	f8 94       	cli
    6006:	de bf       	out	0x3e, r29	; 62
    6008:	0f be       	out	0x3f, r0	; 63
    600a:	cd bf       	out	0x3d, r28	; 61
    600c:	cf 91       	pop	r28
    600e:	df 91       	pop	r29
    6010:	08 95       	ret

00006012 <CLCD_voidSendCommand>:
* Parameters :
            => Copy_u8Command --> Command number
* return : nothing
*Hint : RS pin Mode is the difference between this function and the previous (CLCD_voidSendData)
*/
void CLCD_voidSendCommand ( u8 Copy_u8Command ){
    6012:	df 93       	push	r29
    6014:	cf 93       	push	r28
    6016:	cd b7       	in	r28, 0x3d	; 61
    6018:	de b7       	in	r29, 0x3e	; 62
    601a:	2f 97       	sbiw	r28, 0x0f	; 15
    601c:	0f b6       	in	r0, 0x3f	; 63
    601e:	f8 94       	cli
    6020:	de bf       	out	0x3e, r29	; 62
    6022:	0f be       	out	0x3f, r0	; 63
    6024:	cd bf       	out	0x3d, r28	; 61
    6026:	8f 87       	std	Y+15, r24	; 0x0f

	//<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<      8 Bits Mode       >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
	#if   CLCD_MODE == 8

	DIO_enumSetPortValue ( CLCD_DATA_PORT    , Copy_u8Command     );
    6028:	81 e0       	ldi	r24, 0x01	; 1
    602a:	6f 85       	ldd	r22, Y+15	; 0x0f
    602c:	0e 94 fc 2a 	call	0x55f8	; 0x55f8 <DIO_enumSetPortValue>
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_RS , DIO_PIN_LOW  );
    6030:	83 e0       	ldi	r24, 0x03	; 3
    6032:	60 e0       	ldi	r22, 0x00	; 0
    6034:	40 e0       	ldi	r20, 0x00	; 0
    6036:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <DIO_enumSetPinValue>
	// RW always connect to GND to Write
	DIO_enumSetPinValue          (CLCD_CONTROL_PORT,CLCD_RW , DIO_PIN_LOW    );
    603a:	83 e0       	ldi	r24, 0x03	; 3
    603c:	61 e0       	ldi	r22, 0x01	; 1
    603e:	40 e0       	ldi	r20, 0x00	; 0
    6040:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <DIO_enumSetPinValue>
	CLCD_voidSendFallingEdge();
    6044:	0e 94 63 36 	call	0x6cc6	; 0x6cc6 <CLCD_voidSendFallingEdge>
    6048:	80 e0       	ldi	r24, 0x00	; 0
    604a:	90 e0       	ldi	r25, 0x00	; 0
    604c:	a0 e8       	ldi	r26, 0x80	; 128
    604e:	bf e3       	ldi	r27, 0x3F	; 63
    6050:	8b 87       	std	Y+11, r24	; 0x0b
    6052:	9c 87       	std	Y+12, r25	; 0x0c
    6054:	ad 87       	std	Y+13, r26	; 0x0d
    6056:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6058:	6b 85       	ldd	r22, Y+11	; 0x0b
    605a:	7c 85       	ldd	r23, Y+12	; 0x0c
    605c:	8d 85       	ldd	r24, Y+13	; 0x0d
    605e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6060:	20 e0       	ldi	r18, 0x00	; 0
    6062:	30 e0       	ldi	r19, 0x00	; 0
    6064:	4a ef       	ldi	r20, 0xFA	; 250
    6066:	54 e4       	ldi	r21, 0x44	; 68
    6068:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    606c:	dc 01       	movw	r26, r24
    606e:	cb 01       	movw	r24, r22
    6070:	8f 83       	std	Y+7, r24	; 0x07
    6072:	98 87       	std	Y+8, r25	; 0x08
    6074:	a9 87       	std	Y+9, r26	; 0x09
    6076:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6078:	6f 81       	ldd	r22, Y+7	; 0x07
    607a:	78 85       	ldd	r23, Y+8	; 0x08
    607c:	89 85       	ldd	r24, Y+9	; 0x09
    607e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6080:	20 e0       	ldi	r18, 0x00	; 0
    6082:	30 e0       	ldi	r19, 0x00	; 0
    6084:	40 e8       	ldi	r20, 0x80	; 128
    6086:	5f e3       	ldi	r21, 0x3F	; 63
    6088:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    608c:	88 23       	and	r24, r24
    608e:	2c f4       	brge	.+10     	; 0x609a <CLCD_voidSendCommand+0x88>
		__ticks = 1;
    6090:	81 e0       	ldi	r24, 0x01	; 1
    6092:	90 e0       	ldi	r25, 0x00	; 0
    6094:	9e 83       	std	Y+6, r25	; 0x06
    6096:	8d 83       	std	Y+5, r24	; 0x05
    6098:	3f c0       	rjmp	.+126    	; 0x6118 <CLCD_voidSendCommand+0x106>
	else if (__tmp > 65535)
    609a:	6f 81       	ldd	r22, Y+7	; 0x07
    609c:	78 85       	ldd	r23, Y+8	; 0x08
    609e:	89 85       	ldd	r24, Y+9	; 0x09
    60a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    60a2:	20 e0       	ldi	r18, 0x00	; 0
    60a4:	3f ef       	ldi	r19, 0xFF	; 255
    60a6:	4f e7       	ldi	r20, 0x7F	; 127
    60a8:	57 e4       	ldi	r21, 0x47	; 71
    60aa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    60ae:	18 16       	cp	r1, r24
    60b0:	4c f5       	brge	.+82     	; 0x6104 <CLCD_voidSendCommand+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    60b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    60b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    60b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    60b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    60ba:	20 e0       	ldi	r18, 0x00	; 0
    60bc:	30 e0       	ldi	r19, 0x00	; 0
    60be:	40 e2       	ldi	r20, 0x20	; 32
    60c0:	51 e4       	ldi	r21, 0x41	; 65
    60c2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    60c6:	dc 01       	movw	r26, r24
    60c8:	cb 01       	movw	r24, r22
    60ca:	bc 01       	movw	r22, r24
    60cc:	cd 01       	movw	r24, r26
    60ce:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    60d2:	dc 01       	movw	r26, r24
    60d4:	cb 01       	movw	r24, r22
    60d6:	9e 83       	std	Y+6, r25	; 0x06
    60d8:	8d 83       	std	Y+5, r24	; 0x05
    60da:	0f c0       	rjmp	.+30     	; 0x60fa <CLCD_voidSendCommand+0xe8>
    60dc:	88 ec       	ldi	r24, 0xC8	; 200
    60de:	90 e0       	ldi	r25, 0x00	; 0
    60e0:	9c 83       	std	Y+4, r25	; 0x04
    60e2:	8b 83       	std	Y+3, r24	; 0x03
    60e4:	8b 81       	ldd	r24, Y+3	; 0x03
    60e6:	9c 81       	ldd	r25, Y+4	; 0x04
    60e8:	01 97       	sbiw	r24, 0x01	; 1
    60ea:	f1 f7       	brne	.-4      	; 0x60e8 <CLCD_voidSendCommand+0xd6>
    60ec:	9c 83       	std	Y+4, r25	; 0x04
    60ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    60f0:	8d 81       	ldd	r24, Y+5	; 0x05
    60f2:	9e 81       	ldd	r25, Y+6	; 0x06
    60f4:	01 97       	sbiw	r24, 0x01	; 1
    60f6:	9e 83       	std	Y+6, r25	; 0x06
    60f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    60fa:	8d 81       	ldd	r24, Y+5	; 0x05
    60fc:	9e 81       	ldd	r25, Y+6	; 0x06
    60fe:	00 97       	sbiw	r24, 0x00	; 0
    6100:	69 f7       	brne	.-38     	; 0x60dc <CLCD_voidSendCommand+0xca>
    6102:	14 c0       	rjmp	.+40     	; 0x612c <CLCD_voidSendCommand+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6104:	6f 81       	ldd	r22, Y+7	; 0x07
    6106:	78 85       	ldd	r23, Y+8	; 0x08
    6108:	89 85       	ldd	r24, Y+9	; 0x09
    610a:	9a 85       	ldd	r25, Y+10	; 0x0a
    610c:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6110:	dc 01       	movw	r26, r24
    6112:	cb 01       	movw	r24, r22
    6114:	9e 83       	std	Y+6, r25	; 0x06
    6116:	8d 83       	std	Y+5, r24	; 0x05
    6118:	8d 81       	ldd	r24, Y+5	; 0x05
    611a:	9e 81       	ldd	r25, Y+6	; 0x06
    611c:	9a 83       	std	Y+2, r25	; 0x02
    611e:	89 83       	std	Y+1, r24	; 0x01
    6120:	89 81       	ldd	r24, Y+1	; 0x01
    6122:	9a 81       	ldd	r25, Y+2	; 0x02
    6124:	01 97       	sbiw	r24, 0x01	; 1
    6126:	f1 f7       	brne	.-4      	; 0x6124 <CLCD_voidSendCommand+0x112>
    6128:	9a 83       	std	Y+2, r25	; 0x02
    612a:	89 83       	std	Y+1, r24	; 0x01

	#endif

	_delay_ms(1);

}
    612c:	2f 96       	adiw	r28, 0x0f	; 15
    612e:	0f b6       	in	r0, 0x3f	; 63
    6130:	f8 94       	cli
    6132:	de bf       	out	0x3e, r29	; 62
    6134:	0f be       	out	0x3f, r0	; 63
    6136:	cd bf       	out	0x3d, r28	; 61
    6138:	cf 91       	pop	r28
    613a:	df 91       	pop	r29
    613c:	08 95       	ret

0000613e <CLCD_voidSendString>:
* Breif : This Function send string to the port which is defined in config.h
* Parameters :
            => * Copy_u8ptrString  --> Pointer to the string
* return : nothing
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){
    613e:	df 93       	push	r29
    6140:	cf 93       	push	r28
    6142:	00 d0       	rcall	.+0      	; 0x6144 <CLCD_voidSendString+0x6>
    6144:	0f 92       	push	r0
    6146:	cd b7       	in	r28, 0x3d	; 61
    6148:	de b7       	in	r29, 0x3e	; 62
    614a:	9b 83       	std	Y+3, r25	; 0x03
    614c:	8a 83       	std	Y+2, r24	; 0x02

	u8 LOC_u8Iterator = 0 ;
    614e:	19 82       	std	Y+1, r1	; 0x01
    6150:	0e c0       	rjmp	.+28     	; 0x616e <CLCD_voidSendString+0x30>

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){

		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
    6152:	89 81       	ldd	r24, Y+1	; 0x01
    6154:	28 2f       	mov	r18, r24
    6156:	30 e0       	ldi	r19, 0x00	; 0
    6158:	8a 81       	ldd	r24, Y+2	; 0x02
    615a:	9b 81       	ldd	r25, Y+3	; 0x03
    615c:	fc 01       	movw	r30, r24
    615e:	e2 0f       	add	r30, r18
    6160:	f3 1f       	adc	r31, r19
    6162:	80 81       	ld	r24, Z
    6164:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <CLCD_voidSendData>
		LOC_u8Iterator++ ;
    6168:	89 81       	ldd	r24, Y+1	; 0x01
    616a:	8f 5f       	subi	r24, 0xFF	; 255
    616c:	89 83       	std	Y+1, r24	; 0x01
*/
void CLCD_voidSendString  ( const u8 * Copy_u8ptrString ){

	u8 LOC_u8Iterator = 0 ;

	while( Copy_u8ptrString[LOC_u8Iterator] != '\0' ){
    616e:	89 81       	ldd	r24, Y+1	; 0x01
    6170:	28 2f       	mov	r18, r24
    6172:	30 e0       	ldi	r19, 0x00	; 0
    6174:	8a 81       	ldd	r24, Y+2	; 0x02
    6176:	9b 81       	ldd	r25, Y+3	; 0x03
    6178:	fc 01       	movw	r30, r24
    617a:	e2 0f       	add	r30, r18
    617c:	f3 1f       	adc	r31, r19
    617e:	80 81       	ld	r24, Z
    6180:	88 23       	and	r24, r24
    6182:	39 f7       	brne	.-50     	; 0x6152 <CLCD_voidSendString+0x14>
		CLCD_voidSendData( Copy_u8ptrString[LOC_u8Iterator] );
		LOC_u8Iterator++ ;

	}

}
    6184:	0f 90       	pop	r0
    6186:	0f 90       	pop	r0
    6188:	0f 90       	pop	r0
    618a:	cf 91       	pop	r28
    618c:	df 91       	pop	r29
    618e:	08 95       	ret

00006190 <CLCD_voidSendNumber>:
* Breif : This Function send number to the port which is defined in config.h
* Parameters :
            => Copy_u64Number --> number that you want to display
* return : nothing
*/
void CLCD_voidSendNumber   ( u64 Copy_u64Number    ){
    6190:	af 92       	push	r10
    6192:	bf 92       	push	r11
    6194:	cf 92       	push	r12
    6196:	df 92       	push	r13
    6198:	ef 92       	push	r14
    619a:	ff 92       	push	r15
    619c:	0f 93       	push	r16
    619e:	1f 93       	push	r17
    61a0:	df 93       	push	r29
    61a2:	cf 93       	push	r28
    61a4:	cd b7       	in	r28, 0x3d	; 61
    61a6:	de b7       	in	r29, 0x3e	; 62
    61a8:	c6 56       	subi	r28, 0x66	; 102
    61aa:	d0 40       	sbci	r29, 0x00	; 0
    61ac:	0f b6       	in	r0, 0x3f	; 63
    61ae:	f8 94       	cli
    61b0:	de bf       	out	0x3e, r29	; 62
    61b2:	0f be       	out	0x3f, r0	; 63
    61b4:	cd bf       	out	0x3d, r28	; 61
    61b6:	29 87       	std	Y+9, r18	; 0x09
    61b8:	3a 87       	std	Y+10, r19	; 0x0a
    61ba:	4b 87       	std	Y+11, r20	; 0x0b
    61bc:	5c 87       	std	Y+12, r21	; 0x0c
    61be:	6d 87       	std	Y+13, r22	; 0x0d
    61c0:	7e 87       	std	Y+14, r23	; 0x0e
    61c2:	8f 87       	std	Y+15, r24	; 0x0f
    61c4:	98 8b       	std	Y+16, r25	; 0x10

	u64 LOC_u64Reversed = 1 ;
    61c6:	81 e0       	ldi	r24, 0x01	; 1
    61c8:	89 83       	std	Y+1, r24	; 0x01
    61ca:	1a 82       	std	Y+2, r1	; 0x02
    61cc:	1b 82       	std	Y+3, r1	; 0x03
    61ce:	1c 82       	std	Y+4, r1	; 0x04
    61d0:	1d 82       	std	Y+5, r1	; 0x05
    61d2:	1e 82       	std	Y+6, r1	; 0x06
    61d4:	1f 82       	std	Y+7, r1	; 0x07
    61d6:	18 86       	std	Y+8, r1	; 0x08

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }
    61d8:	89 85       	ldd	r24, Y+9	; 0x09
    61da:	9a 85       	ldd	r25, Y+10	; 0x0a
    61dc:	89 2b       	or	r24, r25
    61de:	9b 85       	ldd	r25, Y+11	; 0x0b
    61e0:	89 2b       	or	r24, r25
    61e2:	9c 85       	ldd	r25, Y+12	; 0x0c
    61e4:	89 2b       	or	r24, r25
    61e6:	9d 85       	ldd	r25, Y+13	; 0x0d
    61e8:	89 2b       	or	r24, r25
    61ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    61ec:	89 2b       	or	r24, r25
    61ee:	9f 85       	ldd	r25, Y+15	; 0x0f
    61f0:	89 2b       	or	r24, r25
    61f2:	98 89       	ldd	r25, Y+16	; 0x10
    61f4:	89 2b       	or	r24, r25
    61f6:	88 23       	and	r24, r24
    61f8:	09 f0       	breq	.+2      	; 0x61fc <CLCD_voidSendNumber+0x6c>
    61fa:	62 c3       	rjmp	.+1732   	; 0x68c0 <CLCD_voidSendNumber+0x730>
    61fc:	80 e3       	ldi	r24, 0x30	; 48
    61fe:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <CLCD_voidSendData>
    6202:	ef c3       	rjmp	.+2014   	; 0x69e2 <CLCD_voidSendNumber+0x852>

	else{

		while( Copy_u64Number != 0 ){

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
    6204:	29 81       	ldd	r18, Y+1	; 0x01
    6206:	3a 81       	ldd	r19, Y+2	; 0x02
    6208:	4b 81       	ldd	r20, Y+3	; 0x03
    620a:	5c 81       	ldd	r21, Y+4	; 0x04
    620c:	6d 81       	ldd	r22, Y+5	; 0x05
    620e:	7e 81       	ldd	r23, Y+6	; 0x06
    6210:	8f 81       	ldd	r24, Y+7	; 0x07
    6212:	98 85       	ldd	r25, Y+8	; 0x08
    6214:	a2 2e       	mov	r10, r18
    6216:	b3 2e       	mov	r11, r19
    6218:	c4 2e       	mov	r12, r20
    621a:	d5 2e       	mov	r13, r21
    621c:	e6 2e       	mov	r14, r22
    621e:	f7 2e       	mov	r15, r23
    6220:	08 2f       	mov	r16, r24
    6222:	19 2f       	mov	r17, r25
    6224:	2a 2d       	mov	r18, r10
    6226:	3b 2d       	mov	r19, r11
    6228:	4c 2d       	mov	r20, r12
    622a:	5d 2d       	mov	r21, r13
    622c:	6e 2d       	mov	r22, r14
    622e:	7f 2d       	mov	r23, r15
    6230:	80 2f       	mov	r24, r16
    6232:	91 2f       	mov	r25, r17
    6234:	01 e0       	ldi	r16, 0x01	; 1
    6236:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    623a:	29 a3       	std	Y+33, r18	; 0x21
    623c:	3a a3       	std	Y+34, r19	; 0x22
    623e:	4b a3       	std	Y+35, r20	; 0x23
    6240:	5c a3       	std	Y+36, r21	; 0x24
    6242:	6d a3       	std	Y+37, r22	; 0x25
    6244:	7e a3       	std	Y+38, r23	; 0x26
    6246:	8f a3       	std	Y+39, r24	; 0x27
    6248:	98 a7       	std	Y+40, r25	; 0x28
    624a:	29 a1       	ldd	r18, Y+33	; 0x21
    624c:	3a a1       	ldd	r19, Y+34	; 0x22
    624e:	4b a1       	ldd	r20, Y+35	; 0x23
    6250:	5c a1       	ldd	r21, Y+36	; 0x24
    6252:	6d a1       	ldd	r22, Y+37	; 0x25
    6254:	7e a1       	ldd	r23, Y+38	; 0x26
    6256:	8f a1       	ldd	r24, Y+39	; 0x27
    6258:	98 a5       	ldd	r25, Y+40	; 0x28
    625a:	02 e0       	ldi	r16, 0x02	; 2
    625c:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    6260:	29 a7       	std	Y+41, r18	; 0x29
    6262:	3a a7       	std	Y+42, r19	; 0x2a
    6264:	4b a7       	std	Y+43, r20	; 0x2b
    6266:	5c a7       	std	Y+44, r21	; 0x2c
    6268:	6d a7       	std	Y+45, r22	; 0x2d
    626a:	7e a7       	std	Y+46, r23	; 0x2e
    626c:	8f a7       	std	Y+47, r24	; 0x2f
    626e:	98 ab       	std	Y+48, r25	; 0x30
    6270:	89 a1       	ldd	r24, Y+33	; 0x21
    6272:	99 a5       	ldd	r25, Y+41	; 0x29
    6274:	89 0f       	add	r24, r25
    6276:	89 ab       	std	Y+49, r24	; 0x31
    6278:	81 e0       	ldi	r24, 0x01	; 1
    627a:	89 af       	std	Y+57, r24	; 0x39
    627c:	99 a9       	ldd	r25, Y+49	; 0x31
    627e:	89 a1       	ldd	r24, Y+33	; 0x21
    6280:	98 17       	cp	r25, r24
    6282:	08 f0       	brcs	.+2      	; 0x6286 <CLCD_voidSendNumber+0xf6>
    6284:	19 ae       	std	Y+57, r1	; 0x39
    6286:	9a a1       	ldd	r25, Y+34	; 0x22
    6288:	8a a5       	ldd	r24, Y+42	; 0x2a
    628a:	98 0f       	add	r25, r24
    628c:	9a ab       	std	Y+50, r25	; 0x32
    628e:	91 e0       	ldi	r25, 0x01	; 1
    6290:	9a af       	std	Y+58, r25	; 0x3a
    6292:	8a a9       	ldd	r24, Y+50	; 0x32
    6294:	9a a1       	ldd	r25, Y+34	; 0x22
    6296:	89 17       	cp	r24, r25
    6298:	08 f0       	brcs	.+2      	; 0x629c <CLCD_voidSendNumber+0x10c>
    629a:	1a ae       	std	Y+58, r1	; 0x3a
    629c:	89 ad       	ldd	r24, Y+57	; 0x39
    629e:	9a a9       	ldd	r25, Y+50	; 0x32
    62a0:	89 0f       	add	r24, r25
    62a2:	8b af       	std	Y+59, r24	; 0x3b
    62a4:	81 e0       	ldi	r24, 0x01	; 1
    62a6:	8c af       	std	Y+60, r24	; 0x3c
    62a8:	9b ad       	ldd	r25, Y+59	; 0x3b
    62aa:	8a a9       	ldd	r24, Y+50	; 0x32
    62ac:	98 17       	cp	r25, r24
    62ae:	08 f0       	brcs	.+2      	; 0x62b2 <CLCD_voidSendNumber+0x122>
    62b0:	1c ae       	std	Y+60, r1	; 0x3c
    62b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    62b4:	8c ad       	ldd	r24, Y+60	; 0x3c
    62b6:	98 2b       	or	r25, r24
    62b8:	9a af       	std	Y+58, r25	; 0x3a
    62ba:	9b ad       	ldd	r25, Y+59	; 0x3b
    62bc:	9a ab       	std	Y+50, r25	; 0x32
    62be:	8b a1       	ldd	r24, Y+35	; 0x23
    62c0:	9b a5       	ldd	r25, Y+43	; 0x2b
    62c2:	89 0f       	add	r24, r25
    62c4:	8b ab       	std	Y+51, r24	; 0x33
    62c6:	81 e0       	ldi	r24, 0x01	; 1
    62c8:	8d af       	std	Y+61, r24	; 0x3d
    62ca:	9b a9       	ldd	r25, Y+51	; 0x33
    62cc:	8b a1       	ldd	r24, Y+35	; 0x23
    62ce:	98 17       	cp	r25, r24
    62d0:	08 f0       	brcs	.+2      	; 0x62d4 <CLCD_voidSendNumber+0x144>
    62d2:	1d ae       	std	Y+61, r1	; 0x3d
    62d4:	9a ad       	ldd	r25, Y+58	; 0x3a
    62d6:	8b a9       	ldd	r24, Y+51	; 0x33
    62d8:	98 0f       	add	r25, r24
    62da:	9e af       	std	Y+62, r25	; 0x3e
    62dc:	91 e0       	ldi	r25, 0x01	; 1
    62de:	9f af       	std	Y+63, r25	; 0x3f
    62e0:	8e ad       	ldd	r24, Y+62	; 0x3e
    62e2:	9b a9       	ldd	r25, Y+51	; 0x33
    62e4:	89 17       	cp	r24, r25
    62e6:	08 f0       	brcs	.+2      	; 0x62ea <CLCD_voidSendNumber+0x15a>
    62e8:	1f ae       	std	Y+63, r1	; 0x3f
    62ea:	8d ad       	ldd	r24, Y+61	; 0x3d
    62ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    62ee:	89 2b       	or	r24, r25
    62f0:	8d af       	std	Y+61, r24	; 0x3d
    62f2:	8e ad       	ldd	r24, Y+62	; 0x3e
    62f4:	8b ab       	std	Y+51, r24	; 0x33
    62f6:	9c a1       	ldd	r25, Y+36	; 0x24
    62f8:	8c a5       	ldd	r24, Y+44	; 0x2c
    62fa:	98 0f       	add	r25, r24
    62fc:	9c ab       	std	Y+52, r25	; 0x34
    62fe:	91 e0       	ldi	r25, 0x01	; 1
    6300:	21 96       	adiw	r28, 0x01	; 1
    6302:	9f af       	std	Y+63, r25	; 0x3f
    6304:	21 97       	sbiw	r28, 0x01	; 1
    6306:	8c a9       	ldd	r24, Y+52	; 0x34
    6308:	9c a1       	ldd	r25, Y+36	; 0x24
    630a:	89 17       	cp	r24, r25
    630c:	18 f0       	brcs	.+6      	; 0x6314 <CLCD_voidSendNumber+0x184>
    630e:	21 96       	adiw	r28, 0x01	; 1
    6310:	1f ae       	std	Y+63, r1	; 0x3f
    6312:	21 97       	sbiw	r28, 0x01	; 1
    6314:	8d ad       	ldd	r24, Y+61	; 0x3d
    6316:	9c a9       	ldd	r25, Y+52	; 0x34
    6318:	89 0f       	add	r24, r25
    631a:	22 96       	adiw	r28, 0x02	; 2
    631c:	8f af       	std	Y+63, r24	; 0x3f
    631e:	22 97       	sbiw	r28, 0x02	; 2
    6320:	81 e0       	ldi	r24, 0x01	; 1
    6322:	23 96       	adiw	r28, 0x03	; 3
    6324:	8f af       	std	Y+63, r24	; 0x3f
    6326:	23 97       	sbiw	r28, 0x03	; 3
    6328:	22 96       	adiw	r28, 0x02	; 2
    632a:	9f ad       	ldd	r25, Y+63	; 0x3f
    632c:	22 97       	sbiw	r28, 0x02	; 2
    632e:	8c a9       	ldd	r24, Y+52	; 0x34
    6330:	98 17       	cp	r25, r24
    6332:	18 f0       	brcs	.+6      	; 0x633a <CLCD_voidSendNumber+0x1aa>
    6334:	23 96       	adiw	r28, 0x03	; 3
    6336:	1f ae       	std	Y+63, r1	; 0x3f
    6338:	23 97       	sbiw	r28, 0x03	; 3
    633a:	21 96       	adiw	r28, 0x01	; 1
    633c:	9f ad       	ldd	r25, Y+63	; 0x3f
    633e:	21 97       	sbiw	r28, 0x01	; 1
    6340:	23 96       	adiw	r28, 0x03	; 3
    6342:	8f ad       	ldd	r24, Y+63	; 0x3f
    6344:	23 97       	sbiw	r28, 0x03	; 3
    6346:	98 2b       	or	r25, r24
    6348:	21 96       	adiw	r28, 0x01	; 1
    634a:	9f af       	std	Y+63, r25	; 0x3f
    634c:	21 97       	sbiw	r28, 0x01	; 1
    634e:	22 96       	adiw	r28, 0x02	; 2
    6350:	9f ad       	ldd	r25, Y+63	; 0x3f
    6352:	22 97       	sbiw	r28, 0x02	; 2
    6354:	9c ab       	std	Y+52, r25	; 0x34
    6356:	8d a1       	ldd	r24, Y+37	; 0x25
    6358:	9d a5       	ldd	r25, Y+45	; 0x2d
    635a:	89 0f       	add	r24, r25
    635c:	8d ab       	std	Y+53, r24	; 0x35
    635e:	81 e0       	ldi	r24, 0x01	; 1
    6360:	24 96       	adiw	r28, 0x04	; 4
    6362:	8f af       	std	Y+63, r24	; 0x3f
    6364:	24 97       	sbiw	r28, 0x04	; 4
    6366:	9d a9       	ldd	r25, Y+53	; 0x35
    6368:	8d a1       	ldd	r24, Y+37	; 0x25
    636a:	98 17       	cp	r25, r24
    636c:	18 f0       	brcs	.+6      	; 0x6374 <CLCD_voidSendNumber+0x1e4>
    636e:	24 96       	adiw	r28, 0x04	; 4
    6370:	1f ae       	std	Y+63, r1	; 0x3f
    6372:	24 97       	sbiw	r28, 0x04	; 4
    6374:	21 96       	adiw	r28, 0x01	; 1
    6376:	9f ad       	ldd	r25, Y+63	; 0x3f
    6378:	21 97       	sbiw	r28, 0x01	; 1
    637a:	8d a9       	ldd	r24, Y+53	; 0x35
    637c:	98 0f       	add	r25, r24
    637e:	25 96       	adiw	r28, 0x05	; 5
    6380:	9f af       	std	Y+63, r25	; 0x3f
    6382:	25 97       	sbiw	r28, 0x05	; 5
    6384:	91 e0       	ldi	r25, 0x01	; 1
    6386:	26 96       	adiw	r28, 0x06	; 6
    6388:	9f af       	std	Y+63, r25	; 0x3f
    638a:	26 97       	sbiw	r28, 0x06	; 6
    638c:	25 96       	adiw	r28, 0x05	; 5
    638e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6390:	25 97       	sbiw	r28, 0x05	; 5
    6392:	9d a9       	ldd	r25, Y+53	; 0x35
    6394:	89 17       	cp	r24, r25
    6396:	18 f0       	brcs	.+6      	; 0x639e <CLCD_voidSendNumber+0x20e>
    6398:	26 96       	adiw	r28, 0x06	; 6
    639a:	1f ae       	std	Y+63, r1	; 0x3f
    639c:	26 97       	sbiw	r28, 0x06	; 6
    639e:	24 96       	adiw	r28, 0x04	; 4
    63a0:	8f ad       	ldd	r24, Y+63	; 0x3f
    63a2:	24 97       	sbiw	r28, 0x04	; 4
    63a4:	26 96       	adiw	r28, 0x06	; 6
    63a6:	9f ad       	ldd	r25, Y+63	; 0x3f
    63a8:	26 97       	sbiw	r28, 0x06	; 6
    63aa:	89 2b       	or	r24, r25
    63ac:	24 96       	adiw	r28, 0x04	; 4
    63ae:	8f af       	std	Y+63, r24	; 0x3f
    63b0:	24 97       	sbiw	r28, 0x04	; 4
    63b2:	25 96       	adiw	r28, 0x05	; 5
    63b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    63b6:	25 97       	sbiw	r28, 0x05	; 5
    63b8:	8d ab       	std	Y+53, r24	; 0x35
    63ba:	9e a1       	ldd	r25, Y+38	; 0x26
    63bc:	8e a5       	ldd	r24, Y+46	; 0x2e
    63be:	98 0f       	add	r25, r24
    63c0:	9e ab       	std	Y+54, r25	; 0x36
    63c2:	91 e0       	ldi	r25, 0x01	; 1
    63c4:	27 96       	adiw	r28, 0x07	; 7
    63c6:	9f af       	std	Y+63, r25	; 0x3f
    63c8:	27 97       	sbiw	r28, 0x07	; 7
    63ca:	8e a9       	ldd	r24, Y+54	; 0x36
    63cc:	9e a1       	ldd	r25, Y+38	; 0x26
    63ce:	89 17       	cp	r24, r25
    63d0:	18 f0       	brcs	.+6      	; 0x63d8 <CLCD_voidSendNumber+0x248>
    63d2:	27 96       	adiw	r28, 0x07	; 7
    63d4:	1f ae       	std	Y+63, r1	; 0x3f
    63d6:	27 97       	sbiw	r28, 0x07	; 7
    63d8:	24 96       	adiw	r28, 0x04	; 4
    63da:	8f ad       	ldd	r24, Y+63	; 0x3f
    63dc:	24 97       	sbiw	r28, 0x04	; 4
    63de:	9e a9       	ldd	r25, Y+54	; 0x36
    63e0:	89 0f       	add	r24, r25
    63e2:	28 96       	adiw	r28, 0x08	; 8
    63e4:	8f af       	std	Y+63, r24	; 0x3f
    63e6:	28 97       	sbiw	r28, 0x08	; 8
    63e8:	81 e0       	ldi	r24, 0x01	; 1
    63ea:	29 96       	adiw	r28, 0x09	; 9
    63ec:	8f af       	std	Y+63, r24	; 0x3f
    63ee:	29 97       	sbiw	r28, 0x09	; 9
    63f0:	28 96       	adiw	r28, 0x08	; 8
    63f2:	9f ad       	ldd	r25, Y+63	; 0x3f
    63f4:	28 97       	sbiw	r28, 0x08	; 8
    63f6:	8e a9       	ldd	r24, Y+54	; 0x36
    63f8:	98 17       	cp	r25, r24
    63fa:	18 f0       	brcs	.+6      	; 0x6402 <CLCD_voidSendNumber+0x272>
    63fc:	29 96       	adiw	r28, 0x09	; 9
    63fe:	1f ae       	std	Y+63, r1	; 0x3f
    6400:	29 97       	sbiw	r28, 0x09	; 9
    6402:	27 96       	adiw	r28, 0x07	; 7
    6404:	9f ad       	ldd	r25, Y+63	; 0x3f
    6406:	27 97       	sbiw	r28, 0x07	; 7
    6408:	29 96       	adiw	r28, 0x09	; 9
    640a:	8f ad       	ldd	r24, Y+63	; 0x3f
    640c:	29 97       	sbiw	r28, 0x09	; 9
    640e:	98 2b       	or	r25, r24
    6410:	27 96       	adiw	r28, 0x07	; 7
    6412:	9f af       	std	Y+63, r25	; 0x3f
    6414:	27 97       	sbiw	r28, 0x07	; 7
    6416:	28 96       	adiw	r28, 0x08	; 8
    6418:	9f ad       	ldd	r25, Y+63	; 0x3f
    641a:	28 97       	sbiw	r28, 0x08	; 8
    641c:	9e ab       	std	Y+54, r25	; 0x36
    641e:	8f a1       	ldd	r24, Y+39	; 0x27
    6420:	9f a5       	ldd	r25, Y+47	; 0x2f
    6422:	89 0f       	add	r24, r25
    6424:	8f ab       	std	Y+55, r24	; 0x37
    6426:	81 e0       	ldi	r24, 0x01	; 1
    6428:	2a 96       	adiw	r28, 0x0a	; 10
    642a:	8f af       	std	Y+63, r24	; 0x3f
    642c:	2a 97       	sbiw	r28, 0x0a	; 10
    642e:	9f a9       	ldd	r25, Y+55	; 0x37
    6430:	8f a1       	ldd	r24, Y+39	; 0x27
    6432:	98 17       	cp	r25, r24
    6434:	18 f0       	brcs	.+6      	; 0x643c <CLCD_voidSendNumber+0x2ac>
    6436:	2a 96       	adiw	r28, 0x0a	; 10
    6438:	1f ae       	std	Y+63, r1	; 0x3f
    643a:	2a 97       	sbiw	r28, 0x0a	; 10
    643c:	27 96       	adiw	r28, 0x07	; 7
    643e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6440:	27 97       	sbiw	r28, 0x07	; 7
    6442:	8f a9       	ldd	r24, Y+55	; 0x37
    6444:	98 0f       	add	r25, r24
    6446:	2b 96       	adiw	r28, 0x0b	; 11
    6448:	9f af       	std	Y+63, r25	; 0x3f
    644a:	2b 97       	sbiw	r28, 0x0b	; 11
    644c:	91 e0       	ldi	r25, 0x01	; 1
    644e:	2c 96       	adiw	r28, 0x0c	; 12
    6450:	9f af       	std	Y+63, r25	; 0x3f
    6452:	2c 97       	sbiw	r28, 0x0c	; 12
    6454:	2b 96       	adiw	r28, 0x0b	; 11
    6456:	8f ad       	ldd	r24, Y+63	; 0x3f
    6458:	2b 97       	sbiw	r28, 0x0b	; 11
    645a:	9f a9       	ldd	r25, Y+55	; 0x37
    645c:	89 17       	cp	r24, r25
    645e:	18 f0       	brcs	.+6      	; 0x6466 <CLCD_voidSendNumber+0x2d6>
    6460:	2c 96       	adiw	r28, 0x0c	; 12
    6462:	1f ae       	std	Y+63, r1	; 0x3f
    6464:	2c 97       	sbiw	r28, 0x0c	; 12
    6466:	2a 96       	adiw	r28, 0x0a	; 10
    6468:	8f ad       	ldd	r24, Y+63	; 0x3f
    646a:	2a 97       	sbiw	r28, 0x0a	; 10
    646c:	2c 96       	adiw	r28, 0x0c	; 12
    646e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6470:	2c 97       	sbiw	r28, 0x0c	; 12
    6472:	89 2b       	or	r24, r25
    6474:	2a 96       	adiw	r28, 0x0a	; 10
    6476:	8f af       	std	Y+63, r24	; 0x3f
    6478:	2a 97       	sbiw	r28, 0x0a	; 10
    647a:	2b 96       	adiw	r28, 0x0b	; 11
    647c:	8f ad       	ldd	r24, Y+63	; 0x3f
    647e:	2b 97       	sbiw	r28, 0x0b	; 11
    6480:	8f ab       	std	Y+55, r24	; 0x37
    6482:	98 a5       	ldd	r25, Y+40	; 0x28
    6484:	88 a9       	ldd	r24, Y+48	; 0x30
    6486:	98 0f       	add	r25, r24
    6488:	98 af       	std	Y+56, r25	; 0x38
    648a:	2a 96       	adiw	r28, 0x0a	; 10
    648c:	8f ad       	ldd	r24, Y+63	; 0x3f
    648e:	2a 97       	sbiw	r28, 0x0a	; 10
    6490:	98 ad       	ldd	r25, Y+56	; 0x38
    6492:	89 0f       	add	r24, r25
    6494:	88 af       	std	Y+56, r24	; 0x38
    6496:	89 a9       	ldd	r24, Y+49	; 0x31
    6498:	89 8f       	std	Y+25, r24	; 0x19
    649a:	9a a9       	ldd	r25, Y+50	; 0x32
    649c:	9a 8f       	std	Y+26, r25	; 0x1a
    649e:	8b a9       	ldd	r24, Y+51	; 0x33
    64a0:	8b 8f       	std	Y+27, r24	; 0x1b
    64a2:	9c a9       	ldd	r25, Y+52	; 0x34
    64a4:	9c 8f       	std	Y+28, r25	; 0x1c
    64a6:	8d a9       	ldd	r24, Y+53	; 0x35
    64a8:	8d 8f       	std	Y+29, r24	; 0x1d
    64aa:	9e a9       	ldd	r25, Y+54	; 0x36
    64ac:	9e 8f       	std	Y+30, r25	; 0x1e
    64ae:	8f a9       	ldd	r24, Y+55	; 0x37
    64b0:	8f 8f       	std	Y+31, r24	; 0x1f
    64b2:	98 ad       	ldd	r25, Y+56	; 0x38
    64b4:	98 a3       	std	Y+32, r25	; 0x20
    64b6:	a9 84       	ldd	r10, Y+9	; 0x09
    64b8:	ba 84       	ldd	r11, Y+10	; 0x0a
    64ba:	cb 84       	ldd	r12, Y+11	; 0x0b
    64bc:	dc 84       	ldd	r13, Y+12	; 0x0c
    64be:	ed 84       	ldd	r14, Y+13	; 0x0d
    64c0:	fe 84       	ldd	r15, Y+14	; 0x0e
    64c2:	0f 85       	ldd	r16, Y+15	; 0x0f
    64c4:	18 89       	ldd	r17, Y+16	; 0x10
    64c6:	2a 2d       	mov	r18, r10
    64c8:	3b 2d       	mov	r19, r11
    64ca:	4c 2d       	mov	r20, r12
    64cc:	5d 2d       	mov	r21, r13
    64ce:	6e 2d       	mov	r22, r14
    64d0:	7f 2d       	mov	r23, r15
    64d2:	80 2f       	mov	r24, r16
    64d4:	91 2f       	mov	r25, r17
    64d6:	0f 2e       	mov	r0, r31
    64d8:	fa e0       	ldi	r31, 0x0A	; 10
    64da:	af 2e       	mov	r10, r31
    64dc:	f0 2d       	mov	r31, r0
    64de:	bb 24       	eor	r11, r11
    64e0:	cc 24       	eor	r12, r12
    64e2:	dd 24       	eor	r13, r13
    64e4:	ee 24       	eor	r14, r14
    64e6:	ff 24       	eor	r15, r15
    64e8:	00 e0       	ldi	r16, 0x00	; 0
    64ea:	10 e0       	ldi	r17, 0x00	; 0
    64ec:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    64f0:	a2 2e       	mov	r10, r18
    64f2:	b3 2e       	mov	r11, r19
    64f4:	c4 2e       	mov	r12, r20
    64f6:	d5 2e       	mov	r13, r21
    64f8:	e6 2e       	mov	r14, r22
    64fa:	f7 2e       	mov	r15, r23
    64fc:	08 2f       	mov	r16, r24
    64fe:	19 2f       	mov	r17, r25
    6500:	a9 8a       	std	Y+17, r10	; 0x11
    6502:	ba 8a       	std	Y+18, r11	; 0x12
    6504:	cb 8a       	std	Y+19, r12	; 0x13
    6506:	dc 8a       	std	Y+20, r13	; 0x14
    6508:	ed 8a       	std	Y+21, r14	; 0x15
    650a:	fe 8a       	std	Y+22, r15	; 0x16
    650c:	0f 8b       	std	Y+23, r16	; 0x17
    650e:	18 8f       	std	Y+24, r17	; 0x18
    6510:	89 8d       	ldd	r24, Y+25	; 0x19
    6512:	99 89       	ldd	r25, Y+17	; 0x11
    6514:	89 0f       	add	r24, r25
    6516:	2d 96       	adiw	r28, 0x0d	; 13
    6518:	8f af       	std	Y+63, r24	; 0x3f
    651a:	2d 97       	sbiw	r28, 0x0d	; 13
    651c:	81 e0       	ldi	r24, 0x01	; 1
    651e:	65 96       	adiw	r28, 0x15	; 21
    6520:	8f af       	std	Y+63, r24	; 0x3f
    6522:	65 97       	sbiw	r28, 0x15	; 21
    6524:	2d 96       	adiw	r28, 0x0d	; 13
    6526:	9f ad       	ldd	r25, Y+63	; 0x3f
    6528:	2d 97       	sbiw	r28, 0x0d	; 13
    652a:	89 8d       	ldd	r24, Y+25	; 0x19
    652c:	98 17       	cp	r25, r24
    652e:	18 f0       	brcs	.+6      	; 0x6536 <CLCD_voidSendNumber+0x3a6>
    6530:	65 96       	adiw	r28, 0x15	; 21
    6532:	1f ae       	std	Y+63, r1	; 0x3f
    6534:	65 97       	sbiw	r28, 0x15	; 21
    6536:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6538:	8a 89       	ldd	r24, Y+18	; 0x12
    653a:	98 0f       	add	r25, r24
    653c:	2e 96       	adiw	r28, 0x0e	; 14
    653e:	9f af       	std	Y+63, r25	; 0x3f
    6540:	2e 97       	sbiw	r28, 0x0e	; 14
    6542:	91 e0       	ldi	r25, 0x01	; 1
    6544:	66 96       	adiw	r28, 0x16	; 22
    6546:	9f af       	std	Y+63, r25	; 0x3f
    6548:	66 97       	sbiw	r28, 0x16	; 22
    654a:	2e 96       	adiw	r28, 0x0e	; 14
    654c:	8f ad       	ldd	r24, Y+63	; 0x3f
    654e:	2e 97       	sbiw	r28, 0x0e	; 14
    6550:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6552:	89 17       	cp	r24, r25
    6554:	18 f0       	brcs	.+6      	; 0x655c <CLCD_voidSendNumber+0x3cc>
    6556:	66 96       	adiw	r28, 0x16	; 22
    6558:	1f ae       	std	Y+63, r1	; 0x3f
    655a:	66 97       	sbiw	r28, 0x16	; 22
    655c:	65 96       	adiw	r28, 0x15	; 21
    655e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6560:	65 97       	sbiw	r28, 0x15	; 21
    6562:	2e 96       	adiw	r28, 0x0e	; 14
    6564:	9f ad       	ldd	r25, Y+63	; 0x3f
    6566:	2e 97       	sbiw	r28, 0x0e	; 14
    6568:	89 0f       	add	r24, r25
    656a:	67 96       	adiw	r28, 0x17	; 23
    656c:	8f af       	std	Y+63, r24	; 0x3f
    656e:	67 97       	sbiw	r28, 0x17	; 23
    6570:	81 e0       	ldi	r24, 0x01	; 1
    6572:	68 96       	adiw	r28, 0x18	; 24
    6574:	8f af       	std	Y+63, r24	; 0x3f
    6576:	68 97       	sbiw	r28, 0x18	; 24
    6578:	67 96       	adiw	r28, 0x17	; 23
    657a:	9f ad       	ldd	r25, Y+63	; 0x3f
    657c:	67 97       	sbiw	r28, 0x17	; 23
    657e:	2e 96       	adiw	r28, 0x0e	; 14
    6580:	8f ad       	ldd	r24, Y+63	; 0x3f
    6582:	2e 97       	sbiw	r28, 0x0e	; 14
    6584:	98 17       	cp	r25, r24
    6586:	18 f0       	brcs	.+6      	; 0x658e <CLCD_voidSendNumber+0x3fe>
    6588:	68 96       	adiw	r28, 0x18	; 24
    658a:	1f ae       	std	Y+63, r1	; 0x3f
    658c:	68 97       	sbiw	r28, 0x18	; 24
    658e:	66 96       	adiw	r28, 0x16	; 22
    6590:	9f ad       	ldd	r25, Y+63	; 0x3f
    6592:	66 97       	sbiw	r28, 0x16	; 22
    6594:	68 96       	adiw	r28, 0x18	; 24
    6596:	8f ad       	ldd	r24, Y+63	; 0x3f
    6598:	68 97       	sbiw	r28, 0x18	; 24
    659a:	98 2b       	or	r25, r24
    659c:	66 96       	adiw	r28, 0x16	; 22
    659e:	9f af       	std	Y+63, r25	; 0x3f
    65a0:	66 97       	sbiw	r28, 0x16	; 22
    65a2:	67 96       	adiw	r28, 0x17	; 23
    65a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    65a6:	67 97       	sbiw	r28, 0x17	; 23
    65a8:	2e 96       	adiw	r28, 0x0e	; 14
    65aa:	9f af       	std	Y+63, r25	; 0x3f
    65ac:	2e 97       	sbiw	r28, 0x0e	; 14
    65ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    65b0:	9b 89       	ldd	r25, Y+19	; 0x13
    65b2:	89 0f       	add	r24, r25
    65b4:	2f 96       	adiw	r28, 0x0f	; 15
    65b6:	8f af       	std	Y+63, r24	; 0x3f
    65b8:	2f 97       	sbiw	r28, 0x0f	; 15
    65ba:	81 e0       	ldi	r24, 0x01	; 1
    65bc:	69 96       	adiw	r28, 0x19	; 25
    65be:	8f af       	std	Y+63, r24	; 0x3f
    65c0:	69 97       	sbiw	r28, 0x19	; 25
    65c2:	2f 96       	adiw	r28, 0x0f	; 15
    65c4:	9f ad       	ldd	r25, Y+63	; 0x3f
    65c6:	2f 97       	sbiw	r28, 0x0f	; 15
    65c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    65ca:	98 17       	cp	r25, r24
    65cc:	18 f0       	brcs	.+6      	; 0x65d4 <CLCD_voidSendNumber+0x444>
    65ce:	69 96       	adiw	r28, 0x19	; 25
    65d0:	1f ae       	std	Y+63, r1	; 0x3f
    65d2:	69 97       	sbiw	r28, 0x19	; 25
    65d4:	66 96       	adiw	r28, 0x16	; 22
    65d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    65d8:	66 97       	sbiw	r28, 0x16	; 22
    65da:	2f 96       	adiw	r28, 0x0f	; 15
    65dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    65de:	2f 97       	sbiw	r28, 0x0f	; 15
    65e0:	98 0f       	add	r25, r24
    65e2:	6a 96       	adiw	r28, 0x1a	; 26
    65e4:	9f af       	std	Y+63, r25	; 0x3f
    65e6:	6a 97       	sbiw	r28, 0x1a	; 26
    65e8:	91 e0       	ldi	r25, 0x01	; 1
    65ea:	6b 96       	adiw	r28, 0x1b	; 27
    65ec:	9f af       	std	Y+63, r25	; 0x3f
    65ee:	6b 97       	sbiw	r28, 0x1b	; 27
    65f0:	6a 96       	adiw	r28, 0x1a	; 26
    65f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    65f4:	6a 97       	sbiw	r28, 0x1a	; 26
    65f6:	2f 96       	adiw	r28, 0x0f	; 15
    65f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    65fa:	2f 97       	sbiw	r28, 0x0f	; 15
    65fc:	89 17       	cp	r24, r25
    65fe:	18 f0       	brcs	.+6      	; 0x6606 <CLCD_voidSendNumber+0x476>
    6600:	6b 96       	adiw	r28, 0x1b	; 27
    6602:	1f ae       	std	Y+63, r1	; 0x3f
    6604:	6b 97       	sbiw	r28, 0x1b	; 27
    6606:	69 96       	adiw	r28, 0x19	; 25
    6608:	8f ad       	ldd	r24, Y+63	; 0x3f
    660a:	69 97       	sbiw	r28, 0x19	; 25
    660c:	6b 96       	adiw	r28, 0x1b	; 27
    660e:	9f ad       	ldd	r25, Y+63	; 0x3f
    6610:	6b 97       	sbiw	r28, 0x1b	; 27
    6612:	89 2b       	or	r24, r25
    6614:	69 96       	adiw	r28, 0x19	; 25
    6616:	8f af       	std	Y+63, r24	; 0x3f
    6618:	69 97       	sbiw	r28, 0x19	; 25
    661a:	6a 96       	adiw	r28, 0x1a	; 26
    661c:	8f ad       	ldd	r24, Y+63	; 0x3f
    661e:	6a 97       	sbiw	r28, 0x1a	; 26
    6620:	2f 96       	adiw	r28, 0x0f	; 15
    6622:	8f af       	std	Y+63, r24	; 0x3f
    6624:	2f 97       	sbiw	r28, 0x0f	; 15
    6626:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6628:	8c 89       	ldd	r24, Y+20	; 0x14
    662a:	98 0f       	add	r25, r24
    662c:	60 96       	adiw	r28, 0x10	; 16
    662e:	9f af       	std	Y+63, r25	; 0x3f
    6630:	60 97       	sbiw	r28, 0x10	; 16
    6632:	91 e0       	ldi	r25, 0x01	; 1
    6634:	6c 96       	adiw	r28, 0x1c	; 28
    6636:	9f af       	std	Y+63, r25	; 0x3f
    6638:	6c 97       	sbiw	r28, 0x1c	; 28
    663a:	60 96       	adiw	r28, 0x10	; 16
    663c:	8f ad       	ldd	r24, Y+63	; 0x3f
    663e:	60 97       	sbiw	r28, 0x10	; 16
    6640:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6642:	89 17       	cp	r24, r25
    6644:	18 f0       	brcs	.+6      	; 0x664c <CLCD_voidSendNumber+0x4bc>
    6646:	6c 96       	adiw	r28, 0x1c	; 28
    6648:	1f ae       	std	Y+63, r1	; 0x3f
    664a:	6c 97       	sbiw	r28, 0x1c	; 28
    664c:	69 96       	adiw	r28, 0x19	; 25
    664e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6650:	69 97       	sbiw	r28, 0x19	; 25
    6652:	60 96       	adiw	r28, 0x10	; 16
    6654:	9f ad       	ldd	r25, Y+63	; 0x3f
    6656:	60 97       	sbiw	r28, 0x10	; 16
    6658:	89 0f       	add	r24, r25
    665a:	6d 96       	adiw	r28, 0x1d	; 29
    665c:	8f af       	std	Y+63, r24	; 0x3f
    665e:	6d 97       	sbiw	r28, 0x1d	; 29
    6660:	81 e0       	ldi	r24, 0x01	; 1
    6662:	6e 96       	adiw	r28, 0x1e	; 30
    6664:	8f af       	std	Y+63, r24	; 0x3f
    6666:	6e 97       	sbiw	r28, 0x1e	; 30
    6668:	6d 96       	adiw	r28, 0x1d	; 29
    666a:	9f ad       	ldd	r25, Y+63	; 0x3f
    666c:	6d 97       	sbiw	r28, 0x1d	; 29
    666e:	60 96       	adiw	r28, 0x10	; 16
    6670:	8f ad       	ldd	r24, Y+63	; 0x3f
    6672:	60 97       	sbiw	r28, 0x10	; 16
    6674:	98 17       	cp	r25, r24
    6676:	18 f0       	brcs	.+6      	; 0x667e <CLCD_voidSendNumber+0x4ee>
    6678:	6e 96       	adiw	r28, 0x1e	; 30
    667a:	1f ae       	std	Y+63, r1	; 0x3f
    667c:	6e 97       	sbiw	r28, 0x1e	; 30
    667e:	6c 96       	adiw	r28, 0x1c	; 28
    6680:	9f ad       	ldd	r25, Y+63	; 0x3f
    6682:	6c 97       	sbiw	r28, 0x1c	; 28
    6684:	6e 96       	adiw	r28, 0x1e	; 30
    6686:	8f ad       	ldd	r24, Y+63	; 0x3f
    6688:	6e 97       	sbiw	r28, 0x1e	; 30
    668a:	98 2b       	or	r25, r24
    668c:	6c 96       	adiw	r28, 0x1c	; 28
    668e:	9f af       	std	Y+63, r25	; 0x3f
    6690:	6c 97       	sbiw	r28, 0x1c	; 28
    6692:	6d 96       	adiw	r28, 0x1d	; 29
    6694:	9f ad       	ldd	r25, Y+63	; 0x3f
    6696:	6d 97       	sbiw	r28, 0x1d	; 29
    6698:	60 96       	adiw	r28, 0x10	; 16
    669a:	9f af       	std	Y+63, r25	; 0x3f
    669c:	60 97       	sbiw	r28, 0x10	; 16
    669e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    66a0:	9d 89       	ldd	r25, Y+21	; 0x15
    66a2:	89 0f       	add	r24, r25
    66a4:	61 96       	adiw	r28, 0x11	; 17
    66a6:	8f af       	std	Y+63, r24	; 0x3f
    66a8:	61 97       	sbiw	r28, 0x11	; 17
    66aa:	81 e0       	ldi	r24, 0x01	; 1
    66ac:	6f 96       	adiw	r28, 0x1f	; 31
    66ae:	8f af       	std	Y+63, r24	; 0x3f
    66b0:	6f 97       	sbiw	r28, 0x1f	; 31
    66b2:	61 96       	adiw	r28, 0x11	; 17
    66b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    66b6:	61 97       	sbiw	r28, 0x11	; 17
    66b8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    66ba:	98 17       	cp	r25, r24
    66bc:	18 f0       	brcs	.+6      	; 0x66c4 <CLCD_voidSendNumber+0x534>
    66be:	6f 96       	adiw	r28, 0x1f	; 31
    66c0:	1f ae       	std	Y+63, r1	; 0x3f
    66c2:	6f 97       	sbiw	r28, 0x1f	; 31
    66c4:	6c 96       	adiw	r28, 0x1c	; 28
    66c6:	9f ad       	ldd	r25, Y+63	; 0x3f
    66c8:	6c 97       	sbiw	r28, 0x1c	; 28
    66ca:	61 96       	adiw	r28, 0x11	; 17
    66cc:	8f ad       	ldd	r24, Y+63	; 0x3f
    66ce:	61 97       	sbiw	r28, 0x11	; 17
    66d0:	98 0f       	add	r25, r24
    66d2:	a0 96       	adiw	r28, 0x20	; 32
    66d4:	9f af       	std	Y+63, r25	; 0x3f
    66d6:	a0 97       	sbiw	r28, 0x20	; 32
    66d8:	91 e0       	ldi	r25, 0x01	; 1
    66da:	a1 96       	adiw	r28, 0x21	; 33
    66dc:	9f af       	std	Y+63, r25	; 0x3f
    66de:	a1 97       	sbiw	r28, 0x21	; 33
    66e0:	a0 96       	adiw	r28, 0x20	; 32
    66e2:	8f ad       	ldd	r24, Y+63	; 0x3f
    66e4:	a0 97       	sbiw	r28, 0x20	; 32
    66e6:	61 96       	adiw	r28, 0x11	; 17
    66e8:	9f ad       	ldd	r25, Y+63	; 0x3f
    66ea:	61 97       	sbiw	r28, 0x11	; 17
    66ec:	89 17       	cp	r24, r25
    66ee:	18 f0       	brcs	.+6      	; 0x66f6 <CLCD_voidSendNumber+0x566>
    66f0:	a1 96       	adiw	r28, 0x21	; 33
    66f2:	1f ae       	std	Y+63, r1	; 0x3f
    66f4:	a1 97       	sbiw	r28, 0x21	; 33
    66f6:	6f 96       	adiw	r28, 0x1f	; 31
    66f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    66fa:	6f 97       	sbiw	r28, 0x1f	; 31
    66fc:	a1 96       	adiw	r28, 0x21	; 33
    66fe:	9f ad       	ldd	r25, Y+63	; 0x3f
    6700:	a1 97       	sbiw	r28, 0x21	; 33
    6702:	89 2b       	or	r24, r25
    6704:	6f 96       	adiw	r28, 0x1f	; 31
    6706:	8f af       	std	Y+63, r24	; 0x3f
    6708:	6f 97       	sbiw	r28, 0x1f	; 31
    670a:	a0 96       	adiw	r28, 0x20	; 32
    670c:	8f ad       	ldd	r24, Y+63	; 0x3f
    670e:	a0 97       	sbiw	r28, 0x20	; 32
    6710:	61 96       	adiw	r28, 0x11	; 17
    6712:	8f af       	std	Y+63, r24	; 0x3f
    6714:	61 97       	sbiw	r28, 0x11	; 17
    6716:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6718:	8e 89       	ldd	r24, Y+22	; 0x16
    671a:	98 0f       	add	r25, r24
    671c:	62 96       	adiw	r28, 0x12	; 18
    671e:	9f af       	std	Y+63, r25	; 0x3f
    6720:	62 97       	sbiw	r28, 0x12	; 18
    6722:	91 e0       	ldi	r25, 0x01	; 1
    6724:	a2 96       	adiw	r28, 0x22	; 34
    6726:	9f af       	std	Y+63, r25	; 0x3f
    6728:	a2 97       	sbiw	r28, 0x22	; 34
    672a:	62 96       	adiw	r28, 0x12	; 18
    672c:	8f ad       	ldd	r24, Y+63	; 0x3f
    672e:	62 97       	sbiw	r28, 0x12	; 18
    6730:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6732:	89 17       	cp	r24, r25
    6734:	18 f0       	brcs	.+6      	; 0x673c <CLCD_voidSendNumber+0x5ac>
    6736:	a2 96       	adiw	r28, 0x22	; 34
    6738:	1f ae       	std	Y+63, r1	; 0x3f
    673a:	a2 97       	sbiw	r28, 0x22	; 34
    673c:	6f 96       	adiw	r28, 0x1f	; 31
    673e:	8f ad       	ldd	r24, Y+63	; 0x3f
    6740:	6f 97       	sbiw	r28, 0x1f	; 31
    6742:	62 96       	adiw	r28, 0x12	; 18
    6744:	9f ad       	ldd	r25, Y+63	; 0x3f
    6746:	62 97       	sbiw	r28, 0x12	; 18
    6748:	89 0f       	add	r24, r25
    674a:	a3 96       	adiw	r28, 0x23	; 35
    674c:	8f af       	std	Y+63, r24	; 0x3f
    674e:	a3 97       	sbiw	r28, 0x23	; 35
    6750:	81 e0       	ldi	r24, 0x01	; 1
    6752:	a4 96       	adiw	r28, 0x24	; 36
    6754:	8f af       	std	Y+63, r24	; 0x3f
    6756:	a4 97       	sbiw	r28, 0x24	; 36
    6758:	a3 96       	adiw	r28, 0x23	; 35
    675a:	9f ad       	ldd	r25, Y+63	; 0x3f
    675c:	a3 97       	sbiw	r28, 0x23	; 35
    675e:	62 96       	adiw	r28, 0x12	; 18
    6760:	8f ad       	ldd	r24, Y+63	; 0x3f
    6762:	62 97       	sbiw	r28, 0x12	; 18
    6764:	98 17       	cp	r25, r24
    6766:	18 f0       	brcs	.+6      	; 0x676e <CLCD_voidSendNumber+0x5de>
    6768:	a4 96       	adiw	r28, 0x24	; 36
    676a:	1f ae       	std	Y+63, r1	; 0x3f
    676c:	a4 97       	sbiw	r28, 0x24	; 36
    676e:	a2 96       	adiw	r28, 0x22	; 34
    6770:	9f ad       	ldd	r25, Y+63	; 0x3f
    6772:	a2 97       	sbiw	r28, 0x22	; 34
    6774:	a4 96       	adiw	r28, 0x24	; 36
    6776:	8f ad       	ldd	r24, Y+63	; 0x3f
    6778:	a4 97       	sbiw	r28, 0x24	; 36
    677a:	98 2b       	or	r25, r24
    677c:	a2 96       	adiw	r28, 0x22	; 34
    677e:	9f af       	std	Y+63, r25	; 0x3f
    6780:	a2 97       	sbiw	r28, 0x22	; 34
    6782:	a3 96       	adiw	r28, 0x23	; 35
    6784:	9f ad       	ldd	r25, Y+63	; 0x3f
    6786:	a3 97       	sbiw	r28, 0x23	; 35
    6788:	62 96       	adiw	r28, 0x12	; 18
    678a:	9f af       	std	Y+63, r25	; 0x3f
    678c:	62 97       	sbiw	r28, 0x12	; 18
    678e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6790:	9f 89       	ldd	r25, Y+23	; 0x17
    6792:	89 0f       	add	r24, r25
    6794:	63 96       	adiw	r28, 0x13	; 19
    6796:	8f af       	std	Y+63, r24	; 0x3f
    6798:	63 97       	sbiw	r28, 0x13	; 19
    679a:	81 e0       	ldi	r24, 0x01	; 1
    679c:	a5 96       	adiw	r28, 0x25	; 37
    679e:	8f af       	std	Y+63, r24	; 0x3f
    67a0:	a5 97       	sbiw	r28, 0x25	; 37
    67a2:	63 96       	adiw	r28, 0x13	; 19
    67a4:	9f ad       	ldd	r25, Y+63	; 0x3f
    67a6:	63 97       	sbiw	r28, 0x13	; 19
    67a8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    67aa:	98 17       	cp	r25, r24
    67ac:	18 f0       	brcs	.+6      	; 0x67b4 <CLCD_voidSendNumber+0x624>
    67ae:	a5 96       	adiw	r28, 0x25	; 37
    67b0:	1f ae       	std	Y+63, r1	; 0x3f
    67b2:	a5 97       	sbiw	r28, 0x25	; 37
    67b4:	a2 96       	adiw	r28, 0x22	; 34
    67b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    67b8:	a2 97       	sbiw	r28, 0x22	; 34
    67ba:	63 96       	adiw	r28, 0x13	; 19
    67bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    67be:	63 97       	sbiw	r28, 0x13	; 19
    67c0:	98 0f       	add	r25, r24
    67c2:	a6 96       	adiw	r28, 0x26	; 38
    67c4:	9f af       	std	Y+63, r25	; 0x3f
    67c6:	a6 97       	sbiw	r28, 0x26	; 38
    67c8:	91 e0       	ldi	r25, 0x01	; 1
    67ca:	a7 96       	adiw	r28, 0x27	; 39
    67cc:	9f af       	std	Y+63, r25	; 0x3f
    67ce:	a7 97       	sbiw	r28, 0x27	; 39
    67d0:	a6 96       	adiw	r28, 0x26	; 38
    67d2:	8f ad       	ldd	r24, Y+63	; 0x3f
    67d4:	a6 97       	sbiw	r28, 0x26	; 38
    67d6:	63 96       	adiw	r28, 0x13	; 19
    67d8:	9f ad       	ldd	r25, Y+63	; 0x3f
    67da:	63 97       	sbiw	r28, 0x13	; 19
    67dc:	89 17       	cp	r24, r25
    67de:	18 f0       	brcs	.+6      	; 0x67e6 <CLCD_voidSendNumber+0x656>
    67e0:	a7 96       	adiw	r28, 0x27	; 39
    67e2:	1f ae       	std	Y+63, r1	; 0x3f
    67e4:	a7 97       	sbiw	r28, 0x27	; 39
    67e6:	a5 96       	adiw	r28, 0x25	; 37
    67e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    67ea:	a5 97       	sbiw	r28, 0x25	; 37
    67ec:	a7 96       	adiw	r28, 0x27	; 39
    67ee:	9f ad       	ldd	r25, Y+63	; 0x3f
    67f0:	a7 97       	sbiw	r28, 0x27	; 39
    67f2:	89 2b       	or	r24, r25
    67f4:	a5 96       	adiw	r28, 0x25	; 37
    67f6:	8f af       	std	Y+63, r24	; 0x3f
    67f8:	a5 97       	sbiw	r28, 0x25	; 37
    67fa:	a6 96       	adiw	r28, 0x26	; 38
    67fc:	8f ad       	ldd	r24, Y+63	; 0x3f
    67fe:	a6 97       	sbiw	r28, 0x26	; 38
    6800:	63 96       	adiw	r28, 0x13	; 19
    6802:	8f af       	std	Y+63, r24	; 0x3f
    6804:	63 97       	sbiw	r28, 0x13	; 19
    6806:	98 a1       	ldd	r25, Y+32	; 0x20
    6808:	88 8d       	ldd	r24, Y+24	; 0x18
    680a:	98 0f       	add	r25, r24
    680c:	64 96       	adiw	r28, 0x14	; 20
    680e:	9f af       	std	Y+63, r25	; 0x3f
    6810:	64 97       	sbiw	r28, 0x14	; 20
    6812:	a5 96       	adiw	r28, 0x25	; 37
    6814:	8f ad       	ldd	r24, Y+63	; 0x3f
    6816:	a5 97       	sbiw	r28, 0x25	; 37
    6818:	64 96       	adiw	r28, 0x14	; 20
    681a:	9f ad       	ldd	r25, Y+63	; 0x3f
    681c:	64 97       	sbiw	r28, 0x14	; 20
    681e:	89 0f       	add	r24, r25
    6820:	64 96       	adiw	r28, 0x14	; 20
    6822:	8f af       	std	Y+63, r24	; 0x3f
    6824:	64 97       	sbiw	r28, 0x14	; 20
    6826:	2d 96       	adiw	r28, 0x0d	; 13
    6828:	8f ad       	ldd	r24, Y+63	; 0x3f
    682a:	2d 97       	sbiw	r28, 0x0d	; 13
    682c:	89 83       	std	Y+1, r24	; 0x01
    682e:	2e 96       	adiw	r28, 0x0e	; 14
    6830:	9f ad       	ldd	r25, Y+63	; 0x3f
    6832:	2e 97       	sbiw	r28, 0x0e	; 14
    6834:	9a 83       	std	Y+2, r25	; 0x02
    6836:	2f 96       	adiw	r28, 0x0f	; 15
    6838:	8f ad       	ldd	r24, Y+63	; 0x3f
    683a:	2f 97       	sbiw	r28, 0x0f	; 15
    683c:	8b 83       	std	Y+3, r24	; 0x03
    683e:	60 96       	adiw	r28, 0x10	; 16
    6840:	9f ad       	ldd	r25, Y+63	; 0x3f
    6842:	60 97       	sbiw	r28, 0x10	; 16
    6844:	9c 83       	std	Y+4, r25	; 0x04
    6846:	61 96       	adiw	r28, 0x11	; 17
    6848:	8f ad       	ldd	r24, Y+63	; 0x3f
    684a:	61 97       	sbiw	r28, 0x11	; 17
    684c:	8d 83       	std	Y+5, r24	; 0x05
    684e:	62 96       	adiw	r28, 0x12	; 18
    6850:	9f ad       	ldd	r25, Y+63	; 0x3f
    6852:	62 97       	sbiw	r28, 0x12	; 18
    6854:	9e 83       	std	Y+6, r25	; 0x06
    6856:	63 96       	adiw	r28, 0x13	; 19
    6858:	8f ad       	ldd	r24, Y+63	; 0x3f
    685a:	63 97       	sbiw	r28, 0x13	; 19
    685c:	8f 83       	std	Y+7, r24	; 0x07
    685e:	64 96       	adiw	r28, 0x14	; 20
    6860:	9f ad       	ldd	r25, Y+63	; 0x3f
    6862:	64 97       	sbiw	r28, 0x14	; 20
    6864:	98 87       	std	Y+8, r25	; 0x08
			Copy_u64Number /= 10 ;
    6866:	a9 84       	ldd	r10, Y+9	; 0x09
    6868:	ba 84       	ldd	r11, Y+10	; 0x0a
    686a:	cb 84       	ldd	r12, Y+11	; 0x0b
    686c:	dc 84       	ldd	r13, Y+12	; 0x0c
    686e:	ed 84       	ldd	r14, Y+13	; 0x0d
    6870:	fe 84       	ldd	r15, Y+14	; 0x0e
    6872:	0f 85       	ldd	r16, Y+15	; 0x0f
    6874:	18 89       	ldd	r17, Y+16	; 0x10
    6876:	2a 2d       	mov	r18, r10
    6878:	3b 2d       	mov	r19, r11
    687a:	4c 2d       	mov	r20, r12
    687c:	5d 2d       	mov	r21, r13
    687e:	6e 2d       	mov	r22, r14
    6880:	7f 2d       	mov	r23, r15
    6882:	80 2f       	mov	r24, r16
    6884:	91 2f       	mov	r25, r17
    6886:	0f 2e       	mov	r0, r31
    6888:	fa e0       	ldi	r31, 0x0A	; 10
    688a:	af 2e       	mov	r10, r31
    688c:	f0 2d       	mov	r31, r0
    688e:	bb 24       	eor	r11, r11
    6890:	cc 24       	eor	r12, r12
    6892:	dd 24       	eor	r13, r13
    6894:	ee 24       	eor	r14, r14
    6896:	ff 24       	eor	r15, r15
    6898:	00 e0       	ldi	r16, 0x00	; 0
    689a:	10 e0       	ldi	r17, 0x00	; 0
    689c:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    68a0:	a2 2e       	mov	r10, r18
    68a2:	b3 2e       	mov	r11, r19
    68a4:	c4 2e       	mov	r12, r20
    68a6:	d5 2e       	mov	r13, r21
    68a8:	e6 2e       	mov	r14, r22
    68aa:	f7 2e       	mov	r15, r23
    68ac:	08 2f       	mov	r16, r24
    68ae:	19 2f       	mov	r17, r25
    68b0:	a9 86       	std	Y+9, r10	; 0x09
    68b2:	ba 86       	std	Y+10, r11	; 0x0a
    68b4:	cb 86       	std	Y+11, r12	; 0x0b
    68b6:	dc 86       	std	Y+12, r13	; 0x0c
    68b8:	ed 86       	std	Y+13, r14	; 0x0d
    68ba:	fe 86       	std	Y+14, r15	; 0x0e
    68bc:	0f 87       	std	Y+15, r16	; 0x0f
    68be:	18 8b       	std	Y+16, r17	; 0x10

	if( Copy_u64Number == 0 ){ CLCD_voidSendData('0'); }

	else{

		while( Copy_u64Number != 0 ){
    68c0:	89 85       	ldd	r24, Y+9	; 0x09
    68c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    68c4:	89 2b       	or	r24, r25
    68c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    68c8:	89 2b       	or	r24, r25
    68ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    68cc:	89 2b       	or	r24, r25
    68ce:	9d 85       	ldd	r25, Y+13	; 0x0d
    68d0:	89 2b       	or	r24, r25
    68d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    68d4:	89 2b       	or	r24, r25
    68d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    68d8:	89 2b       	or	r24, r25
    68da:	98 89       	ldd	r25, Y+16	; 0x10
    68dc:	89 2b       	or	r24, r25
    68de:	88 23       	and	r24, r24
    68e0:	09 f0       	breq	.+2      	; 0x68e4 <CLCD_voidSendNumber+0x754>
    68e2:	90 cc       	rjmp	.-1760   	; 0x6204 <CLCD_voidSendNumber+0x74>
    68e4:	5e c0       	rjmp	.+188    	; 0x69a2 <CLCD_voidSendNumber+0x812>
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){

			CLCD_voidSendData( ( LOC_u64Reversed % 10 ) + 48 );
    68e6:	a9 80       	ldd	r10, Y+1	; 0x01
    68e8:	ba 80       	ldd	r11, Y+2	; 0x02
    68ea:	cb 80       	ldd	r12, Y+3	; 0x03
    68ec:	dc 80       	ldd	r13, Y+4	; 0x04
    68ee:	ed 80       	ldd	r14, Y+5	; 0x05
    68f0:	fe 80       	ldd	r15, Y+6	; 0x06
    68f2:	0f 81       	ldd	r16, Y+7	; 0x07
    68f4:	18 85       	ldd	r17, Y+8	; 0x08
    68f6:	2a 2d       	mov	r18, r10
    68f8:	3b 2d       	mov	r19, r11
    68fa:	4c 2d       	mov	r20, r12
    68fc:	5d 2d       	mov	r21, r13
    68fe:	6e 2d       	mov	r22, r14
    6900:	7f 2d       	mov	r23, r15
    6902:	80 2f       	mov	r24, r16
    6904:	91 2f       	mov	r25, r17
    6906:	0f 2e       	mov	r0, r31
    6908:	fa e0       	ldi	r31, 0x0A	; 10
    690a:	af 2e       	mov	r10, r31
    690c:	f0 2d       	mov	r31, r0
    690e:	bb 24       	eor	r11, r11
    6910:	cc 24       	eor	r12, r12
    6912:	dd 24       	eor	r13, r13
    6914:	ee 24       	eor	r14, r14
    6916:	ff 24       	eor	r15, r15
    6918:	00 e0       	ldi	r16, 0x00	; 0
    691a:	10 e0       	ldi	r17, 0x00	; 0
    691c:	0e 94 69 07 	call	0xed2	; 0xed2 <__umoddi3>
    6920:	a2 2e       	mov	r10, r18
    6922:	b3 2e       	mov	r11, r19
    6924:	c4 2e       	mov	r12, r20
    6926:	d5 2e       	mov	r13, r21
    6928:	e6 2e       	mov	r14, r22
    692a:	f7 2e       	mov	r15, r23
    692c:	08 2f       	mov	r16, r24
    692e:	19 2f       	mov	r17, r25
    6930:	2a 2d       	mov	r18, r10
    6932:	3b 2d       	mov	r19, r11
    6934:	4c 2d       	mov	r20, r12
    6936:	5d 2d       	mov	r21, r13
    6938:	6e 2d       	mov	r22, r14
    693a:	7f 2d       	mov	r23, r15
    693c:	80 2f       	mov	r24, r16
    693e:	91 2f       	mov	r25, r17
    6940:	82 2f       	mov	r24, r18
    6942:	80 5d       	subi	r24, 0xD0	; 208
    6944:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <CLCD_voidSendData>
			LOC_u64Reversed /= 10 ;
    6948:	a9 80       	ldd	r10, Y+1	; 0x01
    694a:	ba 80       	ldd	r11, Y+2	; 0x02
    694c:	cb 80       	ldd	r12, Y+3	; 0x03
    694e:	dc 80       	ldd	r13, Y+4	; 0x04
    6950:	ed 80       	ldd	r14, Y+5	; 0x05
    6952:	fe 80       	ldd	r15, Y+6	; 0x06
    6954:	0f 81       	ldd	r16, Y+7	; 0x07
    6956:	18 85       	ldd	r17, Y+8	; 0x08
    6958:	2a 2d       	mov	r18, r10
    695a:	3b 2d       	mov	r19, r11
    695c:	4c 2d       	mov	r20, r12
    695e:	5d 2d       	mov	r21, r13
    6960:	6e 2d       	mov	r22, r14
    6962:	7f 2d       	mov	r23, r15
    6964:	80 2f       	mov	r24, r16
    6966:	91 2f       	mov	r25, r17
    6968:	0f 2e       	mov	r0, r31
    696a:	fa e0       	ldi	r31, 0x0A	; 10
    696c:	af 2e       	mov	r10, r31
    696e:	f0 2d       	mov	r31, r0
    6970:	bb 24       	eor	r11, r11
    6972:	cc 24       	eor	r12, r12
    6974:	dd 24       	eor	r13, r13
    6976:	ee 24       	eor	r14, r14
    6978:	ff 24       	eor	r15, r15
    697a:	00 e0       	ldi	r16, 0x00	; 0
    697c:	10 e0       	ldi	r17, 0x00	; 0
    697e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    6982:	a2 2e       	mov	r10, r18
    6984:	b3 2e       	mov	r11, r19
    6986:	c4 2e       	mov	r12, r20
    6988:	d5 2e       	mov	r13, r21
    698a:	e6 2e       	mov	r14, r22
    698c:	f7 2e       	mov	r15, r23
    698e:	08 2f       	mov	r16, r24
    6990:	19 2f       	mov	r17, r25
    6992:	a9 82       	std	Y+1, r10	; 0x01
    6994:	ba 82       	std	Y+2, r11	; 0x02
    6996:	cb 82       	std	Y+3, r12	; 0x03
    6998:	dc 82       	std	Y+4, r13	; 0x04
    699a:	ed 82       	std	Y+5, r14	; 0x05
    699c:	fe 82       	std	Y+6, r15	; 0x06
    699e:	0f 83       	std	Y+7, r16	; 0x07
    69a0:	18 87       	std	Y+8, r17	; 0x08

			LOC_u64Reversed = ( LOC_u64Reversed * 10 ) + ( Copy_u64Number % 10 );
			Copy_u64Number /= 10 ;

		}
		while( LOC_u64Reversed != 1 ){
    69a2:	89 81       	ldd	r24, Y+1	; 0x01
    69a4:	81 30       	cpi	r24, 0x01	; 1
    69a6:	09 f0       	breq	.+2      	; 0x69aa <CLCD_voidSendNumber+0x81a>
    69a8:	9e cf       	rjmp	.-196    	; 0x68e6 <CLCD_voidSendNumber+0x756>
    69aa:	8a 81       	ldd	r24, Y+2	; 0x02
    69ac:	88 23       	and	r24, r24
    69ae:	09 f0       	breq	.+2      	; 0x69b2 <CLCD_voidSendNumber+0x822>
    69b0:	9a cf       	rjmp	.-204    	; 0x68e6 <CLCD_voidSendNumber+0x756>
    69b2:	8b 81       	ldd	r24, Y+3	; 0x03
    69b4:	88 23       	and	r24, r24
    69b6:	09 f0       	breq	.+2      	; 0x69ba <CLCD_voidSendNumber+0x82a>
    69b8:	96 cf       	rjmp	.-212    	; 0x68e6 <CLCD_voidSendNumber+0x756>
    69ba:	8c 81       	ldd	r24, Y+4	; 0x04
    69bc:	88 23       	and	r24, r24
    69be:	09 f0       	breq	.+2      	; 0x69c2 <CLCD_voidSendNumber+0x832>
    69c0:	92 cf       	rjmp	.-220    	; 0x68e6 <CLCD_voidSendNumber+0x756>
    69c2:	8d 81       	ldd	r24, Y+5	; 0x05
    69c4:	88 23       	and	r24, r24
    69c6:	09 f0       	breq	.+2      	; 0x69ca <CLCD_voidSendNumber+0x83a>
    69c8:	8e cf       	rjmp	.-228    	; 0x68e6 <CLCD_voidSendNumber+0x756>
    69ca:	8e 81       	ldd	r24, Y+6	; 0x06
    69cc:	88 23       	and	r24, r24
    69ce:	09 f0       	breq	.+2      	; 0x69d2 <CLCD_voidSendNumber+0x842>
    69d0:	8a cf       	rjmp	.-236    	; 0x68e6 <CLCD_voidSendNumber+0x756>
    69d2:	8f 81       	ldd	r24, Y+7	; 0x07
    69d4:	88 23       	and	r24, r24
    69d6:	09 f0       	breq	.+2      	; 0x69da <CLCD_voidSendNumber+0x84a>
    69d8:	86 cf       	rjmp	.-244    	; 0x68e6 <CLCD_voidSendNumber+0x756>
    69da:	88 85       	ldd	r24, Y+8	; 0x08
    69dc:	88 23       	and	r24, r24
    69de:	09 f0       	breq	.+2      	; 0x69e2 <CLCD_voidSendNumber+0x852>
    69e0:	82 cf       	rjmp	.-252    	; 0x68e6 <CLCD_voidSendNumber+0x756>

		}

	}

}
    69e2:	ca 59       	subi	r28, 0x9A	; 154
    69e4:	df 4f       	sbci	r29, 0xFF	; 255
    69e6:	0f b6       	in	r0, 0x3f	; 63
    69e8:	f8 94       	cli
    69ea:	de bf       	out	0x3e, r29	; 62
    69ec:	0f be       	out	0x3f, r0	; 63
    69ee:	cd bf       	out	0x3d, r28	; 61
    69f0:	cf 91       	pop	r28
    69f2:	df 91       	pop	r29
    69f4:	1f 91       	pop	r17
    69f6:	0f 91       	pop	r16
    69f8:	ff 90       	pop	r15
    69fa:	ef 90       	pop	r14
    69fc:	df 90       	pop	r13
    69fe:	cf 90       	pop	r12
    6a00:	bf 90       	pop	r11
    6a02:	af 90       	pop	r10
    6a04:	08 95       	ret

00006a06 <CLCD_voidSetPosition>:
*Hint :-
   In This function we send a command which =0b1xxxxxxx
   MSB = 1  ===> refers that it is command to set cursor
   xxxxxxx  ===> refers to AC ( Address Counter 7Bits / DDRAM Locations 128Location )
*/
void CLCD_voidSetPosition ( u8 Copy_u8Row , u8 Copy_u8Col ){
    6a06:	df 93       	push	r29
    6a08:	cf 93       	push	r28
    6a0a:	cd b7       	in	r28, 0x3d	; 61
    6a0c:	de b7       	in	r29, 0x3e	; 62
    6a0e:	61 97       	sbiw	r28, 0x11	; 17
    6a10:	0f b6       	in	r0, 0x3f	; 63
    6a12:	f8 94       	cli
    6a14:	de bf       	out	0x3e, r29	; 62
    6a16:	0f be       	out	0x3f, r0	; 63
    6a18:	cd bf       	out	0x3d, r28	; 61
    6a1a:	88 8b       	std	Y+16, r24	; 0x10
    6a1c:	69 8b       	std	Y+17, r22	; 0x11

	u8 LOC_u8data ;

	/* In These cases will set at (0,0) ==> if the user enter invalid location */
	if(Copy_u8Row>2||Copy_u8Row<1||Copy_u8Col>16||Copy_u8Col<1)  //check
    6a1e:	88 89       	ldd	r24, Y+16	; 0x10
    6a20:	83 30       	cpi	r24, 0x03	; 3
    6a22:	48 f4       	brcc	.+18     	; 0x6a36 <CLCD_voidSetPosition+0x30>
    6a24:	88 89       	ldd	r24, Y+16	; 0x10
    6a26:	88 23       	and	r24, r24
    6a28:	31 f0       	breq	.+12     	; 0x6a36 <CLCD_voidSetPosition+0x30>
    6a2a:	89 89       	ldd	r24, Y+17	; 0x11
    6a2c:	81 31       	cpi	r24, 0x11	; 17
    6a2e:	18 f4       	brcc	.+6      	; 0x6a36 <CLCD_voidSetPosition+0x30>
    6a30:	89 89       	ldd	r24, Y+17	; 0x11
    6a32:	88 23       	and	r24, r24
    6a34:	19 f4       	brne	.+6      	; 0x6a3c <CLCD_voidSetPosition+0x36>
	{
		LOC_u8data = lcd_SetCursor ;   // first location 
    6a36:	80 e8       	ldi	r24, 0x80	; 128
    6a38:	8f 87       	std	Y+15, r24	; 0x0f
    6a3a:	0d c0       	rjmp	.+26     	; 0x6a56 <CLCD_voidSetPosition+0x50>
	}

	else if( Copy_u8Row == CLCD_ROW_1 ){
    6a3c:	88 89       	ldd	r24, Y+16	; 0x10
    6a3e:	81 30       	cpi	r24, 0x01	; 1
    6a40:	21 f4       	brne	.+8      	; 0x6a4a <CLCD_voidSetPosition+0x44>

		LOC_u8data = ( ( lcd_SetCursor ) + ( Copy_u8Col - 1 ) );              //Row1 -> 0x80+col-1
    6a42:	89 89       	ldd	r24, Y+17	; 0x11
    6a44:	81 58       	subi	r24, 0x81	; 129
    6a46:	8f 87       	std	Y+15, r24	; 0x0f
    6a48:	06 c0       	rjmp	.+12     	; 0x6a56 <CLCD_voidSetPosition+0x50>

	}

	else if( Copy_u8Row == CLCD_ROW_2 ){
    6a4a:	88 89       	ldd	r24, Y+16	; 0x10
    6a4c:	82 30       	cpi	r24, 0x02	; 2
    6a4e:	19 f4       	brne	.+6      	; 0x6a56 <CLCD_voidSetPosition+0x50>

		LOC_u8data = ( ( lcd_SetCursor ) + (64) + ( Copy_u8Col - 1 ) );       //Row2 -> 0xc0+col-1
    6a50:	89 89       	ldd	r24, Y+17	; 0x11
    6a52:	81 54       	subi	r24, 0x41	; 65
    6a54:	8f 87       	std	Y+15, r24	; 0x0f

	}
	CLCD_voidSendCommand ( LOC_u8data );
    6a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    6a58:	0e 94 09 30 	call	0x6012	; 0x6012 <CLCD_voidSendCommand>
    6a5c:	80 e0       	ldi	r24, 0x00	; 0
    6a5e:	90 e0       	ldi	r25, 0x00	; 0
    6a60:	a0 e8       	ldi	r26, 0x80	; 128
    6a62:	bf e3       	ldi	r27, 0x3F	; 63
    6a64:	8b 87       	std	Y+11, r24	; 0x0b
    6a66:	9c 87       	std	Y+12, r25	; 0x0c
    6a68:	ad 87       	std	Y+13, r26	; 0x0d
    6a6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6a6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6a6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6a70:	8d 85       	ldd	r24, Y+13	; 0x0d
    6a72:	9e 85       	ldd	r25, Y+14	; 0x0e
    6a74:	20 e0       	ldi	r18, 0x00	; 0
    6a76:	30 e0       	ldi	r19, 0x00	; 0
    6a78:	4a ef       	ldi	r20, 0xFA	; 250
    6a7a:	54 e4       	ldi	r21, 0x44	; 68
    6a7c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6a80:	dc 01       	movw	r26, r24
    6a82:	cb 01       	movw	r24, r22
    6a84:	8f 83       	std	Y+7, r24	; 0x07
    6a86:	98 87       	std	Y+8, r25	; 0x08
    6a88:	a9 87       	std	Y+9, r26	; 0x09
    6a8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6a8c:	6f 81       	ldd	r22, Y+7	; 0x07
    6a8e:	78 85       	ldd	r23, Y+8	; 0x08
    6a90:	89 85       	ldd	r24, Y+9	; 0x09
    6a92:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a94:	20 e0       	ldi	r18, 0x00	; 0
    6a96:	30 e0       	ldi	r19, 0x00	; 0
    6a98:	40 e8       	ldi	r20, 0x80	; 128
    6a9a:	5f e3       	ldi	r21, 0x3F	; 63
    6a9c:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6aa0:	88 23       	and	r24, r24
    6aa2:	2c f4       	brge	.+10     	; 0x6aae <CLCD_voidSetPosition+0xa8>
		__ticks = 1;
    6aa4:	81 e0       	ldi	r24, 0x01	; 1
    6aa6:	90 e0       	ldi	r25, 0x00	; 0
    6aa8:	9e 83       	std	Y+6, r25	; 0x06
    6aaa:	8d 83       	std	Y+5, r24	; 0x05
    6aac:	3f c0       	rjmp	.+126    	; 0x6b2c <CLCD_voidSetPosition+0x126>
	else if (__tmp > 65535)
    6aae:	6f 81       	ldd	r22, Y+7	; 0x07
    6ab0:	78 85       	ldd	r23, Y+8	; 0x08
    6ab2:	89 85       	ldd	r24, Y+9	; 0x09
    6ab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    6ab6:	20 e0       	ldi	r18, 0x00	; 0
    6ab8:	3f ef       	ldi	r19, 0xFF	; 255
    6aba:	4f e7       	ldi	r20, 0x7F	; 127
    6abc:	57 e4       	ldi	r21, 0x47	; 71
    6abe:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6ac2:	18 16       	cp	r1, r24
    6ac4:	4c f5       	brge	.+82     	; 0x6b18 <CLCD_voidSetPosition+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6ac6:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ac8:	7c 85       	ldd	r23, Y+12	; 0x0c
    6aca:	8d 85       	ldd	r24, Y+13	; 0x0d
    6acc:	9e 85       	ldd	r25, Y+14	; 0x0e
    6ace:	20 e0       	ldi	r18, 0x00	; 0
    6ad0:	30 e0       	ldi	r19, 0x00	; 0
    6ad2:	40 e2       	ldi	r20, 0x20	; 32
    6ad4:	51 e4       	ldi	r21, 0x41	; 65
    6ad6:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6ada:	dc 01       	movw	r26, r24
    6adc:	cb 01       	movw	r24, r22
    6ade:	bc 01       	movw	r22, r24
    6ae0:	cd 01       	movw	r24, r26
    6ae2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6ae6:	dc 01       	movw	r26, r24
    6ae8:	cb 01       	movw	r24, r22
    6aea:	9e 83       	std	Y+6, r25	; 0x06
    6aec:	8d 83       	std	Y+5, r24	; 0x05
    6aee:	0f c0       	rjmp	.+30     	; 0x6b0e <CLCD_voidSetPosition+0x108>
    6af0:	88 ec       	ldi	r24, 0xC8	; 200
    6af2:	90 e0       	ldi	r25, 0x00	; 0
    6af4:	9c 83       	std	Y+4, r25	; 0x04
    6af6:	8b 83       	std	Y+3, r24	; 0x03
    6af8:	8b 81       	ldd	r24, Y+3	; 0x03
    6afa:	9c 81       	ldd	r25, Y+4	; 0x04
    6afc:	01 97       	sbiw	r24, 0x01	; 1
    6afe:	f1 f7       	brne	.-4      	; 0x6afc <CLCD_voidSetPosition+0xf6>
    6b00:	9c 83       	std	Y+4, r25	; 0x04
    6b02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b04:	8d 81       	ldd	r24, Y+5	; 0x05
    6b06:	9e 81       	ldd	r25, Y+6	; 0x06
    6b08:	01 97       	sbiw	r24, 0x01	; 1
    6b0a:	9e 83       	std	Y+6, r25	; 0x06
    6b0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b0e:	8d 81       	ldd	r24, Y+5	; 0x05
    6b10:	9e 81       	ldd	r25, Y+6	; 0x06
    6b12:	00 97       	sbiw	r24, 0x00	; 0
    6b14:	69 f7       	brne	.-38     	; 0x6af0 <CLCD_voidSetPosition+0xea>
    6b16:	14 c0       	rjmp	.+40     	; 0x6b40 <CLCD_voidSetPosition+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b18:	6f 81       	ldd	r22, Y+7	; 0x07
    6b1a:	78 85       	ldd	r23, Y+8	; 0x08
    6b1c:	89 85       	ldd	r24, Y+9	; 0x09
    6b1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b20:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6b24:	dc 01       	movw	r26, r24
    6b26:	cb 01       	movw	r24, r22
    6b28:	9e 83       	std	Y+6, r25	; 0x06
    6b2a:	8d 83       	std	Y+5, r24	; 0x05
    6b2c:	8d 81       	ldd	r24, Y+5	; 0x05
    6b2e:	9e 81       	ldd	r25, Y+6	; 0x06
    6b30:	9a 83       	std	Y+2, r25	; 0x02
    6b32:	89 83       	std	Y+1, r24	; 0x01
    6b34:	89 81       	ldd	r24, Y+1	; 0x01
    6b36:	9a 81       	ldd	r25, Y+2	; 0x02
    6b38:	01 97       	sbiw	r24, 0x01	; 1
    6b3a:	f1 f7       	brne	.-4      	; 0x6b38 <CLCD_voidSetPosition+0x132>
    6b3c:	9a 83       	std	Y+2, r25	; 0x02
    6b3e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

}
    6b40:	61 96       	adiw	r28, 0x11	; 17
    6b42:	0f b6       	in	r0, 0x3f	; 63
    6b44:	f8 94       	cli
    6b46:	de bf       	out	0x3e, r29	; 62
    6b48:	0f be       	out	0x3f, r0	; 63
    6b4a:	cd bf       	out	0x3d, r28	; 61
    6b4c:	cf 91       	pop	r28
    6b4e:	df 91       	pop	r29
    6b50:	08 95       	ret

00006b52 <CLCD_voidSendExtraChar>:
			=> Copy_u8Col --> column number (CLCD_COL_1 ... CLCD_COL_16)
* return : nothing
* Hint :-
	Address Counter can refer to CGRAM and DDRAM
*/
void CLCD_voidSendExtraChar( u8 Copy_u8Row , u8 Copy_u8Col ){
    6b52:	df 93       	push	r29
    6b54:	cf 93       	push	r28
    6b56:	00 d0       	rcall	.+0      	; 0x6b58 <CLCD_voidSendExtraChar+0x6>
    6b58:	0f 92       	push	r0
    6b5a:	cd b7       	in	r28, 0x3d	; 61
    6b5c:	de b7       	in	r29, 0x3e	; 62
    6b5e:	8a 83       	std	Y+2, r24	; 0x02
    6b60:	6b 83       	std	Y+3, r22	; 0x03

	u8 LOC_u8Iterator = 0 ;
    6b62:	19 82       	std	Y+1, r1	; 0x01
	/* 1- Go To CGRAM            */
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM
    6b64:	80 e4       	ldi	r24, 0x40	; 64
    6b66:	0e 94 09 30 	call	0x6012	; 0x6012 <CLCD_voidSendCommand>


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    6b6a:	19 82       	std	Y+1, r1	; 0x01
    6b6c:	0c c0       	rjmp	.+24     	; 0x6b86 <CLCD_voidSendExtraChar+0x34>

		CLCD_voidSendData( CLCD_u8ExtraChar[LOC_u8Iterator] );
    6b6e:	89 81       	ldd	r24, Y+1	; 0x01
    6b70:	88 2f       	mov	r24, r24
    6b72:	90 e0       	ldi	r25, 0x00	; 0
    6b74:	fc 01       	movw	r30, r24
    6b76:	e7 56       	subi	r30, 0x67	; 103
    6b78:	fe 4f       	sbci	r31, 0xFE	; 254
    6b7a:	80 81       	ld	r24, Z
    6b7c:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <CLCD_voidSendData>
	CLCD_voidSendCommand( lcd_CGRAM );  // Make AC refers to the first Place/Address at CGRAM


	/* 2- Draw Character in CGRAM        */
	/* Hint : it will be copied to DDRAM automatically */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < sizeof(CLCD_u8ExtraChar) / sizeof(CLCD_u8ExtraChar[0]) ; LOC_u8Iterator++){
    6b80:	89 81       	ldd	r24, Y+1	; 0x01
    6b82:	8f 5f       	subi	r24, 0xFF	; 255
    6b84:	89 83       	std	Y+1, r24	; 0x01
    6b86:	89 81       	ldd	r24, Y+1	; 0x01
    6b88:	80 34       	cpi	r24, 0x40	; 64
    6b8a:	88 f3       	brcs	.-30     	; 0x6b6e <CLCD_voidSendExtraChar+0x1c>

	}


	/* 3- Back (AC) To DDRAM          */
	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);
    6b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    6b8e:	6b 81       	ldd	r22, Y+3	; 0x03
    6b90:	0e 94 03 35 	call	0x6a06	; 0x6a06 <CLCD_voidSetPosition>


	/* 4- Send Character Address */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < 8 ; LOC_u8Iterator++ ){
    6b94:	19 82       	std	Y+1, r1	; 0x01
    6b96:	06 c0       	rjmp	.+12     	; 0x6ba4 <CLCD_voidSendExtraChar+0x52>

		CLCD_voidSendData( LOC_u8Iterator );
    6b98:	89 81       	ldd	r24, Y+1	; 0x01
    6b9a:	0e 94 73 2f 	call	0x5ee6	; 0x5ee6 <CLCD_voidSendData>
	/* 3- Back (AC) To DDRAM          */
	CLCD_voidSetPosition(Copy_u8Row,Copy_u8Col);


	/* 4- Send Character Address */
	for( LOC_u8Iterator = 0 ; LOC_u8Iterator < 8 ; LOC_u8Iterator++ ){
    6b9e:	89 81       	ldd	r24, Y+1	; 0x01
    6ba0:	8f 5f       	subi	r24, 0xFF	; 255
    6ba2:	89 83       	std	Y+1, r24	; 0x01
    6ba4:	89 81       	ldd	r24, Y+1	; 0x01
    6ba6:	88 30       	cpi	r24, 0x08	; 8
    6ba8:	b8 f3       	brcs	.-18     	; 0x6b98 <CLCD_voidSendExtraChar+0x46>

		CLCD_voidSendData( LOC_u8Iterator );

	}

}
    6baa:	0f 90       	pop	r0
    6bac:	0f 90       	pop	r0
    6bae:	0f 90       	pop	r0
    6bb0:	cf 91       	pop	r28
    6bb2:	df 91       	pop	r29
    6bb4:	08 95       	ret

00006bb6 <CLCD_voidClearScreen>:
* Breif : This Function clear LCD
* Parameters : nothing
* return : nothing
*/
void CLCD_voidClearScreen(void)
{
    6bb6:	df 93       	push	r29
    6bb8:	cf 93       	push	r28
    6bba:	cd b7       	in	r28, 0x3d	; 61
    6bbc:	de b7       	in	r29, 0x3e	; 62
    6bbe:	2e 97       	sbiw	r28, 0x0e	; 14
    6bc0:	0f b6       	in	r0, 0x3f	; 63
    6bc2:	f8 94       	cli
    6bc4:	de bf       	out	0x3e, r29	; 62
    6bc6:	0f be       	out	0x3f, r0	; 63
    6bc8:	cd bf       	out	0x3d, r28	; 61
	CLCD_voidSendCommand(lcd_Clear);
    6bca:	81 e0       	ldi	r24, 0x01	; 1
    6bcc:	0e 94 09 30 	call	0x6012	; 0x6012 <CLCD_voidSendCommand>
    6bd0:	80 e0       	ldi	r24, 0x00	; 0
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	a0 e2       	ldi	r26, 0x20	; 32
    6bd6:	b1 e4       	ldi	r27, 0x41	; 65
    6bd8:	8b 87       	std	Y+11, r24	; 0x0b
    6bda:	9c 87       	std	Y+12, r25	; 0x0c
    6bdc:	ad 87       	std	Y+13, r26	; 0x0d
    6bde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6be0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6be2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6be4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6be6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6be8:	20 e0       	ldi	r18, 0x00	; 0
    6bea:	30 e0       	ldi	r19, 0x00	; 0
    6bec:	4a ef       	ldi	r20, 0xFA	; 250
    6bee:	54 e4       	ldi	r21, 0x44	; 68
    6bf0:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6bf4:	dc 01       	movw	r26, r24
    6bf6:	cb 01       	movw	r24, r22
    6bf8:	8f 83       	std	Y+7, r24	; 0x07
    6bfa:	98 87       	std	Y+8, r25	; 0x08
    6bfc:	a9 87       	std	Y+9, r26	; 0x09
    6bfe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6c00:	6f 81       	ldd	r22, Y+7	; 0x07
    6c02:	78 85       	ldd	r23, Y+8	; 0x08
    6c04:	89 85       	ldd	r24, Y+9	; 0x09
    6c06:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c08:	20 e0       	ldi	r18, 0x00	; 0
    6c0a:	30 e0       	ldi	r19, 0x00	; 0
    6c0c:	40 e8       	ldi	r20, 0x80	; 128
    6c0e:	5f e3       	ldi	r21, 0x3F	; 63
    6c10:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6c14:	88 23       	and	r24, r24
    6c16:	2c f4       	brge	.+10     	; 0x6c22 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    6c18:	81 e0       	ldi	r24, 0x01	; 1
    6c1a:	90 e0       	ldi	r25, 0x00	; 0
    6c1c:	9e 83       	std	Y+6, r25	; 0x06
    6c1e:	8d 83       	std	Y+5, r24	; 0x05
    6c20:	3f c0       	rjmp	.+126    	; 0x6ca0 <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    6c22:	6f 81       	ldd	r22, Y+7	; 0x07
    6c24:	78 85       	ldd	r23, Y+8	; 0x08
    6c26:	89 85       	ldd	r24, Y+9	; 0x09
    6c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c2a:	20 e0       	ldi	r18, 0x00	; 0
    6c2c:	3f ef       	ldi	r19, 0xFF	; 255
    6c2e:	4f e7       	ldi	r20, 0x7F	; 127
    6c30:	57 e4       	ldi	r21, 0x47	; 71
    6c32:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6c36:	18 16       	cp	r1, r24
    6c38:	4c f5       	brge	.+82     	; 0x6c8c <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c3a:	6b 85       	ldd	r22, Y+11	; 0x0b
    6c3c:	7c 85       	ldd	r23, Y+12	; 0x0c
    6c3e:	8d 85       	ldd	r24, Y+13	; 0x0d
    6c40:	9e 85       	ldd	r25, Y+14	; 0x0e
    6c42:	20 e0       	ldi	r18, 0x00	; 0
    6c44:	30 e0       	ldi	r19, 0x00	; 0
    6c46:	40 e2       	ldi	r20, 0x20	; 32
    6c48:	51 e4       	ldi	r21, 0x41	; 65
    6c4a:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6c4e:	dc 01       	movw	r26, r24
    6c50:	cb 01       	movw	r24, r22
    6c52:	bc 01       	movw	r22, r24
    6c54:	cd 01       	movw	r24, r26
    6c56:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6c5a:	dc 01       	movw	r26, r24
    6c5c:	cb 01       	movw	r24, r22
    6c5e:	9e 83       	std	Y+6, r25	; 0x06
    6c60:	8d 83       	std	Y+5, r24	; 0x05
    6c62:	0f c0       	rjmp	.+30     	; 0x6c82 <CLCD_voidClearScreen+0xcc>
    6c64:	88 ec       	ldi	r24, 0xC8	; 200
    6c66:	90 e0       	ldi	r25, 0x00	; 0
    6c68:	9c 83       	std	Y+4, r25	; 0x04
    6c6a:	8b 83       	std	Y+3, r24	; 0x03
    6c6c:	8b 81       	ldd	r24, Y+3	; 0x03
    6c6e:	9c 81       	ldd	r25, Y+4	; 0x04
    6c70:	01 97       	sbiw	r24, 0x01	; 1
    6c72:	f1 f7       	brne	.-4      	; 0x6c70 <CLCD_voidClearScreen+0xba>
    6c74:	9c 83       	std	Y+4, r25	; 0x04
    6c76:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c78:	8d 81       	ldd	r24, Y+5	; 0x05
    6c7a:	9e 81       	ldd	r25, Y+6	; 0x06
    6c7c:	01 97       	sbiw	r24, 0x01	; 1
    6c7e:	9e 83       	std	Y+6, r25	; 0x06
    6c80:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c82:	8d 81       	ldd	r24, Y+5	; 0x05
    6c84:	9e 81       	ldd	r25, Y+6	; 0x06
    6c86:	00 97       	sbiw	r24, 0x00	; 0
    6c88:	69 f7       	brne	.-38     	; 0x6c64 <CLCD_voidClearScreen+0xae>
    6c8a:	14 c0       	rjmp	.+40     	; 0x6cb4 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    6c8e:	78 85       	ldd	r23, Y+8	; 0x08
    6c90:	89 85       	ldd	r24, Y+9	; 0x09
    6c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c94:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6c98:	dc 01       	movw	r26, r24
    6c9a:	cb 01       	movw	r24, r22
    6c9c:	9e 83       	std	Y+6, r25	; 0x06
    6c9e:	8d 83       	std	Y+5, r24	; 0x05
    6ca0:	8d 81       	ldd	r24, Y+5	; 0x05
    6ca2:	9e 81       	ldd	r25, Y+6	; 0x06
    6ca4:	9a 83       	std	Y+2, r25	; 0x02
    6ca6:	89 83       	std	Y+1, r24	; 0x01
    6ca8:	89 81       	ldd	r24, Y+1	; 0x01
    6caa:	9a 81       	ldd	r25, Y+2	; 0x02
    6cac:	01 97       	sbiw	r24, 0x01	; 1
    6cae:	f1 f7       	brne	.-4      	; 0x6cac <CLCD_voidClearScreen+0xf6>
    6cb0:	9a 83       	std	Y+2, r25	; 0x02
    6cb2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10); //wait more than 1.53 ms
}
    6cb4:	2e 96       	adiw	r28, 0x0e	; 14
    6cb6:	0f b6       	in	r0, 0x3f	; 63
    6cb8:	f8 94       	cli
    6cba:	de bf       	out	0x3e, r29	; 62
    6cbc:	0f be       	out	0x3f, r0	; 63
    6cbe:	cd bf       	out	0x3d, r28	; 61
    6cc0:	cf 91       	pop	r28
    6cc2:	df 91       	pop	r29
    6cc4:	08 95       	ret

00006cc6 <CLCD_voidSendFallingEdge>:
*
* Hint : static Function to forbid calling it out this file
*
*/
static void CLCD_voidSendFallingEdge(void)
{
    6cc6:	df 93       	push	r29
    6cc8:	cf 93       	push	r28
    6cca:	cd b7       	in	r28, 0x3d	; 61
    6ccc:	de b7       	in	r29, 0x3e	; 62
    6cce:	6c 97       	sbiw	r28, 0x1c	; 28
    6cd0:	0f b6       	in	r0, 0x3f	; 63
    6cd2:	f8 94       	cli
    6cd4:	de bf       	out	0x3e, r29	; 62
    6cd6:	0f be       	out	0x3f, r0	; 63
    6cd8:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_HIGH );
    6cda:	83 e0       	ldi	r24, 0x03	; 3
    6cdc:	62 e0       	ldi	r22, 0x02	; 2
    6cde:	41 e0       	ldi	r20, 0x01	; 1
    6ce0:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <DIO_enumSetPinValue>
    6ce4:	80 e0       	ldi	r24, 0x00	; 0
    6ce6:	90 e0       	ldi	r25, 0x00	; 0
    6ce8:	a0 e8       	ldi	r26, 0x80	; 128
    6cea:	bf e3       	ldi	r27, 0x3F	; 63
    6cec:	89 8f       	std	Y+25, r24	; 0x19
    6cee:	9a 8f       	std	Y+26, r25	; 0x1a
    6cf0:	ab 8f       	std	Y+27, r26	; 0x1b
    6cf2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6cf4:	69 8d       	ldd	r22, Y+25	; 0x19
    6cf6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6cf8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6cfa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6cfc:	20 e0       	ldi	r18, 0x00	; 0
    6cfe:	30 e0       	ldi	r19, 0x00	; 0
    6d00:	4a ef       	ldi	r20, 0xFA	; 250
    6d02:	54 e4       	ldi	r21, 0x44	; 68
    6d04:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6d08:	dc 01       	movw	r26, r24
    6d0a:	cb 01       	movw	r24, r22
    6d0c:	8d 8b       	std	Y+21, r24	; 0x15
    6d0e:	9e 8b       	std	Y+22, r25	; 0x16
    6d10:	af 8b       	std	Y+23, r26	; 0x17
    6d12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6d14:	6d 89       	ldd	r22, Y+21	; 0x15
    6d16:	7e 89       	ldd	r23, Y+22	; 0x16
    6d18:	8f 89       	ldd	r24, Y+23	; 0x17
    6d1a:	98 8d       	ldd	r25, Y+24	; 0x18
    6d1c:	20 e0       	ldi	r18, 0x00	; 0
    6d1e:	30 e0       	ldi	r19, 0x00	; 0
    6d20:	40 e8       	ldi	r20, 0x80	; 128
    6d22:	5f e3       	ldi	r21, 0x3F	; 63
    6d24:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6d28:	88 23       	and	r24, r24
    6d2a:	2c f4       	brge	.+10     	; 0x6d36 <CLCD_voidSendFallingEdge+0x70>
		__ticks = 1;
    6d2c:	81 e0       	ldi	r24, 0x01	; 1
    6d2e:	90 e0       	ldi	r25, 0x00	; 0
    6d30:	9c 8b       	std	Y+20, r25	; 0x14
    6d32:	8b 8b       	std	Y+19, r24	; 0x13
    6d34:	3f c0       	rjmp	.+126    	; 0x6db4 <CLCD_voidSendFallingEdge+0xee>
	else if (__tmp > 65535)
    6d36:	6d 89       	ldd	r22, Y+21	; 0x15
    6d38:	7e 89       	ldd	r23, Y+22	; 0x16
    6d3a:	8f 89       	ldd	r24, Y+23	; 0x17
    6d3c:	98 8d       	ldd	r25, Y+24	; 0x18
    6d3e:	20 e0       	ldi	r18, 0x00	; 0
    6d40:	3f ef       	ldi	r19, 0xFF	; 255
    6d42:	4f e7       	ldi	r20, 0x7F	; 127
    6d44:	57 e4       	ldi	r21, 0x47	; 71
    6d46:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6d4a:	18 16       	cp	r1, r24
    6d4c:	4c f5       	brge	.+82     	; 0x6da0 <CLCD_voidSendFallingEdge+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d4e:	69 8d       	ldd	r22, Y+25	; 0x19
    6d50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6d52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6d54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6d56:	20 e0       	ldi	r18, 0x00	; 0
    6d58:	30 e0       	ldi	r19, 0x00	; 0
    6d5a:	40 e2       	ldi	r20, 0x20	; 32
    6d5c:	51 e4       	ldi	r21, 0x41	; 65
    6d5e:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6d62:	dc 01       	movw	r26, r24
    6d64:	cb 01       	movw	r24, r22
    6d66:	bc 01       	movw	r22, r24
    6d68:	cd 01       	movw	r24, r26
    6d6a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6d6e:	dc 01       	movw	r26, r24
    6d70:	cb 01       	movw	r24, r22
    6d72:	9c 8b       	std	Y+20, r25	; 0x14
    6d74:	8b 8b       	std	Y+19, r24	; 0x13
    6d76:	0f c0       	rjmp	.+30     	; 0x6d96 <CLCD_voidSendFallingEdge+0xd0>
    6d78:	88 ec       	ldi	r24, 0xC8	; 200
    6d7a:	90 e0       	ldi	r25, 0x00	; 0
    6d7c:	9a 8b       	std	Y+18, r25	; 0x12
    6d7e:	89 8b       	std	Y+17, r24	; 0x11
    6d80:	89 89       	ldd	r24, Y+17	; 0x11
    6d82:	9a 89       	ldd	r25, Y+18	; 0x12
    6d84:	01 97       	sbiw	r24, 0x01	; 1
    6d86:	f1 f7       	brne	.-4      	; 0x6d84 <CLCD_voidSendFallingEdge+0xbe>
    6d88:	9a 8b       	std	Y+18, r25	; 0x12
    6d8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d8c:	8b 89       	ldd	r24, Y+19	; 0x13
    6d8e:	9c 89       	ldd	r25, Y+20	; 0x14
    6d90:	01 97       	sbiw	r24, 0x01	; 1
    6d92:	9c 8b       	std	Y+20, r25	; 0x14
    6d94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d96:	8b 89       	ldd	r24, Y+19	; 0x13
    6d98:	9c 89       	ldd	r25, Y+20	; 0x14
    6d9a:	00 97       	sbiw	r24, 0x00	; 0
    6d9c:	69 f7       	brne	.-38     	; 0x6d78 <CLCD_voidSendFallingEdge+0xb2>
    6d9e:	14 c0       	rjmp	.+40     	; 0x6dc8 <CLCD_voidSendFallingEdge+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6da0:	6d 89       	ldd	r22, Y+21	; 0x15
    6da2:	7e 89       	ldd	r23, Y+22	; 0x16
    6da4:	8f 89       	ldd	r24, Y+23	; 0x17
    6da6:	98 8d       	ldd	r25, Y+24	; 0x18
    6da8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6dac:	dc 01       	movw	r26, r24
    6dae:	cb 01       	movw	r24, r22
    6db0:	9c 8b       	std	Y+20, r25	; 0x14
    6db2:	8b 8b       	std	Y+19, r24	; 0x13
    6db4:	8b 89       	ldd	r24, Y+19	; 0x13
    6db6:	9c 89       	ldd	r25, Y+20	; 0x14
    6db8:	98 8b       	std	Y+16, r25	; 0x10
    6dba:	8f 87       	std	Y+15, r24	; 0x0f
    6dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    6dbe:	98 89       	ldd	r25, Y+16	; 0x10
    6dc0:	01 97       	sbiw	r24, 0x01	; 1
    6dc2:	f1 f7       	brne	.-4      	; 0x6dc0 <CLCD_voidSendFallingEdge+0xfa>
    6dc4:	98 8b       	std	Y+16, r25	; 0x10
    6dc6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_enumSetPinValue  ( CLCD_CONTROL_PORT , CLCD_EN , DIO_PIN_LOW  );
    6dc8:	83 e0       	ldi	r24, 0x03	; 3
    6dca:	62 e0       	ldi	r22, 0x02	; 2
    6dcc:	40 e0       	ldi	r20, 0x00	; 0
    6dce:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <DIO_enumSetPinValue>
    6dd2:	80 e0       	ldi	r24, 0x00	; 0
    6dd4:	90 e0       	ldi	r25, 0x00	; 0
    6dd6:	a0 e8       	ldi	r26, 0x80	; 128
    6dd8:	bf e3       	ldi	r27, 0x3F	; 63
    6dda:	8b 87       	std	Y+11, r24	; 0x0b
    6ddc:	9c 87       	std	Y+12, r25	; 0x0c
    6dde:	ad 87       	std	Y+13, r26	; 0x0d
    6de0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6de2:	6b 85       	ldd	r22, Y+11	; 0x0b
    6de4:	7c 85       	ldd	r23, Y+12	; 0x0c
    6de6:	8d 85       	ldd	r24, Y+13	; 0x0d
    6de8:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dea:	20 e0       	ldi	r18, 0x00	; 0
    6dec:	30 e0       	ldi	r19, 0x00	; 0
    6dee:	4a ef       	ldi	r20, 0xFA	; 250
    6df0:	54 e4       	ldi	r21, 0x44	; 68
    6df2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6df6:	dc 01       	movw	r26, r24
    6df8:	cb 01       	movw	r24, r22
    6dfa:	8f 83       	std	Y+7, r24	; 0x07
    6dfc:	98 87       	std	Y+8, r25	; 0x08
    6dfe:	a9 87       	std	Y+9, r26	; 0x09
    6e00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6e02:	6f 81       	ldd	r22, Y+7	; 0x07
    6e04:	78 85       	ldd	r23, Y+8	; 0x08
    6e06:	89 85       	ldd	r24, Y+9	; 0x09
    6e08:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e0a:	20 e0       	ldi	r18, 0x00	; 0
    6e0c:	30 e0       	ldi	r19, 0x00	; 0
    6e0e:	40 e8       	ldi	r20, 0x80	; 128
    6e10:	5f e3       	ldi	r21, 0x3F	; 63
    6e12:	0e 94 dd 10 	call	0x21ba	; 0x21ba <__ltsf2>
    6e16:	88 23       	and	r24, r24
    6e18:	2c f4       	brge	.+10     	; 0x6e24 <CLCD_voidSendFallingEdge+0x15e>
		__ticks = 1;
    6e1a:	81 e0       	ldi	r24, 0x01	; 1
    6e1c:	90 e0       	ldi	r25, 0x00	; 0
    6e1e:	9e 83       	std	Y+6, r25	; 0x06
    6e20:	8d 83       	std	Y+5, r24	; 0x05
    6e22:	3f c0       	rjmp	.+126    	; 0x6ea2 <CLCD_voidSendFallingEdge+0x1dc>
	else if (__tmp > 65535)
    6e24:	6f 81       	ldd	r22, Y+7	; 0x07
    6e26:	78 85       	ldd	r23, Y+8	; 0x08
    6e28:	89 85       	ldd	r24, Y+9	; 0x09
    6e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e2c:	20 e0       	ldi	r18, 0x00	; 0
    6e2e:	3f ef       	ldi	r19, 0xFF	; 255
    6e30:	4f e7       	ldi	r20, 0x7F	; 127
    6e32:	57 e4       	ldi	r21, 0x47	; 71
    6e34:	0e 94 7d 10 	call	0x20fa	; 0x20fa <__gtsf2>
    6e38:	18 16       	cp	r1, r24
    6e3a:	4c f5       	brge	.+82     	; 0x6e8e <CLCD_voidSendFallingEdge+0x1c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6e3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e40:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e42:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e44:	20 e0       	ldi	r18, 0x00	; 0
    6e46:	30 e0       	ldi	r19, 0x00	; 0
    6e48:	40 e2       	ldi	r20, 0x20	; 32
    6e4a:	51 e4       	ldi	r21, 0x41	; 65
    6e4c:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <__mulsf3>
    6e50:	dc 01       	movw	r26, r24
    6e52:	cb 01       	movw	r24, r22
    6e54:	bc 01       	movw	r22, r24
    6e56:	cd 01       	movw	r24, r26
    6e58:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6e5c:	dc 01       	movw	r26, r24
    6e5e:	cb 01       	movw	r24, r22
    6e60:	9e 83       	std	Y+6, r25	; 0x06
    6e62:	8d 83       	std	Y+5, r24	; 0x05
    6e64:	0f c0       	rjmp	.+30     	; 0x6e84 <CLCD_voidSendFallingEdge+0x1be>
    6e66:	88 ec       	ldi	r24, 0xC8	; 200
    6e68:	90 e0       	ldi	r25, 0x00	; 0
    6e6a:	9c 83       	std	Y+4, r25	; 0x04
    6e6c:	8b 83       	std	Y+3, r24	; 0x03
    6e6e:	8b 81       	ldd	r24, Y+3	; 0x03
    6e70:	9c 81       	ldd	r25, Y+4	; 0x04
    6e72:	01 97       	sbiw	r24, 0x01	; 1
    6e74:	f1 f7       	brne	.-4      	; 0x6e72 <CLCD_voidSendFallingEdge+0x1ac>
    6e76:	9c 83       	std	Y+4, r25	; 0x04
    6e78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e7a:	8d 81       	ldd	r24, Y+5	; 0x05
    6e7c:	9e 81       	ldd	r25, Y+6	; 0x06
    6e7e:	01 97       	sbiw	r24, 0x01	; 1
    6e80:	9e 83       	std	Y+6, r25	; 0x06
    6e82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e84:	8d 81       	ldd	r24, Y+5	; 0x05
    6e86:	9e 81       	ldd	r25, Y+6	; 0x06
    6e88:	00 97       	sbiw	r24, 0x00	; 0
    6e8a:	69 f7       	brne	.-38     	; 0x6e66 <CLCD_voidSendFallingEdge+0x1a0>
    6e8c:	14 c0       	rjmp	.+40     	; 0x6eb6 <CLCD_voidSendFallingEdge+0x1f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    6e90:	78 85       	ldd	r23, Y+8	; 0x08
    6e92:	89 85       	ldd	r24, Y+9	; 0x09
    6e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e96:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    6e9a:	dc 01       	movw	r26, r24
    6e9c:	cb 01       	movw	r24, r22
    6e9e:	9e 83       	std	Y+6, r25	; 0x06
    6ea0:	8d 83       	std	Y+5, r24	; 0x05
    6ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    6ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    6ea6:	9a 83       	std	Y+2, r25	; 0x02
    6ea8:	89 83       	std	Y+1, r24	; 0x01
    6eaa:	89 81       	ldd	r24, Y+1	; 0x01
    6eac:	9a 81       	ldd	r25, Y+2	; 0x02
    6eae:	01 97       	sbiw	r24, 0x01	; 1
    6eb0:	f1 f7       	brne	.-4      	; 0x6eae <CLCD_voidSendFallingEdge+0x1e8>
    6eb2:	9a 83       	std	Y+2, r25	; 0x02
    6eb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    6eb6:	6c 96       	adiw	r28, 0x1c	; 28
    6eb8:	0f b6       	in	r0, 0x3f	; 63
    6eba:	f8 94       	cli
    6ebc:	de bf       	out	0x3e, r29	; 62
    6ebe:	0f be       	out	0x3f, r0	; 63
    6ec0:	cd bf       	out	0x3d, r28	; 61
    6ec2:	cf 91       	pop	r28
    6ec4:	df 91       	pop	r29
    6ec6:	08 95       	ret

00006ec8 <main>:
void CLCD_TASK2(void *pvParamter);

u8 CLCD_Flag=1;

int main(void)
{
    6ec8:	af 92       	push	r10
    6eca:	bf 92       	push	r11
    6ecc:	cf 92       	push	r12
    6ece:	df 92       	push	r13
    6ed0:	ef 92       	push	r14
    6ed2:	ff 92       	push	r15
    6ed4:	0f 93       	push	r16
    6ed6:	df 93       	push	r29
    6ed8:	cf 93       	push	r28
    6eda:	cd b7       	in	r28, 0x3d	; 61
    6edc:	de b7       	in	r29, 0x3e	; 62

	CLCD_voidInit();
    6ede:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <CLCD_voidInit>
	/*Create tasks*/
	xTaskCreate(CLCD_TASK1, NULL, TASK1_STACK_SIZE, NULL, TASK1_PRIORITY, NULL);
    6ee2:	81 ea       	ldi	r24, 0xA1	; 161
    6ee4:	97 e3       	ldi	r25, 0x37	; 55
    6ee6:	60 e0       	ldi	r22, 0x00	; 0
    6ee8:	70 e0       	ldi	r23, 0x00	; 0
    6eea:	4a ea       	ldi	r20, 0xAA	; 170
    6eec:	50 e0       	ldi	r21, 0x00	; 0
    6eee:	20 e0       	ldi	r18, 0x00	; 0
    6ef0:	30 e0       	ldi	r19, 0x00	; 0
    6ef2:	01 e0       	ldi	r16, 0x01	; 1
    6ef4:	ee 24       	eor	r14, r14
    6ef6:	ff 24       	eor	r15, r15
    6ef8:	cc 24       	eor	r12, r12
    6efa:	dd 24       	eor	r13, r13
    6efc:	aa 24       	eor	r10, r10
    6efe:	bb 24       	eor	r11, r11
    6f00:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <xTaskGenericCreate>
	xTaskCreate(CLCD_TASK2, NULL, TASK2_STACK_SIZE, NULL, TASK2_PRIORITY, NULL);
    6f04:	84 ec       	ldi	r24, 0xC4	; 196
    6f06:	97 e3       	ldi	r25, 0x37	; 55
    6f08:	60 e0       	ldi	r22, 0x00	; 0
    6f0a:	70 e0       	ldi	r23, 0x00	; 0
    6f0c:	4a ea       	ldi	r20, 0xAA	; 170
    6f0e:	50 e0       	ldi	r21, 0x00	; 0
    6f10:	20 e0       	ldi	r18, 0x00	; 0
    6f12:	30 e0       	ldi	r19, 0x00	; 0
    6f14:	01 e0       	ldi	r16, 0x01	; 1
    6f16:	ee 24       	eor	r14, r14
    6f18:	ff 24       	eor	r15, r15
    6f1a:	cc 24       	eor	r12, r12
    6f1c:	dd 24       	eor	r13, r13
    6f1e:	aa 24       	eor	r10, r10
    6f20:	bb 24       	eor	r11, r11
    6f22:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <xTaskGenericCreate>
	/*start Scheduler */
	vTaskStartScheduler();
    6f26:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <vTaskStartScheduler>

	return 0;
    6f2a:	80 e0       	ldi	r24, 0x00	; 0
    6f2c:	90 e0       	ldi	r25, 0x00	; 0
}
    6f2e:	cf 91       	pop	r28
    6f30:	df 91       	pop	r29
    6f32:	0f 91       	pop	r16
    6f34:	ff 90       	pop	r15
    6f36:	ef 90       	pop	r14
    6f38:	df 90       	pop	r13
    6f3a:	cf 90       	pop	r12
    6f3c:	bf 90       	pop	r11
    6f3e:	af 90       	pop	r10
    6f40:	08 95       	ret

00006f42 <CLCD_TASK1>:

void CLCD_TASK1(void *pvParamter)
{
    6f42:	df 93       	push	r29
    6f44:	cf 93       	push	r28
    6f46:	00 d0       	rcall	.+0      	; 0x6f48 <CLCD_TASK1+0x6>
    6f48:	cd b7       	in	r28, 0x3d	; 61
    6f4a:	de b7       	in	r29, 0x3e	; 62
    6f4c:	9a 83       	std	Y+2, r25	; 0x02
    6f4e:	89 83       	std	Y+1, r24	; 0x01
	for (;;)
	{
		if (CLCD_Flag==1)
    6f50:	80 91 d9 01 	lds	r24, 0x01D9
    6f54:	81 30       	cpi	r24, 0x01	; 1
    6f56:	99 f4       	brne	.+38     	; 0x6f7e <CLCD_TASK1+0x3c>
		{
			CLCD_Flag=0;
    6f58:	10 92 d9 01 	sts	0x01D9, r1
			CLCD_voidClearScreen();
    6f5c:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <CLCD_voidClearScreen>
			CLCD_voidSendString((u8 *)"Task 1 :");
    6f60:	85 e6       	ldi	r24, 0x65	; 101
    6f62:	90 e0       	ldi	r25, 0x00	; 0
    6f64:	0e 94 9f 30 	call	0x613e	; 0x613e <CLCD_voidSendString>
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    6f68:	82 e0       	ldi	r24, 0x02	; 2
    6f6a:	61 e0       	ldi	r22, 0x01	; 1
    6f6c:	0e 94 03 35 	call	0x6a06	; 0x6a06 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"I am Task 1");
    6f70:	8e e6       	ldi	r24, 0x6E	; 110
    6f72:	90 e0       	ldi	r25, 0x00	; 0
    6f74:	0e 94 9f 30 	call	0x613e	; 0x613e <CLCD_voidSendString>
			CLCD_Flag=1;
    6f78:	81 e0       	ldi	r24, 0x01	; 1
    6f7a:	80 93 d9 01 	sts	0x01D9, r24
		}
		vTaskDelay(1000);
    6f7e:	88 ee       	ldi	r24, 0xE8	; 232
    6f80:	93 e0       	ldi	r25, 0x03	; 3
    6f82:	0e 94 c4 20 	call	0x4188	; 0x4188 <vTaskDelay>
    6f86:	e4 cf       	rjmp	.-56     	; 0x6f50 <CLCD_TASK1+0xe>

00006f88 <CLCD_TASK2>:
	}
}
void CLCD_TASK2(void *pvParamter)
{
    6f88:	df 93       	push	r29
    6f8a:	cf 93       	push	r28
    6f8c:	00 d0       	rcall	.+0      	; 0x6f8e <CLCD_TASK2+0x6>
    6f8e:	cd b7       	in	r28, 0x3d	; 61
    6f90:	de b7       	in	r29, 0x3e	; 62
    6f92:	9a 83       	std	Y+2, r25	; 0x02
    6f94:	89 83       	std	Y+1, r24	; 0x01
	for (;;)
	{
		if (CLCD_Flag==1)
    6f96:	80 91 d9 01 	lds	r24, 0x01D9
    6f9a:	81 30       	cpi	r24, 0x01	; 1
    6f9c:	99 f4       	brne	.+38     	; 0x6fc4 <CLCD_TASK2+0x3c>
		{
			CLCD_Flag=0;
    6f9e:	10 92 d9 01 	sts	0x01D9, r1
			CLCD_voidClearScreen();
    6fa2:	0e 94 db 35 	call	0x6bb6	; 0x6bb6 <CLCD_voidClearScreen>
			CLCD_voidSendString((u8 *)"Task 2 :");
    6fa6:	8a e7       	ldi	r24, 0x7A	; 122
    6fa8:	90 e0       	ldi	r25, 0x00	; 0
    6faa:	0e 94 9f 30 	call	0x613e	; 0x613e <CLCD_voidSendString>
			CLCD_voidSetPosition(CLCD_ROW_2,CLCD_COL_1);
    6fae:	82 e0       	ldi	r24, 0x02	; 2
    6fb0:	61 e0       	ldi	r22, 0x01	; 1
    6fb2:	0e 94 03 35 	call	0x6a06	; 0x6a06 <CLCD_voidSetPosition>
			CLCD_voidSendString((u8 *)"I am Task 2");
    6fb6:	83 e8       	ldi	r24, 0x83	; 131
    6fb8:	90 e0       	ldi	r25, 0x00	; 0
    6fba:	0e 94 9f 30 	call	0x613e	; 0x613e <CLCD_voidSendString>
			CLCD_Flag=1;
    6fbe:	81 e0       	ldi	r24, 0x01	; 1
    6fc0:	80 93 d9 01 	sts	0x01D9, r24
		}
		vTaskDelay(1000);
    6fc4:	88 ee       	ldi	r24, 0xE8	; 232
    6fc6:	93 e0       	ldi	r25, 0x03	; 3
    6fc8:	0e 94 c4 20 	call	0x4188	; 0x4188 <vTaskDelay>
    6fcc:	e4 cf       	rjmp	.-56     	; 0x6f96 <CLCD_TASK2+0xe>

00006fce <__mulsi3>:
    6fce:	62 9f       	mul	r22, r18
    6fd0:	d0 01       	movw	r26, r0
    6fd2:	73 9f       	mul	r23, r19
    6fd4:	f0 01       	movw	r30, r0
    6fd6:	82 9f       	mul	r24, r18
    6fd8:	e0 0d       	add	r30, r0
    6fda:	f1 1d       	adc	r31, r1
    6fdc:	64 9f       	mul	r22, r20
    6fde:	e0 0d       	add	r30, r0
    6fe0:	f1 1d       	adc	r31, r1
    6fe2:	92 9f       	mul	r25, r18
    6fe4:	f0 0d       	add	r31, r0
    6fe6:	83 9f       	mul	r24, r19
    6fe8:	f0 0d       	add	r31, r0
    6fea:	74 9f       	mul	r23, r20
    6fec:	f0 0d       	add	r31, r0
    6fee:	65 9f       	mul	r22, r21
    6ff0:	f0 0d       	add	r31, r0
    6ff2:	99 27       	eor	r25, r25
    6ff4:	72 9f       	mul	r23, r18
    6ff6:	b0 0d       	add	r27, r0
    6ff8:	e1 1d       	adc	r30, r1
    6ffa:	f9 1f       	adc	r31, r25
    6ffc:	63 9f       	mul	r22, r19
    6ffe:	b0 0d       	add	r27, r0
    7000:	e1 1d       	adc	r30, r1
    7002:	f9 1f       	adc	r31, r25
    7004:	bd 01       	movw	r22, r26
    7006:	cf 01       	movw	r24, r30
    7008:	11 24       	eor	r1, r1
    700a:	08 95       	ret

0000700c <__udivmodsi4>:
    700c:	a1 e2       	ldi	r26, 0x21	; 33
    700e:	1a 2e       	mov	r1, r26
    7010:	aa 1b       	sub	r26, r26
    7012:	bb 1b       	sub	r27, r27
    7014:	fd 01       	movw	r30, r26
    7016:	0d c0       	rjmp	.+26     	; 0x7032 <__udivmodsi4_ep>

00007018 <__udivmodsi4_loop>:
    7018:	aa 1f       	adc	r26, r26
    701a:	bb 1f       	adc	r27, r27
    701c:	ee 1f       	adc	r30, r30
    701e:	ff 1f       	adc	r31, r31
    7020:	a2 17       	cp	r26, r18
    7022:	b3 07       	cpc	r27, r19
    7024:	e4 07       	cpc	r30, r20
    7026:	f5 07       	cpc	r31, r21
    7028:	20 f0       	brcs	.+8      	; 0x7032 <__udivmodsi4_ep>
    702a:	a2 1b       	sub	r26, r18
    702c:	b3 0b       	sbc	r27, r19
    702e:	e4 0b       	sbc	r30, r20
    7030:	f5 0b       	sbc	r31, r21

00007032 <__udivmodsi4_ep>:
    7032:	66 1f       	adc	r22, r22
    7034:	77 1f       	adc	r23, r23
    7036:	88 1f       	adc	r24, r24
    7038:	99 1f       	adc	r25, r25
    703a:	1a 94       	dec	r1
    703c:	69 f7       	brne	.-38     	; 0x7018 <__udivmodsi4_loop>
    703e:	60 95       	com	r22
    7040:	70 95       	com	r23
    7042:	80 95       	com	r24
    7044:	90 95       	com	r25
    7046:	9b 01       	movw	r18, r22
    7048:	ac 01       	movw	r20, r24
    704a:	bd 01       	movw	r22, r26
    704c:	cf 01       	movw	r24, r30
    704e:	08 95       	ret

00007050 <__prologue_saves__>:
    7050:	2f 92       	push	r2
    7052:	3f 92       	push	r3
    7054:	4f 92       	push	r4
    7056:	5f 92       	push	r5
    7058:	6f 92       	push	r6
    705a:	7f 92       	push	r7
    705c:	8f 92       	push	r8
    705e:	9f 92       	push	r9
    7060:	af 92       	push	r10
    7062:	bf 92       	push	r11
    7064:	cf 92       	push	r12
    7066:	df 92       	push	r13
    7068:	ef 92       	push	r14
    706a:	ff 92       	push	r15
    706c:	0f 93       	push	r16
    706e:	1f 93       	push	r17
    7070:	cf 93       	push	r28
    7072:	df 93       	push	r29
    7074:	cd b7       	in	r28, 0x3d	; 61
    7076:	de b7       	in	r29, 0x3e	; 62
    7078:	ca 1b       	sub	r28, r26
    707a:	db 0b       	sbc	r29, r27
    707c:	0f b6       	in	r0, 0x3f	; 63
    707e:	f8 94       	cli
    7080:	de bf       	out	0x3e, r29	; 62
    7082:	0f be       	out	0x3f, r0	; 63
    7084:	cd bf       	out	0x3d, r28	; 61
    7086:	09 94       	ijmp

00007088 <__epilogue_restores__>:
    7088:	2a 88       	ldd	r2, Y+18	; 0x12
    708a:	39 88       	ldd	r3, Y+17	; 0x11
    708c:	48 88       	ldd	r4, Y+16	; 0x10
    708e:	5f 84       	ldd	r5, Y+15	; 0x0f
    7090:	6e 84       	ldd	r6, Y+14	; 0x0e
    7092:	7d 84       	ldd	r7, Y+13	; 0x0d
    7094:	8c 84       	ldd	r8, Y+12	; 0x0c
    7096:	9b 84       	ldd	r9, Y+11	; 0x0b
    7098:	aa 84       	ldd	r10, Y+10	; 0x0a
    709a:	b9 84       	ldd	r11, Y+9	; 0x09
    709c:	c8 84       	ldd	r12, Y+8	; 0x08
    709e:	df 80       	ldd	r13, Y+7	; 0x07
    70a0:	ee 80       	ldd	r14, Y+6	; 0x06
    70a2:	fd 80       	ldd	r15, Y+5	; 0x05
    70a4:	0c 81       	ldd	r16, Y+4	; 0x04
    70a6:	1b 81       	ldd	r17, Y+3	; 0x03
    70a8:	aa 81       	ldd	r26, Y+2	; 0x02
    70aa:	b9 81       	ldd	r27, Y+1	; 0x01
    70ac:	ce 0f       	add	r28, r30
    70ae:	d1 1d       	adc	r29, r1
    70b0:	0f b6       	in	r0, 0x3f	; 63
    70b2:	f8 94       	cli
    70b4:	de bf       	out	0x3e, r29	; 62
    70b6:	0f be       	out	0x3f, r0	; 63
    70b8:	cd bf       	out	0x3d, r28	; 61
    70ba:	ed 01       	movw	r28, r26
    70bc:	08 95       	ret

000070be <memcpy>:
    70be:	fb 01       	movw	r30, r22
    70c0:	dc 01       	movw	r26, r24
    70c2:	02 c0       	rjmp	.+4      	; 0x70c8 <memcpy+0xa>
    70c4:	01 90       	ld	r0, Z+
    70c6:	0d 92       	st	X+, r0
    70c8:	41 50       	subi	r20, 0x01	; 1
    70ca:	50 40       	sbci	r21, 0x00	; 0
    70cc:	d8 f7       	brcc	.-10     	; 0x70c4 <memcpy+0x6>
    70ce:	08 95       	ret

000070d0 <memset>:
    70d0:	dc 01       	movw	r26, r24
    70d2:	01 c0       	rjmp	.+2      	; 0x70d6 <memset+0x6>
    70d4:	6d 93       	st	X+, r22
    70d6:	41 50       	subi	r20, 0x01	; 1
    70d8:	50 40       	sbci	r21, 0x00	; 0
    70da:	e0 f7       	brcc	.-8      	; 0x70d4 <memset+0x4>
    70dc:	08 95       	ret

000070de <strncpy>:
    70de:	fb 01       	movw	r30, r22
    70e0:	dc 01       	movw	r26, r24
    70e2:	41 50       	subi	r20, 0x01	; 1
    70e4:	50 40       	sbci	r21, 0x00	; 0
    70e6:	48 f0       	brcs	.+18     	; 0x70fa <strncpy+0x1c>
    70e8:	01 90       	ld	r0, Z+
    70ea:	0d 92       	st	X+, r0
    70ec:	00 20       	and	r0, r0
    70ee:	c9 f7       	brne	.-14     	; 0x70e2 <strncpy+0x4>
    70f0:	01 c0       	rjmp	.+2      	; 0x70f4 <strncpy+0x16>
    70f2:	1d 92       	st	X+, r1
    70f4:	41 50       	subi	r20, 0x01	; 1
    70f6:	50 40       	sbci	r21, 0x00	; 0
    70f8:	e0 f7       	brcc	.-8      	; 0x70f2 <strncpy+0x14>
    70fa:	08 95       	ret

000070fc <_exit>:
    70fc:	f8 94       	cli

000070fe <__stop_program>:
    70fe:	ff cf       	rjmp	.-2      	; 0x70fe <__stop_program>
